{
"version":3,
"file":"luxe_empty.js",
"sourceRoot":"file:///",
"sources":["C:/HaxeToolkit/haxe/std/js/_std/EReg.hx","D:/Prog/Haxe/matharrows/src/GamePanel.hx","D:/Prog/Haxe/matharrows/src/Ui.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Transform.hx","C:/HaxeToolkit/haxe/std/js/_std/HxOverrides.hx","C:/HaxeToolkit/haxe/std/Lambda.hx","C:/HaxeToolkit/haxe/std/List.hx","C:/HaxeToolkit/haxe/lib/luxe/git/Luxe.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Game.hx","D:/Prog/Haxe/matharrows/src/Main.hx","D:/Prog/Haxe/matharrows/src/Menu.hx","D:/Prog/Haxe/matharrows/src/ObjectivePanel.hx","C:/HaxeToolkit/haxe/lib/random/1,4,1/src/Random.hx","C:/HaxeToolkit/haxe/std/js/_std/Reflect.hx","D:/Prog/Haxe/matharrows/src/SelectionPanel.hx","C:/HaxeToolkit/haxe/std/js/_std/Std.hx","C:/HaxeToolkit/haxe/std/StringBuf.hx","C:/HaxeToolkit/haxe/std/StringTools.hx","D:/Prog/Haxe/matharrows/src/Tools.hx","C:/HaxeToolkit/haxe/std/js/_std/Type.hx","C:/HaxeToolkit/haxe/std/haxe/CallStack.hx","C:/HaxeToolkit/haxe/std/haxe/Log.hx","C:/HaxeToolkit/haxe/std/haxe/Resource.hx","C:/HaxeToolkit/haxe/std/haxe/Serializer.hx","C:/HaxeToolkit/haxe/std/haxe/Unserializer.hx","C:/HaxeToolkit/haxe/std/haxe/Utf8.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/io/Bytes.hx","C:/HaxeToolkit/haxe/std/haxe/crypto/Base64.hx","C:/HaxeToolkit/haxe/std/haxe/crypto/BaseCode.hx","C:/HaxeToolkit/haxe/std/haxe/crypto/Md5.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/IntMap.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/ObjectMap.hx","C:/HaxeToolkit/haxe/std/js/_std/haxe/ds/StringMap.hx","C:/HaxeToolkit/haxe/std/haxe/io/FPHelper.hx","C:/HaxeToolkit/haxe/std/haxe/io/Path.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/Value.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/Error.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/BinaryOperations.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/CallOperations.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/Expression.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/ExpressionOrValue.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/ExpressionTypes.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/Expressions.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/Parser.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/UnaryOperations.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/utils/Arrays.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/utils/Chars.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/utils/Iterators.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/utils/Strings.hx","C:/HaxeToolkit/haxe/std/js/Boot.hx","C:/HaxeToolkit/haxe/std/js/html/CanvasElement.hx","C:/HaxeToolkit/haxe/std/js/html/compat/ArrayBuffer.hx","C:/HaxeToolkit/haxe/std/js/html/compat/Float32Array.hx","C:/HaxeToolkit/haxe/std/js/html/compat/Uint8Array.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Audio.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Log.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Emitter.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Objects.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Entity.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Camera.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/macros/EntityRules.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Component.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Debug.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Draw.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/QuadGeometry.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/App.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Engine.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Events.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/IO.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Input.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Visual.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Vector.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/NineSlice.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Parcel.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Physics.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Resources.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Scene.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Screen.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Sprite.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Text.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/Timer.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/components/Components.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/debug/DebugView.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/debug/Inspector.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Color.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/debug/ProfilerDebugView.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/debug/SceneDebugView.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/debug/StatsDebugView.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/debug/TraceDebugView.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/importers/bitmapfont/BitmapFontParser.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/macros/BuildVersion.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/resource/Resource.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/structural/BalancedBST.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/structural/OrderedMap.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/actuators/GenericActuator.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/actuators/SimpleActuator.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Quad.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/Actuate.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/MotionPath.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/actuators/MethodActuator.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/actuators/MotionPathActuator.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/actuators/PropertyDetails.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Bounce.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Cubic.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Elastic.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Expo.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Linear.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/tween/easing/Sine.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/GeometryUtils.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/Maths.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/Random.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/Utils.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/CodePoint.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/CodePointIter.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/InternalEncoding.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/Utf16.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/InternalEncodingIter.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/Unicode.hx","C:/HaxeToolkit/haxe/lib/luxe/git/luxe/utils/unifill/Unifill.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/BatchState.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Shader.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Batcher.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/Geometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/BitmapFont.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Camera.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Matrix.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Quaternion.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Ray.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Rectangle.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/RenderPath.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/RenderState.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Texture.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/RenderTexture.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/Renderer.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/RingGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/ArcGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/CircleGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/GeometryState.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/LineGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/QuadPackGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/RectangleGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/TextGeometry.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/TextureCoord.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/geometry/Vertex.hx","C:/HaxeToolkit/haxe/lib/luxe/git/phoenix/utils/Rendering.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/Snow.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/Debug.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/Emitter.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/Promise.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/Timer.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/buffers/Float32Array.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/buffers/Int32Array.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/api/buffers/Uint8Array.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/core/Audio.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/core/web/Runtime.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/core/web/assets/Assets.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/core/web/io/IO.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/modules/opengl/web/GL.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/modules/webaudio/Audio.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/types/Types.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/assets/Asset.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/assets/Assets.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/audio/Audio.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/audio/AudioInstance.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/audio/AudioSource.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/input/Input.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/input/Keycodes.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/systems/io/IO.hx","C:/HaxeToolkit/haxe/std/js/_std/Math.hx","C:/HaxeToolkit/haxe/lib/haxpression/2,0,5/src/haxpression/Config.hx","C:/HaxeToolkit/haxe/lib/snow/git/snow/types/Config.hx"],
"sourcesContent":["/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class EReg {\n\n\tvar r : HaxeRegExp;\n\n\tpublic inline function new( r : String, opt : String ) : Void {\n\t\tthis.r = new HaxeRegExp(r, opt.split(\"u\").join(\"\")); // 'u' (utf8) depends on page encoding\n\t}\n\n\tpublic function match( s : String ) : Bool {\n\t\tif( r.global ) r.lastIndex = 0;\n\t\tr.m = r.exec(s);\n\t\tr.s = s;\n\t\treturn (r.m != null);\n\t}\n\n\tpublic function matched( n : Int ) : String {\n\t\treturn if( r.m != null && n >= 0 && n < r.m.length ) r.m[n] else throw \"EReg::matched\";\n\t}\n\n\tpublic function matchedLeft() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn r.s.substr(0,r.m.index);\n\t}\n\n\tpublic function matchedRight() : String {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\tvar sz = r.m.index+r.m[0].length;\n\t\treturn r.s.substr(sz,r.s.length-sz);\n\t}\n\n\tpublic function matchedPos() : { pos : Int, len : Int } {\n\t\tif( r.m == null ) throw \"No string matched\";\n\t\treturn { pos : r.m.index, len : r.m[0].length };\n\t}\n\n\tpublic function matchSub( s : String, pos : Int, len : Int = -1):Bool {\n\t\treturn if (r.global) {\n\t\t\tr.lastIndex = pos;\n\t\t\tr.m = r.exec(len < 0 ? s : s.substr(0, pos + len));\n\t\t\tvar b = r.m != null;\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t}\n\t\t\tb;\n\t\t} else {\n\t\t\t// TODO: check some ^/$ related corner cases\n\t\t\tvar b = match( len < 0 ? s.substr(pos) : s.substr(pos,len) );\n\t\t\tif (b) {\n\t\t\t\tr.s = s;\n\t\t\t\tr.m.index += pos;\n\t\t\t}\n\t\t\tb;\n\t\t}\n\t}\n\n\tpublic function split( s : String ) : Array<String> {\n\t\t// we can't use directly s.split because it's ignoring the 'g' flag\n\t\tvar d = \"#__delim__#\";\n\t\treturn untyped s.replace(r,d).split(d);\n\t}\n\n\tpublic inline function replace( s : String, by : String ) : String {\n\t\treturn untyped s.replace(r,by);\n\t}\n\n\tpublic function map( s : String, f : EReg -> String ) : String {\n\t\tvar offset = 0;\n\t\tvar buf = new StringBuf();\n\t\tdo {\n\t\t\tif (offset >= s.length)\n\t\t\t\tbreak;\n\t\t\telse if (!matchSub(s, offset)) {\n\t\t\t\tbuf.add(s.substr(offset));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar p = matchedPos();\n\t\t\tbuf.add(s.substr(offset, p.pos - offset));\n\t\t\tbuf.add(f(this));\n\t\t\tif (p.len == 0) {\n\t\t\t\tbuf.add(s.substr(p.pos, 1));\n\t\t\t\toffset = p.pos + 1;\n\t\t\t}\n\t\t\telse\n\t\t\t\toffset = p.pos + p.len;\n\t\t} while (r.global);\n\t\tif (!r.global && offset > 0 && offset < s.length)\n\t\t\tbuf.add(s.substr(offset));\n\t\treturn buf.toString();\n\t}\n}\n\n@:native(\"RegExp\")\nprivate extern class HaxeRegExp extends js.RegExp {\n\tvar m:js.RegExp.RegExpMatch;\n\tvar s:String;\n}\n","import luxe.Input;\r\nimport luxe.Color;\r\nimport luxe.Text;\r\nimport luxe.Vector;\r\nimport luxe.Sprite;\r\nimport luxe.Quaternion;\r\nimport phoenix.Batcher;\r\n// import phoenix.Texture.FilterType;\r\nimport luxe.tween.Actuate;\r\n\r\nimport Tools.MyText;\r\nimport Ui.Panel;\r\n\r\nimport haxpression.Expression;\r\nimport Random;\r\n\r\n\r\n\r\n@:enum\r\nabstract OP(String) to String\r\n{\r\n    var PLUS = \"+\";\r\n    var MINUS = \"-\";\r\n    var EQUAL = \"=\";\r\n}\r\n\r\nenum LEVEL\r\n{\r\n    Monster;\r\n    Boss;\r\n}\r\n\r\n\r\ntypedef OperationOptions = {maxValue:Int, operators:Array<OP>}\r\n\r\n\r\nclass LevelView\r\n{\r\n    var text:Text;\r\n    var i:Int = 0;\r\n\r\n    public function new(x:Float, y:Float, batcher)\r\n    {\r\n        this.text = new Text({batcher:batcher, pos: new Vector(x, y)});\r\n    }\r\n\r\n    public function next(data:Array<LEVEL>)\r\n    {\r\n        i++;\r\n        // this.text = data[i];\r\n    }\r\n}\r\n\r\n\r\nclass ProgressBar\r\n{\r\n    var text:Text;\r\n    public var value:Float;\r\n\r\n    public function new(x:Float, y:Float, batcher)\r\n    {\r\n        this.text = new Text({batcher:batcher, pos: new Vector(x, y)});\r\n        setValue(0);\r\n    }\r\n\r\n    public function setValue(newValue:Float)\r\n    {\r\n        this.value = newValue;\r\n        this.text.text = Std.string(newValue);\r\n    }\r\n}\r\n\r\n\r\nclass GamePanel extends Panel\r\n{\r\n    public function new()\r\n    {\r\n        super();\r\n\r\n        // LEVELS\r\n        var additionPath = [Monster, Monster, Boss];\r\n\r\n        // PLACE CHARACTERS\r\n        var progressBatcher = new Batcher(Luxe.renderer);\r\n        Luxe.renderer.add_batch(progressBatcher);\r\n\r\n        this.knight = new ProgressBar(100, 200, progressBatcher);\r\n        this.timer = new ProgressBar(300, 200, progressBatcher);\r\n        this.enemy = new ProgressBar(500, 200, progressBatcher);\r\n\r\n        // MOBS\r\n        spawnMob();\r\n\r\n        // OPERATION\r\n        newOperation();\r\n    }\r\n\r\n    function newOperation()\r\n    {\r\n        // INPUT EVENTS\r\n        listen('key down', onKeyDown);\r\n\r\n        // MAKE OPERATION\r\n        // var operation = makeOperation({maxValue:90, operators:[PLUS, MINUS]});\r\n        var operation = makeOperation({maxValue:9, operators:[PLUS, MINUS]});\r\n\r\n        // BUILD BLOCKS\r\n        Block.grid = new Array();\r\n        var id = 0;\r\n        new Block(id++, -1, -1, operation[0], batcher, true);\r\n        new Block(id++, 0, -1, operation[1], batcher);\r\n        new Block(id++, 1, -1, operation[2], batcher, true);\r\n        new Block(id++, 1, 0, operation[3], batcher);\r\n        new Block(id++, 1, 1, operation[4], batcher, true);\r\n        new Block(id++, 0, 1, operation[5], batcher);\r\n        new Block(id++, -1, 1, operation[6], batcher, true);\r\n        new Block(id++, -1, 0, operation[7], batcher);\r\n    }\r\n\r\n    function spawnMob()\r\n    {\r\n        enemy.setValue(100);\r\n        knight.setValue(100);\r\n        mobTimerReset();\r\n    }\r\n\r\n    var timerActuate:Dynamic;\r\n    function mobTimerReset()\r\n    {\r\n        this.timerActuate = Actuate.update(timerUpdate, 30, [100], [0]).ease(luxe.tween.easing.Linear.easeNone);\r\n    }\r\n    \r\n    var timeMalus = 0;\r\n    function timerUpdate(progress:Float)\r\n    {\r\n        progress -= timeMalus;\r\n        timer.setValue(Std.int(progress));\r\n\r\n        if(progress <= 0)\r\n        {\r\n            Actuate.stop(timerActuate);\r\n            knight.setValue(knight.value - 34);\r\n            mobTimerReset();\r\n        }\r\n\r\n        if(knight.value <= 0)\r\n        {\r\n            Actuate.stop(timerActuate);\r\n            end();\r\n        }\r\n\r\n        if(enemy.value <= 0)\r\n        {\r\n            Actuate.stop(timerActuate);\r\n            spawnMob();\r\n        }\r\n    }\r\n\r\n    var knight:ProgressBar;\r\n    var timer:ProgressBar;\r\n    var enemy:ProgressBar;\r\n\r\n    function end()\r\n    {\r\n        Actuate.reset();\r\n        trace(\"GAME ENDED\");\r\n    }\r\n\r\n    function makeOperation(opt:OperationOptions):Array<String>\r\n    {\r\n        function getNumber():String\r\n            return Std.string(Random.int(1,opt.maxValue));\r\n\r\n        // FORMAT IS [[op1, op2], [..]]\r\n        var operatorsGroups = Random.shuffle([ opt.operators.concat([EQUAL]), [EQUAL] ]);\r\n        //  ie [PLUS, MINUS] # [PLUS, MINUS, EQUAL], [EQUAL] # [PLUS, MINUS]\r\n        operatorsGroups = [opt.operators].concat(operatorsGroups).concat([opt.operators]); \r\n        trace('operatorsGroups : $operatorsGroups');\r\n\r\n        var operations = \"\";\r\n        var operation = \"\";\r\n        var operatorIndex = -1;\r\n\r\n        // RESULT WON'T BE OVER 10\r\n        // MAKES ONLY 1 OPERATION FOR NOW\r\n        var result = -1;\r\n        while(result < 0 || result > opt.maxValue)\r\n        {\r\n            trace(\"@@@@@@@@@@ TRY\");\r\n            operatorIndex = -1;\r\n            operation = \"\";\r\n            operation += getNumber();\r\n\r\n            for(opGroup in operatorsGroups)\r\n            {\r\n                operatorIndex++;\r\n                var operat0r = Random.fromArray(opGroup); // = is 2nd or 3rd\r\n\r\n                if(operat0r == EQUAL)\r\n                {\r\n                    var operationExpr:Expression = operation;\r\n                    result = operationExpr.evaluate();\r\n                    operation += operat0r;\r\n                    operation += result;\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    operation += operat0r;\r\n                    operation += getNumber();\r\n                }\r\n            }\r\n            trace('@@@@@@@@@@ $operatorIndex');\r\n        }\r\n\r\n        // BUILD THE REST OF THE GRID\r\n        for(i in (operatorIndex + 1)...3)\r\n        {\r\n            var operat0r = Random.fromArray(operatorsGroups[i]);\r\n            operation += operat0r;\r\n            operation += getNumber();\r\n        }\r\n\r\n        operation += Random.fromArray(operatorsGroups[3]);\r\n\r\n        // MOVE THE ARRAY BY X AMOUNT\r\n        function shiftRight(array:Array<String>, amount:Int)\r\n        {\r\n            for (j in 0...amount)\r\n            {\r\n                var a = array[array.length - 1];\r\n                var i = array.length - 1;\r\n                while(i > 0)\r\n                {\r\n                    array[i] = array[i - 1];\r\n                    i--;\r\n                }\r\n                array[i] = a;\r\n            }\r\n        }\r\n\r\n        // DECONSTRUCTION\r\n        var ereg:EReg = ~/(\\d+)(\\D)(\\d+)(\\D)(\\d+)(\\D)(\\d+)(\\D)/;\r\n        var opArr = [];\r\n\r\n        // BUILD BLOCKS\r\n        if (ereg.match(operation)) {\r\n            for(i in 1...9)\r\n                opArr.push(ereg.matched(i));\r\n        }\r\n\r\n        // SHIFT THE ARRAY BY RANDOM AMOUNT\r\n        var shiftAmount = Random.fromArray([0, 2, 4, 6]);\r\n        shiftRight(opArr, shiftAmount);\r\n\r\n        // RANDOMLY REVERSE THE ARRAY\r\n        if(Std.random(2) == 1)\r\n        {\r\n            opArr.reverse();\r\n            shiftRight(opArr, 1);\r\n        }\r\n\r\n        trace('Operation : $opArr');\r\n        trace('Result : $result');\r\n\r\n        return opArr;\r\n    }\r\n\r\n    public function onKeyDown(event:KeyEvent)\r\n    {\r\n        function operatorPressed(direction:DIR)\r\n        {\r\n            // GET BLOCK PRESSED\r\n            var block = Block.grid[direction];\r\n\r\n            // ANIMATE BLOCK\r\n            block.animate();\r\n\r\n            var correct = false;\r\n            if(block.value == EQUAL)\r\n            {\r\n                trace(\"EQUAL pressed\");\r\n\r\n                function getOperation(k):Operation\r\n                {\r\n                    var blockOperators = new Array<Block>();\r\n                    var output = block.previous(k);\r\n                    var operation:Operation = {input : [], output : output.value};\r\n\r\n                    var nextOperator = block.nextOperator(k);\r\n                    trace('Next operator : ${nextOperator.value}');\r\n\r\n                    // ABORT IF NO CONCURRENT PRESSES\r\n                    if(nextOperator.selected == 0) return operation;\r\n                    // GRABBING ALL OPERATORS PRESSED BEFORE EQUAL\r\n                    // IN REVERSE ORDER\r\n                    while(nextOperator.selected == 1 && nextOperator.value != EQUAL)\r\n                    {\r\n                        blockOperators.push(nextOperator);\r\n                        nextOperator = nextOperator.nextOperator(k);\r\n                    }\r\n\r\n                    trace('Block operators length ${blockOperators.length}');\r\n\r\n                    // TEST RESULT\r\n                    for(block in blockOperators)\r\n                    {\r\n                        operation.input.push(block.previous(k).value);\r\n                        trace('Previous value ${block.previous(k).value}');\r\n                        operation.input.push(block.value);\r\n                    }\r\n                    operation.input.push(blockOperators[blockOperators.length - 1].next(k).value);\r\n\r\n                    // REVERSE\r\n                    operation.input.reverse(); \r\n\r\n                    trace(\"# OPERATION #\");\r\n                    trace(operation);\r\n\r\n                    return operation;\r\n                }\r\n\r\n                var operationCCW = getOperation(-1);\r\n                if(operationCCW.input.length != 0)\r\n                {\r\n                    var operationExpr:Expression = operationCCW.input.join('');\r\n                    var result = operationExpr.evaluate();\r\n\r\n                    if(result == operationCCW.output)\r\n                    {\r\n                        correct = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        block.error();\r\n                    }\r\n                }\r\n\r\n                var operationCW = getOperation(1);\r\n                if(operationCW.input.length != 0)\r\n                {\r\n                    var operationExpr:Expression = operationCW.input.join('');\r\n                    var result = operationExpr.evaluate();\r\n\r\n                    if(result == operationCW.output)\r\n                    {\r\n                        correct = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        block.error();\r\n                    }\r\n                }\r\n            }\r\n\r\n            // SET PRESS STATE\r\n\r\n            // EQUAL BLOCK WOBBLE IF OPERATION IS INCORRECT\r\n            if(block.value == EQUAL && !correct)\r\n            {\r\n                block.error();\r\n                timeMalus += 5;\r\n            }\r\n\r\n            if( !(block.value == EQUAL && !correct) )\r\n            {\r\n                block.expand();\r\n\r\n                if(block.selected == 0)\r\n                {\r\n                    block.selected = 1; // OPERATORS\r\n                    block.previous(1).selected++;  // NUMBERS\r\n                    block.next(1).selected++;  // NUMBERS\r\n                }\r\n                else\r\n                {\r\n                    block.selected = 0; // OPERATORS\r\n                    block.previous(1).selected--;  // NUMBERS\r\n                    block.next(1).selected--;  // NUMBERS\r\n                }\r\n            }\r\n\r\n            // NOTE : probable bug if CW && CCW are right\r\n            function triggerGoodAnswer()\r\n            {\r\n                trace(\"Good Answer !\");\r\n                unlistenAll();\r\n                for(block in Block.grid)\r\n                {\r\n                    if(block.selected == 0)\r\n                    {\r\n                        block.fall();\r\n                    }\r\n                }\r\n\r\n                Actuate.timer(2).onComplete(function(){ batcher.empty(); newOperation(); });\r\n\r\n                // ATTACK ENEMY\r\n                enemy.setValue(enemy.value - 50);\r\n            }\r\n\r\n            if(correct) triggerGoodAnswer();\r\n        }\r\n\r\n        if(event.keycode == Key.escape) {\r\n            Luxe.shutdown();\r\n        }\r\n        else if(event.keycode == Key.up)\r\n        {\r\n            operatorPressed(DIR.UP);\r\n        }\r\n        else if(event.keycode == Key.right)\r\n        {\r\n            operatorPressed(DIR.RIGHT);\r\n        }\r\n        else if(event.keycode == Key.down)\r\n        {\r\n            operatorPressed(DIR.DOWN);\r\n        }\r\n        else if(event.keycode == Key.left)\r\n        {\r\n            operatorPressed(DIR.LEFT);\r\n        }\r\n        else if(event.keycode == Key.key_k)\r\n        {\r\n            batcher.empty();\r\n        }\r\n\r\n        trace(Block.grid[DIR.UP].selected + \",\" + Block.grid[DIR.RIGHT].selected + \",\" + Block.grid[DIR.DOWN].selected + \",\" + Block.grid[DIR.LEFT].selected);\r\n    }\r\n}\r\n\r\n\r\nclass Block\r\n{\r\n    public static var SIZE = 133;\r\n    public static var MARGIN = 18;\r\n    public static var grid:Array<Block>;\r\n    public var id:Int;\r\n    public var value:String;\r\n    public var selected = 0; // Not a Bool because can be > 1\r\n    var box:Sprite;\r\n    var blueBox:Sprite;\r\n    var expandBox:phoenix.geometry.QuadGeometry;\r\n    var numberText:MyText;\r\n    var batcher:Batcher;\r\n\r\n    var operatorSprite:Sprite;\r\n    var operatorName = '';\r\n\r\n    public function new(id:Int, kx:Int, ky:Int, text:String, batcher:Batcher, ?void:Bool=false)\r\n    {\r\n        this.batcher = batcher;\r\n        grid.push(this);\r\n\r\n        // INITALIZATION\r\n        this.value = text;\r\n        this.id = id;\r\n\r\n        var alpha = 0.5;\r\n        if(void) alpha = 0;\r\n\r\n        // BLOCK POSITION\r\n        var pos = new Vector(Luxe.camera.center.x + kx * SIZE + kx * MARGIN, Luxe.camera.center.y + ky * SIZE + ky * MARGIN);\r\n\r\n        // BOX SPRITE\r\n        var box_resource = Luxe.resources.texture('assets/box_empty.png');\r\n        if(text == PLUS) box_resource = Luxe.resources.texture('assets/box_green.png');\r\n        if(text == MINUS) box_resource = Luxe.resources.texture('assets/box_red.png');\r\n        if(text == EQUAL) box_resource = Luxe.resources.texture('assets/box_yellow.png');\r\n        box = new Sprite({\r\n            texture : box_resource,\r\n            pos : pos.clone(),\r\n            depth : 1,\r\n            batcher : batcher,\r\n            scale : new Vector(0, 0),\r\n        });\r\n\r\n        function blockIsAnOperator()\r\n            return (text == PLUS || text == MINUS || text == EQUAL);\r\n\r\n        // OPERATOR SPRITE\r\n        if(blockIsAnOperator())\r\n        {\r\n            if(text == PLUS) operatorName = 'plus';\r\n            if(text == MINUS) operatorName = 'minus';\r\n            if(text == EQUAL) operatorName = 'equal';\r\n\r\n            var texture = Luxe.resources.texture('assets/${operatorName}_default.png');\r\n            // texture.filter_mag = FilterType.nearest;\r\n            // texture.filter_min = FilterType.nearest;\r\n\r\n            operatorSprite = new Sprite({\r\n                texture : texture,\r\n                pos : new Vector(SIZE/2, SIZE/2),\r\n                depth : 3,\r\n                batcher : batcher,\r\n            });\r\n\r\n            operatorSprite.transform.parent = box.transform;\r\n        }\r\n\r\n        // BLUE BOX FUTURE SPRITE\r\n        blueBox = new Sprite({\r\n            texture : Luxe.resources.texture('assets/box_blue.png'),\r\n            // pos : pos.clone(),\r\n            origin : new Vector(0, 0),\r\n            depth :2,\r\n            color : new Color(1, 1, 1, 0),\r\n            batcher : batcher,\r\n        });\r\n\r\n        blueBox.transform.parent = box.transform;\r\n\r\n        // EXPANDBOX FUTURE SPRITE\r\n        expandBox = Luxe.draw.box({\r\n            x : box.pos.clone().x, y : box.pos.clone().y,\r\n            w : SIZE,\r\n            h : 0,\r\n            color : new Color().rgb(0x22a6f2),\r\n            depth : 3,\r\n            origin : new Vector(SIZE/2, 0),\r\n            batcher : batcher,\r\n        });\r\n\r\n        // NUMBER TEXT\r\n        if(!blockIsAnOperator())\r\n        {\r\n            numberText = new MyText(text, batcher);\r\n            numberText.core.pos = new Vector(SIZE/2, SIZE/2);\r\n            numberText.core.transform.parent = box.transform;\r\n            numberText.core.align_vertical = TextAlign.center;\r\n            // NUMBER SHADOW\r\n            numberText.makeShadow();\r\n        }\r\n\r\n        Actuate.tween(box.scale, 0.5, { x: 1, y: 1 });\r\n    }\r\n\r\n    // HELPERS FOR ACTUATE EASINESS\r\n    public var expandBoxOriginHeight(default, set):Float = 0;\r\n    function set_expandBoxOriginHeight(newHeight)\r\n    {\r\n        expandBox.resize_xy(SIZE, newHeight);\r\n        expandBox.transform.origin = new Vector(SIZE/2, newHeight/2);\r\n\r\n        return expandBoxOriginHeight = newHeight;\r\n    }\r\n\r\n    public var expandBoxOriginWidth(default, set):Float = 0;\r\n    function set_expandBoxOriginWidth(newWidth)\r\n    {\r\n        expandBox.resize_xy(newWidth, SIZE);\r\n        expandBox.transform.origin = new Vector(newWidth/2, SIZE/2);\r\n\r\n        return expandBoxOriginWidth = newWidth;\r\n    }\r\n\r\n    // OPERATION ANIMATION BLOB\r\n    public function animate()\r\n    {\r\n        box.transform.scale.x = 1;\r\n        box.transform.scale.y = 1;\r\n\r\n        Actuate.stop(box.transform.scale);\r\n        Actuate.tween(box.transform.scale, 0.1, { x: 1.2, y: 1.2 })\r\n            .ease(luxe.tween.easing.Sine.easeOut)\r\n            .repeat(1)\r\n            .reflect();\r\n    }\r\n\r\n    // NOTE : As soon as i add another tween on same object the old tween stops even if delayed.\r\n    public function expand()\r\n    {\r\n        var expandBoxHeight = 0;\r\n\r\n        function resizeExpandBox(height) {\r\n            expandBox.resize_xy(SIZE, height);\r\n            expandBox.transform.origin = new Vector(SIZE/2, height/2);\r\n        }\r\n\r\n        function doNeighbor(block:Block)\r\n        {\r\n            if(selected == 0)\r\n            {\r\n                // RESIZE NUMBER\r\n                var t = 0;\r\n                // Actuate.tween(block.numberText.core.scale, t, { x: 0, y: 0 });\r\n                // NEW NUMBER COLOR\r\n                block.numberText.core.color = new Color().rgb(0xf0e2ce);\r\n                // EXPAND NUMBER\r\n                // Actuate.tween(block.numberText.core.scale, 0.1, { x: 1, y: 1 }).delay(t);\r\n\r\n                // BLUE BOX APPEAR (opacity++)\r\n                Actuate.tween(block.blueBox.color, 0.3, { a: 1 }).ease(luxe.tween.easing.Expo.easeOut);\r\n\r\n            }\r\n            else\r\n            {\r\n                if(block.selected > 1) return;\r\n\r\n                // BLUE BOX DISAPPEAR (opacity++)\r\n                Actuate.tween(block.blueBox.color, 0.3, { a: 0 }).ease(luxe.tween.easing.Expo.easeOut);\r\n\r\n                // CONTRACT NUMBER\r\n                // Actuate.tween(block.numberText.core.scale, 0.1, { x: 0, y: 0 }).delay(0.3);\r\n                // NEW NUMBER COLOR\r\n                block.numberText.core.color = new Color().rgb(0x22a6f2);\r\n                // RESIZE NUMBER\r\n                // Actuate.tween(block.numberText.core.scale, 0.1, { x: 1, y: 1 }).delay(0.3);\r\n            }\r\n        }\r\n\r\n        doNeighbor(previous(1));\r\n        doNeighbor(next(1));\r\n\r\n        trace('pressed $id and UP ');\r\n\r\n        if(selected == 0)\r\n        {\r\n\r\n            // blueBox.color.a = 1;\r\n            Actuate.tween(blueBox.color, 0.1, { a: 1 });\r\n\r\n            // SWITCH TO SELECTED OPERATOR SPRITE\r\n            // Actuate.timer(0.1).onComplete (function(){\r\n                operatorSprite.texture = Luxe.resources.texture('assets/${operatorName}_selected.png');\r\n                // operatorSprite.texture.filter_mag = FilterType.nearest;\r\n                // operatorSprite.texture.filter_min = FilterType.nearest;\r\n            // });\r\n\r\n            // UNION RECTANGLE EXPANSION\r\n            if(this.id == DIR.UP || this.id == DIR.DOWN)\r\n            {\r\n                Actuate.tween(this, 0.3, { expandBoxOriginWidth: 200 }).ease(luxe.tween.easing.Sine.easeOut);\r\n            }\r\n            else\r\n            {\r\n                Actuate.tween(this, 0.3, { expandBoxOriginHeight: 200 }).ease(luxe.tween.easing.Sine.easeOut);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Actuate.tween(blueBox.color, 0.3, { a: 0 });\r\n\r\n            // SWITCH BACK TO DEFAULT OPERATOR SPRITE\r\n            // Actuate.timer(0.1).onComplete (function(){\r\n                operatorSprite.texture = Luxe.resources.texture('assets/${operatorName}_default.png');\r\n            // });\r\n\r\n            // UNION RECTANGLE CONTRACTION\r\n            if(this.id == DIR.UP || this.id == DIR.DOWN)\r\n            {\r\n                Actuate.tween(this, 0.3, { expandBoxOriginWidth: 0 }).ease(luxe.tween.easing.Sine.easeOut);\r\n            }\r\n            else\r\n            {\r\n                Actuate.tween(this, 0.3, { expandBoxOriginHeight: 0 }).ease(luxe.tween.easing.Sine.easeOut);\r\n            }\r\n        }\r\n    }\r\n\r\n    function select()\r\n    {\r\n        Actuate.tween(box.transform.scale, 0.2, { y: 0 });\r\n    }\r\n\r\n    public function fall()\r\n    {\r\n        var duration = 6 + Random.float(-2, 2);\r\n        var angle = Random.float(-270, 270);\r\n        var targetY = box.transform.pos.y + Luxe.camera.size.y * 0.75;\r\n        Actuate.tween(box.transform.pos, duration, {y: targetY});\r\n        Actuate.tween(this, duration, { operatorRotation: angle });\r\n\r\n        var disappearDuration = 1.2;\r\n        Actuate.tween(this.box.color, disappearDuration, {a: 0} );\r\n        if(numberText != null)\r\n        {\r\n            Actuate.tween(numberText.core.color, disappearDuration, {a: 0} );\r\n            Actuate.tween(numberText.shadow.color, disappearDuration, {a: 0} );\r\n        }\r\n\r\n        if(operatorSprite != null)\r\n            Actuate.tween(operatorSprite.color, disappearDuration, {a: 0} );\r\n    }\r\n\r\n    public var operatorRotation(default, set):Float = 0;\r\n    function set_operatorRotation(newRotation)\r\n    {\r\n        box.transform.rotation = new Quaternion().setFromEuler(new luxe.Vector(0,0,newRotation).radians());\r\n\r\n        return operatorRotation = newRotation;\r\n    }\r\n    public function error()\r\n    {\r\n        var t = 0.15;\r\n        var angle = 20;\r\n\r\n        Actuate.tween(this, t/2, { operatorRotation: angle })\r\n            .ease(luxe.tween.easing.Bounce.easeInOut);\r\n\r\n        Actuate.tween(this, t, { operatorRotation: -angle }, false)\r\n            .ease(luxe.tween.easing.Bounce.easeInOut)\r\n            .delay(t/2);\r\n\r\n        Actuate.tween(this, t/2, { operatorRotation: 0 }, false)\r\n            .ease(luxe.tween.easing.Bounce.easeInOut)\r\n            .delay(t + t/2);\r\n    }\r\n\r\n    public function hasSelectedNeighbors()\r\n    {\r\n            // && nextOperator(1).nextOperator(1).selected == 1) // Make sure 1 operator is selected\r\n        if(previousOperator(1).selected == 0 && nextOperator(1).selected == 0)\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    // ALLOW READING FROM THE BACK\r\n    function pymod(x:Int, mod:Int):Int\r\n    {\r\n        return ((x % mod) + mod) % mod;\r\n    }\r\n\r\n    // CLOCKWISE !\r\n    private inline function previousType(k:Int):Block\r\n        return grid[pymod(id-2 * k, 8)];\r\n\r\n    private inline function nextType(k:Int):Block\r\n        return grid[pymod(id+2 * k, 8)];\r\n\r\n    public function previous(k:Int):Block\r\n        return grid[pymod(id-1 * k, 8)];\r\n\r\n    public function next(k:Int):Block\r\n        return grid[pymod(id+1 * k, 8)];\r\n\r\n    public function previousOperator(k:Int):Block\r\n        return previousType(k);\r\n\r\n    public function nextOperator(k:Int):Block\r\n        return nextType(k);\r\n\r\n    public function previousValue(k:Int):Block\r\n        return previousType(k);\r\n\r\n    public function nextValue(k:Int):Block\r\n        return nextType(k);\r\n}\r\n\r\n\r\n@:enum\r\nabstract DIR(Int) to Int\r\n{\r\n    var UP = 1;\r\n    var RIGHT = 3;\r\n    var DOWN = 5;\r\n    var LEFT = 7;\r\n}\r\n\r\ntypedef Operation = {var input:Array<String>; var output:String;}\r\n\r\n","import luxe.Sprite;\r\nimport luxe.Vector;\r\nimport luxe.Input;\r\nimport phoenix.Batcher;\r\n\r\n\r\nclass MyButton\r\n{\r\n    var sprite:Sprite;\r\n    var mouseEvent:String;\r\n    public var onMouseUp:Void->Void;\r\n\r\n    public function new(x:Int, y:Int, image:String, batcher)\r\n    {\r\n        this.sprite = new Sprite({\r\n            texture : Luxe.resources.texture('assets/$image'),\r\n            pos : new Vector(x, y),\r\n            depth :2,\r\n            batcher : batcher,\r\n        });\r\n\r\n        this.mouseEvent = Luxe.events.listen('mouse up', _onMouseUp);\r\n    }\r\n\r\n    function _onMouseUp(mouse:MouseEvent)\r\n    {\r\n        var mousePos = Luxe.camera.screen_point_to_world(mouse.pos);\r\n        if(sprite.point_inside_AABB(mousePos))\r\n        {\r\n            Luxe.events.unlisten(mouseEvent);\r\n            onMouseUp();\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Panel\r\n{\r\n    var batcher:Batcher;\r\n    var events:Array<String> = new Array();\r\n\r\n    public function new()\r\n    {\r\n        this.batcher = new Batcher(Luxe.renderer);\r\n        Luxe.renderer.add_batch(batcher);\r\n    }\r\n\r\n    function listen<T>( _event_name : String, _listener : T -> Void ):String\r\n    {\r\n        var event = Luxe.events.listen(_event_name, _listener);\r\n        events.push(event);\r\n        return event;\r\n    }\r\n\r\n    function unlistenAll()\r\n    {\r\n        for(event in events) Luxe.events.unlisten(event);\r\n    }\r\n\r\n    public function addBackButton()\r\n    {\r\n        var backButton = new MyButton(60, 60, 'arrow.png', batcher);\r\n        backButton.onMouseUp = function() { Main.menu.goToScene(); };\r\n    }\r\n\r\n    public function close()\r\n    {\r\n        batcher.destroy();\r\n    }\r\n}","package phoenix;\r\n\r\nimport luxe.Objects;\r\n\r\nimport phoenix.Vector;\r\nimport phoenix.Quaternion;\r\nimport phoenix.Matrix;\r\nimport snow.api.buffers.Float32Array;\r\n\r\n\r\nclass Transform extends ID {\r\n\r\n    //access\r\n    @:isVar public var parent (get,set) : Transform;\r\n    @:isVar public var local (get,set) : Spatial;\r\n    @:isVar public var world (get,set) : Spatial;\r\n    @:isVar public var origin (get,set) : Vector;\r\n        //true if the transform needs refreshing,\r\n        //starts true since there are no values\r\n    @:isVar public var dirty (default,set) : Bool = true;\r\n        //set this to true if you want to manage the transforms matrix\r\n        //externally, this just prevents clean from ever being called automatically.\r\n        //This means the dirty flag and such are self maintained.\r\n    public var manual_update : Bool = false;\r\n\r\n        //alias to local.pos, local.rotation, local.scale\r\n    public var pos                  (get,set) : Vector;\r\n    public var rotation             (get,set) : Quaternion;\r\n    public var scale                (get,set) : Vector;\r\n\r\n    var _origin_undo_matrix : Matrix;\r\n    var _pos_matrix : Matrix;\r\n    var _rotation_matrix : Matrix;\r\n    var _setup : Bool = true;\r\n    var _cleaning : Bool = false;\r\n\r\n        //List of handler functions\r\n    var _clean_handlers : Array< Transform->Void >;\r\n    var _dirty_handlers : Array< Transform->Void >;\r\n    var _pos_handlers : Array< Vector->Void >;\r\n    var _rotation_handlers : Array< Quaternion->Void >;\r\n    var _scale_handlers : Array< Vector->Void >;\r\n    var _origin_handlers : Array< Vector->Void >;\r\n    var _parent_handlers : Array< Transform->Void >;\r\n\r\n    public inline function new() {\r\n\r\n        super('transform');\r\n\r\n        local = new Spatial();\r\n        world = new Spatial();\r\n\r\n        _origin_undo_matrix = new Matrix();\r\n        _pos_matrix = new Matrix();\r\n        _rotation_matrix = new Matrix();\r\n\r\n        origin = new Vector();\r\n\r\n            //Whenever the local transform changes we need to know\r\n        local.pos_changed = on_local_pos_change;\r\n        local.rotation_changed = on_local_rotation_change;\r\n        local.scale_changed = on_local_scale_change;\r\n\r\n        _setup = false;\r\n\r\n    } //new\r\n\r\n\r\n    var _destroying = false;\r\n\r\n    public function destroy() {\r\n\r\n        _destroying = true;\r\n\r\n            //no longer listening\r\n        if(parent != null) {\r\n            parent.unlisten(on_parent_cleaned);\r\n        }\r\n\r\n            //destroy resources and memory\r\n        _clean_handlers = null;\r\n        _dirty_handlers = null;\r\n        _pos_handlers = null;\r\n        _rotation_handlers = null;\r\n        _scale_handlers = null;\r\n        _origin_handlers = null;\r\n        _parent_handlers = null;\r\n\r\n            //clean up\r\n        local.destroy();\r\n        world.destroy();\r\n\r\n        local = null;\r\n        world = null;\r\n        origin = null;\r\n        _origin_undo_matrix = null;\r\n        _pos_matrix = null;\r\n        _rotation_matrix = null;\r\n\r\n    } //destroy\r\n\r\n    inline function set_dirty( _dirty:Bool ) : Bool {\r\n\r\n        dirty = _dirty;\r\n\r\n        if(  dirty &&\r\n            !_setup &&\r\n            _dirty_handlers != null &&\r\n            _dirty_handlers.length > 0\r\n        ) {\r\n            propagate_dirty();\r\n        }\r\n\r\n        return dirty;\r\n\r\n    } //set_dirty\r\n\r\n        //when the local transforms change we become dirty\r\n    inline function on_local_pos_change( v:Vector ) {\r\n\r\n        dirty = true;\r\n\r\n        if(_pos_handlers != null &&\r\n           _pos_handlers.length > 0) {\r\n                propagate_pos( v );\r\n        }\r\n\r\n    } //local pos changed\r\n\r\n    inline function on_local_rotation_change( r:Quaternion ) {\r\n\r\n        dirty = true;\r\n\r\n        if(_rotation_handlers != null &&\r\n           _rotation_handlers.length > 0) {\r\n                propagate_rotation( r );\r\n        }\r\n\r\n    } //local rotation changed\r\n\r\n    inline function on_local_scale_change( s:Vector ) {\r\n\r\n        dirty = true;\r\n\r\n        if(_scale_handlers != null &&\r\n           _scale_handlers.length > 0) {\r\n                propagate_scale( s );\r\n        }\r\n\r\n    } //local scale changed\r\n\r\n    inline function on_parent_cleaned( p:Transform ) {\r\n\r\n        dirty = true;\r\n\r\n    } //on_parent_cleaned\r\n\r\n    inline function get_local() : Spatial {\r\n\r\n        return local;\r\n\r\n    } //get_local\r\n\r\n    inline function set_local( l:Spatial ) : Spatial {\r\n\r\n        if(l != null) {\r\n\r\n            dirty = true;\r\n\r\n            l.pos_changed = on_local_pos_change;\r\n            l.rotation_changed = on_local_rotation_change;\r\n            l.scale_changed = on_local_scale_change;\r\n\r\n        }\r\n\r\n        return local = l;\r\n\r\n    } //set_local\r\n\r\n        //whenever the world transform is requested, make sure it's up to date\r\n    inline function get_world() : Spatial {\r\n\r\n        if( !_destroying ) {\r\n            clean_check();\r\n        }\r\n\r\n        return world;\r\n\r\n    } //get_world\r\n\r\n    @:noCompletion public inline function clean_check() {\r\n\r\n            //make sure the parent is updated\r\n        if(parent != null && parent.dirty) {\r\n            parent.clean_check();\r\n        } //parent != null\r\n\r\n        if(dirty && !_cleaning && !manual_update) {\r\n            clean();\r\n        } //dirty\r\n\r\n    }//clean_check\r\n\r\n    @:noCompletion public function clean() {\r\n\r\n        if(!dirty) {\r\n            return;\r\n        }\r\n\r\n            //flag to avoid loops\r\n        _cleaning = true;\r\n\r\n            //update local matrices\r\n        _pos_matrix.makeTranslation( local.pos.x, local.pos.y, local.pos.z );\r\n        _rotation_matrix.makeRotationFromQuaternion( local.rotation );\r\n        _origin_undo_matrix.makeTranslation( -origin.x, -origin.y, -origin.z );\r\n\r\n                //translate to origin\r\n        local.matrix.makeTranslation( origin.x, origin.y, origin.z );\r\n\r\n                //rotation relative to origin\r\n            local.matrix.multiply(_rotation_matrix);\r\n                //scale up relative to origin\r\n            local.matrix.scale(local.scale);\r\n                //apply position\r\n            local.matrix.setPosition( local.pos );\r\n\r\n            //undo origin translation\r\n        local.matrix.multiply(_origin_undo_matrix);\r\n\r\n            //update world matrix\r\n        if(parent != null) {\r\n            world.matrix = world.matrix.multiplyMatrices( parent.world.matrix, local.matrix );\r\n        } else {\r\n            world.matrix.copy(local.matrix);\r\n        }\r\n\r\n            //update world spatial,\r\n            //saying false allows it to decide\r\n            //if this code happens or not\r\n        world.decompose(false);\r\n\r\n            //clear flags\r\n        dirty = false;\r\n        _cleaning = false;\r\n\r\n        if( _clean_handlers != null &&\r\n            _clean_handlers.length > 0) {\r\n                propagate_clean();\r\n        }\r\n\r\n    } //clean\r\n\r\n    inline function toString() {\r\n        return 'Transform ($id)';\r\n    } //toString\r\n\r\n    inline function get_origin() : Vector {\r\n\r\n        return origin;\r\n\r\n    } //get_origin\r\n\r\n    inline function set_origin(o:Vector) : Vector {\r\n\r\n        dirty = true;\r\n\r\n        origin = o;\r\n\r\n        if(_origin_handlers != null &&\r\n           _origin_handlers.length > 0) {\r\n            propagate_origin( origin );\r\n        }\r\n\r\n        return origin;\r\n\r\n    } //set_origin\r\n\r\n    inline function set_world(w:Spatial) : Spatial {\r\n\r\n        if(w == null) {\r\n            return world = w;\r\n        }\r\n\r\n        dirty = true;\r\n\r\n        return world = w;\r\n\r\n    } //set_world\r\n\r\n    inline function get_parent() : Transform {\r\n\r\n        return parent;\r\n\r\n    } //get_parent\r\n\r\n    inline function set_parent( _p:Transform ) {\r\n\r\n        dirty = true;\r\n\r\n            //clear existing listener\r\n        if(parent != null) {\r\n            parent.unlisten(on_parent_cleaned);\r\n        }\r\n\r\n        parent = _p;\r\n\r\n        if(_parent_handlers != null &&\r\n           _parent_handlers.length > 0) {\r\n                propagate_parent( parent );\r\n        }\r\n\r\n        if(parent != null) {\r\n            //we need to know when the parent transform is changed, this makes us dirty,\r\n            //and since each full clean can clear the dirty flag, we use this to make sure it's always synced\r\n            parent.listen(on_parent_cleaned);\r\n        }\r\n\r\n        return parent;\r\n\r\n    } //set_parent\r\n\r\n    inline function get_pos() {\r\n        return local.pos;\r\n    } //get_pos\r\n\r\n    inline function get_rotation() {\r\n        return local.rotation;\r\n    } //get_rotation\r\n\r\n    inline function get_scale() {\r\n        return local.scale;\r\n    } //get_scale\r\n\r\n\r\n    inline function set_pos(value:Vector) {\r\n        return local.pos = value;\r\n    } //set_pos\r\n\r\n    inline function set_rotation(value:Quaternion) {\r\n        return local.rotation = value;\r\n    } //set_rotation\r\n\r\n    inline function set_scale(value:Vector) {\r\n        return local.scale = value;\r\n    } //set_scale\r\n\r\n\r\n    inline function propagate_clean() {\r\n        for(_handler in _clean_handlers) {\r\n            if(_handler != null) {\r\n                _handler(this);\r\n            }\r\n        }\r\n    } //propagate clean\r\n\r\n    inline function propagate_dirty() {\r\n        for(_handler in _dirty_handlers) {\r\n            if(_handler != null) {\r\n                _handler(this);\r\n            }\r\n        }\r\n    } //propagate dirty\r\n\r\n    inline function propagate_pos( _pos:Vector ) {\r\n        for(_handler in _pos_handlers) {\r\n            if(_handler != null) {\r\n                _handler(_pos);\r\n            }\r\n        }\r\n    } //propagate pos\r\n\r\n    inline function propagate_rotation( _rotation:Quaternion ) {\r\n        for(_handler in _rotation_handlers) {\r\n            if(_handler != null) {\r\n                _handler(_rotation);\r\n            }\r\n        }\r\n    } //propagate rotation\r\n\r\n    inline function propagate_scale( _scale:Vector ) {\r\n        for(_handler in _scale_handlers) {\r\n            if(_handler != null) {\r\n                _handler(_scale);\r\n            }\r\n        }\r\n    } //propagate scale\r\n\r\n    inline function propagate_origin( _origin:Vector ) {\r\n        for(_handler in _origin_handlers) {\r\n            if(_handler != null) {\r\n                _handler(_origin);\r\n            }\r\n        }\r\n    } //propagate origin\r\n\r\n    inline function propagate_parent( _parent:Transform ) {\r\n        for(_handler in _parent_handlers) {\r\n            if(_handler != null) {\r\n                _handler(_parent);\r\n            }\r\n        }\r\n    } //propagate parent\r\n\r\n    public inline function listen( _handler : Transform->Void ) {\r\n\r\n        if(_clean_handlers == null) {\r\n            _clean_handlers = [];\r\n        }\r\n\r\n        _clean_handlers.push( _handler );\r\n\r\n    } //listen\r\n\r\n    public inline function unlisten( _handler : Transform->Void ) {\r\n\r\n        if(_clean_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _clean_handlers.remove( _handler );\r\n\r\n    } //unlisten\r\n\r\n    public inline function listen_dirty( _handler : Transform->Void ) {\r\n\r\n        if(_dirty_handlers == null) {\r\n            _dirty_handlers = [];\r\n        }\r\n\r\n        _dirty_handlers.push( _handler );\r\n\r\n    } //listen_dirty\r\n\r\n    public inline function unlisten_dirty( _handler : Transform->Void ) {\r\n\r\n        if(_dirty_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _dirty_handlers.remove( _handler );\r\n\r\n    } //unlisten_dirty\r\n\r\n    public inline function listen_pos( _handler : Vector->Void ) {\r\n\r\n        if(_pos_handlers == null) {\r\n            _pos_handlers = [];\r\n        }\r\n\r\n        _pos_handlers.push( _handler );\r\n\r\n    } //listen_pos\r\n\r\n    public inline function unlisten_pos( _handler : Vector->Void ) {\r\n\r\n        if(_pos_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _pos_handlers.remove( _handler );\r\n\r\n    } //unlisten_pos\r\n\r\n    public inline function listen_scale( _handler : Vector->Void ) {\r\n\r\n        if(_scale_handlers == null) {\r\n            _scale_handlers = [];\r\n        }\r\n\r\n        _scale_handlers.push( _handler );\r\n\r\n    } //listen_scale\r\n\r\n    public inline function unlisten_scale( _handler : Vector->Void ) {\r\n\r\n        if(_scale_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _scale_handlers.remove( _handler );\r\n\r\n    } //unlisten_scale\r\n\r\n    public inline function listen_rotation( _handler : Quaternion->Void ) {\r\n\r\n        if(_rotation_handlers == null) {\r\n            _rotation_handlers = [];\r\n        }\r\n\r\n        _rotation_handlers.push( _handler );\r\n\r\n    } //listen_rotation\r\n\r\n    public inline function unlisten_rotation( _handler : Quaternion->Void ) {\r\n\r\n        if(_rotation_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _rotation_handlers.remove( _handler );\r\n\r\n    } //unlisten_rotation\r\n\r\n    public inline function listen_origin( _handler : Vector->Void ) {\r\n\r\n        if(_origin_handlers == null) {\r\n            _origin_handlers = [];\r\n        }\r\n\r\n        _origin_handlers.push( _handler );\r\n\r\n    } //listen_origin\r\n\r\n    public inline function unlisten_origin( _handler : Vector->Void ) {\r\n\r\n        if(_origin_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _origin_handlers.remove( _handler );\r\n\r\n    } //unlisten_origin\r\n\r\n    public inline function listen_parent( _handler : Transform->Void ) {\r\n\r\n        if(_parent_handlers == null) {\r\n            _parent_handlers = [];\r\n        }\r\n\r\n        _parent_handlers.push( _handler );\r\n\r\n    } //listen_parent\r\n\r\n    public inline function unlisten_parent( _handler : Transform->Void ) {\r\n\r\n        if(_parent_handlers == null) {\r\n            return false;\r\n        }\r\n\r\n        return _parent_handlers.remove( _handler );\r\n\r\n    } //unlisten_parent\r\n\r\n} //Transform\r\n\r\nclass Spatial {\r\n\r\n    @:isVar public var pos                  (default,set) : Vector;\r\n    @:isVar public var rotation             (default,set) : Quaternion;\r\n    @:isVar public var scale                (default,set) : Vector;\r\n\r\n    @:isVar public var matrix               (get,    set) : Matrix;\r\n\r\n    public var floats : Float32Array;\r\n    public var ignore_listeners : Bool = false;\r\n    public var auto_decompose : Bool = false;\r\n\r\n    @:noCompletion public var pos_changed : Vector -> Void;\r\n    @:noCompletion public var rotation_changed : Quaternion -> Void;\r\n    @:noCompletion public var scale_changed : Vector -> Void;\r\n\r\n    var _setup : Bool = true;\r\n\r\n    public inline function new() {\r\n\r\n        matrix = new Matrix();\r\n        floats = matrix.float32array();\r\n\r\n        pos = new Vector();\r\n        rotation = new Quaternion();\r\n        scale = new Vector(1,1,1);\r\n\r\n        _setup = false;\r\n\r\n    } //new\r\n\r\n    public inline function destroy() {\r\n\r\n        matrix = null;\r\n        floats = null;\r\n        pos = null;\r\n        rotation = null;\r\n        scale = null;\r\n\r\n    } //destroy\r\n\r\n        //assigns the local values (pos/rotation/scale) according to the matrix\r\n        //when called manually, will make sure it happens using force.\r\n        //if force is false, auto_decompose will apply\r\n    public inline function decompose( _force:Bool = true ) {\r\n\r\n        if( auto_decompose || _force ) {\r\n\r\n            var _transform = matrix.decompose();\r\n\r\n            pos = _transform.pos;\r\n            rotation = _transform.rotation;\r\n            scale = _transform.scale;\r\n\r\n        } //auto_decompose\r\n\r\n        return this;\r\n\r\n    } //decompose\r\n\r\n    inline function get_matrix() : Matrix {\r\n\r\n        return matrix;\r\n\r\n    } //get_matrix\r\n\r\n    inline function set_matrix(_m:Matrix) {\r\n\r\n        matrix = _m;\r\n\r\n            //when updating, update the float32array\r\n        if( _m != null ) {\r\n            floats = matrix.float32array();\r\n        }\r\n\r\n        return matrix;\r\n\r\n    } //set_matrix\r\n\r\n    inline function propagate_pos( _p:Vector ) {\r\n        if(pos_changed != null && !ignore_listeners) {\r\n            pos_changed(_p);\r\n        }\r\n    } //propagate pos\r\n\r\n    inline function propagate_rotation( _r:Quaternion ) {\r\n        if(rotation_changed != null && !ignore_listeners) {\r\n            rotation_changed(_r);\r\n        }\r\n    } //propagate rotation\r\n\r\n    inline function propagate_scale( _s:Vector ) {\r\n        if(scale_changed != null && !ignore_listeners) {\r\n            scale_changed(_s);\r\n        }\r\n    } //propagate scale\r\n\r\n    inline function set_pos( _p:Vector ) {\r\n\r\n        pos = _p;\r\n\r\n        if( _p != null ) {\r\n\r\n            Vector.Listen( pos, _pos_change );\r\n\r\n            propagate_pos(pos);\r\n\r\n        } //\r\n\r\n        return pos;\r\n\r\n    } //set_pos\r\n\r\n    inline function set_rotation( _r:Quaternion ) {\r\n\r\n        rotation = _r;\r\n\r\n        if( _r != null ) {\r\n\r\n            Quaternion.Listen( rotation, _rotation_change );\r\n\r\n            propagate_rotation(rotation);\r\n\r\n        } //\r\n\r\n        return rotation;\r\n\r\n    } //set_rotation\r\n\r\n    inline function set_scale( _s:Vector ) {\r\n\r\n        scale = _s;\r\n\r\n        if( _s != null ) {\r\n\r\n            Vector.Listen( scale, _scale_change );\r\n\r\n            propagate_scale(scale);\r\n\r\n        } //\r\n\r\n        return scale;\r\n\r\n    } //set_scale\r\n\r\n //Sub component change listeners\r\n\r\n        //An internal callback for when x y or z on a transform changes\r\n    inline function _pos_change(_v:Float) { this.set_pos(pos); }\r\n        //An internal callback for when x y or z on a transform changes\r\n    inline function _scale_change(_v:Float) { this.set_scale(scale); }\r\n        //An internal callback for when x y or z on a transform changes\r\n    inline function _rotation_change(_v:Float) { this.set_rotation(rotation); }\r\n\r\n} //Spatial\r\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:noDoc\nclass HxOverrides {\n\n\tstatic function dateStr( date :Date ) : String {\n\t\tvar m = date.getMonth() + 1;\n\t\tvar d = date.getDate();\n\t\tvar h = date.getHours();\n\t\tvar mi = date.getMinutes();\n\t\tvar s = date.getSeconds();\n\t\treturn date.getFullYear()\n\t\t\t+\"-\"+(if( m < 10 ) \"0\"+m else \"\"+m)\n\t\t\t+\"-\"+(if( d < 10 ) \"0\"+d else \"\"+d)\n\t\t\t+\" \"+(if( h < 10 ) \"0\"+h else \"\"+h)\n\t\t\t+\":\"+(if( mi < 10 ) \"0\"+mi else \"\"+mi)\n\t\t\t+\":\"+(if( s < 10 ) \"0\"+s else \"\"+s);\n\t}\n\n\tstatic function strDate( s : String ) : Date {\n\t\tswitch( s.length ) {\n\t\tcase 8: // hh:mm:ss\n\t\t\tvar k = s.split(\":\");\n\t\t\tvar d : Date = untyped __new__(Date);\n\t\t\tuntyped d[\"setTime\"](0);\n\t\t\tuntyped d[\"setUTCHours\"](k[0]);\n\t\t\tuntyped d[\"setUTCMinutes\"](k[1]);\n\t\t\tuntyped d[\"setUTCSeconds\"](k[2]);\n\t\t\treturn d;\n\t\tcase 10: // YYYY-MM-DD\n\t\t\tvar k = s.split(\"-\");\n\t\t\treturn new Date(cast k[0],cast untyped k[1] - 1,cast k[2],0,0,0);\n\t\tcase 19: // YYYY-MM-DD hh:mm:ss\n\t\t\tvar k = s.split(\" \");\n\t\t\tvar y = k[0].split(\"-\");\n\t\t\tvar t = k[1].split(\":\");\n\t\t\treturn new Date(cast y[0],cast untyped y[1] - 1,cast y[2],cast t[0],cast t[1],cast t[2]);\n\t\tdefault:\n\t\t\tthrow \"Invalid date format : \" + s;\n\t\t}\n\t}\n\n\tstatic function cca( s : String, index : Int ) : Null<Int> {\n\t\tvar x = (cast s).charCodeAt(index);\n\t\tif( x != x ) // fast isNaN\n\t\t\treturn js.Lib.undefined; // isNaN will still return true\n\t\treturn x;\n\t}\n\n\tstatic function substr( s : String, pos : Int, ?len : Int ) : String {\n\t\tif (len == null) {\n\t\t\tlen = s.length;\n\t\t} else if (len < 0) {\n\t\t\tif (pos == 0)\n\t\t\t\tlen = s.length + len;\n\t\t\telse\n\t\t\t\treturn \"\";\n\t\t}\n\n\t\t#if (js_es < 5)\n\t\tif (pos < 0) {\n\t\t\tpos = s.length + pos;\n\t\t\tif (pos < 0)\n\t\t\t\tpos = 0;\n\t\t}\n\t\t#end\n\n\t\treturn (untyped s).substr(pos, len);\n\t}\n\n\tstatic function indexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i < 0) {\n\t\t\ti += len;\n\t\t\tif (i < 0) i = 0;\n\t\t}\n\t\twhile (i < len)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function lastIndexOf<T>( a : Array<T>, obj : T, i : Int) {\n\t\tvar len = a.length;\n\t\tif (i >= len)\n\t\t\ti = len - 1;\n\t\telse if (i < 0)\n\t\t\ti += len;\n\t\twhile (i >= 0)\n\t\t{\n\t\t\tif (untyped __js__(\"a[i] === obj\"))\n\t\t\t\treturn i;\n\t\t\ti--;\n\t\t}\n\t\treturn -1;\n\t}\n\n\tstatic function remove<T>( a : Array<T>, obj : T ) {\n\t\tvar i = a.indexOf(obj);\n\t\tif( i == -1 ) return false;\n\t\ta.splice(i,1);\n\t\treturn true;\n\t}\n\n\tstatic function iter<T>( a : Array<T> ) : Iterator<T> untyped {\n\t\treturn {\n\t\t\tcur : 0,\n\t\t\tarr : a,\n\t\t\thasNext : function() {\n\t\t\t\treturn __this__.cur < __this__.arr.length;\n\t\t\t},\n\t\t\tnext : function() {\n\t\t\t\treturn __this__.arr[__this__.cur++];\n\t\t\t}\n\t\t};\n\t}\n\n\tstatic function __init__() untyped {\n#if (js_es < 5)\n\t\t__feature__('HxOverrides.indexOf', if( Array.prototype.indexOf ) __js__(\"HxOverrides\").indexOf = function(a,o,i) return Array.prototype.indexOf.call(a, o, i));\n\t\t__feature__('HxOverrides.lastIndexOf', if( Array.prototype.lastIndexOf ) __js__(\"HxOverrides\").lastIndexOf = function(a,o,i) return Array.prototype.lastIndexOf.call(a, o, i));\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tThe `Lambda` class is a collection of methods to support functional\n\tprogramming. It is ideally used with `using Lambda` and then acts as an\n\textension to Iterable types.\n\n\tOn static platforms, working with the Iterable structure might be slower\n\tthan performing the operations directly on known types, such as Array and\n\tList.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n\n\t@see https://haxe.org/manual/std-Lambda.html\n**/\nclass Lambda {\n\n\t/**\n\t\tCreates an Array from Iterable `it`.\n\n\t\tIf `it` is an Array, this function returns a copy of it.\n\t**/\n\tpublic static function array<A>( it : Iterable<A> ) : Array<A> {\n\t\tvar a = new Array<A>();\n\t\tfor(i in it)\n\t\t\ta.push(i);\n\t\treturn a;\n\t}\n\n\t/**\n\t\tCreates a List form Iterable `it`.\n\n\t\tIf `it` is a List, this function returns a copy of it.\n\t**/\n\tpublic static function list<A>( it : Iterable<A> ) : List<A> {\n\t\tvar l = new List<A>();\n\t\tfor(i in it)\n\t\t\tl.add(i);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tCreates a new List by applying function `f` to all elements of `it`.\n\n\t\tThe order of elements is preserved.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function map<A,B>( it : Iterable<A>, f : A -> B ) : List<B> {\n\t\tvar l = new List<B>();\n\t\tfor( x in it )\n\t\t\tl.add(f(x));\n\t\treturn l;\n\t}\n\n\t/**\n\t\tSimilar to map, but also passes the index of each element to `f`.\n\n\t\tThe order of elements is preserved.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function mapi<A,B>( it : Iterable<A>, f : Int -> A -> B ) : List<B> {\n\t\tvar l = new List<B>();\n\t\tvar i = 0;\n\t\tfor( x in it )\n\t\t\tl.add(f(i++,x));\n\t\treturn l;\n\t}\n\n\t/**\n\t\tConcatenate a list of lists.\n\n\t\tThe order of elements is preserved.\n\t**/\n\tpublic static function flatten<A>( it : Iterable<Iterable<A>> ) : List<A> {\n\t\tvar l = new List<A>();\n\t\tfor (e in it)\n\t\t\tfor (x in e)\n\t\t\t\tl.add(x);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tA composition of map and flatten.\n\n\t\tThe order of elements is preserved.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function flatMap<A,B>( it : Iterable<A>, f: A -> Iterable<B> ) : List<B> {\n\t\treturn Lambda.flatten(Lambda.map(it, f));\n\t}\n\n\t/**\n\t\tTells if `it` contains `elt`.\n\n\t\tThis function returns true as soon as an element is found which is equal\n\t\tto `elt` according to the `==` operator.\n\n\t\tIf no such element is found, the result is false.\n\t**/\n\tpublic static function has<A>( it : Iterable<A>, elt : A ) : Bool {\n\t\tfor( x in it )\n\t\t\tif( x == elt )\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `it` contains an element for which `f` is true.\n\n\t\tThis function returns true as soon as an element is found for which a\n\t\tcall to `f` returns true.\n\n\t\tIf no such element is found, the result is false.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function exists<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tfor( x in it )\n\t\t\tif( f(x) )\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/**\n\t\tTells if `f` is true for all elements of `it`.\n\n\t\tThis function returns false as soon as an element is found for which a\n\t\tcall to `f` returns false.\n\n\t\tIf no such element is found, the result is true.\n\n\t\tIn particular, this function always returns true if `it` is empty.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function foreach<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tfor( x in it )\n\t\t\tif( !f(x) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\t/**\n\t\tCalls `f` on all elements of `it`, in order.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function iter<A>( it : Iterable<A>, f : A -> Void ) {\n\t\tfor( x in it )\n\t\t\tf(x);\n\t}\n\n\t/**\n\t\tReturns a List containing those elements of `it` for which `f` returned\n\t\ttrue.\n\n\t\tIf `it` is empty, the result is the empty List even if `f` is null.\n\n\t\tOtherwise if `f` is null, the result is unspecified.\n\t**/\n\tpublic static function filter<A>( it : Iterable<A>, f : A -> Bool ) {\n\t\tvar l = new List<A>();\n\t\tfor( x in it )\n\t\t\tif( f(x) )\n\t\t\t\tl.add(x);\n\t\treturn l;\n\t}\n\n\t/**\n\t\tFunctional fold on Iterable `it`, using function `f` with start argument\n\t\t`first`.\n\n\t\tIf `it` has no elements, the result is `first`.\n\n\t\tOtherwise the first element of `it` is passed to `f` alongside `first`.\n\t\tThe result of that call is then passed to `f` with the next element of\n\t\t`it`, and so on until `it` has no more elements.\n\n\t\tIf `it` or `f` are null, the result is unspecified.\n\t**/\n\tpublic static function fold<A,B>( it : Iterable<A>, f : A -> B -> B, first : B ) : B {\n\t\tfor( x in it )\n\t\t\tfirst = f(x,first);\n\t\treturn first;\n\t}\n\n\t/**\n\t\tReturns the number of elements in `it` for which `pred` is true, or the\n\t\ttotal number of elements in `it` if `pred` is null.\n\n\t\tThis function traverses all elements.\n\t**/\n\tpublic static function count<A>( it : Iterable<A>, ?pred : A -> Bool ) {\n\t\tvar n = 0;\n\t\tif( pred == null )\n\t\t\tfor( _ in it )\n\t\t\t\tn++;\n\t\telse\n\t\t\tfor( x in it )\n\t\t\t\tif( pred(x) )\n\t\t\t\t\tn++;\n\t\treturn n;\n\t}\n\n\t/**\n\t\tTells if Iterable `it` does not contain any element.\n\t**/\n\tpublic static function empty<T>( it : Iterable<T> ) : Bool {\n\t\treturn !it.iterator().hasNext();\n\t}\n\n\t/**\n\t\tReturns the index of the first element `v` within Iterable `it`.\n\n\t\tThis function uses operator `==` to check for equality.\n\n\t\tIf `v` does not exist in `it`, the result is -1.\n\t**/\n\tpublic static function indexOf<T>( it : Iterable<T>, v : T ) : Int {\n\t\tvar i = 0;\n\t\tfor( v2 in it ) {\n\t\t\tif( v == v2 )\n\t\t\t\treturn i;\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n\n\t/**\n\t\tReturns the first element of `it` for which `f` is true.\n\n\t\tThis function returns as soon as an element is found for which a call to\n\t\t`f` returns true.\n\n\t\tIf no such element is found, the result is null.\n\n\t\tIf `f` is null, the result is unspecified.\n\t**/\n\tpublic static function find<T>( it : Iterable<T>, f : T -> Bool ) : Null<T> {\n\t\tfor( v in it ) {\n\t\t\tif(f(v)) return v;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tReturns a new List containing all elements of Iterable `a` followed by\n\t\tall elements of Iterable `b`.\n\n\t\tIf `a` or `b` are null, the result is unspecified.\n\t**/\n\tpublic static function concat<T>( a : Iterable<T>, b : Iterable<T> ) : List<T> {\n\t\tvar l = new List();\n\t\tfor( x in a )\n\t\t\tl.add(x);\n\t\tfor( x in b )\n\t\t\tl.add(x);\n\t\treturn l;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n\tA linked-list of elements. The list is composed of element container objects\n\tthat are chained together. It is optimized so that adding or removing an\n\telement does not imply copying the whole list content every time.\n\n\t@see https://haxe.org/manual/std-List.html\n**/\nclass List<T> {\n\n\tprivate var h : ListNode<T>;\n\tprivate var q : ListNode<T>;\n\n\t/**\n\t\tThe length of `this` List.\n\t**/\n\tpublic var length(default,null) : Int;\n\n\t/**\n\t\tCreates a new empty list.\n\t**/\n\tpublic function new() {\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tAdds element `item` at the end of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function add( item : T ) {\n\t\tvar x = ListNode.create(item, null);\n\t\tif( h == null )\n\t\t\th = x;\n\t\telse\n\t\t\tq.next = x;\n\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tAdds element `item` at the beginning of `this` List.\n\n\t\t`this.length` increases by 1.\n\t**/\n\tpublic function push( item : T ) {\n\t\tvar x = ListNode.create(item, h);\n\t\th = x;\n\t\tif( q == null )\n\t\t\tq = x;\n\t\tlength++;\n\t}\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function first() : Null<T> {\n\t\treturn if( h == null ) null else h.item;\n\t}\n\n\t/**\n\t\tReturns the last element of `this` List, or null if no elements exist.\n\n\t\tThis function does not modify `this` List.\n\t**/\n\tpublic function last() : Null<T> {\n\t\treturn if( q == null ) null else q.item;\n\t}\n\n\n\t/**\n\t\tReturns the first element of `this` List, or null if no elements exist.\n\n\t\tThe element is removed from `this` List.\n\t**/\n\tpublic function pop() : Null<T> {\n\t\tif( h == null )\n\t\t\treturn null;\n\t\tvar x = h.item;\n\t\th = h.next;\n\t\tif( h == null )\n\t\t\tq = null;\n\t\tlength--;\n\t\treturn x;\n\t}\n\n\t/**\n\t\tTells if `this` List is empty.\n\t**/\n\tpublic function isEmpty() : Bool {\n\t\treturn (h == null);\n\t}\n\n\t/**\n\t\tEmpties `this` List.\n\n\t\tThis function does not traverse the elements, but simply sets the\n\t\tinternal references to null and `this.length` to 0.\n\t**/\n\tpublic function clear() : Void {\n\t\th = null;\n\t\tq = null;\n\t\tlength = 0;\n\t}\n\n\t/**\n\t\tRemoves the first occurrence of `v` in `this` List.\n\n\t\tIf `v` is found by checking standard equality, it is removed from `this`\n\t\tList and the function returns true.\n\n\t\tOtherwise, false is returned.\n\t**/\n\tpublic function remove( v : T ) : Bool {\n\t\tvar prev:ListNode<T> = null;\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tif( l.item == v ) {\n\t\t\t\tif( prev == null )\n\t\t\t\t\th = l.next;\n\t\t\t\telse\n\t\t\t\t\tprev.next = l.next;\n\t\t\t\tif( q == l )\n\t\t\t\t\tq = prev;\n\t\t\t\tlength--;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tprev = l;\n\t\t\tl = l.next;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t\tReturns an iterator on the elements of the list.\n\t**/\n\tpublic inline function iterator() : ListIterator<T> {\n\t\treturn new ListIterator<T>(h);\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List.\n\n\t\tThe result is enclosed in { } with the individual elements being\n\t\tseparated by a comma.\n\t**/\n\tpublic function toString() {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\ts.add(\"{\");\n\t\twhile( l != null ) {\n\t\t\tif( first )\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(\", \");\n\t\t\ts.add(Std.string(l.item));\n\t\t\tl = l.next;\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a string representation of `this` List, with `sep` separating\n\t\teach element.\n\t**/\n\tpublic function join(sep : String) {\n\t\tvar s = new StringBuf();\n\t\tvar first = true;\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tif( first )\n\t\t\t\tfirst = false;\n\t\t\telse\n\t\t\t\ts.add(sep);\n\t\t\ts.add(l.item);\n\t\t\tl = l.next;\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns a list filtered with `f`. The returned list will contain all\n\t\telements for which `f(x) == true`.\n\t**/\n\tpublic function filter( f : T -> Bool ) {\n\t\tvar l2 = new List();\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tif( f(v) )\n\t\t\t\tl2.add(v);\n\t\t}\n\t\treturn l2;\n\t}\n\n\t/**\n\t\tReturns a new list where all elements have been converted by the\n\t\tfunction `f`.\n\t**/\n\tpublic function map<X>(f : T -> X) : List<X> {\n\t\tvar b = new List();\n\t\tvar l = h;\n\t\twhile( l != null ) {\n\t\t\tvar v = l.item;\n\t\t\tl = l.next;\n\t\t\tb.add(f(v));\n\t\t}\n\t\treturn b;\n\t}\n\n}\n\n#if neko\nprivate extern class ListNode<T> extends neko.NativeArray<Dynamic> {\n\tvar item(get,set):T;\n\tvar next(get,set):ListNode<T>;\n\tprivate inline function get_item():T return this[0];\n\tprivate inline function set_item(v:T):T return this[0] = v;\n\tprivate inline function get_next():ListNode<T> return this[1];\n\tprivate inline function set_next(v:ListNode<T>):ListNode<T> return this[1] = v;\n\tinline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn untyped __dollar__array(item, next);\n\t}\n}\n#else\nprivate class ListNode<T> {\n\tpublic var item:T;\n\tpublic var next:ListNode<T>;\n\tpublic function new(item:T, next:ListNode<T>) {\n\t\tthis.item = item;\n\t\tthis.next = next;\n\t}\n\t@:extern public inline static function create<T>(item:T, next:ListNode<T>):ListNode<T> {\n\t\treturn new ListNode(item, next);\n\t}\n}\n#end\n\nprivate class ListIterator<T> {\n\tvar head:ListNode<T>;\n\n\tpublic inline function new(head:ListNode<T>) {\n\t\tthis.head = head;\n\t}\n\n\tpublic inline function hasNext():Bool {\n\t\treturn head != null;\n\t}\n\n\tpublic inline function next():T {\n\t\tvar val = head.item;\n\t\thead = head.next;\n\t\treturn val;\n\t}\n}\n","package ;\r\n\r\nimport phoenix.BitmapFont;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Texture;\r\nimport phoenix.Shader;\r\nimport phoenix.Batcher;\r\n\r\nimport luxe.resource.Resource;\r\n\r\nimport luxe.Rectangle;\r\nimport luxe.Vector;\r\nimport luxe.Screen;\r\nimport snow.Snow;\r\n\r\n@:keep\r\nclass Luxe {\r\n\r\n        /** Direct access to the core engine */\r\n    public static var core      : luxe.Engine;\r\n        /** Access to the core debug features */\r\n    public static var debug     : luxe.Debug;\r\n        /** Access to the io features */\r\n    public static var io        : luxe.IO;\r\n        /** Access to the drawing features */\r\n    public static var draw      : luxe.Draw;\r\n        /** Access to the audio features */\r\n    public static var audio     : luxe.Audio;\r\n        /** Access to the timing features */\r\n    public static var timer     : luxe.Timer;\r\n        /** Access to the global event system */\r\n    public static var events    : luxe.Events;\r\n        /** Access to the input features */\r\n    public static var input     : luxe.Input;\r\n        /** Access to the default luxe scene */\r\n    public static var scene     : luxe.Scene;\r\n        /** Access to the different utilities */\r\n    public static var utils     : luxe.utils.Utils;\r\n        /** Access to the physics bindings, if any */\r\n    public static var physics   : luxe.Physics;\r\n        /** Access to the default camera */\r\n    public static var camera    : luxe.Camera;\r\n        /** Access to the default resource manager  */\r\n    public static var resources : luxe.Resources;\r\n        /** Access to the rendering system */\r\n    public static var renderer  : phoenix.Renderer;\r\n\r\n        /** Direct access to the underlying snow app API, note that `core:luxe.Engine` is a snow app in itself. */\r\n    public static var snow (get, never) : snow.Snow;\r\n        /** The current time in seconds, highest precision from the platform. */\r\n    public static var time (get, never) : Float;\r\n        /** Access to information about the game window (sizes, cursor etc) */\r\n    public static var screen (get, never) : Screen;\r\n        /** The version of the engine  */\r\n    public static var version (get, never) : String;\r\n        /** The version + build meta information, generated at compile time from a macro (luxe.macros.BuildVersion) */\r\n    public static var build (get,never) : String;\r\n\r\n\r\n//Update frame information\r\n\r\n        /** the time the last frame took to run, `read only` */\r\n    public static var dt (get,never) : Float;\r\n        /** the start time of this frame, `read only` */\r\n    public static var frame_start (get,never) : Float;\r\n        /** the start time of the last frame, `read only` */\r\n    public static var frame_start_prev (get,never) : Float;\r\n       /** the maximum frame time, `read/write` */\r\n    public static var frame_max_delta (get,set) : Float;\r\n        /** if this is non zero, updates will be forced to this rate. `read/write` */\r\n    public static var update_rate (get,set) : Float;\r\n\r\n//Tick information\r\n\r\n        /** The time at the start of this tick */\r\n    public static var tick_start (get, never) : Float;\r\n        /** The time at the start of the previous tick */\r\n    public static var tick_start_prev (get, never) : Float;\r\n        /** The amount of time the last tick took */\r\n    public static var tick_delta (get, never) : Float;\r\n\r\n//Simulated (i.e timescaled) time\r\n\r\n        /** the scale of time, `read/write` */\r\n    public static var timescale (get,set) : Float;\r\n        /** the current simulation time, `read only` */\r\n    public static var sim_time (get,never) : Float;\r\n        /** the simulated time the last frame took to run, relative to scale, `read only` */\r\n    public static var sim_delta (get,never) : Float;\r\n        /** if this is non zero this will be passed in as delta time, `read/write` */\r\n    public static var fixed_delta (get,set) : Float;\r\n\r\n//Fixed time step options\r\n\r\n        /** set to try, to use a \"fix your timestep approach\", `read/write` */\r\n    public static var fixed_timestep (get,set) : Bool;\r\n        /** the alpha time for a render between frame updates, `read only` */\r\n    public static var fixed_alpha (get,never) : Float;\r\n        /** fixed simulation update rate, `read/write` */\r\n    public static var fixed_frame_time (get,set) : Float;\r\n\r\n        /** listen for core events */\r\n    public static function on<T>(event:luxe.Ev, handler:T->Void ) : Void {\r\n        core.emitter.on(event, handler);\r\n    }\r\n\r\n        /** stop listening for core events */\r\n    public static function off<T>(event:luxe.Ev, handler:T->Void ) : Bool {\r\n        return core.emitter.off(event, handler);\r\n    }\r\n\r\n        /** Call a function at the start of the next frame */\r\n    public static inline function next( func: Void->Void ) : Void {\r\n\r\n        Snow.next(func);\r\n\r\n    } //next\r\n\r\n        /** shutdown the engine and quit */\r\n    public static inline function shutdown() : Void {\r\n\r\n        core.shutdown();\r\n\r\n    } //shutdown\r\n\r\n        /** show/hide the debug console programmatically */\r\n    public static inline function showConsole(_show:Bool) : Void {\r\n\r\n        core.debug.visible = _show;\r\n\r\n    } //showConsole\r\n\r\n//Internal\r\n\r\n    static inline function get_snow()                       return core.app;\r\n    static inline function get_screen()                     return core.screen;\r\n    static inline function get_time()                       return core.app.time;\r\n    static inline function get_version()                    return core.version;\r\n    static inline function get_build()                      return core.build;\r\n\r\n    static inline function get_dt()                         return core.frame_delta;\r\n    static inline function get_frame_start()                return core.frame_start;\r\n    static inline function get_frame_start_prev()           return core.frame_start_prev;\r\n    static inline function get_frame_max_delta()            return core.frame_max_delta;\r\n    static inline function get_update_rate()                return core.update_rate;\r\n    static inline function get_tick_start()                 return core.tick_start;\r\n    static inline function get_tick_start_prev()            return core.tick_start_prev;\r\n    static inline function get_tick_delta()                 return core.tick_delta;\r\n    static inline function get_timescale()                  return core.timescale;\r\n    static inline function get_sim_time()                   return core.sim_time;\r\n    static inline function get_sim_delta()                  return core.sim_delta;\r\n    static inline function get_fixed_delta()                return core.fixed_delta;\r\n    static inline function get_fixed_timestep()             return core.fixed_timestep;\r\n    static inline function get_fixed_alpha()                return core.fixed_alpha;\r\n    static inline function get_fixed_frame_time()           return core.fixed_frame_time;\r\n\r\n    static inline function set_timescale(_val:Float)        return core.timescale = _val;\r\n    static inline function set_fixed_delta(_val:Float)      return core.fixed_delta = _val;\r\n    static inline function set_update_rate(_val:Float)      return core.update_rate = _val;\r\n    static inline function set_fixed_timestep(_val:Bool)    return core.fixed_timestep = _val;\r\n    static inline function set_frame_max_delta(_val:Float)  return core.frame_max_delta = _val;\r\n    static inline function set_fixed_frame_time(_val:Float) return core.fixed_frame_time = _val;\r\n\r\n} //Luxe\r\n","package luxe;\r\n\r\nimport luxe.Engine;\r\nimport luxe.Input;\r\nimport luxe.Screen;\r\nimport luxe.GameConfig;\r\n\r\n@:keep\r\n@:keepSub\r\nclass Game {\r\n\r\n    public var app : Engine;\r\n\r\n        //main entry point\r\n    #if !luxe_no_main\r\n        static function main() {\r\n\r\n            new luxe.types.user.Game();\r\n\r\n        } //main\r\n    #end\r\n\r\n    public function new() {\r\n\r\n        app = new luxe.Engine(this);\r\n        app.run();\r\n\r\n    } //new\r\n\r\n        /** Called by luxe to request config changes, override this to change the defaults.\r\n            This happens before ready, so the values are available when ready is called.\r\n            This also means that nothing is ready yet in the engine. */\r\n    public function config(_config:GameConfig) : GameConfig  { return _config; }\r\n        /** Your entry point. Called for you when you can initialize your application */\r\n    public function ready() {}\r\n        /** Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide}) */\r\n    public function update(dt:Float) {}\r\n\r\n       /** Your exit point. Called for you when you should shut down your application */\r\n   public function ondestroy() {}\r\n\r\n       /** Called when the application is about to render */\r\n   public function onprerender() {}\r\n       /** Called when the application is rendering */\r\n   public function onrender() {}\r\n       /** Called when the application is done rendering */\r\n   public function onpostrender() {}\r\n\r\n       /** Called when a named input down event occurs */\r\n   public function oninputdown(event:InputEvent) {}\r\n       /** Called when a named input up event occurs */\r\n   public function oninputup(event:InputEvent) {}\r\n\r\n       /** Called for you when a mouse button is pressed */\r\n   public function onmousedown(event:MouseEvent) {}\r\n       /** Called for you when a mouse button is released */\r\n   public function onmouseup(event:MouseEvent) {}\r\n       /** Called for you when the mouse wheel moves */\r\n   public function onmousewheel(event:MouseEvent) {}\r\n       /** Called for you when the mouse moves */\r\n   public function onmousemove(event:MouseEvent) {}\r\n\r\n       /** Called for you when a key is pressed down */\r\n   public function onkeydown(event:KeyEvent) {}\r\n       /** Called for you when a key is released */\r\n   public function onkeyup(event:KeyEvent) {}\r\n       /** Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc. */\r\n   public function ontextinput(event:TextEvent) {}\r\n\r\n       /** Called for you when a touch is first pressed, use the `touch_id` to track which */\r\n   public function ontouchdown(event:TouchEvent) {}\r\n       /** Called for you when a touch is released, use the `touch_id` to track which */\r\n   public function ontouchup(event:TouchEvent) {}\r\n       /** Called for you when a touch is moved, use the `touch_id` to track which */\r\n   public function ontouchmove(event:TouchEvent) {}\r\n\r\n       /** Called for you when a connected gamepad axis moves, use `gamepad` to determine gamepad id */\r\n   public function ongamepadaxis(event:GamepadEvent) {}\r\n       /** Called for you when a connected gamepad button is pressed, use `gamepad` to determine gamepad id */\r\n   public function ongamepaddown(event:GamepadEvent) {}\r\n       /** Called for you when a connected gamepad button is released, use `gamepad` to determine gamepad id */\r\n   public function ongamepadup(event:GamepadEvent) {}\r\n       /** Called for you when a gamepad is connected or disconnected, use `gamepad` to determine gamepad id */\r\n   public function ongamepaddevice(event:GamepadEvent) {}\r\n\r\n       /** Called for you when a window is moved, with the data containing the new x/y position */\r\n   public function onwindowmoved(event:WindowEvent) {}\r\n       /** Called for you when a window is resized by the user, with the data containing the new x/y size */\r\n   public function onwindowresized(event:WindowEvent) {}\r\n       /** Called for you when a window is resized by the system or code or the user, with the data containing the new x/y size */\r\n   public function onwindowsized(event:WindowEvent) {}\r\n       /** Called for you when a window is minimized. */\r\n   public function onwindowminimized(event:WindowEvent) {}\r\n       /** Called for you when a window is restored. */\r\n   public function onwindowrestored(event:WindowEvent) {}\r\n\r\n        /** very low level event handler from snow core. Often handled by the subsystems and by luxe, so check there first! */\r\n    @:noCompletion public function onevent(event:snow.types.Types.SystemEvent) {}\r\n\r\n} //Game\r\n","import luxe.GameConfig;\r\nimport luxe.Input;\r\nimport luxe.Color;\r\nimport luxe.Vector;\r\nimport luxe.Sprite;\r\nimport phoenix.Batcher;\r\n\r\nimport luxe.tween.Actuate;\r\n\r\nimport Tools.MyText;\r\n\r\n\r\n// TODO\r\n// * Score !\r\n\r\nclass Main extends luxe.Game\r\n{    \r\n    static public var scene:Ui.Panel;\r\n    static public var menu:Menu;\r\n    // var game:Game;\r\n\r\n    // JUST TO TRIGGER OPENFL\r\n    // public function new()\r\n    // {\r\n    //     super();\r\n    // }\r\n\r\n    override function config(config:GameConfig)\r\n    {\r\n        config.window.title = 'luxe game';\r\n        config.window.width = Math.floor(w);\r\n        config.window.height = Math.floor(h);\r\n        config.window.fullscreen = false;\r\n        config.render.antialiasing = 8;\r\n\r\n        config.preload.textures.push({ id:'assets/arrow.png' });\r\n        config.preload.textures.push({ id:'assets/box_empty.png' });\r\n        config.preload.textures.push({ id:'assets/box_blue.png' });\r\n        config.preload.textures.push({ id:'assets/box_yellow.png' });\r\n        config.preload.textures.push({ id:'assets/box_green.png' });\r\n        config.preload.textures.push({ id:'assets/box_red.png' });\r\n        config.preload.textures.push({ id:'assets/pattern.png' });\r\n        config.preload.textures.push({ id:'assets/plus_default.png', load_premultiply_alpha:false });  // false is default, can be deleted\r\n        config.preload.textures.push({ id:'assets/plus_selected.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/minus_default.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/minus_selected.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/equal_default.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/equal_selected.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/menu_story.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/menu_challenge.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/menu_custom.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/menu_objectives.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/skill_graal.png', load_premultiply_alpha:false });\r\n        config.preload.textures.push({ id:'assets/skill_locked.png', load_premultiply_alpha:false });\r\n        config.preload.fonts.push({ id:'assets/font.fnt' });\r\n\r\n        return config;\r\n    }\r\n\r\n    // Game design resolution\r\n    public static var w: Int = Math.floor(640 * 0.8);\r\n    public static var h: Int = Math.floor(1136 * 0.8);\r\n\r\n    override function ready()\r\n    {\r\n        Luxe.camera.size = new Vector(640, 1136);\r\n\r\n        // BACKGROUND COLOR\r\n        Luxe.renderer.clear_color = new Color().rgb(0xf0e2ce);\r\n        Luxe.renderer.batcher.layer = 0;\r\n\r\n        menu = new Menu();\r\n        // new ObjectivePanel();\r\n    }\r\n\r\n    override function onkeydown(event:KeyEvent)\r\n    {\r\n        Luxe.events.fire('key down', event);\r\n    }\r\n\r\n    override function onmouseup(event:MouseEvent)\r\n    {\r\n        Luxe.events.fire('mouse up', event);\r\n    }  \r\n\r\n    override function update(delta:Float)\r\n    {\r\n        Luxe.events.fire('update', delta);\r\n    }\r\n\r\n    // public static inline function main()\r\n    // {\r\n    //     new Main();\r\n    // }\r\n}\r\n\r\n\r\n\r\n","import luxe.Input;\r\nimport luxe.Sprite;\r\nimport luxe.Color;\r\nimport luxe.Vector;\r\nimport luxe.tween.Actuate;\r\n\r\nimport Ui.Panel;\r\n\r\n\r\ntypedef Button = {name:String, sprite:Sprite, panel:Class<Panel>};\r\n\r\n\r\nclass Menu\r\n{\r\n    var patterns:Array<Sprite> = new Array();\r\n    var ribbons:Array<phoenix.geometry.Geometry> = new Array();\r\n    var ribbonWidth = 150;\r\n    var buttons:Array<Button> = new Array();\r\n\r\n    public function new()\r\n    {\r\n        // PATTERN GENERATION\r\n        var PATTERN_SIZE = 38;\r\n        var posy = 0;\r\n        for(y in 0...Std.int(Luxe.camera.size.y))\r\n        {\r\n            if(y%PATTERN_SIZE == 0)\r\n            {\r\n                posy++;\r\n\r\n                for(x in 0...Std.int(Luxe.camera.size.x))\r\n                {\r\n                    if(x%PATTERN_SIZE == 0)\r\n                    {\r\n                        var newx = x;\r\n                        if(posy%2 == 0) newx += Std.int(PATTERN_SIZE/2);\r\n\r\n                        patterns.push(new Sprite({\r\n                            texture : Luxe.resources.texture('assets/pattern.png'),\r\n                            pos: new Vector(newx, y),\r\n                            depth: 0,\r\n                        }));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // BUILD BLUE RIBBONS\r\n        function makeRibbon(x:Int)\r\n        {\r\n            // var height = 260;\r\n            var height = Luxe.camera.size.y;\r\n            var edgeHeight = 70;\r\n            var ribbon = Luxe.draw.poly({\r\n                solid : true,\r\n                close : true,\r\n                depth : 2,\r\n                color: new Color().rgb(0x22a6f2),\r\n                points : [\r\n                    new Vector(0, 0),\r\n                    new Vector(0 + ribbonWidth, 0),\r\n                    new Vector(0 + ribbonWidth, height),\r\n                    new Vector(0 + ribbonWidth/2, height + edgeHeight),\r\n                    new Vector(0, height),\r\n                ]\r\n            });\r\n            ribbon.transform.pos.x = x;\r\n            ribbon.transform.pos.y = 0;\r\n            ribbon.transform.origin.y = Luxe.camera.size.y;\r\n            // y should be != 0 because tweening needs a little margin for the bounce\r\n            Actuate.tween(ribbon.transform.pos, 1, {y:180}).ease(luxe.tween.easing.Elastic.easeOut);\r\n\r\n            return ribbon;\r\n        }\r\n\r\n        ribbons.push(makeRibbon(-ribbonWidth));\r\n        ribbons.push(makeRibbon(0));\r\n        ribbons.push(makeRibbon(ribbonWidth));\r\n        ribbons.push(makeRibbon(ribbonWidth * 2));\r\n        ribbons.push(makeRibbon(ribbonWidth * 3));\r\n        ribbons.push(makeRibbon(ribbonWidth * 4));\r\n\r\n        // BUILD GRID\r\n        var grid : Array<Array<Int>> = [ [], [] ];\r\n\r\n        menuMake();\r\n        menuOpen();\r\n    }\r\n\r\n    var eventMouse:String;\r\n    var eventUpdate:String;\r\n    function listen()\r\n    {\r\n        trace(\"listen\");\r\n        eventMouse = Luxe.events.listen( 'mouse up' , onMouseUp);\r\n        eventUpdate = Luxe.events.listen( 'update' , onUpdate);\r\n    }\r\n\r\n    function unlisten()\r\n    {\r\n        trace(\"unlisten\");\r\n        Luxe.events.unlisten(eventMouse);\r\n        Luxe.events.unlisten(eventUpdate);\r\n    }\r\n\r\n    function menuMake()\r\n    {\r\n        var y = Luxe.camera.center.y - 150;\r\n        var x = -250;\r\n\r\n        buttons = [\r\n            {name: 'story', sprite:null, panel:SelectionPanel},\r\n            {name: 'challenge', sprite:null, panel:null},\r\n            {name: 'custom', sprite:null, panel:null},\r\n            {name: 'objectives', sprite:null, panel:ObjectivePanel},\r\n        ];\r\n\r\n        for(button in buttons)\r\n        {\r\n            var sprite = new Sprite({\r\n                texture : Luxe.resources.texture('assets/menu_${button.name}.png'),\r\n                pos: new Vector(x, y),\r\n                depth: 1,\r\n            });\r\n\r\n            y+= 175;\r\n\r\n            button.sprite = sprite;\r\n        }\r\n    }\r\n\r\n    var menuDelay:Float;\r\n    function menuOpen()\r\n    {\r\n        for(button in buttons)\r\n        {\r\n            menuDelay = 0;\r\n            Actuate.tween(button.sprite.pos, 0.6, {x:Luxe.camera.center.x}).delay(menuDelay);\r\n            menuDelay += 0.2;\r\n        }\r\n\r\n        listen();\r\n    }\r\n\r\n    function menuClose()\r\n    {\r\n        menuDelay = 0;\r\n        for(button in buttons)\r\n        {\r\n            Actuate.tween(button.sprite.pos, 0.6, {x:-250}).delay(menuDelay);\r\n            menuDelay += 0.2;\r\n        }\r\n\r\n        unlisten();\r\n    }\r\n\r\n    public function goToScene(?newScene:Class<Panel>)\r\n    {\r\n        trace(\"gotoscene\");\r\n        var main_menu = null;\r\n\r\n        // SWITCh FROM ANOTHER SCENE\r\n        if(Main.scene != null) Main.scene.close();\r\n\r\n        switch(newScene)\r\n        {\r\n            case GamePanel:\r\n                ribbonsGame();\r\n                menuClose();\r\n                Main.scene = Type.createInstance(newScene, []);\r\n            case null:\r\n                ribbonsUp();\r\n                menuOpen();\r\n                Main.scene = null;\r\n            case _:\r\n                ribbonsDown();\r\n                menuClose();\r\n                Main.scene = Type.createInstance(newScene, []);\r\n        }\r\n    }\r\n\r\n\r\n    var k = 0;\r\n    public function onMouseUp(mouse:MouseEvent)\r\n    {\r\n        k++;\r\n        trace(\"mouseevent \" + mouse.button);\r\n        for(button in buttons)\r\n        {\r\n            var mousePos = Luxe.camera.screen_point_to_world(mouse.pos);\r\n            if(button.sprite.point_inside_AABB(mousePos))\r\n            {\r\n                if(button.sprite.texture.id == 'assets/menu_' + button.name + '.png')\r\n                {\r\n                    Actuate.timer(menuDelay).onComplete(function()\r\n                    {\r\n                        goToScene(button.panel);\r\n                    });\r\n                }\r\n\r\n                break;\r\n\r\n                // GREENIFY RIBBONS\r\n                // function greenify(color:Int)\r\n                // {\r\n                //     for(ribbon in ribbons)\r\n                //         Actuate.update( blah, 1, [0], [10] );\r\n                // }\r\n\r\n                // Actuate.update(greenify, 1, [0], [10]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public function ribbonsGame()\r\n    {\r\n        for(ribbon in ribbons)\r\n            Actuate.tween(ribbon.transform.pos, 1, {y:60}).ease(luxe.tween.easing.Cubic.easeInOut);\r\n    }\r\n\r\n    public function ribbonsDown()\r\n    {\r\n        for(ribbon in ribbons)\r\n            Actuate.tween(ribbon.transform.pos, 1, {y:Luxe.camera.size.y}).ease(luxe.tween.easing.Cubic.easeInOut);\r\n    }\r\n\r\n    public function ribbonsUp()\r\n    {\r\n        for(ribbon in ribbons)\r\n            Actuate.tween(ribbon.transform.pos, 1, {y:180}).ease(luxe.tween.easing.Elastic.easeOut);\r\n    }\r\n\r\n    function onUpdate(delta:Float)\r\n    {\r\n        // RIBBONS ANIMATIONS\r\n        for(ribbon in ribbons)\r\n        {\r\n            ribbon.transform.pos.x += 0.1;\r\n        }\r\n\r\n        var lastRibbon = ribbons[ribbons.length - 1];\r\n        if(lastRibbon.transform.pos.x > Luxe.camera.size.x)\r\n        {\r\n            lastRibbon.transform.pos.x = ribbons[0].transform.pos.x - ribbonWidth;\r\n            ribbons.insert(0, ribbons.pop());\r\n        }\r\n    }\r\n}","import luxe.Vector;\r\nimport luxe.Color;\r\nimport luxe.Text;\r\nimport phoenix.Batcher;\r\n\r\nimport Tools.MyText;\r\nimport Ui.Panel;\r\n\r\n\r\nclass ObjectivePanel extends Panel\r\n{\r\n    public function new()\r\n    {\r\n        super();\r\n\r\n        // BACKBUTTON\r\n        addBackButton();\r\n\r\n        // CONTENT\r\n        var yStart = 130;\r\n        var y = yStart;\r\n        var x = 60;\r\n        for(category in Objectives.categories)\r\n        {\r\n            title(category.title, new Vector(100, y));\r\n            dot(x, y);\r\n            y += 80;\r\n\r\n            for(obj in category.objs)\r\n            {\r\n                trace(obj);\r\n                switch (obj) {\r\n                    case Race(number):\r\n                        objective('$number operations', new Vector(160, y));\r\n                        y += 60;\r\n                    case Countdown(number, time):\r\n                        objective('$number operations under ${time}s', new Vector(160, y));\r\n                        y += 60;\r\n                    case Combo(number):\r\n                        objective('$number w/o any error', new Vector(160, y));\r\n                        y += 60;\r\n                }\r\n            }\r\n            y += 80;\r\n        }\r\n\r\n        line(x, yStart, y - yStart);\r\n\r\n        y += 10;\r\n        line(x, y, 15);\r\n        y += 10 + 15;\r\n        line(x, y, 15);\r\n    }\r\n\r\n    function line(x:Float, y:Float, h:Float)\r\n    {\r\n        Luxe.draw.box({\r\n            x : x - 7,\r\n            y : y,\r\n            w : 15,\r\n            h : h,\r\n            color : new Color().rgb(0x0d5c89),\r\n            batcher : batcher,\r\n            depth : 4,\r\n        });\r\n    }\r\n\r\n    function dot(x:Float, y:Float)\r\n    {\r\n        Luxe.draw.circle({\r\n            x : x,\r\n            y : y,\r\n            r : 20,\r\n            color : new Color().rgb(0x0d5c89),\r\n            batcher : batcher,\r\n            depth : 4,\r\n        });\r\n    }\r\n\r\n    function title(text:String, pos:Vector)\r\n    {\r\n        var title = new MyText(text, batcher);\r\n        title.core.align = TextAlign.left;\r\n        title.core.pos = pos;\r\n        title.core.color = new Color().rgb(0x0d5c89);\r\n        title.core.point_size = 36;\r\n\r\n        title.makeShadow();\r\n\r\n        return title;\r\n    }\r\n\r\n    function objective(text:String, pos:Vector)\r\n    {\r\n        var title = new MyText(text, batcher);\r\n        title.core.align = TextAlign.left;\r\n        title.core.pos = pos;\r\n        title.core.color = new Color().rgb(0x0d5c89);\r\n        title.core.point_size = 30;\r\n\r\n        title.makeShadow();\r\n\r\n        return title;\r\n    }\r\n}\r\n\r\n\r\ntypedef Category = { title:String, objs:Array<Objective> };\r\n\r\nclass Objectives\r\n{\r\n    static public var categories:Array<Category> = [\r\n        {\r\n            title : \"SIMPLE ADDITIONS\",\r\n            objs : [\r\n                Race(100),\r\n                Countdown(3, 5),\r\n                Combo(10)\r\n            ]\r\n        },\r\n        {\r\n            title : \"SIMPLE SUBSTRACTIONS\",\r\n            objs : [\r\n                Race(100),\r\n                Countdown(3, 5),\r\n                Combo(10)\r\n            ]\r\n        },\r\n    ];\r\n}\r\n\r\nenum Objective\r\n{\r\n    Race(number:Int);\r\n    Countdown(number:Int, time:Float);\r\n    Combo(number:Int);\r\n}\r\n\r\n","/****\n* Copyright (c) 2013 Jason O'Neil\n* \n* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n* \n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n* \n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n* \n****/\n\nclass Random\n{\n\t/** Return a random boolean value (true or false) */\n\tpublic static inline function bool():Bool\n\t{\n\t\treturn Math.random() < 0.5;\n\t}\n\n\t/** Return a random integer between 'from' and 'to', inclusive. */\n\tpublic static inline function int(from:Int, to:Int):Int\n\t{\n\t\treturn from + Math.floor(((to - from + 1) * Math.random()));\n\t}\n\n\t/** Return a random float between 'from' and 'to', inclusive. */\n\tpublic static inline function float(from:Float, to:Float):Float\n\t{\n\t\treturn from + ((to - from) * Math.random());\n\t}\n\n\t/** Return a random string of a certain length.  You can optionally specify \n\t    which characters to use, otherwise the default is (a-zA-Z0-9) */\n\tpublic static function string(length:Int, ?charactersToUse = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"):String\n\t{\n\t\tvar str = \"\";\n\t\tfor (i in 0...length)\n\t\t{\n\t\t\tstr += charactersToUse.charAt(Random.int(0, charactersToUse.length - 1));\n\t\t}\n\t\treturn str;\n\t}\n\n\t/** Return a random date & time from within a range.  The behaviour is unspecified if either `earliest` or `latest` is null.  Earliest and Latest are inclusive */\n\tpublic static inline function date(earliest:Date, latest:Date):Date\n\t{\n\t\treturn Date.fromTime( float(earliest.getTime(), latest.getTime()) );\n\t}\n\n\t/** Return a random item from an array.  Will return null if the array is null or empty. */\n\tpublic static inline function fromArray<T>(arr:Array<T>):Null<T>\n\t{\n\t\treturn (arr != null && arr.length > 0) ? arr[int(0, arr.length - 1)] : null;\n\t}\n\n\t/** Shuffle an Array.  This operation affects the array in place, and returns that array.\n\t\tThe shuffle algorithm used is a variation of the [Fisher Yates Shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle) */\n\tpublic static function shuffle<T>(arr:Array<T>):Array<T>\n\t{\n\t\tif (arr!=null) {\n\t\t\tfor (i in 0...arr.length) {\n\t\t\t\tvar j = int(0, arr.length - 1);\n\t\t\t\tvar a = arr[i];\n\t\t\t\tvar b = arr[j];\n\t\t\t\tarr[i] = b;\n\t\t\t\tarr[j] = a;\n\t\t\t}\n\t\t}\n\t\treturn arr;\n\t}\n\n\t/** Return a random item from an iterable.  Will return null if the iterable is null or empty. */\n\tpublic static inline function fromIterable<T>(it:Iterable<T>):Null<T>\n\t{\n\t\treturn (it != null) ? fromArray(Lambda.array(it)) : null;\n\t}\n\n\t/** Return a random constructor from an Enum.  Will return null if the enum has no constructors. Only works with enum constructors that take no parameters. */\n\tpublic static inline function enumConstructor<T>(e:Enum<T>):Null<T>\n\t{\n\t\treturn (e!=null) ? fromArray(Type.allEnums(e)) : null;\n\t}\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n@:coreApi class Reflect {\n\n\t@:pure\n\tpublic inline static function hasField( o : Dynamic, field : String ) : Bool {\n\t\treturn untyped __js__('Object').prototype.hasOwnProperty.call(o, field);\n\t}\n\n\tpublic static function field( o : Dynamic, field : String ) : Dynamic {\n\t\ttry return untyped o[field] catch( e : Dynamic ) return null;\n\t}\n\n\tpublic inline static function setField( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\to[field] = value;\n\t}\n\n\tpublic static function getProperty( o : Dynamic, field : String ) : Dynamic untyped {\n\t\tvar tmp;\n\t\treturn if( o == null ) __define_feature__(\"Reflect.getProperty\",null) else if( o.__properties__ && (tmp=o.__properties__[\"get_\"+field]) ) o[tmp]() else o[field];\n\t}\n\n\tpublic static function setProperty( o : Dynamic, field : String, value : Dynamic ) : Void untyped {\n\t\tvar tmp;\n\t\tif( o.__properties__ && (tmp=o.__properties__[\"set_\"+field]) ) o[tmp](value) else o[field] = __define_feature__(\"Reflect.setProperty\",value);\n\t}\n\n\tpublic inline static function callMethod( o : Dynamic, func : haxe.Constraints.Function, args : Array<Dynamic> ) : Dynamic untyped {\n\t\treturn func.apply(o,args);\n\t}\n\n\tpublic static function fields( o : Dynamic ) : Array<String> {\n\t\tvar a = [];\n\t\tif (o != null) untyped {\n\t\t\tvar hasOwnProperty = __js__('Object').prototype.hasOwnProperty;\n\t\t\t__js__(\"for( var f in o ) {\");\n\t\t\tif( f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o, f) ) a.push(f);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a;\n\t}\n\n\tpublic static function isFunction( f : Dynamic ) : Bool untyped {\n\t\treturn __js__(\"typeof(f)\") == \"function\" && !(js.Boot.isClass(f) || js.Boot.isEnum(f));\n\t}\n\n\tpublic static function compare<T>( a : T, b : T ) : Int {\n\t\treturn ( a == b ) ? 0 : (((cast a) > (cast b)) ? 1 : -1);\n\t}\n\n\tpublic static function compareMethods( f1 : Dynamic, f2 : Dynamic ) : Bool {\n\t\tif( f1 == f2 )\n\t\t\treturn true;\n\t\tif( !isFunction(f1) || !isFunction(f2) )\n\t\t\treturn false;\n\t\treturn f1.scope == f2.scope && f1.method == f2.method && f1.method != null;\n\t}\n\n\tpublic static function isObject( v : Dynamic ) : Bool untyped {\n\t\tif( v == null )\n\t\t\treturn false;\n\t\tvar t = __js__(\"typeof(v)\");\n\t\treturn (t == \"string\" || (t == \"object\" && v.__enum__ == null)) || (t == \"function\" && (js.Boot.isClass(v) || js.Boot.isEnum(v)) != null);\n\t}\n\n\tpublic static function isEnumValue( v : Dynamic ) : Bool {\n\t\treturn v != null && v.__enum__ != null;\n\t}\n\n\tpublic static function deleteField( o : Dynamic, field : String ) : Bool untyped {\n\t\tif( !hasField(o,field) ) return false;\n\t\t__js__(\"delete\")(o[field]);\n\t\treturn true;\n\t}\n\n\tpublic static function copy<T>( o : T ) : T {\n\t\tvar o2 : Dynamic = {};\n\t\tfor( f in Reflect.fields(o) )\n\t\t\tReflect.setField(o2,f,Reflect.field(o,f));\n\t\treturn o2;\n\t}\n\n\t@:overload(function( f : Array<Dynamic> -> Void ) : Dynamic {})\n\tpublic static function makeVarArgs( f : Array<Dynamic> -> Dynamic ) : Dynamic {\n\t\treturn function() {\n\t\t\tvar a = untyped Array.prototype.slice.call(__js__(\"arguments\"));\n\t\t\treturn f(a);\n\t\t};\n\t}\n\n}\n","import luxe.Vector;\r\nimport luxe.Sprite;\r\n\r\nimport Ui.Panel;\r\nimport Ui.MyButton;\r\n\r\n\r\nclass SelectionPanel extends Panel\r\n{\r\n    public function new()\r\n    {\r\n        super();\r\n\r\n        addBackButton();\r\n        var startButton = new MyButton(60, 600, 'arrow.png', batcher);\r\n        startButton.onMouseUp = function() { Main.menu.goToScene(GamePanel); };\r\n\r\n        var skillLocked = {name:\"Locked\", description:\"blabla\", imagePath:\"assets/skill_locked.png\"}\r\n        var skillGraal = {name:\"Graal\", description:\"blabla\", imagePath:\"assets/skill_graal.png\"}\r\n\r\n        // PLACING BUTTONS\r\n        var y = 200;\r\n        var xMargin = 30;\r\n        for(i in 1...5)\r\n        {\r\n            var x = i * (92 + 20) + xMargin;\r\n\r\n            if(i == 1) new SkillView(x, y, skillGraal, batcher);\r\n            else new SkillView(x, y, skillLocked, batcher);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass SkillView\r\n{\r\n    public function new(x:Int, y:Int, data:SkillData, batcher)\r\n    {\r\n        new Sprite({\r\n            texture : Luxe.resources.texture(data.imagePath),\r\n            pos : new Vector(x, y),\r\n            batcher : batcher,\r\n        });\r\n    }\r\n}\r\n\r\ntypedef SkillData = {name:String, description:String, imagePath:String};","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\nimport js.Boot;\n\n@:keepInit\n@:coreApi class Std {\n\n\tpublic static inline function is( v : Dynamic, t : Dynamic ) : Bool {\n\t\treturn untyped js.Boot.__instanceof(v,t);\n\t}\n\n\tpublic static inline function instance<T:{},S:T>( value : T, c : Class<S> ) : S {\n\t\treturn untyped __instanceof__(value, c) ? cast value : null;\n\t}\n\n\t@:pure\n\tpublic static function string( s : Dynamic ) : String {\n\t\treturn untyped js.Boot.__string_rec(s,\"\");\n\t}\n\n\tpublic static inline function int( x : Float ) : Int {\n\t\treturn (cast x) | 0;\n\t}\n\n\t@:pure\n\tpublic static function parseInt( x : String ) : Null<Int> {\n\t\tvar v = untyped __js__(\"parseInt\")(x, 10);\n\t\t// parse again if hexadecimal\n\t\tif( v == 0 && (x.charCodeAt(1) == 'x'.code || x.charCodeAt(1) == 'X'.code) )\n\t\t\tv = untyped __js__(\"parseInt\")(x);\n\t\tif( untyped __js__(\"isNaN\")(v) )\n\t\t\treturn null;\n\t\treturn cast v;\n\t}\n\n\tpublic static inline function parseFloat( x : String ) : Float {\n\t\treturn untyped __js__(\"parseFloat\")(x);\n\t}\n\n\tpublic static function random( x : Int ) : Int {\n\t\treturn x <= 0 ? 0 : Math.floor(Math.random()*x);\n\t}\n\n\tstatic function __init__() : Void untyped {\n\t\t__feature__(\"js.Boot.getClass\",String.prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"String\"] = String,String));\n\t\t__feature__(\"js.Boot.isClass\",String.__name__ = __feature__(\"Type.getClassName\",[\"String\"],true));\n\t\t__feature__(\"Type.resolveClass\",$hxClasses[\"Array\"] = Array);\n\t\t__feature__(\"js.Boot.isClass\",Array.__name__ = __feature__(\"Type.getClassName\",[\"Array\"],true));\n\t\t__feature__(\"Date.*\", {\n\t\t\t__feature__(\"js.Boot.getClass\",__js__('Date').prototype.__class__ = __feature__(\"Type.resolveClass\",$hxClasses[\"Date\"] = __js__('Date'),__js__('Date')));\n\t\t\t__feature__(\"js.Boot.isClass\",__js__('Date').__name__ = [\"Date\"]);\n\t\t});\n\t\t__feature__(\"Int.*\",{\n\t\t\tvar Int = __feature__(\"Type.resolveClass\", $hxClasses[\"Int\"] = { __name__ : [\"Int\"] }, { __name__ : [\"Int\"] });\n\t\t});\n\t\t__feature__(\"Dynamic.*\",{\n\t\t\tvar Dynamic = __feature__(\"Type.resolveClass\", $hxClasses[\"Dynamic\"] = { __name__ : [\"Dynamic\"] }, { __name__ : [\"Dynamic\"] });\n\t\t});\n\t\t__feature__(\"Float.*\",{\n\t\t\tvar Float = __feature__(\"Type.resolveClass\", $hxClasses[\"Float\"] = __js__(\"Number\"), __js__(\"Number\"));\n\t\t\tFloat.__name__ = [\"Float\"];\n\t\t});\n\t\t__feature__(\"Bool.*\",{\n\t\t\tvar Bool = __feature__(\"Type.resolveEnum\",$hxClasses[\"Bool\"] = __js__(\"Boolean\"), __js__(\"Boolean\"));\n\t\t\tBool.__ename__ = [\"Bool\"];\n\t\t});\n\t\t__feature__(\"Class.*\",{\n\t\t\tvar Class = __feature__(\"Type.resolveClass\", $hxClasses[\"Class\"] = { __name__ : [\"Class\"] }, { __name__ : [\"Class\"] });\n\t\t});\n\t\t__feature__(\"Enum.*\",{\n\t\t\tvar Enum = {};\n\t\t});\n\t\t__feature__(\"Void.*\",{\n\t\t\tvar Void = __feature__(\"Type.resolveEnum\", $hxClasses[\"Void\"] = { __ename__ : [\"Void\"] }, { __ename__ : [\"Void\"] });\n\t\t});\n\n#if (js_es < 5)\n\t\t__feature__(\"Array.map\",\n\t\t\tif( Array.prototype.map == null )\n\t\t\t\tArray.prototype.map = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length )\n\t\t\t\t\t\ta[i] = f(__this__[i]);\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n\t\t__feature__(\"Array.filter\",\n\t\t\tif( Array.prototype.filter == null )\n\t\t\t\tArray.prototype.filter = function(f) {\n\t\t\t\t\tvar a = [];\n\t\t\t\t\tfor( i in 0...__this__.length ) {\n\t\t\t\t\t\tvar e = __this__[i];\n\t\t\t\t\t\tif( f(e) ) a.push(e);\n\t\t\t\t\t}\n\t\t\t\t\treturn a;\n\t\t\t\t}\n\t\t);\n#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tA String buffer is an efficient way to build a big string by appending small\n\telements together.\n\n\tIts cross-platform implementation uses String concatenation internally, but\n\tStringBuf may be optimized for different targets.\n\n\tUnlike String, an instance of StringBuf is not immutable in the sense that\n\tit can be passed as argument to functions which modify it by appending more\n\tvalues. However, the internal buffer cannot be modified.\n**/\nclass StringBuf {\n\n\tvar b:String;\n\n\t/**\n\t\tThe length of `this` StringBuf in characters.\n\t**/\n\tpublic var length(get,never) : Int;\n\n\t/**\n\t\tCreates a new StringBuf instance.\n\n\t\tThis may involve initialization of the internal buffer.\n\t**/\n\tpublic inline function new() {\n\t\tb = \"\";\n\t}\n\n\tinline function get_length() : Int {\n\t\treturn b.length;\n\t}\n\n\t/**\n\t\tAppends the representation of `x` to `this` StringBuf.\n\n\t\tThe exact representation of `x` may vary per platform. To get more\n\t\tconsistent behavior, this function should be called with\n\t\tStd.string(x).\n\n\t\tIf `x` is null, the String \"null\" is appended.\n\t**/\n\tpublic inline function add<T>( x : T ) : Void {\n\t\tb += x;\n\t}\n\n\t/**\n\t\tAppends the character identified by `c` to `this` StringBuf.\n\n\t\tIf `c` is negative or has another invalid value, the result is\n\t\tunspecified.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\tb += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tAppends a substring of `s` to `this` StringBuf.\n\n\t\tThis function expects `pos` and `len` to describe a valid substring of\n\t\t`s`, or else the result is unspecified. To get more robust behavior,\n\t\t`this.add(s.substr(pos,len))` can be used instead.\n\n\t\tIf `s` or `pos` are null, the result is unspecified.\n\n\t\tIf `len` is omitted or null, the substring ranges from `pos` to the end\n\t\tof `s`.\n\t**/\n\tpublic inline function addSub( s : String, pos : Int, ?len : Int) : Void {\n\t\tb += (len == null ? s.substr(pos) : s.substr(pos, len));\n\t}\n\n\t/**\n\t\tReturns the content of `this` StringBuf as String.\n\n\t\tThe buffer is not emptied by this operation.\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn b;\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n/**\n\tThis class provides advanced methods on Strings. It is ideally used with\n\t`using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)\n\tto the `String` class.\n\n\tIf the first argument to any of the methods is null, the result is\n\tunspecified.\n**/\n#if cpp\nusing cpp.NativeString;\n#end\nclass StringTools {\n\t/**\n\t\tEncode an URL by using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua) inline #end public static function urlEncode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"encodeURIComponent\"](s);\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlEncode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped encodeURIComponent(s);\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLEncode();\n\t\t#elseif java\n\t\t\treturn postProcessUrlEncode(java.net.URLEncoder.encode(s, \"UTF-8\"));\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.EscapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.quote(s, \"\");\n\t\t#elseif hl\n\t\t\tvar len = 0;\n\t\t\tvar b = @:privateAccess s.bytes.urlEncode(len);\n\t\t\treturn @:privateAccess String.__alloc__(b,len);\n\t\t#elseif lua\n\t\t\ts = lua.NativeStringTools.gsub(s, \"\\n\", \"\\r\\n\");\n\t\t\ts = lua.NativeStringTools.gsub(s, \"([^%w %-%_%.%~])\", function (c) {\n\t\t\t\treturn lua.NativeStringTools.format(\"%%%02X\", lua.NativeStringTools.byte(c) + '');\n\t\t\t});\n\t\t\ts = lua.NativeStringTools.gsub(s, \" \", \"+\");\n\t\t\treturn s;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n#if java\n\tprivate static function postProcessUrlEncode( s : String ) : String {\n\t\tvar ret = new StringBuf();\n\t\tvar i = 0,\n\t\t    len = s.length;\n\t\twhile (i < len) {\n\t\t\tswitch(_charAt(s, i++)) {\n\t\t\tcase '+'.code:\n\t\t\t\tret.add('%20');\n\t\t\tcase '%'.code if (i <= len - 2):\n\t\t\t\tvar c1 = _charAt(s, i++),\n\t\t\t\t    c2 = _charAt(s, i++);\n\t\t\t\tswitch[c1, c2] {\n\t\t\t\tcase ['2'.code, '1'.code]:\n\t\t\t\t\tret.addChar('!'.code);\n\t\t\t\tcase ['2'.code, '7'.code]:\n\t\t\t\t\tret.addChar('\\''.code);\n\t\t\t\tcase ['2'.code, '8'.code]:\n\t\t\t\t\tret.addChar('('.code);\n\t\t\t\tcase ['2'.code, '9'.code]:\n\t\t\t\t\tret.addChar(')'.code);\n\t\t\t\tcase ['7'.code, 'E'.code] | ['7'.code, 'e'.code]:\n\t\t\t\t\tret.addChar('~'.code);\n\t\t\t\tcase _:\n\t\t\t\t\tret.addChar('%'.code);\n\t\t\t\t\tret.addChar(cast c1);\n\t\t\t\t\tret.addChar(cast c2);\n\t\t\t\t}\n\t\t\tcase chr:\n\t\t\t\tret.addChar(cast chr);\n\t\t\t}\n\t\t}\n\t\treturn ret.toString();\n\t}\n#end\n\n\t/**\n\t\tDecode an URL using the standard format.\n\t**/\n\t#if (!java && !cpp && !lua) inline #end public static function urlDecode( s : String ) : String {\n\t\t#if flash\n\t\t\treturn untyped __global__[\"decodeURIComponent\"](s.split(\"+\").join(\" \"));\n\t\t#elseif neko\n\t\t\treturn untyped new String(_urlDecode(s.__s));\n\t\t#elseif js\n\t\t\treturn untyped decodeURIComponent(s.split(\"+\").join(\" \"));\n\t\t#elseif cpp\n\t\t\treturn untyped s.__URLDecode();\n\t\t#elseif java\n\t\t\ttry\n\t\t\t\treturn untyped __java__(\"java.net.URLDecoder.decode(s, \\\"UTF-8\\\")\")\n\t\t\tcatch (e:Dynamic) throw e;\n\t\t#elseif cs\n\t\t\treturn untyped cs.system.Uri.UnescapeDataString(s);\n\t\t#elseif python\n\t\t\treturn python.lib.urllib.Parse.unquote(s);\n\t\t#elseif hl\n\t\t\tvar len = 0;\n\t\t\tvar b = @:privateAccess s.bytes.urlDecode(len);\n\t\t\treturn @:privateAccess String.__alloc__(b,len);\n\t\t#elseif lua\n\t\t\ts = lua.NativeStringTools.gsub (s, \"+\", \" \");\n\t\t\ts = lua.NativeStringTools.gsub (s, \"%%(%x%x)\",\n\t\t\t\tfunction(h) {return lua.NativeStringTools.char(lua.Lua.tonumber(h,16));});\n\t\t\ts = lua.NativeStringTools.gsub (s, \"\\r\\n\", \"\\n\");\n\t\t\treturn s;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n\t/**\n\t\tEscapes HTML special characters of the string `s`.\n\n\t\tThe following replacements are made:\n\n\t\t- `&` becomes `&amp`;\n\t\t- `<` becomes `&lt`;\n\t\t- `>` becomes `&gt`;\n\n\t\tIf `quotes` is true, the following characters are also replaced:\n\n\t\t- `\"` becomes `&quot`;\n\t\t- `'` becomes `&#039`;\n\t**/\n\tpublic static function htmlEscape( s : String, ?quotes : Bool ) : String {\n\t\ts = s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t\treturn quotes ? s.split('\"').join(\"&quot;\").split(\"'\").join(\"&#039;\") : s;\n\t}\n\n\t/**\n\t\tUnescapes HTML special characters of the string `s`.\n\n\t\tThis is the inverse operation to htmlEscape, i.e. the following always\n\t\tholds: `htmlUnescape(htmlEscape(s)) == s`\n\n\t\tThe replacements follow:\n\n\t\t- `&amp;` becomes `&`\n\t\t- `&lt;` becomes `<`\n\t\t- `&gt;` becomes `>`\n\t\t- `&quot;` becomes `\"`\n\t\t- `&#039;` becomes `'`\n\t**/\n\tpublic static function htmlUnescape( s : String ) : String {\n\t\treturn s.split(\"&gt;\").join(\">\").split(\"&lt;\").join(\"<\").split(\"&quot;\").join('\"').split(\"&#039;\").join(\"'\").split(\"&amp;\").join(\"&\");\n\t}\n\n\t/**\n\t\tTells if the string `s` starts with the string `start`.\n\n\t\tIf `start` is `null`, the result is unspecified.\n\n\t\tIf `start` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function startsWith( s : String, start : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.startsWith(start);\n\t\t#elseif cs\n\t\treturn untyped s.StartsWith(start);\n\t\t#elseif cpp\n\t\tif (s.length<start.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str();\n\t\tvar p1 = start.c_str();\n\t\tfor(i in 0...start.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\treturn @:privateAccess (s.length >= start.length && s.bytes.compare(0,start.bytes,0,start.length<<1) == 0);\n\t\t#else\n\t\treturn( s.length >= start.length && s.substr(0, start.length) == start );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the string `s` ends with the string `end`.\n\n\t\tIf `end` is `null`, the result is unspecified.\n\n\t\tIf `end` is the empty String `\"\"`, the result is true.\n\t**/\n\tpublic static #if (cs || java) inline #end function endsWith( s : String, end : String ) : Bool {\n\t\t#if java\n\t\treturn untyped s.endsWith(end);\n\t\t#elseif cs\n\t\treturn untyped s.EndsWith(end);\n\t\t#elseif cpp\n\t\tif (s.length<end.length)\n\t\t\treturn false;\n\t\tvar p0 = s.c_str().add( s.length-end.length );\n\t\tvar p1 = end.c_str();\n\t\tfor(i in 0...end.length)\n\t\t\tif ( p0.at(i) != p1.at(i) )\n\t\t\t\treturn false;\n\t\treturn true;\n\t\t#elseif hl\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn @:privateAccess (slen >= elen && s.bytes.compare((slen - elen) << 1, end.bytes, 0, elen << 1) == 0);\n\t\t#else\n\t\tvar elen = end.length;\n\t\tvar slen = s.length;\n\t\treturn( slen >= elen && s.substr(slen - elen, elen) == end );\n\t\t#end\n\t}\n\n\t/**\n\t\tTells if the character in the string `s` at position `pos` is a space.\n\n\t\tA character is considered to be a space character if its character code\n\t\tis 9,10,11,12,13 or 32.\n\n\t\tIf `s` is the empty String `\"\"`, or if pos is not a valid position within\n\t\t`s`, the result is false.\n\t**/\n\tpublic static function isSpace( s : String, pos : Int ) : Bool {\n\t\t#if (python || lua)\n\t\tif (s.length == 0 || pos < 0 || pos >= s.length) return false;\n\t\t#end\n\t\tvar c = s.charCodeAt( pos );\n\t\treturn (c > 8 && c < 14) || c == 32;\n\t}\n\n\t/**\n\t\tRemoves leading space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function ltrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimStart();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,r) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 )\n\t\t\treturn s.substr(r, l-r);\n\t\telse\n\t\t\treturn s;\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves trailing space characters of `s`.\n\n\t\tThis function internally calls `isSpace()` to decide which characters to\n\t\tremove.\n\n\t\tIf `s` is the empty String `\"\"` or consists only of space characters, the\n\t\tresult is the empty String `\"\"`.\n\t**/\n\tpublic #if cs inline #end static function rtrim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.TrimEnd();\n\t\t#else\n\t\tvar l = s.length;\n\t\tvar r = 0;\n\t\twhile( r < l && isSpace(s,l-r-1) ){\n\t\t\tr++;\n\t\t}\n\t\tif( r > 0 ){\n\t\t\treturn s.substr(0, l-r);\n\t\t}else{\n\t\t\treturn s;\n\t\t}\n\t\t#end\n\t}\n\n\t/**\n\t\tRemoves leading and trailing space characters of `s`.\n\n\t\tThis is a convenience function for `ltrim(rtrim(s))`.\n\t**/\n\tpublic #if (cs || java) inline #end static function trim( s : String ) : String {\n\t\t#if cs\n\t\treturn untyped s.Trim();\n\t\t#elseif java\n\t\treturn untyped s.trim();\n\t\t#else\n\t\treturn ltrim(rtrim(s));\n\t\t#end\n\t}\n\n\t/**\n\t\tConcatenates `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function lpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = c + s;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tAppends `c` to `s` until `s.length` is at least `l`.\n\n\t\tIf `c` is the empty String `\"\"` or if `l` does not exceed `s.length`,\n\t\t`s` is returned unchanged.\n\n\t\tIf `c.length` is 1, the resulting String length is exactly `l`.\n\n\t\tOtherwise the length may exceed `l`.\n\n\t\tIf `c` is null, the result is unspecified.\n\t**/\n\tpublic static function rpad( s : String, c : String, l : Int ) : String {\n\t\tif (c.length <= 0)\n\t\t\treturn s;\n\n\t\twhile (s.length < l) {\n\t\t\ts = s + c;\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReplace all occurrences of the String `sub` in the String `s` by the\n\t\tString `by`.\n\n\t\tIf `sub` is the empty String `\"\"`, `by` is inserted after each character\n\t\tof `s`. If `by` is also the empty String `\"\"`, `s` remains unchanged.\n\n\t\tThis is a convenience function for `s.split(sub).join(by)`.\n\n\t\tIf `sub` or `by` are null, the result is unspecified.\n\t**/\n\tpublic static function replace( s : String, sub : String, by : String ) : String {\n\t\t#if java\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.replace(sub, by);\n\t\t#elseif cs\n\t\tif (sub.length == 0)\n\t\t\treturn s.split(sub).join(by);\n\t\telse\n\t\t\treturn untyped s.Replace(sub, by);\n\t\t#else\n\t\treturn s.split(sub).join(by);\n\t\t#end\n\t}\n\n\t/**\n\t\tEncodes `n` into a hexadecimal representation.\n\n\t\tIf `digits` is specified, the resulting String is padded with \"0\" until\n\t\tits `length` equals `digits`.\n\t**/\n\tpublic static function hex( n : Int, ?digits : Int ) {\n\t\t#if flash\n\t\t\tvar n : UInt = n;\n\t\t\tvar s : String = untyped n.toString(16);\n\t\t\ts = s.toUpperCase();\n\t\t#else\n\t\t\tvar s = \"\";\n\t\t\tvar hexChars = \"0123456789ABCDEF\";\n\t\t\tdo {\n\t\t\t\ts = hexChars.charAt(n&15) + s;\n\t\t\t\tn >>>= 4;\n\t\t\t} while( n > 0 );\n\t\t#end\n\t\t#if python\n\t\tif (digits != null && s.length < digits) {\n\t\t\tvar diff = digits - s.length;\n\t\t\tfor (_ in 0...diff) {\n\t\t\t\ts = \"0\" + s;\n\t\t\t}\n\t\t}\n\t\t#else\n\t\tif( digits != null )\n\t\t\twhile( s.length < digits )\n\t\t\t\ts = \"0\"+s;\n\t\t#end\n\t\treturn s;\n\t}\n\n\t/**\n\t\tReturns the character code at position `index` of String `s`, or an\n\t\tend-of-file indicator at if `position` equals `s.length`.\n\n\t\tThis method is faster than `String.charCodeAt()` on some platforms, but\n\t\tthe result is unspecified if `index` is negative or greater than\n\t\t`s.length`.\n\n\t\tEnd of file status can be checked by calling `StringTools.isEof()` with\n\t\tthe returned value as argument.\n\n\t\tThis operation is not guaranteed to work if `s` contains the `\\0`\n\t\tcharacter.\n\t**/\n\tpublic static inline function fastCodeAt( s : String, index : Int ) : Int {\n\t\t#if neko\n\t\treturn untyped __dollar__sget(s.__s, index);\n\t\t#elseif cpp\n\t\treturn untyped s.cca(index);\n\t\t#elseif flash\n\t\treturn untyped s.cca(index);\n\t\t#elseif java\n\t\treturn ( index < s.length ) ? cast(_charAt(s, index), Int) : -1;\n\t\t#elseif cs\n\t\treturn ( cast(index, UInt) < s.length ) ? cast(s[index], Int) : -1;\n\t\t#elseif js\n\t\treturn (untyped s).charCodeAt(index);\n\t\t#elseif python\n\t\treturn if (index >= s.length) -1 else python.internal.UBuiltins.ord(python.Syntax.arrayAccess(s, index));\n\t\t#elseif hl\n\t\treturn @:privateAccess s.bytes.getUI16(index << 1);\n\t\t#elseif lua\n\t\treturn lua.NativeStringTools.byte(s,index+1);\n\t\t#else\n\t\treturn untyped s.cca(index);\n\t\t#end\n\t}\n\n\t/*\n\t\tTells if `c` represents the end-of-file (EOF) character.\n\t*/\n\t@:noUsing public static inline function isEof( c : Int ) : Bool {\n\t\t#if (flash || cpp || hl)\n\t\treturn c == 0;\n\t\t#elseif js\n\t\treturn c != c; // fast NaN\n\t\t#elseif (neko || lua)\n\t\treturn c == null;\n\t\t#elseif cs\n\t\treturn c == -1;\n\t\t#elseif java\n\t\treturn c == -1;\n\t\t#elseif python\n\t\treturn c == -1;\n\t\t#else\n\t\treturn false;\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Unix.\n\t\tThe input will be quoted, or escaped if necessary.\n\t*/\n\tpublic static function quoteUnixArg(argument:String):String {\n\t\t// Based on cpython's shlex.quote().\n\t\t// https://hg.python.org/cpython/file/a3f076d4f54f/Lib/shlex.py#l278\n\n\t\tif (argument == \"\")\n\t\t\treturn \"''\";\n\n\t\tif (!~/[^a-zA-Z0-9_@%+=:,.\\/-]/.match(argument))\n\t\t\treturn argument;\n\n\t\t// use single quotes, and put single quotes into double quotes\n\t\t// the string $'b is then quoted as '$'\"'\"'b'\n\t\treturn \"'\" + replace(argument, \"'\", \"'\\\"'\\\"'\") + \"'\";\n\t}\n\n\t/**\n\t\tCharacter codes of the characters that will be escaped by `quoteWinArg(_, true)`.\n\t*/\n\tpublic static var winMetaCharacters = [\" \".code, \"(\".code, \")\".code, \"%\".code, \"!\".code, \"^\".code, \"\\\"\".code, \"<\".code, \">\".code, \"&\".code, \"|\".code, \"\\n\".code, \"\\r\".code, \",\".code, \";\".code];\n\n\t/**\n\t\tReturns a String that can be used as a single command line argument\n\t\ton Windows.\n\t\tThe input will be quoted, or escaped if necessary, such that the output\n\t\twill be parsed as a single argument using the rule specified in\n\t\thttp://msdn.microsoft.com/en-us/library/ms880421\n\n\t\tExamples:\n\t\t```\n\t\tquoteWinArg(\"abc\") == \"abc\";\n\t\tquoteWinArg(\"ab c\") == '\"ab c\"';\n\t\t```\n\t*/\n\tpublic static function quoteWinArg(argument:String, escapeMetaCharacters:Bool):String {\n\t\t// If there is no space, tab, back-slash, or double-quotes, and it is not an empty string.\n\t\tif (!~/^[^ \\t\\\\\"]+$/.match(argument)) {\n\n\t\t\t// Based on cpython's subprocess.list2cmdline().\n\t\t\t// https://hg.python.org/cpython/file/50741316dd3a/Lib/subprocess.py#l620\n\n\t\t\tvar result = new StringBuf();\n\t\t\tvar needquote = argument.indexOf(\" \") != -1 || argument.indexOf(\"\\t\") != -1 || argument == \"\";\n\n\t\t\tif (needquote)\n\t\t\t\tresult.add('\"');\n\n\t\t\tvar bs_buf = new StringBuf();\n\t\t\tfor (i in 0...argument.length) {\n\t\t\t\tswitch (argument.charCodeAt(i)) {\n\t\t\t\t\tcase \"\\\\\".code:\n\t\t\t\t\t\t// Don't know if we need to double yet.\n\t\t\t\t\t\tbs_buf.add(\"\\\\\");\n\t\t\t\t\tcase '\"'.code:\n\t\t\t\t\t\t// Double backslashes.\n\t\t\t\t\t\tvar bs = bs_buf.toString();\n\t\t\t\t\t\tresult.add(bs);\n\t\t\t\t\t\tresult.add(bs);\n\t\t\t\t\t\tbs_buf = new StringBuf();\n\t\t\t\t\t\tresult.add('\\\\\"');\n\t\t\t\t\tcase c:\n\t\t\t\t\t\t// Normal char\n\t\t\t\t\t\tif (bs_buf.length > 0) {\n\t\t\t\t\t\t\tresult.add(bs_buf.toString());\n\t\t\t\t\t\t\tbs_buf = new StringBuf();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.addChar(c);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add remaining backslashes, if any.\n\t\t\tresult.add(bs_buf.toString());\n\n\t\t\tif (needquote) {\n\t\t\t\tresult.add(bs_buf.toString());\n\t\t\t\tresult.add('\"');\n\t\t\t}\n\n\t\t\targument = result.toString();\n\t\t}\n\n\t\tif (escapeMetaCharacters) {\n\t\t\tvar result = new StringBuf();\n\t\t\tfor (i in 0...argument.length) {\n\t\t\t\tvar c = argument.charCodeAt(i);\n\t\t\t\tif (winMetaCharacters.indexOf(c) >= 0) {\n\t\t\t\t\tresult.addChar(\"^\".code);\n\t\t\t\t}\n\t\t\t\tresult.addChar(c);\n\t\t\t}\n\t\t\treturn result.toString();\n\t\t} else {\n\t\t\treturn argument;\n\t\t}\n\t}\n\n\t#if java\n\tprivate static inline function _charAt(str:String, idx:Int):java.StdTypes.Char16 return untyped str._charAt(idx);\n\t#end\n\n\t#if neko\n\tprivate static var _urlEncode = neko.Lib.load(\"std\",\"url_encode\",1);\n\tprivate static var _urlDecode = neko.Lib.load(\"std\",\"url_decode\",1);\n\t#end\n\n}\n","import luxe.Text;\r\nimport phoenix.Batcher;\r\nimport luxe.Color;\r\n\r\n\r\nclass MyText\r\n{\r\n    public var core:Text;\r\n    public var shadow:Text;\r\n    var batcher:Batcher;\r\n    var value:String;\r\n\r\n    public function new(value:String, batcher:Batcher)\r\n    {\r\n        this.value = value;\r\n        this.batcher = batcher;\r\n        core = makeText(value);\r\n    }\r\n\r\n    function makeText(value:String)\r\n    {\r\n        return new Text({\r\n            font: Luxe.resources.font('assets/font.fnt'),\r\n            point_size : 60,\r\n            depth : 4,\r\n            align : TextAlign.center,\r\n            align_vertical: TextAlign.center,\r\n            text : value,\r\n            color : new Color().rgb(0x22a6f2),\r\n            batcher : batcher,\r\n        });\r\n    }\r\n\r\n    public function makeShadow()\r\n    {\r\n        shadow = makeText(value);\r\n        shadow.transform.parent = core.transform;\r\n        shadow.color = new Color(0,0,0, 0.1);\r\n        shadow.pos.x += 3;\r\n        shadow.pos.y += 4;\r\n        shadow.depth = 3;\r\n        shadow.point_size = core.point_size;\r\n        shadow.align = core.align;\r\n        shadow.align_vertical = core.align_vertical;\r\n    }\r\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\nenum ValueType {\n\tTNull;\n\tTInt;\n\tTFloat;\n\tTBool;\n\tTObject;\n\tTFunction;\n\tTClass( c : Class<Dynamic> );\n\tTEnum( e : Enum<Dynamic> );\n\tTUnknown;\n}\n\n@:coreApi class Type {\n\n\tpublic static inline function getClass<T>( o : T ) : Class<T> {\n\t\treturn if (o == null) null else @:privateAccess js.Boot.getClass(o);\n\t}\n\n\tpublic static function getEnum( o : EnumValue ) : Enum<Dynamic> untyped {\n\t\tif( o == null )\n\t\t\treturn null;\n\t\treturn o.__enum__;\n\t}\n\n\tpublic static function getSuperClass( c : Class<Dynamic> ) : Class<Dynamic> untyped {\n\t\treturn c.__super__;\n\t}\n\n\n\tpublic static function getClassName( c : Class<Dynamic> ) : String {\n\t\tvar a : Array<String> = untyped c.__name__;\n\t\tif (a == null)\n\t\t\treturn null;\n\t\treturn a.join(\".\");\n\t}\n\n\tpublic static function getEnumName( e : Enum<Dynamic> ) : String {\n\t\tvar a : Array<String> = untyped e.__ename__;\n\t\treturn a.join(\".\");\n\t}\n\n\tpublic static function resolveClass( name : String ) : Class<Dynamic> untyped {\n\t\tvar cl : Class<Dynamic> = $hxClasses[name];\n\t\t// ensure that this is a class\n\t\tif( cl == null || !js.Boot.isClass(cl) )\n\t\t\treturn null;\n\t\treturn cl;\n\t}\n\n\tpublic static function resolveEnum( name : String ) : Enum<Dynamic> untyped {\n\t\tvar e : Dynamic = $hxClasses[name];\n\t\t// ensure that this is an enum\n\t\tif( e == null || !js.Boot.isEnum(e) )\n\t\t\treturn null;\n\t\treturn e;\n\t}\n\n\tpublic static function createInstance<T>( cl : Class<T>, args : Array<Dynamic> ) : T untyped {\n\t\tswitch( args.length ) {\n\t\tcase 0:\n\t\t\treturn __new__(cl);\n\t\tcase 1:\n\t\t\treturn __new__(cl,args[0]);\n\t\tcase 2:\n\t\t\treturn __new__(cl,args[0],args[1]);\n\t\tcase 3:\n\t\t\treturn __new__(cl,args[0],args[1],args[2]);\n\t\tcase 4:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3]);\n\t\tcase 5:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4]);\n\t\tcase 6:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5]);\n\t\tcase 7:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6]);\n\t\tcase 8:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);\n\t\tcase 9:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);\n\t\tcase 10:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);\n\t\tcase 11:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);\n\t\tcase 12:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);\n\t\tcase 13:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);\n\t\tcase 14:\n\t\t\treturn __new__(cl,args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);\n\t\tdefault:\n\t\t\tthrow \"Too many arguments\";\n\t\t}\n\t}\n\n\tpublic static function createEmptyInstance<T>( cl : Class<T> ) : T untyped {\n\t\t__js__(\"function empty() {}; empty.prototype = cl.prototype\");\n\t\treturn __js__(\"new empty()\");\n\t}\n\n\tpublic static function createEnum<T>( e : Enum<T>, constr : String, ?params : Array<Dynamic> ) : T {\n\t\tvar f:Dynamic = Reflect.field(e,constr);\n\t\tif( f == null ) throw \"No such constructor \"+constr;\n\t\tif( Reflect.isFunction(f) ) {\n\t\t\tif( params == null ) throw \"Constructor \"+constr+\" need parameters\";\n\t\t\treturn Reflect.callMethod(e,f,params);\n\t\t}\n\t\tif( params != null && params.length != 0 )\n\t\t\tthrow \"Constructor \"+constr+\" does not need parameters\";\n\t\treturn f;\n\t}\n\n\tpublic static function createEnumIndex<T>( e : Enum<T>, index : Int, ?params : Array<Dynamic> ) : T {\n\t\tvar c : String = (untyped e.__constructs__)[index];\n\t\tif( c == null ) throw index+\" is not a valid enum constructor index\";\n\t\treturn createEnum(e,c,params);\n\t}\n\n\tpublic static function getInstanceFields( c : Class<Dynamic> ) : Array<String> {\n\t\tvar a = [];\n\t\tuntyped __js__(\"for(var i in c.prototype) a.push(i)\");\n\t\ta.remove(\"__class__\");\n\t\ta.remove(\"__properties__\");\n\t\treturn a;\n\t}\n\n\tpublic static function getClassFields( c : Class<Dynamic> ) : Array<String> {\n\t\tvar a = Reflect.fields(c);\n\t\ta.remove(\"__name__\");\n\t\ta.remove(\"__interfaces__\");\n\t\ta.remove(\"__properties__\");\n\t\ta.remove(\"__super__\");\n\t\ta.remove(\"__meta__\");\n\t\ta.remove(\"prototype\");\n\t\treturn a;\n\t}\n\n\tpublic static inline function getEnumConstructs( e : Enum<Dynamic> ) : Array<String> {\n\t\treturn ((cast e).__constructs__ : Array<String>).copy();\n\t}\n\n\tpublic static function typeof( v : Dynamic ) : ValueType untyped {\n\t\tswitch( __js__(\"typeof\")(v) ) {\n\t\tcase \"boolean\": return TBool;\n\t\tcase \"string\": return TClass(String);\n\t\tcase \"number\":\n\t\t\t// this should handle all cases : NaN, +/-Inf and Floats outside range\n\t\t\tif( Math.ceil(v) == v%2147483648.0 )\n\t\t\t\treturn TInt;\n\t\t\treturn TFloat;\n\t\tcase \"object\":\n\t\t\tif( v == null )\n\t\t\t\treturn TNull;\n\t\t\tvar e = v.__enum__;\n\t\t\tif( e != null )\n\t\t\t\treturn TEnum(e);\n\t\t\tvar c = js.Boot.getClass(v);\n\t\t\tif( c != null )\n\t\t\t\treturn TClass(c);\n\t\t\treturn TObject;\n\t\tcase \"function\":\n\t\t\tif( js.Boot.isClass(v) || js.Boot.isEnum(v) )\n\t\t\t\treturn TObject;\n\t\t\treturn TFunction;\n\t\tcase \"undefined\":\n\t\t\treturn TNull;\n\t\tdefault:\n\t\t\treturn TUnknown;\n\t\t}\n\t}\n\n\tpublic static function enumEq<T>( a : T, b : T ) : Bool untyped {\n\t\tif( a == b )\n\t\t\treturn true;\n\t\ttry {\n\t\t\tif( a[0] != b[0] )\n\t\t\t\treturn false;\n\t\t\tfor( i in 2...a.length )\n\t\t\t\tif( !enumEq(a[i],b[i]) )\n\t\t\t\t\treturn false;\n\t\t\tvar e = a.__enum__;\n\t\t\tif( e != b.__enum__ || e == null )\n\t\t\t\treturn false;\n\t\t} catch( e : Dynamic ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic inline static function enumConstructor( e : EnumValue ) : String {\n\t\treturn untyped e[0];\n\t}\n\n\tpublic inline static function enumParameters( e : EnumValue ) : Array<Dynamic> {\n\t\treturn untyped e.slice(2);\n\t}\n\n\tpublic inline static function enumIndex( e : EnumValue ) : Int {\n\t\treturn untyped e[1];\n\t}\n\n\tpublic inline static function allEnums<T>( e : Enum<T> ) : Array<T> {\n\t\treturn untyped __define_feature__(\"Type.allEnums\", e.__empty_constructs__);\n\t}\n\n}\n\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tElements return by `CallStack` methods.\n**/\nenum StackItem {\n\tCFunction;\n\tModule( m : String );\n\tFilePos( s : Null<StackItem>, file : String, line : Int );\n\tMethod( classname : String, method : String );\n\tLocalFunction( ?v : Int );\n}\n\n/**\n\tGet information about the call stack.\n**/\nclass CallStack {\n\t#if js\n\tstatic var lastException:js.Error;\n\n\tstatic function getStack(e:js.Error):Array<StackItem> {\n\t\tif (e == null) return [];\n\t\t// https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\t\tvar oldValue = (untyped Error).prepareStackTrace;\n\t\t(untyped Error).prepareStackTrace = function (error, callsites :Array<Dynamic>) {\n\t\t\tvar stack = [];\n\t\t\tfor (site in callsites) {\n\t\t\t\tif (wrapCallSite != null) site = wrapCallSite(site);\n\t\t\t\tvar method = null;\n\t\t\t\tvar fullName :String = site.getFunctionName();\n\t\t\t\tif (fullName != null) {\n\t\t\t\t\tvar idx = fullName.lastIndexOf(\".\");\n\t\t\t\t\tif (idx >= 0) {\n\t\t\t\t\t\tvar className = fullName.substr(0, idx);\n\t\t\t\t\t\tvar methodName = fullName.substr(idx+1);\n\t\t\t\t\t\tmethod = Method(className, methodName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstack.push(FilePos(method, site.getFileName(), site.getLineNumber()));\n\t\t\t}\n\t\t\treturn stack;\n\t\t}\n\t\tvar a = makeStack(e.stack);\n\t\t(untyped Error).prepareStackTrace = oldValue;\n\t\treturn a;\n\t}\n\n\t// support for source-map-support module\n\t@:noCompletion\n\tpublic static var wrapCallSite:Dynamic->Dynamic;\n\t#end\n\n\t/**\n\t\tReturn the call stack elements, or an empty array if not available.\n\t**/\n\tpublic static function callStack() : Array<StackItem> {\n\t\t#if neko\n\t\t\tvar a = makeStack(untyped __dollar__callstack());\n\t\t\ta.shift(); // remove Stack.callStack()\n\t\t\treturn a;\n\t\t#elseif flash\n\t\t\tvar a = makeStack( new flash.errors.Error().getStackTrace() );\n\t\t\ta.shift(); // remove Stack.callStack()\n\t\t\treturn a;\n\t\t#elseif php\n\t\t\treturn makeStack(\"%s\");\n\t\t#elseif cpp\n\t\t\tvar s:Array<String> = untyped __global__.__hxcpp_get_call_stack(true);\n\t\t\treturn makeStack(s);\n\t\t#elseif js\n\t\t\ttry {\n\t\t\t\tthrow new js.Error();\n\t\t\t} catch( e : Dynamic ) {\n\t\t\t\tvar a = getStack(e);\n\t\t\t\ta.shift(); // remove Stack.callStack()\n\t\t\t\treturn a;\n\t\t\t}\n\n\t\t#elseif java\n\t\t\tvar stack = [];\n\t\t\tfor ( el in java.lang.Thread.currentThread().getStackTrace() ) {\n\t\t\t\tvar className = el.getClassName();\n\t\t\t\tvar methodName = el.getMethodName();\n\t\t\t\tvar fileName = el.getFileName();\n\t\t\t\tvar lineNumber = el.getLineNumber();\n\t\t\t\tvar method = Method( className, methodName );\n\t\t\t\tif ( fileName != null || lineNumber >= 0 ) {\n\t\t\t\t\tstack.push( FilePos( method, fileName, lineNumber ) );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstack.push( method );\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack.shift();\n\t\t\tstack.shift();\n\t\t\tstack.pop();\n\t\t\treturn stack;\n\t\t#elseif cs\n\t\t\treturn makeStack(new cs.system.diagnostics.StackTrace(1, true));\n\t\t#elseif python\n\t\t\tvar stack = [];\n\t\t\tvar infos = python.lib.Traceback.extract_stack();\n\t\t\tinfos.pop();\n\t\t\tinfos.reverse();\n\t\t\tfor (elem in infos)\n\t\t\t\tstack.push(FilePos(null, elem._1, elem._2));\n\t\t\treturn stack;\n\t\t#elseif lua\n\t\t\tvar stack = [];\n\t\t\tvar infos = lua.Debug.traceback();\n\t\t\tvar luastack = infos.split(\"\\n\").slice(2,-1);\n\t\t\tfor (s in luastack){\n\t\t\t\tvar parts = s.split(\":\");\n\t\t\t\tvar file  = parts[0];\n\t\t\t\tvar line  = parts[1];\n\t\t\t\t// TODO: Give more information for FilePos\n\t\t\t\tstack.push(FilePos(null, file, Std.parseInt(line)));\n\t\t\t}\n\t\t\treturn stack;\n\t\t#elseif hl\n\t\t\ttry {\n\t\t\t\tthrow null;\n\t\t\t} catch( e : Dynamic ) {\n\t\t\t\tvar st = _getExceptionStack();\n\t\t\t\treturn makeStack(st.length > 2 ? st.sub(2,st.length - 2) : st);\n\t\t\t}\n\t\t#else\n\t\t\treturn []; // Unsupported\n\t\t#end\n\t}\n\n\t#if hl\n\t@:hlNative(\"std\", \"exception_stack\") static function _getExceptionStack() : hl.NativeArray<hl.Bytes> { return null; }\n\t#end\n\n\t/**\n\t\tReturn the exception stack : this is the stack elements between\n\t\tthe place the last exception was thrown and the place it was\n\t\tcaught, or an empty array if not available.\n\t**/\n\t#if cpp @:noDebug #end /* Do not mess up the exception stack */\n\tpublic static function exceptionStack() : Array<StackItem> {\n\t\t#if neko\n\t\t\treturn makeStack(untyped __dollar__excstack());\n\t\t#elseif as3\n\t\t\treturn new Array();\n\t\t#elseif hl\n\t\t\treturn makeStack(_getExceptionStack());\n\t\t#elseif flash\n\t\t\tvar err : flash.errors.Error = untyped flash.Boot.lastError;\n\t\t\tif( err == null ) return new Array();\n\t\t\tvar a = makeStack( err.getStackTrace() );\n\t\t\tvar c = callStack();\n\t\t\tvar i = c.length - 1;\n\t\t\twhile( i > 0 ) {\n\t\t\t\tif( Std.string(a[a.length-1]) == Std.string(c[i]) )\n\t\t\t\t\ta.pop();\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t\ti--;\n\t\t\t}\n\t\t\treturn a;\n\t\t#elseif php\n\t\t\treturn makeStack(\"%e\");\n\t\t#elseif cpp\n\t\t\tvar s:Array<String> = untyped __global__.__hxcpp_get_exception_stack();\n\t\t\treturn makeStack(s);\n\t\t#elseif java\n\t\t\tvar stack = [];\n\t\t\tfor ( el in java.internal.Exceptions.currentException().getStackTrace() ) {\n\t\t\t\tvar className = el.getClassName();\n\t\t\t\tvar methodName = el.getMethodName();\n\t\t\t\tvar fileName = el.getFileName();\n\t\t\t\tvar lineNumber = el.getLineNumber();\n\t\t\t\tvar method = Method( className, methodName );\n\t\t\t\tif ( fileName != null || lineNumber >= 0 ) {\n\t\t\t\t\tstack.push( FilePos( method, fileName, lineNumber ) );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tstack.push( method );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// stack.shift();\n\t\t\tstack.shift();\n\t\t\tstack.pop();\n\t\t\treturn stack;\n\t\t#elseif cs\n\t\t\treturn makeStack(new cs.system.diagnostics.StackTrace(cs.internal.Exceptions.exception, true));\n\t\t#elseif python\n\t\t\tvar stack = [];\n\t\t\tvar exc = python.lib.Sys.exc_info();\n\t\t\tif (exc._3 != null)\n\t\t\t{\n\t\t\t\tvar infos = python.lib.Traceback.extract_tb(exc._3);\n\t\t\t\tinfos.reverse();\n\t\t\t\tfor (elem in infos)\n\t\t\t\t\tstack.push(FilePos(null, elem._1, elem._2));\n\t\t\t}\n\t\t\treturn stack;\n\t\t#elseif js\n\t\t\treturn untyped __define_feature__(\"haxe.CallStack.exceptionStack\", getStack(lastException));\n\t\t#else\n\t\t\treturn []; // Unsupported\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns a representation of the stack as a printable string.\n\t**/\n\tpublic static function toString( stack : Array<StackItem> ) {\n\t\tvar b = new StringBuf();\n\t\tfor( s in stack ) {\n\t\t\tb.add(\"\\nCalled from \");\n\t\t\titemToString(b,s);\n\t\t}\n\t\treturn b.toString();\n\t}\n\n\tprivate static function itemToString( b : StringBuf, s ) {\n\t\tswitch( s ) {\n\t\tcase CFunction:\n\t\t\tb.add(\"a C function\");\n\t\tcase Module(m):\n\t\t\tb.add(\"module \");\n\t\t\tb.add(m);\n\t\tcase FilePos(s,file,line):\n\t\t\tif( s != null ) {\n\t\t\t\titemToString(b,s);\n\t\t\t\tb.add(\" (\");\n\t\t\t}\n\t\t\tb.add(file);\n\t\t\tb.add(\" line \");\n\t\t\tb.add(line);\n\t\t\tif( s != null ) b.add(\")\");\n\t\tcase Method(cname,meth):\n\t\t\tb.add(cname);\n\t\t\tb.add(\".\");\n\t\t\tb.add(meth);\n\t\tcase LocalFunction(n):\n\t\t\tb.add(\"local function #\");\n\t\t\tb.add(n);\n\t\t}\n\t}\n\n\t#if cpp @:noDebug #end /* Do not mess up the exception stack */\n\tprivate static function makeStack(s #if cs : cs.system.diagnostics.StackTrace #elseif hl : hl.NativeArray<hl.Bytes> #end) {\n\t\t#if neko\n\t\t\tvar a = new Array();\n\t\t\tvar l = untyped __dollar__asize(s);\n\t\t\tvar i = 0;\n\t\t\twhile( i < l ) {\n\t\t\t\tvar x = s[i++];\n\t\t\t\tif( x == null )\n\t\t\t\t\ta.unshift(CFunction);\n\t\t\t\telse if( untyped __dollar__typeof(x) == __dollar__tstring )\n\t\t\t\t\ta.unshift(Module(new String(x)));\n\t\t\t\telse\n\t\t\t\t\ta.unshift(FilePos(null,new String(untyped x[0]),untyped x[1]));\n\t\t\t}\n\t\t\treturn a;\n\t\t#elseif flash\n\t\t\tvar a = new Array();\n\t\t\tvar r = ~/at ([^\\/]+?)\\$?(\\/[^\\(]+)?\\(\\)(\\[(.*?):([0-9]+)\\])?/;\n\t\t\tvar rlambda = ~/^MethodInfo-([0-9]+)$/g;\n\t\t\twhile( r.match(s) ) {\n\t\t\t\tvar cl = r.matched(1).split(\"::\").join(\".\");\n\t\t\t\tvar meth = r.matched(2);\n\t\t\t\tvar item;\n\t\t\t\tif( meth == null ) {\n\t\t\t\t\tif( rlambda.match(cl) )\n\t\t\t\t\t\titem = LocalFunction(Std.parseInt(rlambda.matched(1)));\n\t\t\t\t\telse\n\t\t\t\t\t\titem = Method(cl,\"new\");\n\t\t\t\t} else\n\t\t\t\t\titem = Method(cl,meth.substr(1));\n\t\t\t\tif( r.matched(3) != null )\n\t\t\t\t\titem = FilePos( item, r.matched(4), Std.parseInt(r.matched(5)) );\n\t\t\t\ta.push(item);\n\t\t\t\ts = r.matchedRight();\n\t\t\t}\n\t\t\treturn a;\n\t\t#elseif php\n\t\t\tif (!untyped __call__(\"isset\", __var__(\"GLOBALS\", s)))\n\t\t\t\treturn [];\n\t\t\tvar a : Array<String> = untyped __var__(\"GLOBALS\", s);\n\t\t\tvar m = [];\n\t\t\tfor( i in 0...a.length - ((s == \"%s\") ? 2 : 0)) {\n\t\t\t\tvar d = a[i].split(\"::\");\n\t\t\t\tm.unshift(Method(d[0],d[1]));\n\t\t\t}\n\t\t\treturn m;\n\t\t#elseif cpp\n\t\t\tvar stack : Array<String> = s;\n\t\t\tvar m = new Array<StackItem>();\n\t\t\tfor(func in stack) {\n\t\t\t\tvar words = func.split(\"::\");\n\t\t\t\tif (words.length==0)\n\t\t\t\t\tm.push(CFunction)\n\t\t\t\telse if (words.length==2)\n\t\t\t\t\tm.push(Method(words[0],words[1]));\n\t\t\t\telse if (words.length==4)\n\t\t\t\t\tm.push(FilePos( Method(words[0],words[1]),words[2],Std.parseInt(words[3])));\n\t\t\t}\n\t\t\treturn m;\n\t\t#elseif js\n\t\t\tif (s == null) {\n\t\t\t\treturn [];\n\t\t\t} else if ((untyped __js__(\"typeof\"))(s) == \"string\") {\n\t\t\t\t// Return the raw lines in browsers that don't support prepareStackTrace\n\t\t\t\tvar stack : Array<String> = s.split(\"\\n\");\n\t\t\t\tif( stack[0] == \"Error\" ) stack.shift();\n\t\t\t\tvar m = [];\n\t\t\t\tvar rie10 = ~/^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$/;\n\t\t\t\tfor( line in stack ) {\n\t\t\t\t\tif( rie10.match(line) ) {\n\t\t\t\t\t\tvar path = rie10.matched(1).split(\".\");\n\t\t\t\t\t\tvar meth = path.pop();\n\t\t\t\t\t\tvar file = rie10.matched(2);\n\t\t\t\t\t\tvar line = Std.parseInt(rie10.matched(3));\n\t\t\t\t\t\tm.push(FilePos( meth == \"Anonymous function\" ? LocalFunction() : meth == \"Global code\" ? null : Method(path.join(\".\"),meth), file, line ));\n\t\t\t\t\t} else\n\t\t\t\t\t\tm.push(Module(StringTools.trim(line))); // A little weird, but better than nothing\n\t\t\t\t}\n\t\t\t\treturn m;\n\t\t\t} else {\n\t\t\t\treturn cast s;\n\t\t\t}\n\t\t#elseif cs\n\t\t\tvar stack = [];\n\t\t\tfor (i in 0...s.FrameCount)\n\t\t\t{\n\t\t\t\tvar frame = s.GetFrame(i);\n\t\t\t\tvar m = frame.GetMethod();\n\n\t\t\t\tif (m == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar method = StackItem.Method(m.ReflectedType.ToString(), m.Name);\n\n\t\t\t\tvar fileName = frame.GetFileName();\n\t\t\t\tvar lineNumber = frame.GetFileLineNumber();\n\n\t\t\t\tif (fileName != null || lineNumber >= 0)\n\t\t\t\t\tstack.push(FilePos(method, fileName, lineNumber));\n\t\t\t\telse\n\t\t\t\t\tstack.push(method);\n\t\t\t}\n\t\t\treturn stack;\n\t\t#elseif hl\n\t\t\tvar stack = [];\n\t\t\tvar r = ~/^([A-Za-z0-9.$_]+)\\.([A-Za-z0-9_]+)\\((.+):([0-9]+)\\)$/;\n\t\t\tfor( i in 0...s.length-1 ) {\n\t\t\t\tvar str = @:privateAccess String.fromUCS2(s[i]);\n\t\t\t\tif( r.match(str) )\n\t\t\t\t\tstack.push(FilePos(Method(r.matched(1), r.matched(2)), r.matched(3), Std.parseInt(r.matched(4))));\n\t\t\t\telse\n\t\t\t\t\tstack.push(Module(str));\n\t\t\t}\n\t\t\treturn stack;\n\t\t#else\n\t\t\treturn null;\n\t\t#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tLog primarily provides the `trace()` method, which is invoked upon a call to\n\t`trace()` in Haxe code.\n**/\nclass Log {\n\n\t/**\n\t\tOutputs `v` in a platform-dependent way.\n\n\t\tThe second parameter `infos` is injected by the compiler and contains\n\t\tinformation about the position where the `trace()` call was made.\n\n\t\tThis method can be rebound to a custom function:\n\t\t\tvar oldTrace = haxe.Log.trace; // store old function\n\t\t\thaxe.Log.trace = function(v, ?infos) {\n\t\t\t  // handle trace\n\t\t\t}\n\t\t\t...\n\t\t\thaxe.Log.trace = oldTrace;\n\n\t\tIf it is bound to null, subsequent calls to `trace()` will cause an\n\t\texception.\n\t**/\n\tpublic static dynamic function trace( v : Dynamic, ?infos : PosInfos ) : Void {\n\t\t#if flash\n\t\t\t#if (fdb || native_trace)\n\t\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\t\tvar str = flash.Boot.__string_rec(v, \"\");\n\t\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + flash.Boot.__string_rec(v, \"\");\n\t\t\t\tuntyped __global__[\"trace\"](pstr+\": \"+str);\n\t\t\t#else\n\t\t\t\tuntyped flash.Boot.__trace(v,infos);\n\t\t\t#end\n\t\t#elseif neko\n\t\t\tuntyped {\n\t\t\t\t$print(infos.fileName + \":\" + infos.lineNumber + \": \", v);\n\t\t\t\tif( infos.customParams != null ) for( v in infos.customParams ) $print(\",\", v);\n\t\t\t\t$print(\"\\n\");\n\t\t\t}\n\t\t#elseif js\n\t\t\tuntyped js.Boot.__trace(v,infos);\n\t\t#elseif (php && php7)\n\t\t\tphp.Boot.trace(v, infos);\n\t\t#elseif php\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __call__('_hx_trace', v + extra, infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __call__('_hx_trace', v, infos);\n\t\t#elseif cpp\n\t\t\tif (infos!=null && infos.customParams!=null) {\n\t\t\t\tvar extra:String = \"\";\n\t\t\t\tfor( v in infos.customParams )\n\t\t\t\t\textra += \",\" + v;\n\t\t\t\tuntyped __trace(v + extra,infos);\n\t\t\t}\n\t\t\telse\n\t\t\t\tuntyped __trace(v,infos);\n\t\t#elseif (cs || java || lua)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + infos.lineNumber + \": \" + v;\n\t\t\t\tif (infos.customParams != null)\n\t\t\t\t{\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\t#if cs\n\t\t\tcs.system.Console.WriteLine(str);\n\t\t\t#elseif java\n\t\t\tuntyped __java__(\"java.lang.System.out.println(str)\");\n\t\t\t#elseif lua\n\t\t\tif (str == null) str = \"null\";\n\t\t\tuntyped __define_feature__(\"use._hx_print\",_hx_print(str));\n\t\t\t#end\n\t\t#elseif (python)\n\t\t\tvar str:String = null;\n\t\t\tif (infos != null) {\n\t\t\t\tstr = infos.fileName + \":\" + Std.string(infos.lineNumber) + \": \" + v;\n\t\t\t\tif (infos.customParams != null) {\n\t\t\t\t\tstr += \",\" + infos.customParams.join(\",\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstr = v;\n\t\t\t}\n\t\t\tpython.Lib.println(str);\n\t\t#elseif hl\n\t\t\tvar pstr = infos == null ? \"(null)\" : infos.fileName + \":\" + infos.lineNumber;\n\t\t\tvar str = Std.string(v);\n\t\t\tif( infos != null && infos.customParams != null ) for( v in infos.customParams ) str += \",\" + Std.string(v);\n\t\t\tSys.println(pstr+\": \"+str);\n\t\t#end\n\t}\n\n\t#if (flash || js)\n\t/**\n\t\tClears the trace output.\n\t**/\n\tpublic static dynamic function clear() : Void {\n\t\t#if flash\n\t\tuntyped flash.Boot.__clear_trace();\n\t\t#elseif js\n\t\tuntyped js.Boot.__clear_trace();\n\t\t#end\n\t}\n\t#end\n\n\t#if flash\n\t/**\n\t\tSets the color of the trace output to `rgb`.\n\t**/\n\tpublic static dynamic function setColor( rgb : Int ) {\n\t\tuntyped flash.Boot.__set_trace_color(rgb);\n\t}\n\t#end\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tResource can be used to access resources that were added through the\n\t-resource file@name command line parameter.\n\n\tDepending on their type they can be obtained as String through\n\tgetString(name), or as binary data through getBytes(name).\n\n\tA list of all available resource names can be obtained from listNames().\n**/\nclass Resource {\n\n\tstatic var content : Array<{ name : String, data : String, str : String }>;\n\n\t/**\n\t\tLists all available resource names. The resource name is the name part\n\t\tof the -resource file@name command line parameter.\n\t**/\n\tpublic static function listNames() : Array<String> {\n\t\treturn [for (x in content) x.name];\n\t}\n\n\t/**\n\t\tRetrieves the resource identified by `name` as a String.\n\n\t\tIf `name` does not match any resource name, null is returned.\n\t**/\n\tpublic static function getString( name : String ) : String {\n\t\tfor( x in content )\n\t\t\tif( x.name == name ) {\n\t\t\t\t#if neko\n\t\t\t\treturn new String(x.data);\n\t\t\t\t#else\n\t\t\t\tif( x.str != null ) return x.str;\n\t\t\t\tvar b : haxe.io.Bytes = haxe.crypto.Base64.decode(x.data);\n\t\t\t\treturn b.toString();\n\t\t\t\t#end\n\t\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t\tRetrieves the resource identified by `name` as an instance of\n\t\thaxe.io.Bytes.\n\n\t\tIf `name` does not match any resource name, null is returned.\n\t**/\n\tpublic static function getBytes( name : String ) : haxe.io.Bytes {\n\t\tfor( x in content )\n\t\t\tif( x.name == name ) {\n\t\t\t\t#if neko\n\t\t\t\treturn haxe.io.Bytes.ofData(cast x.data);\n\t\t\t\t#else\n\t\t\t\tif( x.str != null ) return haxe.io.Bytes.ofString(x.str);\n\t\t\t\treturn haxe.crypto.Base64.decode(x.data);\n\t\t\t\t#end\n\t\t\t}\n\t\treturn null;\n\t}\n\n\tstatic function __init__() {\n\t\t#if neko\n\t\tvar tmp = untyped __resources__();\n\t\tcontent = untyped Array.new1(tmp,__dollar__asize(tmp));\n\t\t#elseif php\n\t\tcontent = null;\n\t\t#elseif as3\n\t\tnull;\n\t\t#else\n\t\tcontent = untyped __resources__();\n\t\t#end\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tThe Serializer class can be used to encode values and objects into a `String`,\n\tfrom which the `Unserializer` class can recreate the original representation.\n\n\tThis class can be used in two ways:\n\n\t- create a `new Serializer()` instance, call its `serialize()` method with\n\t\tany argument and finally retrieve the String representation from\n\t\t`toString()`\n\t- call `Serializer.run()` to obtain the serialized representation of a\n\t\tsingle argument\n\n\tSerialization is guaranteed to work for all haxe-defined classes, but may\n\tor may not work for instances of external/native classes.\n\n\tThe specification of the serialization format can be found here:\n\t<https://haxe.org/manual/serialization/format>\n**/\nclass Serializer {\n\n\t/**\n\t\tIf the values you are serializing can contain circular references or\n\t\tobjects repetitions, you should set `USE_CACHE` to true to prevent\n\t\tinfinite loops.\n\n\t\tThis may also reduce the size of serialization Strings at the expense of\n\t\tperformance.\n\n\t\tThis value can be changed for individual instances of Serializer by\n\t\tsetting their useCache field.\n\t**/\n\tpublic static var USE_CACHE = false;\n\n\t/**\n\t\tUse constructor indexes for enums instead of names.\n\n\t\tThis may reduce the size of serialization Strings, but makes them less\n\t\tsuited for long-term storage: If constructors are removed or added from\n\t\tthe enum, the indices may no longer match.\n\n\t\tThis value can be changed for individual instances of Serializer by\n\t\tsetting their useEnumIndex field.\n\t**/\n\tpublic static var USE_ENUM_INDEX = false;\n\n\tstatic var BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\n\tstatic var BASE64_CODES = null;\n\n\tvar buf : StringBuf;\n\tvar cache : Array<Dynamic>;\n\tvar shash : haxe.ds.StringMap<Int>;\n\tvar scount : Int;\n\n\t/**\n\t\tThe individual cache setting for `this` Serializer instance.\n\n\t\tSee USE_CACHE for a complete description.\n\t**/\n\tpublic var useCache : Bool;\n\n\t/**\n\t\tThe individual enum index setting for `this` Serializer instance.\n\n\t\tSee USE_ENUM_INDEX for a complete description.\n\t**/\n\tpublic var useEnumIndex : Bool;\n\n\t/**\n\t\tCreates a new Serializer instance.\n\n\t\tSubsequent calls to `this.serialize` will append values to the\n\t\tinternal buffer of this String. Once complete, the contents can be\n\t\tretrieved through a call to `this.toString`.\n\n\t\tEach Serializer instance maintains its own cache if this.useCache` is\n\t\ttrue.\n\t**/\n\tpublic function new() {\n\t\tbuf = new StringBuf();\n\t\tcache = new Array();\n\t\tuseCache = USE_CACHE;\n\t\tuseEnumIndex = USE_ENUM_INDEX;\n\t\tshash = new haxe.ds.StringMap();\n\t\tscount = 0;\n\t}\n\n\t/**\n\t\tReturn the String representation of `this` Serializer.\n\n\t\tThe exact format specification can be found here:\n\t\thttps://haxe.org/manual/serialization/format\n\t**/\n\tpublic function toString() {\n\t\treturn buf.toString();\n\t}\n\n\t/* prefixes :\n\t\ta : array\n\t\tb : hash\n\t\tc : class\n\t\td : Float\n\t\te : reserved (float exp)\n\t\tf : false\n\t\tg : object end\n\t\th : array/list/hash end\n\t\ti : Int\n\t\tj : enum (by index)\n\t\tk : NaN\n\t\tl : list\n\t\tm : -Inf\n\t\tn : null\n\t\to : object\n\t\tp : +Inf\n\t\tq : haxe.ds.IntMap\n\t\tr : reference\n\t\ts : bytes (base64)\n\t\tt : true\n\t\tu : array nulls\n\t\tv : date\n\t\tw : enum\n\t\tx : exception\n\t\ty : urlencoded string\n\t\tz : zero\n\t\tA : Class<Dynamic>\n\t\tB : Enum<Dynamic>\n\t\tM : haxe.ds.ObjectMap\n\t\tC : custom\n\t*/\n\n\tfunction serializeString( s : String ) {\n\t\tvar x = shash.get(s);\n\t\tif( x != null ) {\n\t\t\tbuf.add(\"R\");\n\t\t\tbuf.add(x);\n\t\t\treturn;\n\t\t}\n\t\tshash.set(s,scount++);\n\t\t#if old_serialize\n\t\t\t// no more support for -D old_serialize due to 'j' reuse\n\t\t\t#if error #end\n\t\t#end\n\t\tbuf.add(\"y\");\n\t\ts = StringTools.urlEncode(s);\n\t\tbuf.add(s.length);\n\t\tbuf.add(\":\");\n\t\tbuf.add(s);\n\t}\n\n\tfunction serializeRef(v) {\n\t\t#if js\n\t\tvar vt = untyped __js__(\"typeof\")(v);\n\t\t#end\n\t\tfor( i in 0...cache.length ) {\n\t\t\t#if js\n\t\t\tvar ci = cache[i];\n\t\t\tif( untyped __js__(\"typeof\")(ci) == vt && ci == v ) {\n\t\t\t#else\n\t\t\tif( cache[i] == v ) {\n\t\t\t#end\n\t\t\t\tbuf.add(\"r\");\n\t\t\t\tbuf.add(i);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tcache.push(v);\n\t\treturn false;\n\t}\n\n\t#if flash\n\t// only the instance variables\n\n\tfunction serializeClassFields(v,c) {\n\t\tvar xml : flash.xml.XML = untyped __global__[\"flash.utils.describeType\"](c);\n\t\tvar vars = xml.factory[0].child(\"variable\");\n\t\tfor( i in 0...vars.length() ) {\n\t\t\tvar f = vars[i].attribute(\"name\").toString();\n\t\t\tif( !v.hasOwnProperty(f) )\n\t\t\t\tcontinue;\n\t\t\tserializeString(f);\n\t\t\tserialize(Reflect.field(v,f));\n\t\t}\n\t\tbuf.add(\"g\");\n\t}\n\t#end\n\n\tfunction serializeFields(v) {\n\t\tfor( f in Reflect.fields(v) ) {\n\t\t\tserializeString(f);\n\t\t\tserialize(Reflect.field(v,f));\n\t\t}\n\t\tbuf.add(\"g\");\n\t}\n\n\t/**\n\t\tSerializes `v`.\n\n\t\tAll haxe-defined values and objects with the exception of functions can\n\t\tbe serialized. Serialization of external/native objects is not\n\t\tguaranteed to work.\n\n\t\tThe values of `this.useCache` and `this.useEnumIndex` may affect\n\t\tserialization output.\n\t**/\n\tpublic function serialize( v : Dynamic ) {\n\t\tswitch( Type.typeof(v) ) {\n\t\tcase TNull:\n\t\t\tbuf.add(\"n\");\n\t\tcase TInt:\n\t\t\tvar v : Int = v;\n\t\t\tif( v == 0 ) {\n\t\t\t\tbuf.add(\"z\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbuf.add(\"i\");\n\t\t\tbuf.add(v);\n\t\tcase TFloat:\n\t\t\tvar v : Float = v;\n\t\t\tif( Math.isNaN(v) )\n\t\t\t\tbuf.add(\"k\");\n\t\t\telse if( !Math.isFinite(v) )\n\t\t\t\tbuf.add(if( v < 0 ) \"m\" else \"p\");\n\t\t\telse {\n\t\t\t\tbuf.add(\"d\");\n\t\t\t\tbuf.add(v);\n\t\t\t}\n\t\tcase TBool:\n\t\t\tbuf.add(if( v ) \"t\" else \"f\");\n\t\tcase TClass(c):\n\t\t\tif( #if neko untyped c.__is_String #else c == String #end ) {\n\t\t\t\tserializeString(v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif( useCache && serializeRef(v) )\n\t\t\t\treturn;\n\t\t\tswitch( #if (neko || cs || python) Type.getClassName(c) #else c #end ) {\n\t\t\tcase #if (neko || cs || python) \"Array\" #else cast Array #end:\n\t\t\t\tvar ucount = 0;\n\t\t\t\tbuf.add(\"a\");\n\t\t\t\t#if (flash || python || hl)\n\t\t\t\tvar v : Array<Dynamic> = v;\n\t\t\t\t#end\n\t\t\t\tvar l = #if (neko || flash || php || cs || java || python || hl || lua) v.length #elseif cpp v.__length() #else __getField(v, \"length\") #end;\n\t\t\t\tfor( i in 0...l ) {\n\t\t\t\t\tif( v[i] == null )\n\t\t\t\t\t\tucount++;\n\t\t\t\t\telse {\n\t\t\t\t\t\tif( ucount > 0 ) {\n\t\t\t\t\t\t\tif( ucount == 1 )\n\t\t\t\t\t\t\t\tbuf.add(\"n\");\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tbuf.add(\"u\");\n\t\t\t\t\t\t\t\tbuf.add(ucount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tucount = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tserialize(v[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( ucount > 0 ) {\n\t\t\t\t\tif( ucount == 1 )\n\t\t\t\t\t\tbuf.add(\"n\");\n\t\t\t\t\telse {\n\t\t\t\t\t\tbuf.add(\"u\");\n\t\t\t\t\t\tbuf.add(ucount);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"List\" #else cast List #end:\n\t\t\t\tbuf.add(\"l\");\n\t\t\t\tvar v : List<Dynamic> = v;\n\t\t\t\tfor( i in v )\n\t\t\t\t\tserialize(i);\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"Date\" #else cast Date #end:\n\t\t\t\tvar d : Date = v;\n\t\t\t\tbuf.add(\"v\");\n\t\t\t\tbuf.add(d.getTime());\n\t\t\tcase #if (neko || cs || python) \"haxe.ds.StringMap\" #else cast haxe.ds.StringMap #end:\n\t\t\t\tbuf.add(\"b\");\n\t\t\t\tvar v : haxe.ds.StringMap<Dynamic> = v;\n\t\t\t\tfor( k in v.keys() ) {\n\t\t\t\t\tserializeString(k);\n\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"haxe.ds.IntMap\" #else cast haxe.ds.IntMap #end:\n\t\t\t\tbuf.add(\"q\");\n\t\t\t\tvar v : haxe.ds.IntMap<Dynamic> = v;\n\t\t\t\tfor( k in v.keys() ) {\n\t\t\t\t\tbuf.add(\":\");\n\t\t\t\t\tbuf.add(k);\n\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"haxe.ds.ObjectMap\" #else cast haxe.ds.ObjectMap #end:\n\t\t\t\tbuf.add(\"M\");\n\t\t\t\tvar v : haxe.ds.ObjectMap<Dynamic,Dynamic> = v;\n\t\t\t\tfor ( k in v.keys() ) {\n\t\t\t\t\t#if (js || neko)\n\t\t\t\t\tvar id = Reflect.field(k, \"__id__\");\n\t\t\t\t\tReflect.deleteField(k, \"__id__\");\n\t\t\t\t\tserialize(k);\n\t\t\t\t\tReflect.setField(k, \"__id__\", id);\n\t\t\t\t\t#else\n\t\t\t\t\tserialize(k);\n\t\t\t\t\t#end\n\t\t\t\t\tserialize(v.get(k));\n\t\t\t\t}\n\t\t\t\tbuf.add(\"h\");\n\t\t\tcase #if (neko || cs || python) \"haxe.io.Bytes\" #else cast haxe.io.Bytes #end:\n\t\t\t\tvar v : haxe.io.Bytes = v;\n\t\t\t\t#if neko\n\t\t\t\tvar chars = new String(base_encode(v.getData(),untyped BASE64.__s));\n\t\t\t\tbuf.add(\"s\");\n\t\t\t\tbuf.add(chars.length);\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(chars);\n\t\t\t\t#else\n\n\t\t\t\tbuf.add(\"s\");\n\t\t\t\tbuf.add(Math.ceil((v.length * 8) / 6));\n\t\t\t\tbuf.add(\":\");\n\n\t\t\t\tvar i = 0;\n\t\t\t\tvar max = v.length - 2;\n\t\t\t\tvar b64 = BASE64_CODES;\n\t\t\t\tif( b64 == null ) {\n\t\t\t\t\tb64 = new haxe.ds.Vector(BASE64.length);\n\t\t\t\t\tfor( i in 0...BASE64.length )\n\t\t\t\t\t\tb64[i] = BASE64.charCodeAt(i);\n\t\t\t\t\tBASE64_CODES = b64;\n\t\t\t\t}\n\t\t\t\twhile( i < max ) {\n\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\tvar b2 = v.get(i++);\n\t\t\t\t\tvar b3 = v.get(i++);\n\n\t\t\t\t\tbuf.addChar(b64[b1 >> 2]);\n\t\t\t\t\tbuf.addChar(b64[((b1 << 4) | (b2 >> 4)) & 63]);\n\t\t\t\t\tbuf.addChar(b64[((b2 << 2) | (b3 >> 6)) & 63]);\n\t\t\t\t\tbuf.addChar(b64[b3 & 63]);\n\t\t\t\t}\n\t\t\t\tif( i == max ) {\n\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\tvar b2 = v.get(i++);\n\t\t\t\t\tbuf.addChar(b64[b1 >> 2]);\n\t\t\t\t\tbuf.addChar(b64[((b1 << 4) | (b2 >> 4)) & 63]);\n\t\t\t\t\tbuf.addChar(b64[(b2 << 2) & 63]);\n\t\t\t\t} else if( i == max + 1 ) {\n\t\t\t\t\tvar b1 = v.get(i++);\n\t\t\t\t\tbuf.addChar(b64[b1 >> 2]);\n\t\t\t\t\tbuf.addChar(b64[(b1 << 4) & 63]);\n\t\t\t\t}\n\t\t\t\t#end\n\t\t\tdefault:\n\t\t\t\tif( useCache ) cache.pop();\n\t\t\t\tif( #if flash try v.hxSerialize != null catch( e : Dynamic ) false #elseif (cs || java || python) Reflect.hasField(v, \"hxSerialize\") #elseif (php && php7) php.Global.method_exists(v, 'hxSerialize') #else v.hxSerialize != null #end  ) {\n\t\t\t\t\tbuf.add(\"C\");\n\t\t\t\t\tserializeString(Type.getClassName(c));\n\t\t\t\t\tif( useCache ) cache.push(v);\n\t\t\t\t\tv.hxSerialize(this);\n\t\t\t\t\tbuf.add(\"g\");\n\t\t\t\t} else {\n\t\t\t\t\tbuf.add(\"c\");\n\t\t\t\t\tserializeString(Type.getClassName(c));\n\t\t\t\t\tif( useCache ) cache.push(v);\n\t\t\t\t\t#if flash\n\t\t\t\t\tserializeClassFields(v,c);\n\t\t\t\t\t#else\n\t\t\t\t\tserializeFields(v);\n\t\t\t\t\t#end\n\t\t\t\t}\n\t\t\t}\n\t\tcase TObject:\n\t\t\tif (Std.is(v,Class)) {\n\t\t\t\tvar className = Type.getClassName(v);\n\t\t\t\t#if (flash || cpp)\n\t\t\t\t// Currently, Enum and Class are the same for flash and cpp.\n\t\t\t\t//  use resolveEnum to test if it is actually an enum\n\t\t\t\tif (Type.resolveEnum(className)!=null) buf.add(\"B\") else\n\t\t\t\t#end\n\t\t\t\tbuf.add(\"A\");\n\t\t\t\tserializeString(className);\n\t\t\t} else if (Std.is(v,Enum)) {\n\t\t\t\tbuf.add(\"B\");\n\t\t\t\tserializeString(Type.getEnumName(v));\n\t\t\t} else {\n\t\t\t\tif( useCache && serializeRef(v) )\n\t\t\t\t\treturn;\n\t\t\t\tbuf.add(\"o\");\n\t\t\t\tserializeFields(v);\n\t\t\t}\n\t\tcase TEnum(e):\n\t\t\tif( useCache ) {\n\t\t\t\tif( serializeRef(v) )\n\t\t\t\t\treturn;\n\t\t\t\tcache.pop();\n\t\t\t}\n\t\t\tbuf.add(useEnumIndex?\"j\":\"w\");\n\t\t\tserializeString(Type.getEnumName(e));\n\t\t\t#if neko\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v.index);\n\t\t\t} else\n\t\t\t\tserializeString(new String(v.tag));\n\t\t\tbuf.add(\":\");\n\t\t\tif( v.args == null )\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tvar l : Int = untyped __dollar__asize(v.args);\n\t\t\t\tbuf.add(l);\n\t\t\t\tfor( i in 0...l )\n\t\t\t\t\tserialize(v.args[i]);\n\t\t\t}\n\t\t\t#elseif flash\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tvar i : Int = v.index;\n\t\t\t\tbuf.add(i);\n\t\t\t} else\n\t\t\t\tserializeString(v.tag);\n\t\t\tbuf.add(\":\");\n\t\t\tvar pl : Array<Dynamic> = v.params;\n\t\t\tif( pl == null )\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tbuf.add(pl.length);\n\t\t\t\tfor( p in pl )\n\t\t\t\t\tserialize(p);\n\t\t\t}\n\t\t\t#elseif cpp\n\t\t\tvar enumBase:cpp.EnumBase = v;\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(enumBase.getIndex());\n\t\t\t} else\n\t\t\t\tserializeString(enumBase.getTag());\n\t\t\tbuf.add(\":\");\n\t\t\tvar len = enumBase.getParamCount();\n\t\t\tbuf.add(len);\n\t\t\tfor( p in 0...len )\n\t\t\t\tserialize( enumBase.getParamI(p));\n\t\t\t#elseif php\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v.index);\n\t\t\t} else\n\t\t\t\tserializeString(v.tag);\n\t\t\tbuf.add(\":\");\n\t\t\tvar l : Int = untyped __call__(\"count\", v.params);\n\t\t\tif( l == 0 || v.params == null)\n\t\t\t\tbuf.add(0);\n\t\t\telse {\n\t\t\t\tbuf.add(l);\n\t\t\t\tfor( i in 0...l ) {\n\t\t\t\t\t#if (php && php7)\n\t\t\t\t\tserialize(v.params[i]);\n\t\t\t\t\t#elseif php\n\t\t\t\t\tserialize(untyped __field__(v, __php__(\"params\"), i));\n\t\t\t\t\t#end\n\t\t\t\t}\n\t\t\t}\n\t\t\t#elseif (java || cs || python || hl)\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(Type.enumIndex(v));\n\t\t\t} else\n\t\t\t\tserializeString(Type.enumConstructor(v));\n\t\t\tbuf.add(\":\");\n\t\t\tvar arr:Array<Dynamic> = Type.enumParameters(v);\n\t\t\tif (arr != null)\n\t\t\t{\n\t\t\t\tbuf.add(arr.length);\n\t\t\t\tfor (v in arr)\n\t\t\t\t\tserialize(v);\n\t\t\t} else {\n\t\t\t\tbuf.add(\"0\");\n\t\t\t}\n\n\t\t\t#else\n\t\t\tif( useEnumIndex ) {\n\t\t\t\tbuf.add(\":\");\n\t\t\t\tbuf.add(v[1]);\n\t\t\t} else\n\t\t\t\tserializeString(v[0]);\n\t\t\tbuf.add(\":\");\n\t\t\tvar l = __getField(v, \"length\");\n\t\t\tbuf.add(l - 2);\n\t\t\tfor( i in 2...l )\n\t\t\t\tserialize(v[i]);\n\t\t\t#end\n\t\t\tif( useCache ) cache.push(v);\n\t\tcase TFunction:\n\t\t\tthrow \"Cannot serialize function\";\n\t\tdefault:\n\t\t\t#if neko\n\t\t\tif( untyped (__i32__kind != null && __dollar__iskind(v,__i32__kind)) ) {\n\t\t\t\tbuf.add(\"i\");\n\t\t\t\tbuf.add(v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t#end\n\t\t\tthrow \"Cannot serialize \"+Std.string(v);\n\t\t}\n\t}\n\n\t@:extern inline function __getField(o:Dynamic, f:String):Dynamic return untyped o[f];\n\n\tpublic function serializeException( e : Dynamic ) {\n\t\tbuf.add(\"x\");\n\t\t#if flash\n\t\tif( untyped __is__(e,__global__[\"Error\"]) ) {\n\t\t\tvar e : flash.errors.Error = e;\n\t\t\tvar s = e.getStackTrace();\n\t\t\tif( s == null )\n\t\t\t\tserialize(e.message);\n\t\t\telse\n\t\t\t\tserialize(s);\n\t\t\treturn;\n\t\t}\n\t\t#end\n\t\tserialize(e);\n\t}\n\n\t/**\n\t\tSerializes `v` and returns the String representation.\n\n\t\tThis is a convenience function for creating a new instance of\n\t\tSerializer, serialize `v` into it and obtain the result through a call\n\t\tto toString().\n\t**/\n\tpublic static function run( v : Dynamic ) {\n\t\tvar s = new Serializer();\n\t\ts.serialize(v);\n\t\treturn s.toString();\n\t}\n\n\t#if neko\n\tstatic var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\t#end\n\n}\n\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n@:noDoc\ntypedef TypeResolver = {\n\tfunction resolveClass( name : String ) : Class<Dynamic>;\n\tfunction resolveEnum( name : String ) : Enum<Dynamic>;\n}\n\n/**\n\tThe `Unserializer` class is the complement to the `Serializer` class. It parses\n\ta serialization `String` and creates objects from the contained data.\n\n\tThis class can be used in two ways:\n\n\t- create a `new Unserializer()` instance with a given serialization\n\t\tString, then call its `unserialize()` method until all values are\n\t\textracted\n\t- call `Unserializer.run()`  to unserialize a single value from a given\n\t\tString\n\n\tThe specification of the serialization format can be found here:\n\t<https://haxe.org/manual/serialization/format>\n**/\nclass Unserializer {\n\n\t/**\n\t\tThis value can be set to use custom type resolvers.\n\n\t\tA type resolver finds a `Class` or `Enum` instance from a given `String`. \n\t\tBy default, the Haxe `Type` Api is used.\n\n\t\tA type resolver must provide two methods:\n\n\t\t1. `resolveClass(name:String):Class<Dynamic>` is called to determine a\n\t\t\t\t`Class` from a class name\n\t\t2. `resolveEnum(name:String):Enum<Dynamic>` is called to determine an\n\t\t\t\t`Enum` from an enum name\n\n\t\tThis value is applied when a new `Unserializer` instance is created.\n\t\tChanging it afterwards has no effect on previously created instances.\n\t**/\n\tpublic static var DEFAULT_RESOLVER : TypeResolver = new DefaultResolver();\n\n\tstatic var BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\n\n\t#if !neko\n\tstatic var CODES = null;\n\n\tstatic function initCodes() {\n\t\tvar codes =\n\t\t\t#if flash\n\t\t\t\tnew flash.utils.ByteArray();\n\t\t\t#else\n\t\t\t\tnew Array();\n\t\t\t#end\n\t\tfor( i in 0...BASE64.length )\n\t\t\tcodes[StringTools.fastCodeAt(BASE64,i)] = i;\n\t\treturn codes;\n\t}\n\t#end\n\n \tvar buf : String;\n \tvar pos : Int;\n \tvar length : Int;\n \tvar cache : Array<Dynamic>;\n \tvar scache : Array<String>;\n \tvar resolver : TypeResolver;\n \t#if neko\n \tvar upos : Int;\n \t#end\n\n\t/**\n\t\tCreates a new Unserializer instance, with its internal buffer\n\t\tinitialized to `buf`.\n\n\t\tThis does not parse `buf` immediately. It is parsed only when calls to\n\t\t`this.unserialize` are made.\n\n\t\tEach Unserializer instance maintains its own cache.\n\t**/\n \tpublic function new( buf : String ) {\n \t\tthis.buf = buf;\n \t\tlength = buf.length;\n \t\tpos = 0;\n \t\t#if neko\n \t\tupos = 0;\n \t\t#end\n \t\tscache = new Array();\n \t\tcache = new Array();\n\t\tvar r = DEFAULT_RESOLVER;\n\t\tif( r == null ) {\n\t\t\tr = new DefaultResolver();\n\t\t\tDEFAULT_RESOLVER = r;\n\t\t}\n\t\tresolver = r;\n \t}\n\n\t/**\n\t\tSets the type resolver of `this` Unserializer instance to `r`.\n\n\t\tIf `r` is null, a special resolver is used which returns null for all\n\t\tinput values.\n\n\t\tSee `DEFAULT_RESOLVER` for more information on type resolvers.\n\t**/\n \tpublic function setResolver( r ) {\n\t\tif( r == null )\n\t\t\tresolver = NullResolver.instance;\n\t\telse\n\t\t\tresolver = r;\n\t}\n\n\t/**\n\t\tGets the type resolver of `this` Unserializer instance.\n\n\t\tSee `DEFAULT_RESOLVER` for more information on type resolvers.\n\t**/\n \tpublic function getResolver() {\n\t\treturn resolver;\n\t}\n\n\tinline function get(p) : Int {\n\t\treturn StringTools.fastCodeAt(buf, p);\n\t}\n\n \tfunction readDigits() {\n \t\tvar k = 0;\n \t\tvar s = false;\n \t\tvar fpos = pos;\n \t\twhile( true ) {\n \t\t\tvar c = get(pos);\n\t\t\tif( StringTools.isEof(c) )\n\t\t\t\tbreak;\n \t\t\tif( c == \"-\".code ) {\n \t\t\t\tif( pos != fpos )\n \t\t\t\t\tbreak;\n \t\t\t\ts = true;\n \t\t\t\tpos++;\n \t\t\t\tcontinue;\n \t\t\t}\n \t\t\tif( c < \"0\".code || c > \"9\".code )\n \t\t\t\tbreak;\n \t\t\tk = k * 10 + (c - \"0\".code);\n \t\t\tpos++;\n \t\t}\n \t\tif( s )\n \t\t\tk *= -1;\n \t\treturn k;\n \t}\n\n\tfunction readFloat() {\n\t\tvar p1 = pos;\n \t\twhile( true ) {\n \t\t\tvar c = get(pos);\n\t\t\tif( StringTools.isEof(c)) break;\n \t\t\t// + - . , 0-9\n \t\t\tif( (c >= 43 && c < 58) || c == \"e\".code || c == \"E\".code )\n \t\t\t\tpos++;\n \t\t\telse\n \t\t\t\tbreak;\n \t\t}\n \t\treturn Std.parseFloat(buf.substr(p1,pos-p1));\n\t}\n\n\tfunction unserializeObject(o) {\n \t\twhile( true ) {\n \t\t\tif( pos >= length )\n \t\t\t\tthrow \"Invalid object\";\n \t\t\tif( get(pos) == \"g\".code )\n \t\t\t\tbreak;\n \t\t\tvar k = unserialize();\n \t\t\tif( !Std.is(k,String) )\n \t\t\t\tthrow \"Invalid object key\";\n \t\t\tvar v = unserialize();\n \t\t\tReflect.setField(o,k,v);\n \t\t}\n \t\tpos++;\n\t}\n\n\tfunction unserializeEnum( edecl, tag ) {\n\t\tif( get(pos++) != \":\".code )\n\t\t\tthrow \"Invalid enum format\";\n\t\tvar nargs = readDigits();\n\t\tif( nargs == 0 )\n\t\t\treturn Type.createEnum(edecl,tag);\n\t\tvar args = new Array();\n\t\twhile( nargs-- > 0 )\n\t\t\targs.push(unserialize());\n\t\treturn Type.createEnum(edecl,tag,args);\n\t}\n\n\t/**\n\t\tUnserializes the next part of `this` Unserializer instance and returns\n\t\tthe according value.\n\n\t\tThis function may call `this.resolver.resolveClass` to determine a\n\t\tClass from a String, and `this.resolver.resolveEnum` to determine an\n\t\tEnum from a String.\n\n\t\tIf `this` Unserializer instance contains no more or invalid data, an\n\t\texception is thrown.\n\n\t\tThis operation may fail on structurally valid data if a type cannot be\n\t\tresolved or if a field cannot be set. This can happen when unserializing\n\t\tStrings that were serialized on a different Haxe target, in which the\n\t\tserialization side has to make sure not to include platform-specific\n\t\tdata.\n\n\t\tClasses are created from `Type.createEmptyInstance`, which means their\n\t\tconstructors are not called.\n\t**/\n \tpublic function unserialize() : Dynamic {\n \t\tswitch( get(pos++) ) {\n \t\tcase \"n\".code:\n \t\t\treturn null;\n \t\tcase \"t\".code:\n \t\t\treturn true;\n \t\tcase \"f\".code:\n \t\t\treturn false;\n \t\tcase \"z\".code:\n \t\t\treturn 0;\n \t\tcase \"i\".code:\n \t\t\treturn readDigits();\n \t\tcase \"d\".code:\n \t\t\treturn readFloat();\n\t\tcase \"y\".code:\n \t\t\tvar len = readDigits();\n \t\t\tif( get(pos++) != \":\".code || length - pos < len )\n \t\t\t\tthrow \"Invalid string length\";\n\t\t\tvar s = buf.substr(pos,len);\n\t\t\tpos += len;\n\t\t\ts = StringTools.urlDecode(s);\n\t\t\tscache.push(s);\n\t\t\treturn s;\n \t\tcase \"k\".code:\n \t\t\treturn Math.NaN;\n \t\tcase \"m\".code:\n \t\t\treturn Math.NEGATIVE_INFINITY;\n \t\tcase \"p\".code:\n \t\t\treturn Math.POSITIVE_INFINITY;\n \t\tcase \"a\".code:\n\t\t\tvar buf = buf;\n \t\t\tvar a = new Array<Dynamic>();\n \t\t\t#if cpp var cachePos = cache.length; #end\n \t\t\tcache.push(a);\n \t\t\twhile( true ) {\n \t\t\t\tvar c = get(pos);\n \t\t\t\tif( c == \"h\".code ) {\n\t\t\t\t\tpos++;\n \t\t\t\t\tbreak;\n\t\t\t\t}\n \t\t\t\tif( c == \"u\".code ) {\n\t\t\t\t\tpos++;\n \t\t\t\t\tvar n = readDigits();\n \t\t\t\t\ta[a.length+n-1] = null;\n \t\t\t\t} else\n \t\t\t\t\ta.push(unserialize());\n \t\t\t}\n \t\t\t#if cpp\n \t\t\treturn cache[cachePos] = cpp.NativeArray.resolveVirtualArray(a);\n \t\t\t#else\n \t\t\treturn a;\n \t\t\t#end\n \t\tcase \"o\".code:\n\t \t\tvar o = {};\n\t \t\tcache.push(o);\n\t\t\tunserializeObject(o);\n\t\t\treturn o;\n \t\tcase \"r\".code:\n \t\t\tvar n = readDigits();\n \t\t\tif( n < 0 || n >= cache.length )\n \t\t\t\tthrow \"Invalid reference\";\n \t\t\treturn cache[n];\n \t\tcase \"R\".code:\n\t\t\tvar n = readDigits();\n\t\t\tif( n < 0 || n >= scache.length )\n\t\t\t\tthrow \"Invalid string reference\";\n\t\t\treturn scache[n];\n \t\tcase \"x\".code:\n\t\t\tthrow unserialize();\n\t\tcase \"c\".code:\n\t \t\tvar name = unserialize();\n\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\tif( cl == null )\n\t\t\t\tthrow \"Class not found \" + name;\n\t\t\tvar o = Type.createEmptyInstance(cl);\n\t\t\tcache.push(o);\n\t\t\tunserializeObject(o);\n\t\t\treturn o;\n\t\tcase \"w\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar edecl = resolver.resolveEnum(name);\n\t\t\tif( edecl == null )\n\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\tvar e = unserializeEnum(edecl, unserialize());\n\t\t\tcache.push(e);\n\t\t\treturn e;\n \t\tcase \"j\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar edecl = resolver.resolveEnum(name);\n\t\t\tif( edecl == null )\n\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\tpos++; /* skip ':' */\n\t\t\tvar index = readDigits();\n\t\t\tvar tag = Type.getEnumConstructs(edecl)[index];\n\t\t\tif( tag == null )\n\t\t\t\tthrow \"Unknown enum index \"+name+\"@\"+index;\n\t\t\tvar e = unserializeEnum(edecl, tag);\n\t\t\tcache.push(e);\n\t\t\treturn e;\n\t\tcase \"l\".code:\n\t\t\tvar l = new List();\n\t\t\tcache.push(l);\n\t\t\tvar buf = buf;\n\t\t\twhile( get(pos) != \"h\".code )\n\t\t\t\tl.add(unserialize());\n\t\t\tpos++;\n\t\t\treturn l;\n\t\tcase \"b\".code:\n\t\t\tvar h = new haxe.ds.StringMap();\n\t\t\tcache.push(h);\n\t\t\tvar buf = buf;\n\t\t\twhile( get(pos) != \"h\".code ) {\n\t\t\t\tvar s = unserialize();\n\t\t\t\th.set(s,unserialize());\n\t\t\t}\n\t\t\tpos++;\n\t\t\treturn h;\n\t\tcase \"q\".code:\n\t\t\tvar h = new haxe.ds.IntMap();\n\t\t\tcache.push(h);\n\t\t\tvar buf = buf;\n\t\t\tvar c = get(pos++);\n\t\t\twhile( c == \":\".code ) {\n\t\t\t\tvar i = readDigits();\n\t\t\t\th.set(i,unserialize());\n\t\t\t\tc = get(pos++);\n\t\t\t}\n\t\t\tif( c != \"h\".code )\n\t\t\t\tthrow \"Invalid IntMap format\";\n\t\t\treturn h;\n\t\tcase \"M\".code:\n\t\t\tvar h = new haxe.ds.ObjectMap();\n\t\t\tcache.push(h);\n\t\t\tvar buf = buf;\n\t\t\twhile( get(pos) != \"h\".code ) {\n\t\t\t\tvar s = unserialize();\n\t\t\t\th.set(s,unserialize());\n\t\t\t}\n\t\t\tpos++;\n\t\t\treturn h;\n\t\tcase \"v\".code:\n\t\t\tvar d;\n\t\t\tif(\tget(pos) >= '0'.code && get(pos) <= '9'.code &&\n\t\t\t\tget(pos + 1) >= '0'.code && get(pos + 1) <= '9'.code &&\n\t\t\t\tget(pos + 2) >= '0'.code && get(pos + 2) <= '9'.code &&\n\t\t\t\tget(pos + 3) >= '0'.code && get(pos + 3) <= '9'.code &&\n\t\t\t\tget(pos + 4) == '-'.code\n\t\t\t\t) {\n\t\t\t\t// Included for backwards compatibility\n\t\t\t\td = Date.fromString(buf.substr(pos,19));\n\t\t\t\tpos += 19;\n\t\t\t} else\n\t\t\t\td = Date.fromTime(readFloat());\n\t\t\tcache.push(d);\n\t\t\treturn d;\n \t\tcase \"s\".code:\n \t\t\tvar len = readDigits();\n\t\t\tvar buf = buf;\n \t\t\tif( get(pos++) != \":\".code || length - pos < len )\n\t\t\t\tthrow \"Invalid bytes length\";\n\t\t\t#if neko\n\t\t\tvar bytes = haxe.io.Bytes.ofData( base_decode(untyped buf.substr(pos,len).__s,untyped BASE64.__s) );\n\t\t\t#else\n\t\t\tvar codes = CODES;\n\t\t\tif( codes == null ) {\n\t\t\t\tcodes = initCodes();\n\t\t\t\tCODES = codes;\n\t\t\t}\n\t\t\tvar i = pos;\n\t\t\tvar rest = len & 3;\n\t\t\tvar size = (len >> 2) * 3 + ((rest >= 2) ? rest - 1 : 0);\n\t\t\tvar max = i + (len - rest);\n\t\t\tvar bytes = haxe.io.Bytes.alloc(size);\n\t\t\tvar bpos = 0;\n\t\t\twhile( i < max ) {\n\t\t\t\tvar c1 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c1 << 2) | (c2 >> 4));\n\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c2 << 4) | (c3 >> 2));\n\t\t\t\tvar c4 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c3 << 6) | c4);\n\t\t\t}\n\t\t\tif( rest >= 2 ) {\n\t\t\t\tvar c1 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\tbytes.set(bpos++,(c1 << 2) | (c2 >> 4));\n\t\t\t\tif( rest == 3 ) {\n\t\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf,i++)];\n\t\t\t\t\tbytes.set(bpos++,(c2 << 4) | (c3 >> 2));\n\t\t\t\t}\n\t\t\t}\n \t\t\t#end\n\t\t\tpos += len;\n\t\t\tcache.push(bytes);\n\t\t\treturn bytes;\n\t\tcase \"C\".code:\n\t \t\tvar name = unserialize();\n\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\tif( cl == null )\n\t\t\t\tthrow \"Class not found \" + name;\n\t\t\tvar o : Dynamic = Type.createEmptyInstance(cl);\n\t\t\tcache.push(o);\n\t\t\to.hxUnserialize(this);\n\t\t\tif( get(pos++) != \"g\".code )\n\t\t\t\tthrow \"Invalid custom data\";\n\t\t\treturn o;\n\t\tcase \"A\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar cl = resolver.resolveClass(name);\n\t\t\tif( cl == null )\n\t\t\t\tthrow \"Class not found \" + name;\n\t\t\treturn cl;\n\t\tcase \"B\".code:\n\t\t\tvar name = unserialize();\n\t\t\tvar e = resolver.resolveEnum(name);\n\t\t\tif( e == null )\n\t\t\t\tthrow \"Enum not found \" + name;\n\t\t\treturn e;\n \t\tdefault:\n \t\t}\n \t\tpos--;\n \t\tthrow (\"Invalid char \"+buf.charAt(pos)+\" at position \"+pos);\n \t}\n\n\t/**\n\t\tUnserializes `v` and returns the according value.\n\n\t\tThis is a convenience function for creating a new instance of\n\t\tUnserializer with `v` as buffer and calling its unserialize() method\n\t\tonce.\n\t**/\n\tpublic static function run( v : String ) : Dynamic {\n\t\treturn new Unserializer(v).unserialize();\n\t}\n\n\t#if neko\n\tstatic var base_decode = neko.Lib.load(\"std\",\"base_decode\",2);\n\t#end\n\n}\n\nprivate class DefaultResolver {\n\tpublic function new() {}\n\t@:final public inline function resolveClass(name:String):Class<Dynamic> return Type.resolveClass(name);\n\t@:final public inline function resolveEnum(name:String):Enum<Dynamic> return Type.resolveEnum(name);\n}\n\nprivate class NullResolver {\n\tfunction new() {}\n\t@:final public inline function resolveClass(name:String):Class<Dynamic> return null;\n\t@:final public inline function resolveEnum(name:String):Enum<Dynamic> return null;\n\tpublic static var instance(get,null):NullResolver;\n\tinline static function get_instance():NullResolver {\n\t\tif (instance == null) instance = new NullResolver();\n\t\treturn instance;\n\t}\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe;\n\n/**\n\tSince not all platforms guarantee that `String` always uses UTF-8 encoding, you\n\tcan use this cross-platform API to perform operations on such strings.\n**/\nclass Utf8 {\n\n\tvar __b : String;\n\n\t/**\n\t\tAllocate a new Utf8 buffer using an optional bytes size.\n\t**/\n\tpublic function new( ?size : Int ) {\n\t\t__b = \"\";\n\t}\n\n\t/**\n\t\tAdd the given UTF8 character code to the buffer.\n\t**/\n\tpublic inline function addChar( c : Int ) : Void {\n\t\t__b += String.fromCharCode(c);\n\t}\n\n\t/**\n\t\tReturns the buffer converted to a String.\n\t**/\n\tpublic inline function toString() : String {\n\t\treturn __b;\n\t}\n\n\t/**\n\t\tCall the `chars` function for each UTF8 char of the string.\n\t**/\n\tpublic static function iter( s : String, chars : Int -> Void ) {\n\t\tfor( i in 0...s.length )\n\t\t\tchars(s.charCodeAt(i));\n\t}\n\n\t/**\n\t\tEncode the input ISO string into the corresponding UTF8 one.\n\t**/\n\tpublic static function encode( s : String ) : String {\n\t\tthrow \"Not implemented\";\n\t}\n\n\t/**\n\t\tDecode an UTF8 string back to an ISO string.\n\t\tThrow an exception if a given UTF8 character is not supported by the decoder.\n\t**/\n\tpublic static function decode( s : String ) : String {\n\t\tthrow \"Not implemented\";\n\t}\n\n\t/**\n\t\tSimilar to `String.charCodeAt` but uses the UTF8 character position.\n\t**/\n\tpublic static inline function charCodeAt( s : String, index : Int ) : Int {\n\t\treturn s.charCodeAt(index);\n\t}\n\n\t/**\n\t\tTells if the String is correctly encoded as UTF8.\n\t**/\n\tpublic static inline function validate( s : String ) : Bool {\n\t\treturn true;\n\t}\n\n\t/**\n\t\tReturns the number of UTF8 chars of the String.\n\t**/\n\t#if js @:extern #end\n\tpublic static inline function length( s : String ) : Int {\n\t\treturn s.length;\n\t}\n\n\t/**\n\t\tCompare two UTF8 strings, character by character.\n\t**/\n\tpublic static function compare( a : String, b : String ) : Int {\n\t\treturn a > b ? 1 : (a == b ? 0 : -1);\n\t}\n\n\t/**\n\t\tThis is similar to `String.substr` but the `pos` and `len` parts are considering UTF8 characters.\n\t**/\n\tpublic static inline function sub( s : String, pos : Int, len : Int ) : String {\n\t\treturn s.substr(pos,len);\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n#if !nodejs\nimport js.html.compat.Uint8Array;\nimport js.html.compat.DataView;\n#end\n\n@:coreApi\nclass Bytes {\n\n\tpublic var length(default,null) : Int;\n\tvar b : js.html.Uint8Array;\n\tvar data : js.html.DataView;\n\n\tfunction new(data:BytesData) {\n\t\tthis.length = data.byteLength;\n\t\tthis.b = new js.html.Uint8Array(data);\n\t\tuntyped {\n\t\t\tb.bufferValue = data; // some impl does not return the same instance in .buffer\n\t\t\tdata.hxBytes = this;\n\t\t\tdata.bytes = this.b;\n\t\t}\n\t}\n\n\tpublic inline function get( pos : Int ) : Int {\n\t\treturn b[pos];\n\t}\n\n\tpublic inline function set( pos : Int, v : Int ) : Void {\n\t\tb[pos] = v & 0xFF; // the &0xFF is necessary for js.html.compat support\n\t}\n\n\tpublic function blit( pos : Int, src : Bytes, srcpos : Int, len : Int ) : Void {\n\t\tif( pos < 0 || srcpos < 0 || len < 0 || pos + len > length || srcpos + len > src.length ) throw Error.OutsideBounds;\n\t\tif( srcpos == 0 && len == src.b.byteLength )\n\t\t\tb.set(src.b,pos);\n\t\telse\n\t\t\tb.set(src.b.subarray(srcpos,srcpos+len),pos);\n\t}\n\n\tpublic function fill( pos : Int, len : Int, value : Int ) : Void {\n\t\tfor( i in 0...len )\n\t\t\tset(pos++, value);\n\t}\n\n\tpublic function sub( pos : Int, len : Int ) : Bytes {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\treturn new Bytes(b.buffer.slice(pos+b.byteOffset,pos+b.byteOffset+len));\n\t}\n\n\tpublic function compare( other : Bytes ) : Int {\n\t\tvar b1 = b;\n\t\tvar b2 = other.b;\n\t\tvar len = (length < other.length) ? length : other.length;\n\t\tfor( i in 0...len )\n\t\t\tif( b1[i] != b2[i] )\n\t\t\t\treturn b1[i] - b2[i];\n\t\treturn length - other.length;\n\t}\n\n\tinline function initData() : Void {\n\t\tif( data == null ) data = new js.html.DataView(b.buffer, b.byteOffset, b.byteLength);\n\t}\n\n\tpublic function getDouble( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat64(pos, true);\n\t}\n\n\tpublic function getFloat( pos : Int ) : Float {\n\t\tinitData();\n\t\treturn data.getFloat32(pos, true);\n\t}\n\n\tpublic function setDouble( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat64(pos, v, true);\n\t}\n\n\tpublic function setFloat( pos : Int, v : Float ) : Void {\n\t\tinitData();\n\t\tdata.setFloat32(pos, v, true);\n\t}\n\n\tpublic function getUInt16( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getUint16(pos, true);\n\t}\n\n\tpublic function setUInt16( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setUint16(pos, v, true);\n\t}\n\n\tpublic function getInt32( pos : Int ) : Int {\n\t\tinitData();\n\t\treturn data.getInt32(pos, true);\n\t}\n\n\tpublic function setInt32( pos : Int, v : Int ) : Void {\n\t\tinitData();\n\t\tdata.setInt32(pos, v, true);\n\t}\n\n\tpublic function getInt64( pos : Int ) : haxe.Int64 {\n\t\treturn Int64.make(getInt32(pos + 4),getInt32(pos));\n\t}\n\n\tpublic function setInt64( pos : Int, v : haxe.Int64 ) : Void {\n\t\tsetInt32(pos, v.low);\n\t\tsetInt32(pos + 4, v.high);\n\t}\n\n\tpublic function getString( pos : Int, len : Int ) : String {\n\t\tif( pos < 0 || len < 0 || pos + len > length ) throw Error.OutsideBounds;\n\t\tvar s = \"\";\n\t\tvar b = b;\n\t\tvar fcc = String.fromCharCode;\n\t\tvar i = pos;\n\t\tvar max = pos+len;\n\t\t// utf8-decode and utf16-encode\n\t\twhile( i < max ) {\n\t\t\tvar c = b[i++];\n\t\t\tif( c < 0x80 ) {\n\t\t\t\tif( c == 0 ) break;\n\t\t\t\ts += fcc(c);\n\t\t\t} else if( c < 0xE0 )\n\t\t\t\ts += fcc( ((c & 0x3F) << 6) | (b[i++] & 0x7F) );\n\t\t\telse if( c < 0xF0 ) {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\ts += fcc( ((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (b[i++] & 0x7F) );\n\t\t\t} else {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\tvar c3 = b[i++];\n\t\t\t\tvar u = ((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 & 0x7F) << 6) | (b[i++] & 0x7F);\n\t\t\t\t// surrogate pair\n\t\t\t\ts += fcc( (u >> 10) + 0xD7C0 );\n\t\t\t\ts += fcc( (u & 0x3FF) | 0xDC00 );\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\n\t@:deprecated(\"readString is deprecated, use getString instead\")\n\t@:noCompletion\n\tpublic inline function readString(pos:Int, len:Int):String {\n\t\treturn getString(pos, len);\n\t}\n\n\tpublic function toString() : String {\n\t\treturn getString(0,length);\n\t}\n\n\tpublic function toHex() : String {\n\t\tvar s = new StringBuf();\n\t\tvar chars = [];\n\t\tvar str = \"0123456789abcdef\";\n\t\tfor( i in 0...str.length )\n\t\t\tchars.push(str.charCodeAt(i));\n\t\tfor( i in 0...length ) {\n\t\t\tvar c = get(i);\n\t\t\ts.addChar(chars[c >> 4]);\n\t\t\ts.addChar(chars[c & 15]);\n\t\t}\n\t\treturn s.toString();\n\t}\n\n\tpublic inline function getData() : BytesData {\n\t\treturn untyped b.bufferValue;\n\t}\n\n\tpublic static inline function alloc( length : Int ) : Bytes {\n\t\treturn new Bytes(new BytesData(length));\n\t}\n\n\tpublic static function ofString( s : String ) : Bytes {\n\t\tvar a = new Array();\n\t\t// utf16-decode and utf8-encode\n\t\tvar i = 0;\n\t\twhile( i < s.length ) {\n\t\t\tvar c : Int = StringTools.fastCodeAt(s,i++);\n\t\t\t// surrogate pair\n\t\t\tif( 0xD800 <= c && c <= 0xDBFF )\n\t\t\t    c = (c - 0xD7C0 << 10) | (StringTools.fastCodeAt(s,i++) & 0x3FF);\n\t\t\tif( c <= 0x7F )\n\t\t\t\ta.push(c);\n\t\t\telse if( c <= 0x7FF ) {\n\t\t\t\ta.push( 0xC0 | (c >> 6) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else if( c <= 0xFFFF ) {\n\t\t\t\ta.push( 0xE0 | (c >> 12) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t} else {\n\t\t\t\ta.push( 0xF0 | (c >> 18) );\n\t\t\t\ta.push( 0x80 | ((c >> 12) & 63) );\n\t\t\t\ta.push( 0x80 | ((c >> 6) & 63) );\n\t\t\t\ta.push( 0x80 | (c & 63) );\n\t\t\t}\n\t\t}\n\t\treturn new Bytes(new js.html.Uint8Array(a).buffer);\n\t}\n\n\tpublic static function ofData( b : BytesData ) : Bytes {\n\t\tvar hb = untyped b.hxBytes;\n\t\tif( hb != null ) return hb;\n\t\treturn new Bytes(b);\n\t}\n\n\tpublic inline static function fastGet( b : BytesData, pos : Int ) : Int {\n\t\t// this requires that we have wrapped it with haxe.io.Bytes beforehand\n\t\treturn untyped b.bytes[pos];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tAllows to encode/decode String and bytes using Base64 encoding.\n**/\nclass Base64 {\n\n\tpublic static var CHARS(default,null) = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\tpublic static var BYTES(default,null) = haxe.io.Bytes.ofString(CHARS);\n\n\tpublic static function encode( bytes : haxe.io.Bytes, complement = true ) : String {\n\t\tvar str = new BaseCode(BYTES).encodeBytes(bytes).toString();\n\t\tif( complement )\n\t\t\tswitch (bytes.length % 3) {\n\t\t\tcase 1:\n\t\t\t\tstr += \"==\";\n\t\t\tcase 2:\n\t\t\t\tstr += \"=\";\n\t\t\tdefault:\n\t\t\t}\n\t\treturn str;\n\t}\n\n\tpublic static function decode( str : String, complement = true ) : haxe.io.Bytes {\n\t\tif( complement )\n\t\t\twhile( str.charCodeAt(str.length-1) == \"=\".code )\n\t\t\t\tstr = str.substr(0,-1);\n\t\treturn new BaseCode(BYTES).decodeBytes(haxe.io.Bytes.ofString(str));\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tAllows to encode/decode String and bytes using a power of two base dictionary.\n**/\nclass BaseCode {\n\n\tvar base : haxe.io.Bytes;\n\tvar nbits : Int;\n\tvar tbl : Array<Int>;\n\n\tpublic function new( base : haxe.io.Bytes ) {\n\t\tvar len = base.length;\n\t\tvar nbits = 1;\n\t\twhile( len > 1 << nbits )\n\t\t\tnbits++;\n\t\tif( nbits > 8 || len != 1 << nbits )\n\t\t\tthrow \"BaseCode : base length must be a power of two.\";\n\t\tthis.base = base;\n\t\tthis.nbits = nbits;\n\t}\n\n\tpublic function encodeBytes( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if (neko && !interp)\n\t\treturn haxe.io.Bytes.ofData( base_encode(b.getData(),base.getData()) );\n\t\t#else\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tvar size = Std.int(b.length * 8 / nbits);\n\t\tvar out = haxe.io.Bytes.alloc(size + (((b.length * 8) % nbits == 0) ? 0 : 1) );\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar mask = (1 << nbits) - 1;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile( pout < size ) {\n\t\t\twhile( curbits < nbits ) {\n\t\t\t\tcurbits += 8;\n\t\t\t\tbuf <<= 8;\n\t\t\t\tbuf |= b.get(pin++);\n\t\t\t}\n\t\t\tcurbits -= nbits;\n\t\t\tout.set(pout++,base.get((buf >> curbits) & mask));\n\t\t}\n\t\tif( curbits > 0 )\n\t\t\tout.set(pout++,base.get((buf << (nbits - curbits)) & mask));\n\t\treturn out;\n\t\t#end\n\t}\n\n\tfunction initTable() {\n\t\tvar tbl = new Array();\n\t\tfor( i in 0...256 )\n\t\t\ttbl[i] = -1;\n\t\tfor( i in 0...base.length )\n\t\t\ttbl[base.get(i)] = i;\n\t\tthis.tbl = tbl;\n\t}\n\n\tpublic function decodeBytes( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if (neko && !interp)\n\t\treturn haxe.io.Bytes.ofData( base_decode(b.getData(),base.getData()) );\n\t\t#else\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tif( this.tbl == null ) initTable();\n\t\tvar tbl = this.tbl;\n\t\tvar size = (b.length * nbits) >> 3;\n\t\tvar out = haxe.io.Bytes.alloc(size);\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile( pout < size ) {\n\t\t\twhile( curbits < 8 ) {\n\t\t\t\tcurbits += nbits;\n\t\t\t\tbuf <<= nbits;\n\t\t\t\tvar i = tbl[b.get(pin++)];\n\t\t\t\tif( i == -1 )\n\t\t\t\t\tthrow \"BaseCode : invalid encoded char\";\n\t\t\t\tbuf |= i;\n\t\t\t}\n\t\t\tcurbits -= 8;\n\t\t\tout.set(pout++,(buf >> curbits) & 0xFF);\n\t\t}\n\t\treturn out;\n\t\t#end\n\t}\n\n\tpublic function encodeString( s : String ) {\n\t\t#if (neko && !interp)\n\t\treturn neko.NativeString.toString( base_encode(neko.NativeString.ofString(s),base.getData()) );\n\t\t#else\n\t\treturn encodeBytes(haxe.io.Bytes.ofString(s)).toString();\n\t\t#end\n\t}\n\n\tpublic function decodeString( s : String ) {\n\t\t#if (neko && !interp)\n\t\treturn neko.NativeString.toString( base_decode(neko.NativeString.ofString(s),base.getData()) );\n\t\t#else\n\t\treturn decodeBytes(haxe.io.Bytes.ofString(s)).toString();\n\t\t#end\n\t}\n\n\tpublic static function encode( s : String, base : String ) {\n\t\tvar b = new BaseCode(haxe.io.Bytes.ofString(base));\n\t\treturn b.encodeString(s);\n\t}\n\n\tpublic static function decode( s : String, base : String ) {\n\t\tvar b = new BaseCode(haxe.io.Bytes.ofString(base));\n\t\treturn b.decodeString(s);\n\t}\n\n\t#if neko\n\tprivate static var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\tprivate static var base_decode = neko.Lib.load(\"std\",\"base_decode\",2);\n\t#end\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.crypto;\n\n/**\n\tCreates a MD5 of a String.\n**/\nclass Md5 {\n\n\tpublic static function encode( s : String ) : String {\n\t\t#if neko\n\t\t\treturn untyped new String(base_encode(make_md5(s.__s),\"0123456789abcdef\".__s));\n\t\t#elseif php\n\t\t\treturn untyped __call__(\"md5\", s);\n\t\t#else\n\t\t\tvar m = new Md5();\n\t\t\tvar h = m.doEncode(str2blks(s));\n\t\t\treturn m.hex(h);\n\t\t#end\n\t}\n\n\tpublic static function make( b : haxe.io.Bytes ) : haxe.io.Bytes {\n\t\t#if neko\n\t\t\treturn haxe.io.Bytes.ofData(make_md5(b.getData()));\n\t\t#elseif php\n\t\t\treturn haxe.io.Bytes.ofData( haxe.io.BytesData.ofString(untyped __call__(\"md5\", b.getData().toString(), true)));\n\t\t#else\n\t\t\tvar h = new Md5().doEncode(bytes2blks(b));\n\t\t\tvar out = haxe.io.Bytes.alloc(16);\n\t\t\tvar p = 0;\n\t\t\tfor( i in 0...4 ) {\n\t\t\t\tout.set(p++,h[i]&0xFF);\n\t\t\t\tout.set(p++,(h[i]>>8)&0xFF);\n\t\t\t\tout.set(p++,(h[i]>>16)&0xFF);\n\t\t\t\tout.set(p++,h[i]>>>24);\n\t\t\t}\n\t\t\treturn out;\n\t\t#end\n\t}\n\n\t#if neko\n\tstatic var base_encode = neko.Lib.load(\"std\",\"base_encode\",2);\n\tstatic var make_md5 = neko.Lib.load(\"std\",\"make_md5\",1);\n\t#elseif !php\n\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Copyright (C) Paul Johnston 1999 - 2000.\n * Updated by Greg Holt 2000 - 2001.\n * See http://pajhome.org.uk/site/legal.html for details.\n */\n\n\tfunction new() {\n\t}\n\n\tfunction bitOR(a, b){\n\t\tvar lsb = (a & 0x1) | (b & 0x1);\n\t\tvar msb31 = (a >>> 1) | (b >>> 1);\n\t\treturn (msb31 << 1) | lsb;\n\t}\n\n\tfunction bitXOR(a, b){\n\t\tvar lsb = (a & 0x1) ^ (b & 0x1);\n\t\tvar msb31 = (a >>> 1) ^ (b >>> 1);\n\t\treturn (msb31 << 1) | lsb;\n\t}\n\n\tfunction bitAND(a, b){\n\t\tvar lsb = (a & 0x1) & (b & 0x1);\n\t\tvar msb31 = (a >>> 1) & (b >>> 1);\n\t\treturn (msb31 << 1) | lsb;\n\t}\n\n\tfunction addme(x, y) {\n\t\tvar lsw = (x & 0xFFFF)+(y & 0xFFFF);\n\t\tvar msw = (x >> 16)+(y >> 16)+(lsw >> 16);\n\t\treturn (msw << 16) | (lsw & 0xFFFF);\n\t}\n\n\tfunction hex( a : Array<Int> ){\n\t\tvar str = \"\";\n\t\tvar hex_chr = \"0123456789abcdef\";\n\t\tfor( num in a )\n\t\t\tfor( j in 0...4 )\n\t\t\t\tstr += hex_chr.charAt((num >> (j * 8 + 4)) & 0x0F) +\n\t\t\t\t\t\t\t hex_chr.charAt((num >> (j * 8)) & 0x0F);\n\t\treturn str;\n\t}\n\n\tstatic function bytes2blks( b : haxe.io.Bytes ){\n\t\tvar nblk = ((b.length + 8) >> 6) + 1;\n\t\tvar blks = new Array();\n\n\t\t//preallocate size\n\t\tvar blksSize = nblk * 16;\n\t\t#if (neko || cs || cpp || java || hl)\n\t\tblks[blksSize - 1] = 0;\n\t\t#end\n\n\t\t#if !(cpp || cs || hl) //C++ and C# will already initialize them with zeroes.\n\t\tfor( i in 0...blksSize ) blks[i] = 0;\n\t\t#end\n\n\t\tvar i = 0;\n\t\twhile( i < b.length ) {\n\t\t\tblks[i >> 2] |= b.get(i) << ((((b.length << 3) + i) & 3) << 3);\n\t\t\ti++;\n\t\t}\n\t\tblks[i >> 2] |= 0x80 << (((b.length * 8 + i) % 4) * 8);\n\t\tvar l = b.length * 8;\n\t\tvar k = nblk * 16 - 2;\n\t\tblks[k] = (l & 0xFF);\n\t\tblks[k] |= ((l >>> 8) & 0xFF) << 8;\n\t\tblks[k] |= ((l >>> 16) & 0xFF) << 16;\n\t\tblks[k] |= ((l >>> 24) & 0xFF) << 24;\n\t\treturn blks;\n\t}\n\n\tstatic function str2blks( str : String ){\n#if !(neko || cpp || php)\n\t\tvar str = haxe.io.Bytes.ofString(str);\n#end\n\t\tvar nblk = ((str.length + 8) >> 6) + 1;\n\t\tvar blks = new Array();\n\n\t\t//preallocate size\n\t\tvar blksSize = nblk * 16;\n\t\t#if (neko || cs || cpp || java || hl)\n\t\tblks[blksSize - 1] = 0;\n\t\t#end\n\n\t\t#if !(cpp || cs || hl) //C++ and C# will already initialize them with zeroes.\n\t\tfor( i in 0...blksSize ) blks[i] = 0;\n\t\t#end\n\n\t\tvar i = 0;\n\t\tvar max = str.length;\n\t\tvar l = max * 8;\n\t\twhile( i < max ) {\n\t\t\tblks[i >> 2] |= #if !(neko || cpp || php) str.get(i) #else StringTools.fastCodeAt(str, i) #end << (((l + i) % 4) * 8);\n\t\t\ti++;\n\t\t}\n\t\tblks[i >> 2] |= 0x80 << (((l + i) % 4) * 8);\n\t\tvar k = nblk * 16 - 2;\n\t\tblks[k] = (l & 0xFF);\n\t\tblks[k] |= ((l >>> 8) & 0xFF) << 8;\n\t\tblks[k] |= ((l >>> 16) & 0xFF) << 16;\n\t\tblks[k] |= ((l >>> 24) & 0xFF) << 24;\n\t\treturn blks;\n\t}\n\n\tfunction rol(num, cnt){\n\t\treturn (num << cnt) | (num >>> (32 - cnt));\n\t}\n\n\tfunction cmn(q, a, b, x, s, t){\n\t\treturn addme(rol((addme(addme(a, q), addme(x, t))), s), b);\n\t}\n\n\tfunction ff(a, b, c, d, x, s, t){\n\t\treturn cmn(bitOR(bitAND(b, c), bitAND((~b), d)), a, b, x, s, t);\n\t}\n\n\tfunction gg(a, b, c, d, x, s, t){\n\t\treturn cmn(bitOR(bitAND(b, d), bitAND(c, (~d))), a, b, x, s, t);\n\t}\n\n\tfunction hh(a, b, c, d, x, s, t){\n\t\treturn cmn(bitXOR(bitXOR(b, c), d), a, b, x, s, t);\n\t}\n\n\tfunction ii(a, b, c, d, x, s, t){\n\t\treturn cmn(bitXOR(c, bitOR(b, (~d))), a, b, x, s, t);\n\t}\n\n\tfunction doEncode( x : Array<Int> ) : Array<Int> {\n\n\t\tvar a =  1732584193;\n\t\tvar b = -271733879;\n\t\tvar c = -1732584194;\n\t\tvar d =  271733878;\n\n\t\tvar step;\n\n\t\tvar i = 0;\n\t\twhile( i < x.length )  {\n\t\t\tvar olda = a;\n\t\t\tvar oldb = b;\n\t\t\tvar oldc = c;\n\t\t\tvar oldd = d;\n\n\t\t\tstep = 0;\n\t\t\ta = ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n\t\t\td = ff(d, a, b, c, x[i+ 1], 12, -389564586);\n\t\t\tc = ff(c, d, a, b, x[i+ 2], 17,  606105819);\n\t\t\tb = ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n\t\t\ta = ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n\t\t\td = ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n\t\t\tc = ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n\t\t\tb = ff(b, c, d, a, x[i+ 7], 22, -45705983);\n\t\t\ta = ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n\t\t\td = ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n\t\t\tc = ff(c, d, a, b, x[i+10], 17, -42063);\n\t\t\tb = ff(b, c, d, a, x[i+11], 22, -1990404162);\n\t\t\ta = ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n\t\t\td = ff(d, a, b, c, x[i+13], 12, -40341101);\n\t\t\tc = ff(c, d, a, b, x[i+14], 17, -1502002290);\n\t\t\tb = ff(b, c, d, a, x[i+15], 22,  1236535329);\n\t\t\ta = gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n\t\t\td = gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n\t\t\tc = gg(c, d, a, b, x[i+11], 14,  643717713);\n\t\t\tb = gg(b, c, d, a, x[i+ 0], 20, -373897302);\n\t\t\ta = gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n\t\t\td = gg(d, a, b, c, x[i+10], 9 ,  38016083);\n\t\t\tc = gg(c, d, a, b, x[i+15], 14, -660478335);\n\t\t\tb = gg(b, c, d, a, x[i+ 4], 20, -405537848);\n\t\t\ta = gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n\t\t\td = gg(d, a, b, c, x[i+14], 9 , -1019803690);\n\t\t\tc = gg(c, d, a, b, x[i+ 3], 14, -187363961);\n\t\t\tb = gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n\t\t\ta = gg(a, b, c, d, x[i+13], 5 , -1444681467);\n\t\t\td = gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n\t\t\tc = gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n\t\t\tb = gg(b, c, d, a, x[i+12], 20, -1926607734);\n\t\t\ta = hh(a, b, c, d, x[i+ 5], 4 , -378558);\n\t\t\td = hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n\t\t\tc = hh(c, d, a, b, x[i+11], 16,  1839030562);\n\t\t\tb = hh(b, c, d, a, x[i+14], 23, -35309556);\n\t\t\ta = hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n\t\t\td = hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n\t\t\tc = hh(c, d, a, b, x[i+ 7], 16, -155497632);\n\t\t\tb = hh(b, c, d, a, x[i+10], 23, -1094730640);\n\t\t\ta = hh(a, b, c, d, x[i+13], 4 ,  681279174);\n\t\t\td = hh(d, a, b, c, x[i+ 0], 11, -358537222);\n\t\t\tc = hh(c, d, a, b, x[i+ 3], 16, -722521979);\n\t\t\tb = hh(b, c, d, a, x[i+ 6], 23,  76029189);\n\t\t\ta = hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n\t\t\td = hh(d, a, b, c, x[i+12], 11, -421815835);\n\t\t\tc = hh(c, d, a, b, x[i+15], 16,  530742520);\n\t\t\tb = hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\t\t\ta = ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n\t\t\td = ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n\t\t\tc = ii(c, d, a, b, x[i+14], 15, -1416354905);\n\t\t\tb = ii(b, c, d, a, x[i+ 5], 21, -57434055);\n\t\t\ta = ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n\t\t\td = ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n\t\t\tc = ii(c, d, a, b, x[i+10], 15, -1051523);\n\t\t\tb = ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n\t\t\ta = ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n\t\t\td = ii(d, a, b, c, x[i+15], 10, -30611744);\n\t\t\tc = ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n\t\t\tb = ii(b, c, d, a, x[i+13], 21,  1309151649);\n\t\t\ta = ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n\t\t\td = ii(d, a, b, c, x[i+11], 10, -1120210379);\n\t\t\tc = ii(c, d, a, b, x[i+ 2], 15,  718787259);\n\t\t\tb = ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n\t\t\ta = addme(a, olda);\n\t\t\tb = addme(b, oldb);\n\t\t\tc = addme(c, oldc);\n\t\t\td = addme(d, oldd);\n\n\t\t\ti += 16;\n\t\t}\n\t\treturn [a,b,c,d];\n\t}\n\n\t#end\n\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\n@:coreApi class IntMap<T> implements haxe.Constraints.IMap<Int,T> {\n\n\tprivate var h : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tpublic inline function set( key : Int, value : T ) : Void {\n\t\tuntyped h[key] = value;\n\t}\n\n\tpublic inline function get( key : Int ) : Null<T> {\n\t\treturn untyped h[key];\n\t}\n\n\tpublic inline function exists( key : Int ) : Bool {\n\t\treturn untyped h.hasOwnProperty(key);\n\t}\n\n\tpublic function remove( key : Int ) : Bool {\n\t\tif( untyped !h.hasOwnProperty(key) ) return false;\n\t\tuntyped  __js__(\"delete\")(h[key]);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<Int> {\n\t\tvar a = [];\n\t\tuntyped __js__(\"for( var key in {0} ) {1}\", h, if( h.hasOwnProperty(key) ) a.push(key|0));\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<T> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[i]; }\n\t\t};\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(i);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of h software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and h permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.ds;\n\n@:coreApi\nclass ObjectMap<K:{ }, V> implements haxe.Constraints.IMap<K,V> {\n\n\tstatic var count = 0;\n\n\tstatic inline function assignId(obj: { } ):Int {\n\t\treturn untyped obj.__id__ = ++count;\n\t}\n\n\tstatic inline function getId(obj: { } ):Int {\n\t\treturn untyped obj.__id__;\n\t}\n\n\tvar h : { };\n\n\tpublic function new() : Void {\n\t\th = { __keys__: {} };\n\t}\n\n\tpublic function set(key:K, value:V):Void untyped {\n\t\tvar id : Int = getId(key) || assignId(key);\n\t\th[id] = value;\n\t\th.__keys__[id] = key;\n\t}\n\n\tpublic inline function get(key:K):Null<V> {\n\t\treturn untyped h[getId(key)];\n\t}\n\n\tpublic inline function exists(key:K):Bool {\n\t\treturn untyped h.__keys__[getId(key)] != null;\n\t}\n\n\tpublic function remove( key : K ) : Bool {\n\t\tvar id = getId(key);\n\t\tif ( untyped h.__keys__[id] == null ) return false;\n\t\tuntyped  __js__(\"delete\")(h[id]);\n\t\tuntyped  __js__(\"delete\")(h.__keys__[id]);\n\t\treturn true;\n\t}\n\n\tpublic function keys() : Iterator<K> {\n\t\tvar a = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h.__keys__ ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\ta.push(h.__keys__[key]);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn a.iterator();\n\t}\n\n\tpublic function iterator() : Iterator<V> {\n\t\treturn untyped {\n\t\t\tref : h,\n\t\t\tit : keys(),\n\t\t\thasNext : function() { return __this__.it.hasNext(); },\n\t\t\tnext : function() { var i = __this__.it.next(); return __this__.ref[getId(i)]; }\n\t\t};\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar it = keys();\n\t\tfor( i in it ) {\n\t\t\ts.add(Std.string(i));\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(i)));\n\t\t\tif( it.hasNext() )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n}","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.ds;\n\nprivate class StringMapIterator<T> {\n\tvar map : StringMap<T>;\n\tvar keys : Array<String>;\n\tvar index : Int;\n\tvar count : Int;\n\tpublic inline function new(map:StringMap<T>, keys:Array<String>) {\n\t\tthis.map = map;\n\t\tthis.keys = keys;\n\t\tthis.index = 0;\n\t\tthis.count = keys.length;\n\t}\n\tpublic inline function hasNext() {\n\t\treturn index < count;\n\t}\n\tpublic inline function next() {\n\t\treturn map.get(keys[index++]);\n\t}\n}\n\n@:coreApi class StringMap<T> implements haxe.Constraints.IMap<String,T> {\n\n\tprivate var h : Dynamic;\n\tprivate var rh : Dynamic;\n\n\tpublic inline function new() : Void {\n\t\th = {};\n\t}\n\n\tinline function isReserved(key:String) : Bool {\n\t\treturn untyped __js__(\"__map_reserved\")[key] != null;\n\t}\n\n\tpublic inline function set( key : String, value : T ) : Void {\n\t\tif( isReserved(key) )\n\t\t\tsetReserved(key, value);\n\t\telse\n\t\t\th[cast key] = value;\n\t}\n\n\tpublic inline function get( key : String ) : Null<T> {\n\t\tif( isReserved(key) )\n\t\t\treturn getReserved(key);\n\t\treturn h[cast key];\n\t}\n\n\tpublic inline function exists( key : String ) : Bool {\n\t\tif( isReserved(key) )\n\t\t\treturn existsReserved(key);\n\t\treturn h.hasOwnProperty(key);\n\t}\n\n\tfunction setReserved( key : String, value : T ) : Void {\n\t\tif( rh == null ) rh = {};\n\t\trh[cast \"$\"+key] = value;\n\t}\n\n\tfunction getReserved( key : String ) : Null<T> {\n\t\treturn rh == null ? null : rh[cast \"$\"+key];\n\t}\n\n\tfunction existsReserved( key : String ) : Bool {\n\t\tif( rh == null ) return false;\n\t\treturn untyped rh.hasOwnProperty(\"$\"+key);\n\t}\n\n\tpublic function remove( key : String ) : Bool {\n\t\tif( isReserved(key) ) {\n\t\t\tkey = \"$\" + key;\n\t\t\tif( rh == null || !rh.hasOwnProperty(key) ) return false;\n\t\t\tuntyped __js__(\"delete\")(rh[key]);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif( !h.hasOwnProperty(key) )\n\t\t\t\treturn false;\n\t\t\tuntyped __js__(\"delete\")(h[key]);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function keys() : Iterator<String> {\n\t\treturn arrayKeys().iterator();\n\t}\n\t\n\tfunction arrayKeys() : Array<String> {\n\t\tvar out = [];\n\t\tuntyped {\n\t\t\t__js__(\"for( var key in this.h ) {\");\n\t\t\t\tif( h.hasOwnProperty(key) )\n\t\t\t\t\tout.push(key);\n\t\t\t__js__(\"}\");\n\t\t}\n\t\tif( rh != null ) untyped {\n\t\t\t__js__(\"for( var key in this.rh ) {\");\n\t\t\t\tif( key.charCodeAt(0) == \"$\".code )\n\t\t\t\t\tout.push(key.substr(1));\n\t\t\t__js__(\"}\");\n\t\t}\n\t\treturn out;\n\t}\n\n\tpublic inline function iterator() : Iterator<T> {\n\t\treturn new StringMapIterator(this, arrayKeys());\n\t}\n\n\tpublic function toString() : String {\n\t\tvar s = new StringBuf();\n\t\ts.add(\"{\");\n\t\tvar keys = arrayKeys();\n\t\tfor( i in 0...keys.length ) {\n\t\t\tvar k = keys[i];\n\t\t\ts.add(k);\n\t\t\ts.add(\" => \");\n\t\t\ts.add(Std.string(get(k)));\n\t\t\tif( i < keys.length-1 )\n\t\t\t\ts.add(\", \");\n\t\t}\n\t\ts.add(\"}\");\n\t\treturn s.toString();\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __js__(\"var __map_reserved = {};\");\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tHelper that converts between floating point and binary representation.\n\tAlways works in low-endian encoding.\n**/\nclass FPHelper {\n\n\t#if neko_v21\n\t// stored in helper\n\t#elseif neko\n\tstatic var i64tmp = new neko.vm.Tls<Int64>();\n\t#elseif !(java || cs)\n\tstatic var i64tmp = Int64.ofInt(0);\n\t#end\n\n\t#if neko\n\t\t#if neko_v21\n\t\tstatic var helpers = new neko.vm.Tls<neko.NativeArray<Dynamic>>();\n\t\t#else\n\t\tstatic var helperf = new neko.vm.Tls<neko.NativeString>();\n\t\tstatic var helperd = new neko.vm.Tls<neko.NativeString>();\n\t\tstatic var _float_of_bytes = neko.Lib.load(\"std\",\"float_of_bytes\",2);\n\t\tstatic var _double_of_bytes = neko.Lib.load(\"std\",\"double_of_bytes\",2);\n\t\tstatic var _float_bytes = neko.Lib.load(\"std\",\"float_bytes\",2);\n\t\tstatic var _double_bytes = neko.Lib.load(\"std\",\"double_bytes\",2);\n\t\t#end\n\t#elseif flash\n\t\tstatic var helper = {\n\t\t\tvar b = new flash.utils.ByteArray();\n\t\t\tb.endian = flash.utils.Endian.LITTLE_ENDIAN;\n\t\t\tb;\n\t\t}\n\t#elseif php\n\t\tstatic var isLittleEndian : Bool = untyped __call__('unpack','S','\\x01\\x00')[1] == 1;\n\t#else\n\t\tstatic inline var LN2 = 0.6931471805599453; // Math.log(2)\n\t#end\n\n\t#if neko_v21 inline #end\n\tpublic static function i32ToFloat( i : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itof(i,false);\n\t\t\t#else\n\t\t\tvar helper = helperf.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperf.value = helper = neko.NativeString.alloc(4);\n\t\t\tuntyped $sset(helper,0,i&0xFF);\n\t\t\tuntyped $sset(helper,1,(i>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(i>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,i>>>24);\n\t\t\treturn _float_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32_as_float32(i);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = i;\n\t\t\t} else {\n\t\t\t\thelper.i = ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.intBitsToFloat(i);\n\t\t#elseif php\n\t\t\treturn untyped  __call__('unpack', 'f', __call__('pack', 'l', i))[1];\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(i);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readFloat();\n\t\t#else\n\t\t\tvar sign = 1 - ((i >>> 31) << 1);\n\t\t\tvar exp = (i >>> 23) & 0xFF;\n\t\t\tvar sig = i & 0x7FFFFF;\n\t\t\tif( sig == 0 && exp == 0 )\n\t\t\t\treturn 0.0;\n\t\t\treturn sign*(1 + Math.pow(2, -23)*sig) * Math.pow(2, exp-127);\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function floatToI32( f : Float ) : Int {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $ftoi(f,false);\n\t\t\t#else\n\t\t\tvar r = _float_bytes(f,false);\n\t\t\treturn untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_float32_as_le_int32(f);\n\t\t#elseif cs\n\t\t\tvar helper = new SingleHelper(f);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\treturn ((i >>> 24) & 0xFF) | (((i >> 16) & 0xFF) << 8) | (((i >> 8) & 0xFF) << 16) | ((i & 0xFF) << 24);\n\t\t\t}\n\t\t#elseif java\n\t\t\treturn java.lang.Float.FloatClass.floatToRawIntBits(f);\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeFloat(f);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readUnsignedInt();\n\t\t#elseif php\n\t\t\treturn untyped __call__('unpack','l',__call__('pack', 'f', f))[1];\n\t\t#else\n\t\t\tif( f == 0 ) return 0;\n\t\t\tvar af = f < 0 ? -f : f;\n\t\t\tvar exp = Math.floor(Math.log(af) / LN2);\n\t\t\tif( exp < -127 ) exp = -127 else if( exp > 128 ) exp = 128;\n\t\t\tvar sig = Math.round((af / Math.pow(2, exp) - 1) * 0x800000);\n\t\t\tif( sig == 0x800000 && exp < 128 ){\n\t\t\t\tsig = 0;\n\t\t\t\texp++;\n\t\t\t}\n\t\t\treturn (f < 0 ? 0x80000000 : 0) | ((exp + 127) << 23) | sig;\n\t\t#end\n\t}\n\n\t#if neko_v21 inline #end\n\tpublic static function i64ToDouble( low : Int, high : Int ) : Float {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\treturn untyped $itod(low,high,false);\n\t\t\t#else\n\t\t\tvar helper = helperd.value;\n\t\t\tif( helper == null )\n\t\t\t\thelperd.value = helper = neko.NativeString.alloc(8);\n\t\t\tuntyped $sset(helper,0,low&0xFF);\n\t\t\tuntyped $sset(helper,1,(low>>8)&0xFF);\n\t\t\tuntyped $sset(helper,2,(low>>16)&0xFF);\n\t\t\tuntyped $sset(helper,3,low>>>24);\n\t\t\tuntyped $sset(helper,4,high&0xFF);\n\t\t\tuntyped $sset(helper,5,(high>>8)&0xFF);\n\t\t\tuntyped $sset(helper,6,(high>>16)&0xFF);\n\t\t\tuntyped $sset(helper,7,high>>>24);\n\t\t\treturn _double_of_bytes(helper,false);\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn untyped __global__.__hxcpp_reinterpret_le_int32s_as_float64(low,high);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(0);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\thelper.i = haxe.Int64.make(high,low);\n\t\t\t} else {\n\t\t\t\tvar i1 = high,\n\t\t\t\t    i2 = low;\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\t\t\t\thelper.i = haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t\treturn helper.f;\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.longBitsToDouble( Int64.make(high,low) );\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeUnsignedInt(low);\n\t\t\thelper.writeUnsignedInt(high);\n\t\t\thelper.position = 0;\n\t\t\treturn helper.readDouble();\n\t\t#elseif php\n\t\t\treturn untyped  __call__('unpack', 'd', __call__('pack', 'ii', isLittleEndian ? low : high, isLittleEndian ? high : low))[1];\n\t\t#else\n\t\t\t#if python\n\t\t\tif (low == 0 && high == 2146435072) {\n\t\t\t\treturn Math.POSITIVE_INFINITY;\n\t\t\t} else if (low == 0 && high == -1048576 ) {\n\t\t\t\treturn Math.NEGATIVE_INFINITY;\n\t\t\t}\n\t\t\t#end\n\t\t\tvar sign = 1 - ((high >>> 31) << 1);\n\t\t\tvar exp = ((high >> 20) & 0x7FF) - 1023;\n\t\t\tvar sig = (high&0xFFFFF) * 4294967296. + (low>>>31) * 2147483648. + (low&0x7FFFFFFF);\n\t\t\tif( sig == 0 && exp == -1023 )\n\t\t\t\treturn 0.0;\n\t\t\treturn sign*(1.0 + Math.pow(2, -52)*sig) * Math.pow(2, exp);\n\t\t#end\n\t}\n\n\t/**\n\t\tReturns an Int64 representing the bytes representation of the double precision IEEE float value.\n\t\tWARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again.\n\t\tWe still ensure that this is safe to use in a multithread environment\n\t**/\n\tpublic static function doubleToI64( v : Float ) : Int64 {\n\t\t#if neko\n\t\t\t#if neko_v21\n\t\t\tvar helper = helpers.value;\n\t\t\tif( helper == null ) {\n\t\t\t\thelpers.value = helper = neko.NativeArray.alloc(2);\n\t\t\t\thelper[0] = neko.NativeArray.alloc(2);\n\t\t\t\thelper[1] = haxe.Int64.ofInt(0);\n\t\t\t}\n\t\t\tvar i64 : haxe.Int64 = helper[1], int2 = helper[0];\n\t\t\tuntyped $dtoi(v,int2,false);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(int2[0]);\n\t\t\t\ti64.set_high(int2[1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#else\n\t\t\tvar r = _double_bytes(v,false), i64 = i64tmp.value;\n\t\t\tif( i64 == null )\n\t\t\t\ti64 = i64tmp.value = haxe.Int64.ofInt(0);\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(untyped $sget(r,0) | ($sget(r,1)<<8) | ($sget(r,2)<<16) | ($sget(r,3)<<24));\n\t\t\t\ti64.set_high(untyped $sget(r,4) | ($sget(r,5)<<8) | ($sget(r,6)<<16) | ($sget(r,7)<<24));\n\t\t\t}\n\t\t\treturn i64;\n\t\t\t#end\n\t\t#elseif cpp\n\t\t\treturn Int64.make(untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_high(v),\n\t\t\t\t               untyped __global__.__hxcpp_reinterpret_float64_as_le_int32_low(v) );\n\t\t#elseif java\n\t\t\treturn java.lang.Double.DoubleClass.doubleToRawLongBits(v);\n\t\t#elseif cs\n\t\t\tvar helper = new FloatHelper(v);\n\t\t\tif( cs.system.BitConverter.IsLittleEndian )\n\t\t\t{\n\t\t\t\treturn helper.i;\n\t\t\t} else {\n\t\t\t\tvar i = helper.i;\n\t\t\t\tvar i1 = haxe.Int64.getHigh(i),\n\t\t\t\t    i2 = haxe.Int64.getLow(i);\n\t\t\t\tvar j2 = ((i1 >>> 24) & 0xFF) | (((i1 >> 16) & 0xFF) << 8) | (((i1 >> 8) & 0xFF) << 16) | ((i1 & 0xFF) << 24);\n\t\t\t\tvar j1 = ((i2 >>> 24) & 0xFF) | (((i2 >> 16) & 0xFF) << 8) | (((i2 >> 8) & 0xFF) << 16) | ((i2 & 0xFF) << 24);\n\n\t\t\t\treturn haxe.Int64.make(j1,j2);\n\t\t\t}\n\t\t#elseif flash\n\t\t\tvar helper = helper;\n\t\t\thelper.position = 0;\n\t\t\thelper.writeDouble(v);\n\t\t\thelper.position = 0;\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(cast helper.readUnsignedInt());\n\t\t\t\ti64.set_high(cast helper.readUnsignedInt());\n\t\t\t}\n\t\t\treturn i64;\n\t\t#elseif php\n\t\t\tvar a = untyped __call__('unpack',isLittleEndian ? 'V2' : 'N2',__call__('pack', 'd', v));\n\t\t\tvar i64 = i64tmp;\n\t\t\t@:privateAccess {\n\t\t\t\ti64.set_low(a[isLittleEndian ? 1 : 2]);\n\t\t\t\ti64.set_high(a[isLittleEndian ? 2 : 1]);\n\t\t\t}\n\t\t\treturn i64;\n\t\t#else\n\t\t\tvar i64 = i64tmp;\n\t\t\tif( v == 0 ) {\n\t\t\t\t@:privateAccess {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(0);\n\t\t\t\t}\n\t\t\t} else if (!Math.isFinite(v)) @:privateAccess {\n\t\t\t\tif (v > 0) {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(2146435072);\n\t\t\t\t} else {\n\t\t\t\t\ti64.set_low(0);\n\t\t\t\t\ti64.set_high(-1048576);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar av = v < 0 ? -v : v;\n\t\t\t\tvar exp = Math.floor(Math.log(av) / LN2);\n\t\t\t\tvar sig = Math.fround(((av / Math.pow(2, exp)) - 1) * 4503599627370496.); // 2^52\n\t\t\t\tvar sig_l = Std.int(sig);\n\t\t\t\tvar sig_h = Std.int(sig / 4294967296.0);\n\t\t\t\t@:privateAccess {\n\t\t\t\t\ti64.set_low(sig_l);\n\t\t\t\t\ti64.set_high((v < 0 ? 0x80000000 : 0) | ((exp + 1023) << 20) | sig_h);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn i64;\n\t\t#end\n\t}\n\n}\n\n#if cs\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class SingleHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:Int;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Single;\n\n\tpublic function new(f:Single)\n\t{\n\t\tthis.i = 0;\n\t\tthis.f = f;\n\t}\n}\n\n@:meta(System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Explicit))\n@:nativeGen @:struct private class FloatHelper\n{\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var i:haxe.Int64;\n\t@:meta(System.Runtime.InteropServices.FieldOffset(0))\n\tpublic var f:Float;\n\n\tpublic function new(f:Float)\n\t{\n\t\tthis.i = haxe.Int64.ofInt(0);\n\t\tthis.f = f;\n\t}\n}\n\n#end\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage haxe.io;\n\n/**\n\tThis class provides a convenient way of working with paths. It supports the\n\tcommon path formats:\n\n\t- directory1/directory2/filename.extension\n\t- directory1\\directory2\\filename.extension\n**/\nclass Path {\n\n\t/**\n\t\tThe directory.\n\n\t\tThis is the leading part of the path that is not part of the file name\n\t\tand the extension.\n\n\t\tDoes not end with a `/` or `\\` separator.\n\n\t\tIf the path has no directory, the value is null.\n\t**/\n\tpublic var dir : String;\n\n\t/**\n\t\tThe file name.\n\n\t\tThis is the part of the part between the directory and the extension.\n\n\t\tIf there is no file name, e.g. for \".htaccess\" or \"/dir/\", the value\n\t\tis the empty String \"\".\n\t**/\n\tpublic var file : String;\n\n\t/**\n\t\tThe file extension.\n\n\t\tIt is separated from the file name by a dot. This dot is not part of\n\t\tthe extension.\n\n\t\tIf the path has no extension, the value is null.\n\t**/\n\tpublic var ext : String;\n\n\t/**\n\t\tTrue if the last directory separator is a backslash, false otherwise.\n\t**/\n\tpublic var backslash : Bool;\n\n\t/**\n\t\tCreates a new Path instance by parsing `path`.\n\n\t\tPath information can be retrieved by accessing the dir, file and ext\n\t\tproperties.\n\t**/\n\tpublic function new( path : String ) {\n\t\tswitch (path) {\n\t\t\tcase \".\" | \"..\":\n\t\t\t\tdir = path;\n\t\t\t\tfile = \"\";\n\t\t\t\treturn;\n\t\t}\n\t\tvar c1 = path.lastIndexOf(\"/\");\n\t\tvar c2 = path.lastIndexOf(\"\\\\\");\n\t\tif( c1 < c2 ) {\n\t\t\tdir = path.substr(0,c2);\n\t\t\tpath = path.substr(c2+1);\n\t\t\tbackslash = true;\n\t\t} else if( c2 < c1 ) {\n\t\t\tdir = path.substr(0,c1);\n\t\t\tpath = path.substr(c1+1);\n\t\t} else\n\t\t\tdir = null;\n\t\tvar cp = path.lastIndexOf(\".\");\n\t\tif( cp != -1 ) {\n\t\t\text = path.substr(cp+1);\n\t\t\tfile = path.substr(0,cp);\n\t\t} else {\n\t\t\text = null;\n\t\t\tfile = path;\n\t\t}\n\t}\n\n\t/**\n\t\tReturns a String representation of `this` path.\n\n\t\tIf `this.backslash` is true, backslash is used as directory separator,\n\t\totherwise slash is used. This only affects the separator between\n\t\t`this.dir` and `this.file`.\n\n\t\tIf `this.directory` or `this.extension` is null, their representation\n\t\tis the empty String \"\".\n\t**/\n\tpublic function toString() : String {\n\t\treturn (if( dir == null ) \"\" else dir + if( backslash ) \"\\\\\" else \"/\") + file + (if( ext == null ) \"\" else \".\" + ext);\n\t}\n\n\t/**\n\t\tReturns the String representation of `path` without the file extension.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function withoutExtension( path : String ) : String {\n\t\tvar s = new Path(path);\n\t\ts.ext = null;\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns the String representation of `path` without the directory.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function withoutDirectory( path ) : String {\n\t\tvar s = new Path(path);\n\t\ts.dir = null;\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tReturns the directory of `path`.\n\n\t\tIf the directory is null, the empty String `\"\"` is returned.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function directory( path ) : String {\n\t\tvar s = new Path(path);\n\t\tif( s.dir == null )\n\t\t\treturn \"\";\n\t\treturn s.dir;\n\t}\n\n\t/**\n\t\tReturns the extension of `path`.\n\n\t\tIf the extension is null, the empty String `\"\"` is returned.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function extension( path ) : String {\n\t\tvar s = new Path(path);\n\t\tif( s.ext == null )\n\t\t\treturn \"\";\n\t\treturn s.ext;\n\t}\n\n\t/**\n\t\tReturns a String representation of `path` where the extension is `ext`.\n\n\t\tIf `path` has no extension, `ext` is added as extension.\n\n\t\tIf `path` or `ext` are null, the result is unspecified.\n\t**/\n\tpublic static function withExtension( path, ext ) : String {\n\t\tvar s = new Path(path);\n\t\ts.ext = ext;\n\t\treturn s.toString();\n\t}\n\n\t/**\n\t\tJoins all paths in `paths` together.\n\n\t\tIf `paths` is empty, the empty String `\"\"` is returned. Otherwise the\n\t\tpaths are joined with a slash between them.\n\n\t\tIf `paths` is null, the result is unspecified.\n\t**/\n\tpublic static function join(paths:Array<String>) : String {\n\t\tvar paths = paths.filter(function(s) return s != null && s != \"\");\n\t\tif (paths.length == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tvar path = paths[0];\n\t\tfor (i in 1...paths.length) {\n\t\t\tpath = addTrailingSlash(path);\n\t\t\tpath += paths[i];\n\t\t}\n\t\treturn normalize(path);\n\t}\n\n\t/**\n\t\tNormalize a given `path` (e.g. make '/usr/local/../lib' to '/usr/lib').\n\n\t\tAlso replaces backslashes \\ with slashes / and afterwards turns\n\t\tmultiple slashes into a single one.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function normalize(path : String) : String {\n\t\tvar slash = \"/\";\n\t\tpath = path.split(\"\\\\\").join(slash);\n\t\tif (path == slash) return slash;\n\n\t\tvar target = [];\n\n\t\tfor( token in path.split(slash) ) {\n\t\t\tif(token == '..' && target.length > 0 && target[target.length-1] != \"..\") {\n\t\t\t\ttarget.pop();\n\t\t\t} else if(token != '.') {\n\t\t\t\ttarget.push(token);\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = target.join(slash);\n\t\tvar regex = ~/([^:])\\/+/g;\n\t\tvar result = regex.replace(tmp, \"$1\" +slash);\n\t\tvar acc = new StringBuf();\n\t\tvar colon = false;\n\t\tvar slashes = false;\n\t\tfor (i in 0...tmp.length) {\n\t\t\tswitch (StringTools.fastCodeAt(tmp, i)) {\n\t\t\t\tcase \":\".code:\n\t\t\t\t\tacc.add(\":\");\n\t\t\t\t\tcolon = true;\n\t\t\t\tcase \"/\".code if (!colon):\n\t\t\t\t\tslashes = true;\n\t\t\t\tcase i:\n\t\t\t\t\tcolon = false;\n\t\t\t\t\tif (slashes) {\n\t\t\t\t\t\tacc.add(\"/\");\n\t\t\t\t\t\tslashes = false;\n\t\t\t\t\t}\n\t\t\t\t\tacc.addChar(i);\n\t\t\t}\n\t\t}\n\t\treturn acc.toString();\n\t}\n\n\t/**\n\t\tAdds a trailing slash to `path`, if it does not have one already.\n\n\t\tIf the last slash in `path` is a backslash, a backslash is appended to\n\t\t`path`.\n\n\t\tIf the last slash in `path` is a slash, or if no slash is found, a slash\n\t\tis appended to `path`. In particular, this applies to the empty String\n\t\t`\"\"`.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\tpublic static function addTrailingSlash( path : String ) : String {\n\t\tif (path.length == 0)\n\t\t\treturn \"/\";\n\t\tvar c1 = path.lastIndexOf(\"/\");\n\t\tvar c2 = path.lastIndexOf(\"\\\\\");\n\t\treturn if ( c1 < c2 ) {\n\t\t\tif (c2 != path.length - 1) path + \"\\\\\";\n\t\t\telse path;\n\t\t} else {\n\t\t\tif (c1 != path.length - 1) path + \"/\";\n\t\t\telse path;\n\t\t}\n\t}\n\n\t/**\n\t\tRemoves trailing slashes from `path`.\n\n\t\tIf `path` does not end with a `/` or `\\`, `path` is returned unchanged.\n\n\t\tOtherwise the substring of `path` excluding the trailing slashes or\n\t\tbackslashes is returned.\n\n\t\tIf `path` is null, the result is unspecified.\n\t**/\n\t@:require(haxe_ver >= 3.1)\n\tpublic static function removeTrailingSlashes ( path : String ) : String {\n\t\twhile (true) {\n\t\t\tswitch(path.charCodeAt(path.length - 1)) {\n\t\t\t\tcase '/'.code | '\\\\'.code: path = path.substr(0, -1);\n\t\t\t\tcase _: break;\n\t\t\t}\n\t\t}\n\t\treturn path;\n\t}\n\n\t/**\n\t\tReturns true if the path is an absolute path, and false otherwise.\n\t**/\n\t@:require(haxe_ver >= 3.2)\n\tpublic static function isAbsolute ( path : String ) : Bool {\n\t\tif (StringTools.startsWith(path, '/')) return true;\n\t\tif (path.charAt(1) == ':') return true;\n\t\tif (StringTools.startsWith(path, '\\\\\\\\')) return true;\n\t\treturn false;\n\t}\n\n\tprivate static function unescape( path : String ) : String {\n\t\tvar regex = ~/-x([0-9][0-9])/g;\n\t\treturn regex.map(path, function(regex) return String.fromCharCode(Std.parseInt(regex.matched(1))));\n\t}\n\n\tprivate static function escape( path : String, allowSlashes : Bool = false ) : String {\n\t\tvar regex = allowSlashes ? ~/[^A-Za-z0-9_\\/\\\\\\.]/g : ~/[^A-Za-z0-9_\\.]/g;\n\t\treturn regex.map(path, function(v) return '-x' + v.matched(0).charCodeAt(0));\n\t}\n}\n","package haxpression;\n\nimport haxpression.ValueType;\nusing StringTools;\nusing haxpression.utils.Arrays;\nusing haxpression.utils.Strings;\n\nabstract Value(ValueType) {\n  static var NA_STRING(default, never) = \"na\";\n  static var NM_STRING(default, never) = \"nm\";\n  static var NULL_STRING(default, never) = \"null\";\n  static var TRUE_STRING(default, never) = \"true\";\n  static var FALSE_STRING(default, never) = \"false\";\n\n  inline public function new(valueType : ValueType) {\n    this = valueType;\n  }\n\n  public static function fromDynamic(value : Dynamic) : Value {\n    if(value == null)\n      return VNA;\n    else if(Std.is(value, Int))\n      return fromInt(value);\n    else if(Std.is(value, Float))\n      return fromFloat(value);\n    else if(Std.is(value, Bool))\n      return fromBool(value);\n    else if(Std.is(value, String))\n      return fromString(value);\n    else\n      return throw 'invalid type for $value';\n  }\n\n  @:from\n  public static function fromValueType(valueType : ValueType) : Value {\n    return new Value(valueType);\n  }\n\n  @:to\n  public function toValueType() : ValueType {\n    return this;\n  }\n\n  @:from\n  public static function fromFloat(v : Float) : Value {\n    return VFloat(v);\n  }\n\n  @:from\n  public static function fromInt(v : Int) : Value {\n    return VInt(v);\n  }\n\n  @:from\n  public static function fromBool(v : Bool) : Value {\n    return VBool(v);\n  }\n\n  @:from\n  public static function fromString(v : String) : Value {\n    if (v.isEmpty()) return VNA;\n    var vl = v.toLowerCase();\n    return if (vl == NULL_STRING || vl == NA_STRING) VNA;\n      else if (vl == NM_STRING) VNM;\n      else if (vl == TRUE_STRING) VBool(true);\n      else if (vl == FALSE_STRING) VBool(false);\n      else if (stringIsInt(v)) VInt(Std.parseInt(v));\n      else if (stringIsFloat(v)) VFloat(Std.parseFloat(v));\n      else VString(v);\n  }\n\n  public static function na() : Value {\n    return VNA;\n  }\n\n  public static function nm() : Value {\n    return VNM;\n  }\n\n  @:to\n  public function toFloat() : Float {\n    return switch this {\n      case VFloat(v) : v;\n      case VInt(v) : v;\n      case VBool(v) : throw new Error('cannot convert Bool to Float');\n      case VString(v) : throw new Error('cannot convert String to Float');\n      case VNA : throw new Error('cannot convert NA to Float');\n      case VNM : throw new Error('cannot convert NM to Float');\n    };\n  }\n\n  @:to\n  public function toInt() : Int {\n    return switch this {\n      case VFloat(v) : Std.int(v);\n      case VInt(v) : v;\n      case VBool(v) : throw new Error('cannot convert Bool to Int');\n      case VString(v) : throw new Error('cannot convert String to Int');\n      case VNA : throw new Error('cannot convert NA to Int');\n      case VNM : throw new Error('cannot convert NM to Int');\n    };\n  }\n\n  @:to\n  public function toBool() : Bool {\n    return switch this {\n      case VFloat(v) : v != 0.0;\n      case VInt(v) : v != 0;\n      case VBool(v) : v;\n      case VString(v) : v.toLowerCase() == TRUE_STRING;\n      case VNA : throw new Error('cannot convert NA to Bool');\n      case VNM : throw new Error('cannot convert NM to Bool');\n    };\n  }\n\n  @:to\n  public function toString() : String {\n    return switch this {\n      case VFloat(v) : Std.string(v);\n      case VInt(v) : Std.string(v);\n      case VBool(v) : v ? TRUE_STRING : FALSE_STRING;\n      case VString(v) : v;\n      case VNA : NA_STRING.toUpperCase();\n      case VNM : NM_STRING.toUpperCase();\n    };\n  }\n\n  public function toDynamic() : Dynamic {\n    return switch this {\n      case VFloat(v) : v;\n      case VInt(v) : v;\n      case VBool(v) : v;\n      case VString(v) : v;\n      case VNA : \"NA\";\n      case VNM : \"NM\";\n    };\n  }\n\n  public function isInt(?test : Int) : Bool {\n    return switch this {\n      case VInt(v) : test == null || test == v;\n      case _ : false;\n    };\n  }\n\n  public function isFloat(?test : Float) : Bool {\n    return switch this {\n      case VFloat(v) : test == null || test == v;\n      case _ : false;\n    };\n  }\n\n  public function isBool(?test : Bool) : Bool {\n    return switch this {\n      case VBool(v) : test == null || test == v;\n      case _ : false;\n    };\n  }\n\n  public function isString(?test : String) : Bool {\n    return switch this {\n      case VString(v) : test == null || test == v;\n      case _ : false;\n    };\n  }\n\n  public function isNumeric(?test : Float) : Bool {\n    return switch this {\n      case VFloat(v) : test == null || test == v;\n      case VInt(v) : test == null || test == v;\n      case _: false;\n    };\n  }\n\n  public function isNA() : Bool {\n    return switch this {\n      case VNA: true;\n      case _: false;\n    };\n  }\n\n  public function isNM() : Bool {\n    return switch this {\n      case VNM: true;\n      case _: false;\n    };\n  }\n\n  public function isNone() : Bool {\n    return isNA() || isNM();\n  }\n\n  public function equals(other : Value) {\n    return switch [this, other.toValueType()] {\n      case [VFloat(value), VFloat(other)] : value == other;\n      case [VFloat(value), VInt(other)] : value == other;\n\n      case [VInt(value), VInt(other)] : value == other;\n      case [VInt(value), VFloat(other)] : value == Std.int(other);\n\n      case [VBool(value), VBool(other)] : value == other;\n      case [VString(value), VString(other)] : value == other;\n      case [VNA, VNA] : true;\n      case [VNM, VNM] : true;\n\n      case [_, _] : false;\n    };\n  }\n\n  public static function stringIsFloat(input : String) : Bool {\n    if (input.isEmpty()) return false;\n    return ~/^[+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?$/.match(input);\n  }\n\n  public static function stringIsInt(input : String) : Bool {\n    return ~/^\\d+$/.match(input);\n  }\n}\n","package haxpression;\n\nclass Error {\n  public var message(default, null) : String;\n  public var expression(default, null) : String;\n  public var position(default, null) : Null<Int>;\n\n  public function new(message : String, ?expression : String, ?position : Int) {\n    this.message = message;\n    this.expression = expression;\n    this.position = position;\n  }\n\n  public function toString() {\n    var expressionInfo = expression != null ? ' in expression: \"$expression\"' : '';\n    var positionInfo = position != null ? ' at position: $position' : '';\n    return '${message}${expressionInfo}${positionInfo}';\n  }\n}\n","package haxpression;\n\nimport Lambda;\nimport haxpression.ValueType;\nusing haxpression.utils.Arrays;\nusing haxpression.utils.Iterators;\n\nclass BinaryOperations {\n  static var map(default, null) : Map<String, { precedence : Int, operation: Value -> Value -> Value }>;\n\n  public static function __init__() {\n    map = new Map();\n    // Higher numbers have higher precedence (higher precedence ops will be evaluated before lower)\n    addOperator(\"||\", 1, function(left, right) return left.toBool() || right.toBool());\n    addOperator(\"&&\", 2, function(left, right) return left.toBool() && right.toBool());\n    addOperator(\"|\", 3, function(left, right) return left.toInt() | right.toInt());\n    addOperator(\"^\", 4, function(left, right) return left.toInt() ^ right.toInt());\n    addOperator(\"&\", 5, function(left, right) return left.toInt() & right.toInt());\n    addOperator(\"==\", 6, function(left, right) return left.toFloat() == right.toFloat());\n    addOperator(\"!=\", 6, function(left, right) return left.toFloat() != right.toFloat());\n    addOperator(\"<\", 7, function(left, right) return left.toFloat() < right.toFloat());\n    addOperator(\">\", 7, function(left, right) return left.toFloat() > right.toFloat());\n    addOperator(\"<=\", 7, function(left, right) return left.toFloat() <= right.toFloat());\n    addOperator(\">=\", 7, function(left, right) return left.toFloat() >= right.toFloat());\n    addOperator(\"<<\", 8, function(left, right) return left.toInt() << right.toInt());\n    addOperator(\">>\", 8, function(left, right) return left.toInt() >> right.toInt());\n    addOperator(\">>>\", 8, function(left, right) return left.toInt() >>> right.toInt());\n    addOperator(\"+\", 9, function(left, right) return left.toFloat() + right.toFloat());\n    addOperator(\"-\", 9, function(left, right) return left.toFloat() - right.toFloat());\n    addOperator(\"*\", 10, function(left, right) return left.toFloat() * right.toFloat());\n    addOperator(\"/\", 10, function(left, right) return left.toFloat() / right.toFloat());\n    addOperator(\"%\", 10, function(left, right) return left.toFloat() % right.toFloat());\n    addOperator(\"**\", 11, function(left, right) return Math.pow(left.toFloat(), right.toFloat()));\n  }\n\n  public static function evaluate(operator, left : Value, right : Value) : Value {\n    return map.get(operator).operation(left, right);\n  }\n\n  public static function addOperator(operator : String, precedence : Int, operation : Value -> Value -> Value) {\n    map.set(operator, {\n      precedence: precedence,\n      operation: wrapOperation(operation)\n    });\n  }\n\n  public static function removeOperator(operator : String) {\n    map.remove(operator);\n  }\n\n  public static function hasOperator(operator : String) : Bool {\n    return map.exists(operator);\n  }\n\n  public static function clearOperators() {\n    map = new Map();\n  }\n\n  public static function getOperatorPrecedence(operator : String) : Int {\n    return map.get(operator).precedence;\n  }\n\n  public static function getMaxOperatorLength() : Int {\n    return map.keys().toArray().reduce(function(maxLength : Int, key : String) : Int {\n      return key.length > maxLength ? key.length : maxLength;\n    }, 0);\n  }\n\n  static function wrapOperation(operation : Value -> Value -> Value) : Value -> Value -> Value {\n    return function(left : Value, right : Value) : Value {\n      return if (left.isNA() || right.isNA()) return VNA;\n        else if (left.isNM() || right.isNM()) return VNM;\n        else operation(left, right);\n    }\n  }\n}\n","package haxpression;\n\nusing haxpression.ExpressionTypes;\n\nclass CallOperations {\n  static var map(default, null) : Map<String, { arity: Int, operation: Array<Value> -> Value }>;\n\n  public static function __init__() {\n    map = new Map();\n    addFunction(\"abs\", 1, function(arguments) return Math.abs(arguments[0].toFloat()));\n    addFunction(\"acos\", 1, function(arguments) return Math.acos(arguments[0].toFloat()));\n    addFunction(\"asin\", 1, function(arguments) return Math.asin(arguments[0].toFloat()));\n    addFunction(\"atan\", 1, function(arguments) return Math.atan(arguments[0].toFloat()));\n    addFunction(\"atan2\", 2, function(arguments) return Math.atan2(arguments[0].toFloat(), arguments[1].toFloat()));\n    addFunction(\"ceil\", 1, function(arguments) return Math.ceil(arguments[0].toFloat()));\n    addFunction(\"cos\", 1, function(arguments) return Math.cos(arguments[0].toFloat()));\n    addFunction(\"exp\", 1, function(arguments) return Math.exp(arguments[0].toFloat()));\n    addFunction(\"fceil\", 1, function(arguments) return Math.fceil(arguments[0].toFloat()));\n    addFunction(\"ffloor\", 1, function(arguments) return Math.ffloor(arguments[0].toFloat()));\n    addFunction(\"floor\", 1, function(arguments) return Math.floor(arguments[0].toFloat()));\n    addFunction(\"fround\", 1, function(arguments) return Math.fround(arguments[0].toFloat()));\n    addFunction(\"log\", 1, function(arguments) return Math.log(arguments[0].toFloat()));\n    addFunction(\"max\", 2, function(arguments) return Math.max(arguments[0].toFloat(), arguments[1].toFloat()));\n    addFunction(\"min\", 2, function(arguments) return Math.min(arguments[0].toFloat(), arguments[1].toFloat()));\n    addFunction(\"pow\", 2, function(arguments) return Math.pow(arguments[0].toFloat(), arguments[1].toFloat()));\n    addFunction(\"random\", 0, function(arguments) return Math.random());\n    addFunction(\"rand\", 0, function(arguments) return Math.random());\n    addFunction(\"round\", 1, function(arguments) return Math.round(arguments[0].toFloat()));\n    addFunction(\"sin\", 1, function(arguments) return Math.sin(arguments[0].toFloat()));\n    addFunction(\"sqrt\", 1, function(arguments) return Math.sqrt(arguments[0].toFloat()));\n    addFunction(\"tan\", 1, function(arguments) return Math.tan(arguments[0].toFloat()));\n  }\n\n  public static function addFunction(callee : String, arity: Int, operation : Array<Value> -> Value) : Void {\n    map.set(callee, { arity: arity, operation: wrapOperation(callee, arity, operation) });\n  }\n\n  public static function removeFunction(callee : String) : Void {\n    map.remove(callee);\n  }\n\n  public static function hasFunction(callee : String) : Bool {\n    return map.exists(callee);\n  }\n\n  public static function getFunction(callee : String) : Array<Value> -> Value {\n    if (!hasFunction(callee)) {\n      throw new Error('no function implementation found for name: $callee');\n    }\n    return map.get(callee).operation;\n  }\n\n  public static function getArity(callee : String) : Int {\n    if (!hasFunction(callee)) {\n      throw new Error('no function implementation found for name: $callee');\n    }\n    return map.get(callee).arity;\n  }\n\n  public static function canEvaluate(callee : String, arguments : Array<ExpressionType>) : Bool {\n    if (!hasFunction(callee)) return false;\n    var arity = getArity(callee);\n    if (arity >= 0 && arity != arguments.length) return false;\n    return arguments.canEvaluateAll();\n  }\n\n  public static function clearFunctions() : Void {\n    map = new Map();\n  }\n\n  public static function evaluate(callee : String, arguments : Array<Value>) : Value {\n    var operation = getFunction(callee);\n    return operation(arguments);\n  }\n\n  static function wrapOperation(callee : String, arity : Int, operation : Array<Value> -> Value) : Array<Value> -> Value {\n    return function(arguments) {\n      if (arity >= 0 && arguments.length != arity) {\n        throw new Error('function $callee expects exactly $arity argument(s)');\n      }\n      return operation(arguments);\n    };\n  }\n}\n","package haxpression;\n\nimport haxpression.ExpressionType;\nimport haxpression.ValueType;\nusing StringTools;\nusing haxpression.utils.Arrays;\nusing haxpression.utils.Iterators;\nusing haxpression.utils.Strings;\nusing haxpression.ExpressionTypes;\nusing haxpression.Expressions;\n\nabstract Expression(ExpressionType) {\n  public inline function new(expressionType : ExpressionType) {\n    this = expressionType;\n  }\n\n  @:from\n  public static function fromExpressionType(expressionType : ExpressionType) {\n    return new Expression(expressionType);\n  }\n\n  @:to\n  public function toExpressionType() : ExpressionType {\n    return this;\n  }\n\n  @:from\n  public static function fromString(input : String) : Expression {\n    return Parser.parse(input);\n  }\n\n  public static function fromStringLiteral(input : String) : Expression {\n    return ELiteral(Value.fromString(input));\n  }\n\n  public static function fromInt(input : Int) : Expression {\n    return ELiteral(Value.fromInt(input));\n  }\n\n  public static function fromFloat(input : Float) : Expression {\n    return ELiteral(Value.fromFloat(input));\n  }\n\n  public static function fromBool(input : Bool) : Expression {\n    return ELiteral(Value.fromBool(input));\n  }\n\n  public function toString() : String {\n    return switch this {\n      case ELiteral(value) : new Value(value).toString();\n      case EIdentifier(name) : name;\n      case EUnary(operator, operand): '${operator}${getString(operand)}';\n      case EBinary(operator, left, right) : '(${getString(left)} $operator ${getString(right)})';\n      case ECall(callee, arguments): '${callee}(${getStringDelimited(arguments, \",\")})';\n      case EConditional(test, consequent, alternate) : '(${getString(test)} ? ${getString(consequent)} : ${getString(alternate)})';\n      case EArray(items): '[${getStringDelimited(items, \",\")}]';\n      case ECompound(items): getStringDelimited(items, \";\");\n    };\n  }\n\n  public function toDynamic() : Dynamic {\n    return switch this {\n      case ELiteral(value) : new Value(value).toDynamic();\n      case _ : toString();\n    };\n  }\n\n  public function toObject() : {} {\n    return switch this {\n      case ELiteral(value) : {\n        type: \"Literal\",\n        value: new Value(value).toDynamic() // allow the value to be passed-through with no conversion\n      };\n      case EIdentifier(name) : {\n        type: \"Identifier\",\n        name: name\n      };\n      case EUnary(operator, operand) : {\n        type: \"Unary\",\n        operator: operator,\n        operand: (operand : Expression).toObject()\n      };\n      case EBinary(operator, left, right) : {\n        type: \"Binary\",\n        operator: operator,\n        left: (left : Expression).toObject(),\n        right: (right : Expression).toObject()\n      };\n      case ECall(callee, arguments): {\n        type: \"Call\",\n        callee: callee,\n        arguments: arguments.toObject()\n      };\n      case EConditional(test, consequent, alternate): {\n        type: \"Conditional\",\n        test: (test : Expression).toObject(),\n        consequent: (consequent : Expression).toObject(),\n        alternate: (alternate : Expression).toObject()\n      };\n      case EArray(items) : {\n        type: \"Array\",\n        items: items.toObject()\n      };\n      case ECompound(items) : {\n        type: \"Compound\",\n        items: items.toObject()\n      };\n    };\n  }\n\n  public function hasVariables() : Bool {\n    return getVariables().length > 0;\n  }\n\n  public function hasVariablesStartingWith(text : String) {\n    return getVariables().any(function(variable) {\n      return variable.startsWith(text);\n    });\n  }\n\n  public function hasVariablesContaining(text : String) {\n    return getVariables().any(function(variable) {\n      return variable.contains(text);\n    });\n  }\n\n  public function hasVariablesEndingWith(text : String) {\n    return getVariables().any(function(variable) {\n      return variable.endsWith(text);\n    });\n  }\n\n  public function hasVariablesWithin(variables : Array<String>) : Bool {\n    return getVariables().all(function(variable) {\n      return variables.contains(variable);\n    });\n  }\n\n  public function getVariables(?options : { ?sort: Bool }) : Array<String> {\n    if (options == null) options = {};\n    if (options.sort == null) options.sort = true;\n    var variables = [];\n    accumulateVariables(variables);\n    if (options.sort) {\n      variables.sort(function(a, b) {\n        a = a.toLowerCase();\n        b = b.toLowerCase();\n        return if (a > b) 1;\n          else if (a < b) -1;\n          else 0;\n      });\n    }\n    return variables;\n  }\n\n  public function clone() : Expression {\n    if (!Config.useCloneForExpressions) {\n      return this;\n    }\n\n    return switch this {\n      case ELiteral(value) :\n        ELiteral(value);\n      case EIdentifier(name) :\n        EIdentifier(name);\n      case EUnary(operator, operand) :\n        EUnary(operator, (operand : Expression).clone());\n      case EBinary(operator, left, right) :\n        EBinary(operator, (left : Expression).clone(), (right : Expression).clone());\n      case ECall(callee, arguments) :\n        ECall(callee, arguments.clone());\n      case EConditional(test, consequent, alternate) :\n        EConditional((test : Expression).clone(), (consequent : Expression).clone(), (alternate : Expression).clone());\n      case EArray(items) :\n        EArray(items.clone());\n      case ECompound(items) :\n        ECompound(items.clone());\n    };\n  }\n\n  public function substitute(variables : Map<String, ExpressionOrValue>) : Expression {\n    return switch this {\n      case ELiteral(value):\n        ELiteral(value);\n      case EIdentifier(name):\n        variables.exists(name) ? variables.get(name).toExpression() : EIdentifier(name);\n      case EUnary(operator, expression):\n        EUnary(operator, (expression : Expression).substitute(variables));\n      case EBinary(operator, left, right):\n        EBinary(operator, (left : Expression).substitute(variables), (right : Expression).substitute(variables));\n      case ECall(callee, arguments):\n        ECall(callee, arguments.substitute(variables));\n      case EConditional(test, consequent, alternate):\n        EConditional((test : Expression).substitute(variables), (consequent : Expression).substitute(variables), (alternate : Expression).substitute(variables));\n      case EArray(items):\n        EArray(items.substitute(variables));\n      case ECompound(items):\n        EArray(items.substitute(variables));\n    };\n  }\n\n  public function simplify() : Expression {\n    return switch this {\n      case ELiteral(value):\n        ELiteral(value);\n      case EIdentifier(name):\n        EIdentifier(name);\n      case EUnary(operator, operand):\n        if ((operand : Expression).canEvaluate()) {\n          ELiteral(UnaryOperations.evaluate(operator, (operand : Expression).evaluate()));\n        } else {\n          EUnary(operator, (operand : Expression).simplify().toExpressionType());\n        }\n      case EBinary(operator, left, right):\n        if ((left : Expression).canEvaluate() && (right : Expression).canEvaluate()) {\n          ELiteral(BinaryOperations.evaluate(operator, (left : Expression).evaluate(), (right : Expression).evaluate()));\n        } else {\n          EBinary(operator, (left : Expression).simplify(), (right : Expression).simplify());\n        }\n      case EConditional(test, consequent, alternate):\n        if ((test : Expression).canEvaluate()) {\n          (test : Expression).evaluate() ?\n            (consequent : Expression).simplify() :\n            (alternate : Expression).simplify();\n        } else {\n          EConditional((test : Expression).simplify(), (consequent : Expression).simplify(), (alternate : Expression).simplify());\n        }\n      case ECall(callee, arguments):\n        if (arguments.canEvaluateAll()) {\n          return ELiteral(CallOperations.evaluate(callee, arguments.evaluate()));\n        } else {\n          ECall(callee, arguments.simplify());\n        }\n      case EArray(items):\n        EArray(items.simplify());\n      case ECompound(items):\n        ECompound(items.simplify());\n    };\n  }\n\n  public function canEvaluate() : Bool {\n    return switch this {\n      case ELiteral(value):\n        true;\n      case EIdentifier(name):\n        false;\n      case EUnary(operator, operand):\n        (operand : Expression).canEvaluate();\n      case EBinary(operator, left, right):\n        (left : Expression).canEvaluate() && (right : Expression).canEvaluate();\n      case ECall(callee, arguments):\n        CallOperations.canEvaluate(callee, arguments);\n      case EConditional(test, consequent, alternate):\n        if (!(test : Expression).canEvaluate()) {\n          false;\n        } else {\n          (test : Expression).evaluate() ?\n            (consequent : Expression).canEvaluate() :\n            (alternate : Expression).canEvaluate();\n        }\n      case EArray(items):\n        items.canEvaluateAll();\n      case ECompound(items):\n        items.canEvaluateAll();\n    };\n  }\n\n  public function evaluate(?variables : Map<String, Value>) : Value {\n    if (variables == null) variables = new Map();\n\n    return switch this {\n      case ELiteral(value) :\n        value;\n      case EIdentifier(name):\n        if (!variables.exists(name)) {\n          throw new Error('cannot evaluate expression with unset variable: $name');\n        }\n        variables.get(name);\n      case EUnary(operator, operand):\n        var operandValue = (operand : Expression).evaluate(variables);\n        UnaryOperations.evaluate(operator, operandValue);\n      case EBinary(operator, left, right):\n        var leftValue = (left : Expression).evaluate(variables);\n        var rightValue = (right : Expression).evaluate(variables);\n        BinaryOperations.evaluate(operator, leftValue, rightValue);\n      case ECall(callee, arguments):\n        CallOperations.evaluate(callee, arguments.evaluate(variables));\n      case EConditional(test, consequent, alternate):\n        (test : Expression).evaluate(variables).toBool() ?\n          (consequent : Expression).evaluate(variables) :\n          (alternate : Expression).evaluate(variables);\n      case EArray(items):\n        // We'll just assume the value of an array expression is the last value\n        // or none if there are no items in the array\n        if (items.length == 0) VNA;\n        else {\n          var values = items.evaluate(variables);\n          values[values.length - 1];\n        }\n      case ECompound(items):\n        // We'll just assume the value of an compound expression is the last value\n        // or none if there are no items in the array\n        if (items.length == 0) VNA;\n        else {\n          var values = items.evaluate(variables);\n          values[values.length - 1];\n        }\n    };\n  }\n\n  public function isLiteral(?value : Value) : Bool {\n    return switch [toExpressionType(), value.toValueType()] {\n      case [ELiteral(VInt(a)), VInt(b)] : a == b;\n      case [ELiteral(VFloat(a)), VFloat(b)] : a == b;\n      case [ELiteral(VString(a)), VString(b)] : a == b;\n      case [ELiteral(VBool(a)), VBool(b)] : a == b;\n      case _: false;\n    };\n  }\n\n  public function isIdentifier(?name : String) : Bool {\n    return switch toExpressionType() {\n      case EIdentifier(n) : name != null ? name == n : true;\n      case _: false;\n    };\n  }\n\n  public function isCompound() : Bool {\n    return switch toExpressionType() {\n      case ECompound(_) : true;\n      case _: false;\n    };\n  }\n\n  /*\n  public function equals(right : Expression) : Bool {\n    return switch [this, right.toExpressionType()] {\n      case [Literal(l), Literal(r)] : l.equals(r);\n      case [Identifier(l), Identifier(r)] : l == r;\n      case [Unary(lop, l), Unary(rop, r)] : lop == rop && l.equals(r);\n      case [Binary(lop, ll, lr), Binary(rop, rl, rr)] : lop == rop && ll.equals(rl) && lr.equals(rr);\n      case [Call(lc, ls), Call(rc, rs)] : lc == rc && ls.length == rs.length && ls.length.range\n      //case [_, _] : false;\n    };\n  }\n  */\n\n  function accumulateVariables(variables : Array<String>) : Void {\n    switch this {\n      case ELiteral(value) :\n        // no-op - no variables to accumulate here\n      case EIdentifier(name) :\n        // Push a variable if we haven't seen it already\n        if (variables.indexOf(name) == -1) variables.push(name);\n      case EUnary(operator, operand):\n        (operand : Expression).accumulateVariables(variables);\n      case EBinary(operator, left, right):\n        (left : Expression).accumulateVariables(variables);\n        (right : Expression).accumulateVariables(variables);\n      case ECall(callee, arguments):\n        arguments.each(function(expression) (expression : Expression).accumulateVariables(variables));\n      case EConditional(test, consequent, alternate):\n        (test : Expression).accumulateVariables(variables);\n        (consequent : Expression).accumulateVariables(variables);\n        (alternate : Expression).accumulateVariables(variables);\n      case EArray(items):\n        items.each(function(expression) (expression : Expression).accumulateVariables(variables));\n      case ECompound(items):\n        items.each(function(expression) (expression : Expression).accumulateVariables(variables));\n    };\n  }\n\n  function getString(expressionType : ExpressionType) : String {\n    return (expressionType : Expression).toString();\n  }\n\n  function getStringDelimited(expressionTypes : Array<ExpressionType>, delimiter : String) : String {\n    delimiter = '${delimiter.trim()} ';\n    return expressionTypes.map(getString).join(delimiter);\n  }\n}\n","package haxpression;\n\nimport haxe.ds.Either;\nimport haxpression.ExpressionType;\nimport haxpression.ValueType;\n\nabstract ExpressionOrValue(Either<Expression, Value>) {\n  public function new(either : Either<Expression, Value>) {\n    this = either;\n  }\n\n  @:from\n  public static function fromEither(either : Either<Expression, Value>) {\n    return new ExpressionOrValue(either);\n  }\n\n  @:from\n  public static function fromExpression(expression : Expression) : ExpressionOrValue {\n    return Left(expression);\n  }\n\n  @:from\n  public static function fromValue(value : Value) : ExpressionOrValue {\n    return Right(value);\n  }\n\n  @:from\n  public static function fromFloat(value : Float) : ExpressionOrValue {\n    return fromValue(value);\n  }\n\n  @:from\n  public static function fromInt(value : Int) : ExpressionOrValue {\n    return fromValue(value);\n  }\n\n  // Implicit conversion assume strings are expressions, not string values.\n  @:from\n  public static function fromString(expressionString: String) : ExpressionOrValue {\n    return fromExpression(expressionString);\n  }\n\n  @:from\n  public static function fromBool(value : Bool) : ExpressionOrValue {\n    return fromValue(value);\n  }\n\n  @:to\n  public function toEither() : Either<Expression, Value> {\n    return this;\n  }\n\n  @:to\n  public function toExpression() : Expression {\n    return switch this {\n      case Left(expression): expression;\n      case Right(value): ELiteral(value);\n    };\n  }\n\n  @:to\n  public function toValue() : Value {\n    return switch this {\n      case Left(expression): expression.evaluate();\n      case Right(value): value;\n    };\n  }\n\n  public function toDynamic() : Dynamic {\n    return switch this {\n      case Left(expression) : expression.toDynamic();\n      case Right(value) : value.toDynamic();\n    };\n  }\n}\n","package haxpression;\n\nusing haxpression.utils.Arrays;\n\nclass ExpressionTypes {\n  public static function clone(expressionTypes : Array<ExpressionType>) : Array<ExpressionType> {\n    return expressionTypes.map(function(expressionType) {\n      return (expressionType : Expression).clone().toExpressionType();\n    });\n  }\n\n  public static function canEvaluateAll(expressionTypes : Array<ExpressionType>) : Bool {\n    return expressionTypes.all(function(expressionType) {\n      return (expressionType : Expression).canEvaluate();\n    });\n  }\n\n  public static function simplify(expressionTypes : Array<ExpressionType>) : Array<ExpressionType> {\n    return expressionTypes.map(function(expressionType) {\n      return (expressionType : Expression).simplify().toExpressionType();\n    });\n  }\n\n  public static function evaluate(expressionTypes : Array<ExpressionType>, ?variables : Map<String, Value>) : Array<Value> {\n    return expressionTypes.map(function(expressionType) {\n      return (expressionType : Expression).evaluate(variables);\n    });\n  }\n\n  public static function substitute(expressionTypes : Array<ExpressionType>, variables : Map<String, ExpressionOrValue>) : Array<ExpressionType> {\n    return expressionTypes.map(function(expressionType) {\n      return (expressionType : Expression).substitute(variables).toExpressionType();\n    });\n  }\n\n  public static function toObject(expressionTypes : Array<ExpressionType>) : Array<{}> {\n    return expressionTypes.map(function(expressionType) {\n      return (expressionType : Expression).toObject();\n    });\n  }\n}\n\n","package haxpression;\n\nusing haxpression.utils.Arrays;\n\n/**\n  Extension methods for Array<Expression>\n  **/\nclass Expressions {\n  public static function toExpressionTypes(expressions : Array<Expression>) : Array<ExpressionType> {\n    return expressions.map(function(expression) {\n      return expression.toExpressionType();\n    });\n  }\n\n  public static function clone(expressions : Array<Expression>) : Array<Expression> {\n    return expressions.map(function(expression) {\n      return expression.clone();\n    });\n  }\n\n  public static function evaluate(expressions : Array<Expression>, ?variables : Map<String, Value>) : Array<Value> {\n    return expressions.map(function(expression) {\n      return expression.evaluate(variables);\n    });\n  }\n\n  public static function hasVariablesStartingWith(expressions : Array<Expression>, text : String) {\n    return expressions.any(function(expression) {\n      return expression.hasVariablesStartingWith(text);\n    });\n  }\n}\n","package haxpression;\n\nimport haxpression.ExpressionType;\nimport haxpression.ValueType;\nimport haxpression.utils.Chars;\nusing StringTools;\n\nclass Parser {\n  var inputString : String;\n  var index : Int;\n  var length : Int;\n  var expressions : Array<Expression>;\n\n  function new(inputString : String) {\n    this.inputString = inputString;\n    this.index = 0;\n    this.length = inputString.length;\n    this.expressions = [];\n  }\n\n  public static function parse(input : String) : Expression {\n    var parser = new Parser(input);\n    return parser.internalParse();\n  }\n\n  function internalParse() : Expression {\n    while (index < length) {\n      var charCode = charCodeAt(index);\n      if (charCode == Chars.SEMICOLON_CODE || charCode == Chars.COMMA_CODE) {\n        index++;\n      } else {\n        var expression = gobbleExpression();\n\n        if (expression != null) {\n          expressions.push(expression);\n        } else if (index < length) {\n          throw new Error('unexpected internal parse \"${charAt(index)}\"', inputString, index);\n        }\n      }\n    }\n\n    return if (expressions.length == 1) {\n      expressions[0];\n    } else {\n      ECompound(expressions.map(function(expression) return expression.toExpressionType()));\n    }\n  }\n\n  function charAt(index : Int) : String {\n    return inputString.charAt(index);\n  }\n\n  function charCodeAt(index : Int) : Int {\n    return inputString.charCodeAt(index);\n  }\n\n  function gobbleSpaces() : Void {\n    var charCode = charCodeAt(index);\n    while (index < length && Chars.isWhiteSpace(charCode)) {\n      charCode = charCodeAt(++index);\n    }\n  }\n\n  function gobbleExpression() : Expression {\n    var expression = gobbleBinaryExpression();\n    gobbleSpaces();\n    if (charCodeAt(index) == Chars.QUESTION_MARK_CODE) {\n      index++;\n      var consequent = gobbleExpression();\n      if (consequent == null) {\n        throw new Error('expected a \"consequent\" expression for ternary conditional expression', inputString, index);\n      }\n      gobbleSpaces();\n      if (charCodeAt(index) == Chars.COLON_CODE) {\n        index++;\n        var alternate = gobbleExpression();\n        if (alternate == null) {\n          throw new Error('expected an \"alternate\" expression for ternary conditional expression', inputString, index);\n        }\n        return EConditional(expression, consequent, alternate);\n      }\n    }\n\n    // Not a conditional - just return the expression\n    return expression;\n  }\n\n  function gobbleBinaryOperator() : Null<String> {\n    gobbleSpaces();\n    var toCheck : String = inputString.substr(index, BinaryOperations.getMaxOperatorLength());\n    var toCheckLength : Int = toCheck.length;\n    while (toCheckLength > 0) {\n      if (BinaryOperations.hasOperator(toCheck)) {\n        index += toCheckLength;\n        return toCheck;\n      }\n      toCheckLength = toCheckLength - 1;\n      toCheck = toCheck.substr(0, toCheckLength);\n    }\n    return null; // not an operator\n  }\n\n  function gobbleBinaryExpression() : Expression {\n    var char : String;\n    var expression : Expression;\n    var binaryOperator : String;\n    var precedence : Int;\n    var stack : Array<Dynamic>;\n    var binaryOperatorInfo : { operator : String, precedence : Int };\n    var left : Expression;\n    var right : Expression;\n    var left = gobbleToken();\n    var binaryOperator = gobbleBinaryOperator();\n    if (binaryOperator == null) {\n      return left;\n    }\n    binaryOperatorInfo = {\n      operator: binaryOperator,\n      precedence: BinaryOperations.getOperatorPrecedence(binaryOperator)\n    };\n    var right = gobbleToken();\n    if (right == null) {\n      throw new Error('expected expression after binary operator: \"$binaryOperator\"', inputString, index);\n    }\n\n    // TODO: This code is untyped because of how the original jsepimplementation worked.\n    // Could be cleaned up.\n    var stack : Array<Dynamic> = [left, binaryOperatorInfo, right];\n\n    while ((binaryOperator = gobbleBinaryOperator()) != null) {\n      precedence = BinaryOperations.getOperatorPrecedence(binaryOperator);\n\n      if (precedence == 0) {\n        break;\n      }\n\n      binaryOperatorInfo = {\n        operator: binaryOperator,\n        precedence: precedence\n      };\n\n      while ((stack.length > 2) && (precedence <= stack[stack.length - 2].precedence)) {\n        right = stack.pop();\n        binaryOperator = stack.pop().operator;\n        left = stack.pop();\n        var expression = EBinary(binaryOperator, left, right);\n        stack.push(expression);\n      }\n\n      expression = gobbleToken();\n      if (expression == null) {\n        throw new Error('expected expression after binary operator: \"$binaryOperator\"', inputString, index);\n      }\n      stack.push(binaryOperatorInfo);\n      stack.push(expression);\n    }\n\n    var i = stack.length - 1;\n    expression = stack[i];\n    while (i > 1) {\n      expression = EBinary(stack[i - 1].operator, stack[i - 2], expression);\n      i -= 2;\n    }\n\n    return expression;\n  }\n\n  function gobbleToken() : Null<Expression> {\n    gobbleSpaces();\n\n    var charCode = charCodeAt(index);\n\n\n    if (Chars.isDecimalDigit(charCode) || charCode == Chars.PERIOD_CODE) {\n      return gobbleNumericLiteral();\n    } else if (charCode == Chars.SINGLE_QUOTE_CODE || charCode == Chars.DOUBLE_QUOTE_CODE) {\n      return gobbleStringLiteral();\n    } else if (Chars.isIdentifierStart(charCode) || charCode == Chars.OPEN_PAREN_CODE) {\n      return gobbleVariable();\n    } else if (charCode == Chars.OPEN_BRACKET_CODE) {\n      return gobbleArray();\n    } else {\n      // Try to gobble unary operator expression\n      var toCheck : String = inputString.substr(index, UnaryOperations.getMaxOperatorLength());\n      var toCheckLength : Int = toCheck.length;\n      while (toCheckLength > 0) {\n        if (UnaryOperations.hasOperator(toCheck)) {\n          index += toCheckLength;\n          return EUnary(toCheck, gobbleToken());\n        }\n        toCheckLength = toCheckLength - 1;\n        toCheck = toCheck.substr(0, toCheckLength);\n      }\n\n      // No expression found\n      return null;\n    }\n  }\n\n  function gobbleNumericLiteral() : Expression {\n    var numberString = \"\";\n    while (index < length && Chars.isDecimalDigit(charCodeAt(index))) {\n      numberString += charAt(index++);\n    }\n\n    if (charCodeAt(index) == Chars.PERIOD_CODE) {\n      numberString += charAt(index++);\n\n      while (index < length && Chars.isDecimalDigit(charCodeAt(index))) {\n        numberString += charAt(index++);\n      }\n    }\n\n    // check for exponent\n    var char = charAt(index);\n    if (char == \"e\" || char == \"E\") {\n      numberString += charAt(index++);\n      char = charAt(index);\n      if (char == \"+\" || char == \"-\") {\n        numberString += charAt(index++);\n      }\n\n      while (index < length && Chars.isDecimalDigit(charCodeAt(index))) {\n        numberString += charAt(index++);\n      }\n\n      if (!Chars.isDecimalDigit(charCodeAt(index - 1))) {\n        throw new Error('expected exponent in numeric literal: \"${numberString}${charAt(index)}\"', inputString, index);\n      }\n    }\n\n    if(index >= length)\n      return ELiteral(VFloat(Std.parseFloat(numberString)));\n\n    var charCode = charCodeAt(index);\n\n\n    if (Chars.isIdentifierStart(charCode)) {\n      throw new Error('variable names cannot start with a number: \"${numberString}${charAt(index)}\"', inputString, index);\n    } else if (charCode == Chars.PERIOD_CODE) {\n      throw new Error('unexpected period in numeric literal: \"${numberString}${charAt(index)}\"', inputString, index);\n    }\n\n\n    return ELiteral(VFloat(Std.parseFloat(numberString)));\n  }\n\n  function gobbleStringLiteral() : Expression {\n    var str = \"\";\n    var quote = charAt(index++);\n    var closed = false;\n\n    while (index < length) {\n      var char = charAt(index++);\n      if (char == quote) {\n        closed = true;\n        break;\n      } else if (char == \"\\\\\") {\n        char = charAt(index++);\n        switch char {\n          case \"n\": str += '\\n';\n          case \"r\": str += '\\r';\n          case \"t\": str += '\\t';\n          //case \"b\": str += '\\b'; // haxe error\n          //case \"f\": str += '\\f'; // haxe error\n          case \"v\": str += '\\x0B';\n        };\n      } else {\n        str += char;\n      }\n    }\n\n    if (!closed) {\n      throw new Error('unclosed quote after: \"$str\"', inputString, index);\n    }\n\n    return ELiteral(VString(str));\n  }\n\n  function gobbleIdentifier() : Expression {\n    var charCode = charCodeAt(index);\n    var start = index;\n    var identifier : String;\n\n    if (Chars.isIdentifierStart(charCode)) {\n      index++;\n    } else {\n      throw new Error('unexpected ${charAt(index)}', inputString, index);\n    }\n\n    while (index < length) {\n      charCode = charCodeAt(index);\n      if (Chars.isIdentifierPart(charCode)){\n        index++;\n      } else {\n        break;\n      }\n    }\n\n    identifier = inputString.substring(start, index);\n\n    // Special identifiers that are actually values\n    return switch identifier.toLowerCase() {\n      case \"true\" : ELiteral(VBool(true));\n      case \"false\" : ELiteral(VBool(false));\n      case \"null\" : ELiteral(VNA);\n      case \"undefined\" : ELiteral(VNA);\n      case \"na\" : ELiteral(VNA);\n      case \"nm\" : ELiteral(VNM);\n      case _ : EIdentifier(identifier);\n    };\n  }\n\n  function gobbleArguments(terminationCharCode : Int) : Array<Expression> {\n    var expressions : Array<Expression> = [];\n    var sawTermination = false;\n\n    while (index < length) {\n      gobbleSpaces();\n      var charCode = charCodeAt(index);\n\n      if (charCode == terminationCharCode) {\n        sawTermination = true;\n        index++;\n        break;\n      } else if (charCode == Chars.COMMA_CODE) {\n        index++;\n      } else {\n        var expression = gobbleExpression();\n        if (expression == null || expression.isCompound()) {\n          throw new Error('expected comma between arguments', inputString, index);\n        }\n        expressions.push(expression);\n      }\n    }\n\n    if (!sawTermination) {\n      var char = String.fromCharCode(terminationCharCode);\n      throw new Error('expected termination character: \"$char\"', inputString, index);\n    }\n\n    return expressions;\n  }\n\n  function gobbleVariable() : Expression {\n    var charCode = charCodeAt(index);\n    var expression : Expression;\n\n    if (charCode == Chars.OPEN_PAREN_CODE) {\n      expression = gobbleGroup();\n    } else {\n      expression = gobbleIdentifier();\n    }\n\n    gobbleSpaces();\n\n    if(index < length) {\n      charCode = charCodeAt(index);\n\n      while (index < length && (charCode == Chars.PERIOD_CODE || charCode == Chars.OPEN_BRACKET_CODE || charCode == Chars.OPEN_PAREN_CODE)) {\n        index++;\n\n        if (charCode == Chars.PERIOD_CODE) {\n          // TODO: add support for this?\n          throw new Error('member access expressions like \"a.b\" are not supported', inputString, index);\n        } else if (charCode == Chars.OPEN_BRACKET_CODE) {\n          // TODO: add support for this?\n          throw new Error('member access expressions like \"a[\"b\"]\" are not supported', inputString, index);\n        } else if (charCode == Chars.OPEN_PAREN_CODE) {\n          var callee = switch expression.toExpressionType() {\n            case EIdentifier(name) : name;\n            case _: throw new Error('expected function name identifier for function call expression', inputString, index);\n          };\n          var arguments = gobbleArguments(Chars.CLOSE_PAREN_CODE)\n          .map(function(expression) return expression.toExpressionType());\n          expression = ECall(callee, arguments);\n        }\n        gobbleSpaces();\n        charCode = charCodeAt(index);\n      }\n    }\n\n    return expression;\n  }\n\n\n  function gobbleGroup() : Expression {\n    index++;\n    var expression = gobbleExpression();\n\n    if (charCodeAt(index) == Chars.CLOSE_PAREN_CODE) {\n      index++;\n      return expression;\n    } else {\n      throw new Error('unclosed (', inputString, index);\n    }\n  }\n\n  function gobbleArray() : Expression {\n    index++;\n    var items = gobbleArguments(Chars.CLOSE_BRACKET_CODE)\n      .map(function(expression) return expression.toExpressionType());\n    return EArray(items);\n  }\n}\n","package haxpression;\n\nimport Lambda;\nimport haxpression.ValueType;\nusing haxpression.utils.Arrays;\nusing haxpression.utils.Iterators;\n\nclass UnaryOperations {\n  static var map(default, null) : Map<String, { operation: Value -> Value }>;\n\n  public static function __init__() {\n    map = new Map();\n    addOperator(\"-\", function(value) return value.toFloat() * -1);\n    addOperator(\"+\", function(value) return value.toFloat() * 1);\n    addOperator(\"!\", function(value) return !(value.toBool()));\n    addOperator(\"~\", function(value) return ~(value.toInt()));\n  }\n\n  public static function evaluate(operator : String, value : Value) : Value {\n    return map.get(operator).operation(value);\n  }\n\n  public static function addOperator(operator : String, operation : Value -> Value) {\n    map.set(operator, {\n      operation: wrapOperation(operation)\n    });\n  }\n\n  public static function removeOperator(operator : String) {\n    map.remove(operator);\n  }\n\n  public static function hasOperator(operator : String) : Bool {\n    return map.exists(operator);\n  }\n\n  public static function clearOperators() {\n    map = new Map();\n  }\n\n  public static function getMaxOperatorLength() : Int {\n    return map.keys().toArray().reduce(function(maxLength : Int, key : String) : Int {\n      return key.length > maxLength ? key.length : maxLength;\n    }, 0);\n  }\n\n  static function wrapOperation(operation : Value -> Value) : Value -> Value {\n    return function(value : Value) : Value {\n      return if (value.isNA()) return VNA;\n        else if (value.isNM()) return VNM;\n        else operation(value);\n    }\n  }\n}\n","package haxpression.utils;\n\nusing Lambda;\n\nclass Arrays {\n  public static function contains<T>(items : Array<T>, item : T) : Bool {\n    return items.indexOf(item) != -1;\n  }\n\n  public static function isEmpty<T>(items : Array<T>) : Bool {\n    return items == null || items.length == 0;\n  }\n\n  public static function isFull<T>(items : Array<T>) : Bool {\n    return items != null && items.length > 0;\n  }\n\n  public static function containsAll<T>(items : Array<T>, others : Array<T>) : Bool {\n    if (items.length == 0 && others.length == 0) return true;\n    if (items.length == 0) return false;\n    if (others.length == 0) return true;\n    return all(others, function(other) {\n      return contains(items, other);\n    });\n  }\n\n  public static function containsAny<T>(items : Array<T>, others : Array<T>) : Bool {\n    if (items.length == 0 && others.length == 0) return true;\n    if (items.length == 0) return false;\n    if (others.length == 0) return true;\n    return any(others, function(other) {\n      return contains(items, other);\n    });\n  }\n\n  public static function containsNone<T>(items : Array<T>, others : Array<T>) : Bool {\n    if (items.length == 0 && others.length == 0) return true;\n    if (items.length == 0) return true;\n    if (others.length == 0) return true;\n    return !containsAny(items, others);\n  }\n\n  public static function each<T>(items : Array<T>, callback : T -> Void) : Void {\n    return items.iter(callback);\n  }\n\n  public static function find<T>(items : Array<T>, callback : T -> Bool) : T {\n    for (item in items) {\n      if (callback(item)) {\n        return item;\n      }\n    }\n    return null;\n  }\n\n  public static function any<T>(items : Array<T>, check : T -> Bool) : Bool {\n    return items.find(check) != null;\n  }\n\n  public static function all<T>(items : Array<T>, check : T -> Bool) : Bool {\n    return items.filter(check).length == items.length;\n  }\n\n  public static function reduce<T, TResult>(items : Array<T>, callback : TResult -> T -> TResult, acc : TResult) : TResult {\n    for (item in items) {\n      acc = callback(acc, item);\n    }\n    return acc;\n  }\n}\n","package haxpression.utils;\n\nusing StringTools;\nusing haxpression.utils.Arrays;\n\nclass Chars {\n  public static var PERIOD(default, never) = \".\";\n  public static var COMMA(default, never) = \",\";\n  public static var SINGLE_QUOTE(default, never) = \"'\";\n  public static var DOUBLE_QUOTE(default, never) = '\"';\n  public static var EXCLAMATION_POINT(default, never) = \"!\";\n  public static var OPEN_PAREN(default, never) = \"(\";\n  public static var CLOSE_PAREN(default, never) = \")\";\n  public static var OPEN_BRACKET(default, never) = \"[\";\n  public static var CLOSE_BRACKET(default, never) = \"]\";\n  public static var QUESTION_MARK(default, never) = \"?\";\n  public static var SEMICOLON(default, never) = \";\";\n  public static var COLON(default, never) = \":\";\n\n  public static var TAB_CODE(default, never) = 9;\n  public static var LF_CODE(default, never) = 10;\n  public static var CR_CODE(default, never) = 13;\n  public static var SPACE_CODE(default, never) = 32;\n  public static var EXCLAMATION_POINT_CODE(default, never) = 33;\n  public static var DOUBLE_QUOTE_CODE(default, never) = 34;\n  public static var DOLLAR_CODE(default, never) = 36;\n  public static var SINGLE_QUOTE_CODE(default, never) = 39;\n  public static var OPEN_PAREN_CODE(default, never) = 40;\n  public static var CLOSE_PAREN_CODE(default, never) = 41;\n  public static var COMMA_CODE(default, never) = 44;\n  public static var PERIOD_CODE(default, never) = 46;\n  public static var COLON_CODE(default, never) = 58;\n  public static var SEMICOLON_CODE(default, never) = 59;\n  public static var QUESTION_MARK_CODE(default, never) = 63;\n  public static var OPEN_BRACKET_CODE(default, never) = 91;\n  public static var CLOSE_BRACKET_CODE(default, never) = 93;\n  public static var UNDERSCORE_CODE(default, never) = 95;\n\n  // allow for other characters starting/inside identifiers\n  public static var OTHER_IDENTIFIER_START_CODES = [];\n  public static var OTHER_IDENTIFIER_PART_CODES = [EXCLAMATION_POINT_CODE, DOLLAR_CODE, COLON_CODE];\n\n  public static function isDecimalDigit(charCode : Int) : Bool {\n    return charCode >= 48 && charCode <= 57;\n  }\n\n  public static function isUpperCaseLetter(charCode : Int) : Bool {\n    return charCode >= 65 && charCode <= 90;\n  }\n\n  public static function isLowerCaseLetter(charCode : Int) : Bool {\n    return charCode >= 97 && charCode <= 122;\n  }\n\n  public static function isIdentifierStart(charCode : Int) : Bool {\n    return charCode == DOLLAR_CODE ||\n      charCode == UNDERSCORE_CODE ||\n      isUpperCaseLetter(charCode) ||\n      isLowerCaseLetter(charCode) ||\n      OTHER_IDENTIFIER_START_CODES.contains(charCode);\n  }\n\n  public static function isIdentifierPart(charCode : Int) : Bool {\n    return isIdentifierStart(charCode) ||\n      isDecimalDigit(charCode) ||\n      OTHER_IDENTIFIER_PART_CODES.contains(charCode);\n  }\n\n  public static function isWhiteSpace(charCode : Int) : Bool {\n    return charCode == TAB_CODE ||\n      charCode == LF_CODE ||\n      charCode == CR_CODE ||\n      charCode == SPACE_CODE;\n  }\n}\n","package haxpression.utils;\n\nusing Lambda;\nusing haxpression.utils.Arrays;\nusing haxpression.utils.Iterators;\n\nclass Iterators {\n  public static function contains<T>(iterator : Iterator<T>, target : T) {\n    for (value in iterator) {\n      if (value == target) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  public static function toArray<T>(iterator : Iterator<T>) {\n    var result : Array<T> = [];\n    for (value in iterator) {\n      result.push(value);\n    }\n    return result;\n  }\n\n  public static function map<T, TResult>(iterator : Iterator<T>, callback : T -> TResult) : Array<TResult> {\n    return iterator.toArray().map(callback);\n  }\n\n  public static function each<T, TResult>(iterator : Iterator<T>, callback : T -> TResult) : Void {\n    iterator.toArray().iter(callback);\n  }\n}\n","package haxpression.utils;\n\nclass Strings {\n  public static function contains(target : String, test : String) : Bool {\n    return target.indexOf(test) != -1;\n  }\n\n  public static function icontains(target : String, test : String) : Bool {\n    return target.toLowerCase().indexOf(test.toLowerCase()) != -1;\n  }\n\n  public static function isEmpty(input : String) : Bool {\n    return input == null || input == \"\";\n  }\n\n  public static function icompare(s1 : String, s2 : String) : Int {\n    s1 = s1.toLowerCase();\n    s2 = s2.toLowerCase();\n    return if (s1 > s2) 1;\n      else if (s1 < s2) -1;\n      else 0;\n  }\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js;\n\nprivate class HaxeError extends js.Error {\n\n\tvar val:Dynamic;\n\n\tpublic function new(val:Dynamic) untyped {\n\t\tsuper();\n\t\tthis.val = __define_feature__(\"js.Boot.HaxeError\", val);\n\t\tthis.message = String(val);\n\t\tif (js.Error.captureStackTrace) js.Error.captureStackTrace(this, HaxeError);\n\t}\n\n\tpublic static function wrap(val:Dynamic):Dynamic untyped {\n\t\treturn if (__instanceof__(val, js.Error)) val else new HaxeError(val);\n\t}\n}\n\n@:dox(hide)\nclass Boot {\n\n\tprivate static function __unhtml(s : String) {\n\t\treturn s.split(\"&\").join(\"&amp;\").split(\"<\").join(\"&lt;\").split(\">\").join(\"&gt;\");\n\t}\n\n\tprivate static function __trace(v,i : haxe.PosInfos) {\n\t\tuntyped {\n\t\t\tvar msg = if( i != null ) i.fileName+\":\"+i.lineNumber+\": \" else \"\";\n\t\t\t#if jsfl\n\t\t\tmsg += __string_rec(v,\"\");\n\t\t\tfl.trace(msg);\n\t\t\t#else\n\t\t\tmsg += __string_rec(v, \"\");\n\t\t\tif( i != null && i.customParams != null )\n\t\t\t\tfor( v in i.customParams )\n\t\t\t\t\tmsg += \",\" + __string_rec(v, \"\");\n\t\t\tvar d;\n\t\t\tif( __js__(\"typeof\")(document) != \"undefined\" && (d = document.getElementById(\"haxe:trace\")) != null )\n\t\t\t\td.innerHTML += __unhtml(msg)+\"<br/>\";\n\t\t\telse if( __js__(\"typeof console\") != \"undefined\" && __js__(\"console\").log != null )\n\t\t\t\t__js__(\"console\").log(msg);\n\t\t\t#end\n\t\t}\n\t}\n\n\tprivate static function __clear_trace() {\n\t\tuntyped {\n\t\t\t#if jsfl\n\t\t\tfl.outputPanel.clear();\n\t\t\t#else\n\t\t\tvar d = document.getElementById(\"haxe:trace\");\n\t\t\tif( d != null )\n\t\t\t\td.innerHTML = \"\";\n\t\t\t#end\n\t\t}\n\t}\n\n\tstatic inline function isClass(o:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isClass\", o.__name__);\n\t}\n\n\tstatic inline function isEnum(e:Dynamic) : Bool {\n\t\treturn untyped __define_feature__(\"js.Boot.isEnum\", e.__ename__);\n\t}\n\n\tstatic function getClass(o:Dynamic) : Dynamic {\n\t\tif (Std.is(o, Array))\n\t\t\treturn Array;\n\t\telse {\n\t\t\tvar cl = untyped __define_feature__(\"js.Boot.getClass\", o.__class__);\n\t\t\tif (cl != null)\n\t\t\t\treturn cl;\n\t\t\tvar name = __nativeClassName(o);\n\t\t\tif (name != null)\n\t\t\t\treturn __resolveNativeClass(name);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t@:ifFeature(\"has_enum\")\n\tprivate static function __string_rec(o,s:String) {\n\t\tuntyped {\n\t\t\tif( o == null )\n\t\t\t    return \"null\";\n\t\t\tif( s.length >= 5 )\n\t\t\t\treturn \"<...>\"; // too much deep recursion\n\t\t\tvar t = __js__(\"typeof(o)\");\n\t\t\tif( t == \"function\" && (isClass(o) || isEnum(o)) )\n\t\t\t\tt = \"object\";\n\t\t\tswitch( t ) {\n\t\t\tcase \"object\":\n\t\t\t\tif( __js__(\"o instanceof Array\") ) {\n\t\t\t\t\tif( o.__enum__ ) {\n\t\t\t\t\t\tif( o.length == 2 )\n\t\t\t\t\t\t\treturn o[0];\n\t\t\t\t\t\tvar str = o[0]+\"(\";\n\t\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\t\tfor( i in 2...o.length ) {\n\t\t\t\t\t\t\tif( i != 2 )\n\t\t\t\t\t\t\t\tstr += \",\" + __string_rec(o[i],s);\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tstr += __string_rec(o[i],s);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn str + \")\";\n\t\t\t\t\t}\n\t\t\t\t\tvar l = o.length;\n\t\t\t\t\tvar i;\n\t\t\t\t\tvar str = \"[\";\n\t\t\t\t\ts += \"\\t\";\n\t\t\t\t\tfor( i in 0...l )\n\t\t\t\t\t\tstr += (if (i > 0) \",\" else \"\")+__string_rec(o[i],s);\n\t\t\t\t\tstr += \"]\";\n\t\t\t\t\treturn str;\n\t\t\t\t}\n\t\t\t\tvar tostr;\n\t\t\t\ttry {\n\t\t\t\t\ttostr = untyped o.toString;\n\t\t\t\t} catch( e : Dynamic ) {\n\t\t\t\t\t// strange error on IE\n\t\t\t\t\treturn \"???\";\n\t\t\t\t}\n\t\t\t\tif( tostr != null && tostr != __js__(\"Object.toString\") && __typeof__(tostr) == \"function\" ) {\n\t\t\t\t\tvar s2 = o.toString();\n\t\t\t\t\tif( s2 != \"[object Object]\")\n\t\t\t\t\t\treturn s2;\n\t\t\t\t}\n\t\t\t\tvar k : String = null;\n\t\t\t\tvar str = \"{\\n\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar hasp = (o.hasOwnProperty != null);\n\t\t\t\t__js__(\"for( var k in o ) {\");\n\t\t\t\t\tif( hasp && !o.hasOwnProperty(k) )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\" )\n\t\t\t\t\t\t__js__(\"continue\");\n\t\t\t\t\tif( str.length != 2 )\n\t\t\t\t\t\tstr += \", \\n\";\n\t\t\t\t\tstr += s + k + \" : \"+__string_rec(o[k],s);\n\t\t\t\t__js__(\"}\");\n\t\t\t\ts = s.substring(1);\n\t\t\t\tstr += \"\\n\" + s + \"}\";\n\t\t\t\treturn str;\n\t\t\tcase \"function\":\n\t\t\t\treturn \"<function>\";\n\t\t\tcase \"string\":\n\t\t\t\treturn o;\n\t\t\tdefault:\n\t\t\t\treturn String(o);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function __interfLoop(cc : Dynamic,cl : Dynamic) {\n\t\tif( cc == null )\n\t\t\treturn false;\n\t\tif( cc == cl )\n\t\t\treturn true;\n\t\tvar intf : Dynamic = cc.__interfaces__;\n\t\tif( intf != null )\n\t\t\tfor( i in 0...intf.length ) {\n\t\t\t\tvar i : Dynamic = intf[i];\n\t\t\t\tif( i == cl || __interfLoop(i,cl) )\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\treturn __interfLoop(cc.__super__,cl);\n\t}\n\n\t@:ifFeature(\"typed_catch\") private static function __instanceof(o : Dynamic,cl : Dynamic) {\n\t\tif( cl == null )\n\t\t\treturn false;\n\t\tswitch( cl ) {\n\t\tcase Int:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\" && untyped __js__(\"(o|0) === o\");\n\t\tcase Float:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"number\";\n\t\tcase Bool:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"boolean\";\n\t\tcase String:\n\t\t\treturn (untyped __js__(\"typeof\"))(o) == \"string\";\n\t\tcase Array:\n\t\t\treturn (untyped __js__(\"(o instanceof Array)\")) && o.__enum__ == null;\n\t\tcase Dynamic:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tif( o != null ) {\n\t\t\t\t// Check if o is an instance of a Haxe class or a native JS object\n\t\t\t\tif( (untyped __js__(\"typeof\"))(cl) == \"function\" ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tif( __interfLoop(getClass(o),cl) )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse if ( (untyped __js__(\"typeof\"))(cl) == \"object\" && __isNativeObj(cl) ) {\n\t\t\t\t\tif( untyped __js__(\"o instanceof cl\") )\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// do not use isClass/isEnum here\n\t\t\tuntyped __feature__(\"Class.*\",if( cl == Class && o.__name__ != null ) return true);\n\t\t\tuntyped __feature__(\"Enum.*\",if( cl == Enum && o.__ename__ != null ) return true);\n\t\t\treturn o.__enum__ == cl;\n\t\t}\n\t}\n\n\t@:ifFeature(\"typed_cast\") private static function __cast(o : Dynamic, t : Dynamic) {\n\t\tif (__instanceof(o, t)) return o;\n\t\telse throw \"Cannot cast \" +Std.string(o) + \" to \" +Std.string(t);\n\t}\n\n\tstatic var __toStr = untyped ({}).toString;\n\t// get native JS [[Class]]\n\tstatic function __nativeClassName(o:Dynamic):String {\n\t\tvar name = untyped __toStr.call(o).slice(8, -1);\n\t\t// exclude general Object and Function\n\t\t// also exclude Math and JSON, because instanceof cannot be called on them\n\t\tif (name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\")\n\t\t\treturn null;\n\t\treturn name;\n\t}\n\n\t// check for usable native JS object\n\tstatic function __isNativeObj(o:Dynamic):Bool {\n\t\treturn __nativeClassName(o) != null;\n\t}\n\n\t// resolve native JS class in the global scope:\n\tstatic function __resolveNativeClass(name:String) {\n\t\treturn untyped js.Lib.global[name];\n\t}\n\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n// This file is generated from mozilla\\HTMLCanvasElement.webidl. Do not edit!\n\npackage js.html;\n\n/**\n\tThe `HTMLCanvasElement` interface provides properties and methods for manipulating the layout and presentation of canvas elements. The `HTMLCanvasElement` interface also inherits the properties and methods of the `HTMLElement` interface.\n\n\tDocumentation [HTMLCanvasElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).\n\n\t@see <https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement>\n**/\n@:native(\"HTMLCanvasElement\")\nextern class CanvasElement extends Element\n{\n\t\n\t/**\n\t\tIs a positive `integer` reflecting the `width` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `300` is used.\n\t**/\n\tvar width : Int;\n\t\n\t/**\n\t\tIs a positive `integer` reflecting the `height` HTML attribute of the `canvas` element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of `150` is used.\n\t**/\n\tvar height : Int;\n\t\n\t/** @throws DOMError */\n\t\n\t/**\n\t\tReturns a drawing context on the canvas, or null if the context ID is not supported. A drawing context lets you draw on the canvas. Calling getContext with `\"2d\"` returns a `CanvasRenderingContext2D` object, whereas calling it with `\"experimental-webgl\"` (or `\"webgl\"`) returns a `WebGLRenderingContext` object. This context is only available on browsers that implement WebGL.\n\t**/\n\tfunction getContext( contextId : String, ?contextOptions : Dynamic ) : Dynamic/*MISSING nsISupports*/;\n\t/** @throws DOMError */\n\t\n\t/**\n\t\tReturns a data-URL containing a representation of the image in the format specified by the `type` parameter (defaults to `png`). The returned image is in a resolution of 96dpi.\n\t**/\n\tfunction toDataURL( ?type : String = \"\", ?encoderOptions : Dynamic ) : String;\n\t/** @throws DOMError */\n\t\n\t/**\n\t\tCreates a `Blob` object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent.\n\t**/\n\tfunction toBlob( callback : Blob -> Void, ?type : String = \"\", ?encoderOptions : Dynamic ) : Void;\n\t\n\t/** Shorthand for getting a CanvasRenderingContext2D. */\n\tinline function getContext2d( ?attribs : {} ) : CanvasRenderingContext2D {\n\t\treturn cast getContext(\"2d\", attribs);\n\t}\n\t/** Shorthand for getting a js.html.webgl.RenderingContext. */\n\tinline function getContextWebGL( ?attribs : js.html.webgl.ContextAttributes ) : js.html.webgl.RenderingContext {\n\t\treturn CanvasUtil.getContextWebGL(this, attribs);\n\t}\n}\n\nprivate class CanvasUtil {\n\tpublic static function getContextWebGL( canvas :CanvasElement, attribs :{} ) {\n\t\tfor (name in [\"webgl\", \"experimental-webgl\"]) {\n\t\t\tvar ctx = canvas.getContext(name, attribs);\n\t\t\tif (ctx != null) return ctx;\n\t\t}\n\t\treturn null;\n\t}\n}\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n#if !nodejs\n@:ifFeature(\"js.html.ArrayBuffer.*\")\nclass ArrayBuffer {\n\n\tpublic var byteLength : Int;\n\tvar a : Array<Int>;\n\n\tpublic function new( ?a : Dynamic ) {\n\t\tif( Std.is(a,Array) ) {\n\t\t\tthis.a = a;\n\t\t\tbyteLength = a.length;\n\t\t} else {\n\t\t\tvar len : Int = a;\n\t\t\tthis.a = [];\n\t\t\tfor( i in 0...len )\n\t\t\t\tthis.a[i] = 0;\n\t\t\tbyteLength = len;\n\t\t}\n\t}\n\n\tpublic function slice(begin,?end) {\n\t\treturn new ArrayBuffer(a.slice(begin,end));\n\t}\n\n\tstatic function sliceImpl(begin,?end) {\n\t\tvar u = new js.html.Uint8Array(js.Lib.nativeThis, begin, end == null ? null : end - begin);\n\t\tvar result = new js.html.ArrayBuffer(u.byteLength);\n\t\tvar resultArray = new js.html.Uint8Array(result);\n\t\tresultArray.set(u);\n\t\treturn result;\n\t}\n\n\tstatic function __init__() untyped {\n\t\tvar ArrayBuffer = js.Lib.global.ArrayBuffer || js.html.compat.ArrayBuffer;\n\t\tif( ArrayBuffer.prototype.slice == null ) ArrayBuffer.prototype.slice = sliceImpl; // IE10\n\t}\n}\n#end","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n#if !nodejs\nimport js.Lib.nativeThis;\n\n@:ifFeature(\"js.html.Float32Array.*\")\nclass Float32Array {\n\n\tstatic var BYTES_PER_ELEMENT = 4;\n\n\tstatic function _new( ?arg1 : Dynamic, ?offset : Int, ?length : Int ) : Dynamic {\n\t\tvar arr : Array<Float>;\n\t\tif( untyped __typeof__(arg1) == 'number' ) {\n\t\t\tarr = new Array();\n\t\t\tfor( i in 0...arg1 )\n\t\t\t\tarr[i] = 0;\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length << 2;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer([for( i in 0...arr.length << 2 ) 0]); // no sync\n\t\t\t}\n\t\t} else if( Std.is(arg1,ArrayBuffer) ) {\n\t\t\tvar buffer : ArrayBuffer = arg1;\n\t\t\tif( offset == null ) offset = 0;\n\t\t\tif( length == null ) length = (buffer.byteLength - offset) >> 2;\n\t\t\tarr = [];\n\t\t\t// decode buffer\n\t\t\tfor( i in 0...length ) {\n\t\t\t\tvar val = untyped buffer.a[offset++] | (buffer.a[offset++] << 8) | (buffer.a[offset++] << 16) | (buffer.a[offset++] << 24);\n\t\t\t\tarr.push(haxe.io.FPHelper.i32ToFloat(val));\n\t\t\t}\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length<<2;\n\t\t\t\tarr.byteOffset = offset;\n\t\t\t\tarr.buffer = buffer;\n\t\t\t}\n\t\t} else if( Std.is(arg1, Array) ) {\n\t\t\tarr = (arg1 : Array<Float>).copy();\n\t\t\t// loss of memory sync between buffer and array\n\t\t\tvar buffer = [];\n\t\t\tfor( f in arr ) {\n\t\t\t\tvar i = haxe.io.FPHelper.floatToI32(f);\n\t\t\t\tbuffer.push(i&0xFF);\n\t\t\t\tbuffer.push((i>>8)&0xFF);\n\t\t\t\tbuffer.push((i>>16)&0xFF);\n\t\t\t\tbuffer.push(i>>>24);\n\t\t\t}\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length << 2;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(buffer);\n\t\t\t}\n\t\t} else\n\t\t\tthrow \"TODO \"+arg1;\n\t\tuntyped {\n\t\t\tarr.subarray = _subarray;\n\t\t\tarr.set = _set;\n\t\t}\n\t\treturn arr;\n\t}\n\n\tstatic function _set( ?arg : Dynamic, ?offset : Int ) {\n\t\tif( Std.is(arg.buffer,ArrayBuffer) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( arg.byteLength + offset > nativeThis.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...arg.byteLength )\n\t\t\t\tnativeThis[i + offset] = a[i];\n\t\t} else if( Std.is(arg,Array) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( a.length + offset > nativeThis.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...a.length )\n\t\t\t\tnativeThis[i + offset] = a[i];\n\t\t} else\n\t\t\tthrow \"TODO\";\n\t}\n\n\tstatic function _subarray( start : Int, ?end : Int ) {\n\t\tvar a = _new(nativeThis.slice(start,end));\n\t\ta.byteOffset = start * 4;\n\t\treturn a;\n\t}\n\n\tstatic function __init__() {\n\t\tvar Float32Array = untyped js.Lib.global.Float32Array || _new;\n\t}\n\n}\n#end","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage js.html.compat;\n\n#if !nodejs\nimport js.Lib.nativeThis;\n\n@:ifFeature(\"js.html.Uint8Array.*\")\nclass Uint8Array {\n\n\tstatic var BYTES_PER_ELEMENT = 1;\n\n\tstatic function _new( ?arg1 : Dynamic, ?offset : Int, ?length : Int ) : Dynamic {\n\t\tvar arr;\n\t\tif( untyped __typeof__(arg1) == 'number' ) {\n\t\t\tarr = new Array();\n\t\t\tfor( i in 0...arg1 )\n\t\t\t\tarr[i] = 0;\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(arr);\n\t\t\t}\n\t\t} else if( Std.is(arg1,ArrayBuffer) ) {\n\t\t\tvar buffer : ArrayBuffer = arg1;\n\t\t\tif( offset == null ) offset = 0;\n\t\t\tif( length == null ) length = buffer.byteLength - offset;\n\t\t\tif( offset == 0 )\n\t\t\t\tarr = cast @:privateAccess buffer.a;\n\t\t\telse\n\t\t\t\t// here we are losing the fact that we should reference the same data,\n\t\t\t\t// but I don't see another way to have this behaviour while keeping [] access\n\t\t\t\tarr = cast @:privateAccess buffer.a.slice(offset, offset+length);\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = offset;\n\t\t\t\tarr.buffer = buffer;\n\t\t\t}\n\t\t} else if( Std.is(arg1, Array) ) {\n\t\t\tarr = (arg1 : Array<Int>).copy();\n\t\t\tuntyped {\n\t\t\t\tarr.byteLength = arr.length;\n\t\t\t\tarr.byteOffset = 0;\n\t\t\t\tarr.buffer = new ArrayBuffer(arr);\n\t\t\t}\n\t\t} else\n\t\t\tthrow \"TODO \"+arg1;\n\t\tuntyped {\n\t\t\tarr.subarray = _subarray;\n\t\t\tarr.set = _set;\n\t\t}\n\t\treturn arr;\n\t}\n\n\tstatic function _set( ?arg : Dynamic, ?offset : Int ) {\n\t\tif( Std.is(arg.buffer,ArrayBuffer) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( arg.byteLength + offset > nativeThis.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...arg.byteLength )\n\t\t\t\tnativeThis[i + offset] = a[i];\n\t\t} else if( Std.is(arg,Array) ) {\n\t\t\tvar a : Array<Int> = arg;\n\t\t\tif( a.length + offset > nativeThis.byteLength )\n\t\t\t\tthrow \"set() outside of range\";\n\t\t\tfor( i in 0...a.length )\n\t\t\t\tnativeThis[i + offset] = a[i];\n\t\t} else\n\t\t\tthrow \"TODO\";\n\t}\n\n\tstatic function _subarray( start : Int, ?end : Int ) {\n\t\tvar a = _new(nativeThis.slice(start,end));\n\t\ta.byteOffset = start;\n\t\treturn a;\n\t}\n\n\tstatic function __init__() {\n\t\tvar Uint8Array = untyped js.Lib.global.Uint8Array || _new;\n\t}\n\n}\n#end","package luxe;\r\n\r\nimport luxe.Engine;\r\nimport luxe.Log._debug;\r\n\r\ntypedef AudioEvent = snow.types.Types.AudioEvent;\r\ntypedef AudioState = snow.types.Types.AudioState;\r\ntypedef AudioHandle = snow.types.Types.AudioHandle;\r\ntypedef AudioSource = snow.systems.audio.AudioSource;\r\ntypedef AudioInstance = snow.systems.audio.AudioInstance;\r\n\r\n@:allow(luxe.Engine)\r\nclass Audio {\r\n\r\n    public var core : Engine;\r\n    public var active (get,set) : Bool;\r\n\r\n    function new( _core:Engine ) {\r\n\r\n        core = _core;\r\n\r\n    } //new\r\n\r\n//events\r\n\r\n    public inline function on(_event:AudioEvent, _handler:AudioHandle->Void) : Void {\r\n        core.app.audio.on(_event, _handler);\r\n    }\r\n\r\n    public inline function off(_event:AudioEvent, _handler:AudioHandle->Void) : Bool {\r\n        return core.app.audio.off(_event, _handler);\r\n    }\r\n\r\n    public inline function emit(_event:AudioEvent, _handle:AudioHandle) : Void {\r\n        core.app.audio.emit(_event, _handle);\r\n    }\r\n\r\n    public function play(_source:AudioSource, ?_volume:Float=1.0, ?_paused:Bool=false) : AudioHandle {\r\n        return core.app.audio.play(_source, _volume, _paused);\r\n    }\r\n\r\n    public function loop(_source:AudioSource, ?_volume:Float=1.0, ?_paused:Bool=false) : AudioHandle {\r\n        return core.app.audio.loop(_source, _volume, _paused);\r\n    }\r\n\r\n    public inline function pause(_handle:AudioHandle) : Void {\r\n        core.app.audio.pause(_handle);\r\n    }\r\n\r\n    public inline function unpause(_handle:AudioHandle) : Void {\r\n        core.app.audio.unpause(_handle);\r\n    }\r\n\r\n    public inline function stop(_handle:AudioHandle) : Void {\r\n        core.app.audio.stop(_handle);\r\n    }\r\n\r\n    public inline function volume(_handle:AudioHandle, _volume:Float) : Void {\r\n        core.app.audio.volume(_handle, _volume);\r\n    }\r\n\r\n    public inline function pan(_handle:AudioHandle, _pan:Float) : Void {\r\n        core.app.audio.pan(_handle, _pan);\r\n    }\r\n\r\n    public inline function pitch(_handle:AudioHandle, _pitch:Float) : Void {\r\n        core.app.audio.pitch(_handle, _pitch);\r\n    }\r\n\r\n    public inline function position(_handle:AudioHandle, _position:Float) : Void {\r\n        core.app.audio.position(_handle, _position);\r\n    }\r\n\r\n    public inline function state_of(_handle:AudioHandle) : AudioState {\r\n        return core.app.audio.state_of(_handle);\r\n    }\r\n\r\n    public inline function loop_of(_handle:AudioHandle) : Bool {\r\n        return core.app.audio.loop_of(_handle);\r\n    }\r\n\r\n    public inline function instance_of(_handle:AudioHandle) : AudioInstance {\r\n        return core.app.audio.instance_of(_handle);\r\n    }\r\n\r\n    public inline function volume_of(_handle:AudioHandle) : Float {\r\n        return core.app.audio.volume_of(_handle);\r\n    }\r\n\r\n    public inline function pan_of(_handle:AudioHandle) : Float {\r\n        return core.app.audio.pan_of(_handle);\r\n    }\r\n\r\n    public inline function pitch_of(_handle:AudioHandle) : Float {\r\n        return core.app.audio.pitch_of(_handle);\r\n    }\r\n\r\n    public inline function position_of(_handle:AudioHandle) : Float {\r\n        return core.app.audio.position_of(_handle);\r\n    }\r\n\r\n    public inline function suspend() {\r\n        core.app.audio.suspend();\r\n    }\r\n\r\n    public inline function resume() {\r\n        core.app.audio.resume();\r\n    }\r\n\r\n//properties\r\n\r\n    inline function get_active()            return core.app.audio.active;\r\n    inline function set_active(_val:Bool)   return core.app.audio.active = _val;\r\n\r\n//Internal\r\n\r\n    function init() {\r\n\r\n        _debug('\\t audio initialized.');\r\n\r\n    } //init\r\n\r\n    function destroy() {\r\n\r\n        _debug('\\t audio shut down.');\r\n\r\n    } //destroy\r\n\r\n    function process() {\r\n\r\n\r\n    } //process\r\n\r\n} //Audio\r\n","package luxe;\r\n\r\nimport haxe.io.Path;\r\nimport haxe.macro.Context;\r\nimport haxe.macro.Expr;\r\n\r\nprivate enum LogError {\r\n    RequireString(detail:String);\r\n}\r\n\r\nclass Log {\r\n\r\n        //default to `log`\r\n    static var _level : Int = 1;\r\n    static var _filter : Array<String>;\r\n    static var _exclude : Array<String>;\r\n    static var _log_width : Int = 16;\r\n\r\n    macro public static function get_level() : haxe.macro.Expr {\r\n        return macro $v{ ${luxe.Log._level} };\r\n    }\r\n    macro public static function get_filter() : haxe.macro.Expr {\r\n        return macro $v{ ${luxe.Log._filter} };\r\n    }\r\n    macro public static function get_exclude() : haxe.macro.Expr {\r\n        return macro $v{ ${luxe.Log._exclude} };\r\n    }\r\n\r\n    macro static function level( __level:Int ) : haxe.macro.Expr {\r\n\r\n        _level = __level;\r\n\r\n        return macro null;\r\n\r\n    } //level\r\n\r\n    macro static function filter( __filter:String ) : haxe.macro.Expr {\r\n\r\n        _filter = __filter.split(',');\r\n\r\n        var _index = 0;\r\n        for(_f in _filter) {\r\n            _filter[_index] = StringTools.trim(_f);\r\n            _index++;\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //filter\r\n\r\n    macro static function exclude( __exclude:String ) : haxe.macro.Expr {\r\n\r\n        _exclude = __exclude.split(',');\r\n\r\n        var _index = 0;\r\n        for(_e in _exclude) {\r\n            _exclude[_index] = StringTools.trim(_e);\r\n            _index++;\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //exclude\r\n\r\n    macro static function width( _width:Int ) : haxe.macro.Expr {\r\n\r\n        _log_width = _width;\r\n\r\n        return macro null;\r\n\r\n    } //width\r\n\r\n        //This macro uses the defined log level value to reject code that\r\n        //shouldn't even exist at runtime , like low level debug information\r\n        //and logging by injecting or not injecting code\r\n    macro public static function log( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 0);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}i / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //log\r\n\r\n    macro public static function _debug( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 1);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}d / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //_debug\r\n\r\n    macro public static function _verbose( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 2);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}v / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //_verbose\r\n\r\n    macro public static function _verboser( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 3);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}V / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //_verboser\r\n\r\n    macro public static function assert(expr:Expr, ?reason:ExprOf<String>) {\r\n        #if !luxe_no_assertions\r\n            var _str = haxe.macro.ExprTools.toString(expr);\r\n\r\n            reason = switch(reason) {\r\n                case macro null: macro '';\r\n                case _: macro ' ( ' + $reason + ' )';\r\n            }\r\n\r\n            return macro @:pos(Context.currentPos()) {\r\n                if(!$expr) throw luxe.Log.DebugError.assertion( '$_str' + $reason);\r\n            }\r\n        #end\r\n        return macro null;\r\n    } //assert\r\n\r\n    macro public static function assertnull(value:Expr, ?reason:ExprOf<String>) {\r\n        #if !luxe_no_assertions\r\n            var _str = haxe.macro.ExprTools.toString(value);\r\n\r\n            reason = switch(reason) {\r\n                case macro null: macro '';\r\n                case _: macro ' ( ' + $reason + ' )';\r\n            }\r\n            return macro @:pos(Context.currentPos()) {\r\n                if($value == null) throw luxe.Log.DebugError.null_assertion('$_str was null' + $reason);\r\n            }\r\n        #end\r\n        return macro null;\r\n    } //assert\r\n\r\n    macro public static function def(value:Expr, def:Expr):Expr {\r\n        return macro @:pos(Context.currentPos()) {\r\n            if($value == null) $value = $def;\r\n            $value;\r\n        }\r\n    }\r\n\r\n\r\n//Internal Helpers\r\n\r\n\r\n    static function _get_spacing(_file:String ) {\r\n\r\n        var _spaces = '';\r\n\r\n            //the magic number here is File.hx[:1234] for the trace listener log spacing\r\n        var _trace_length = _file.length + 4;\r\n        var _diff : Int = _log_width - _trace_length;\r\n        if(_diff > 0) {\r\n            for(i in 0 ... _diff) {\r\n                _spaces += ' ';\r\n            }\r\n        }\r\n\r\n        return _spaces;\r\n\r\n    } //_get_spacing\r\n\r\n} // Debug\r\n\r\nenum DebugError {\r\n    assertion(expr:String);\r\n    null_assertion(expr:String);\r\n}","package luxe;\r\n\r\nimport haxe.ds.IntMap;\r\nimport luxe.Log._debug;\r\nimport luxe.Log._verbose;\r\nimport luxe.Log._verboser;\r\nimport luxe.Log.log;\r\n\r\n\r\n@:noCompletion typedef EmitHandler = Dynamic->Void;\r\n@:noCompletion typedef HandlerList = Array<EmitHandler>;\r\n\r\n@:noCompletion private typedef EmitNode<T> = { event : T, handler:EmitHandler #if luxe_emitter_pos, ?pos:haxe.PosInfos #end }\r\n\r\n\r\n/** A simple event emitter, used as a base class for systems that want to handle direct connections to named events */\r\n\r\n// @:generic\r\nclass Emitter<ET:Int> {\r\n\r\n    @:noCompletion public var bindings : IntMap<HandlerList>;\r\n\r\n        //store connections loosely, to find connected locations\r\n    var connected : List< EmitNode<ET> >;\r\n        //store the items to remove\r\n    var _to_remove : List< EmitNode<ET> >;\r\n\r\n        /** create a new emitter instance, for binding functions easily to named events. similar to `Events` */\r\n    public function new() {\r\n\r\n        _to_remove = new List();\r\n        connected = new List();\r\n\r\n        bindings = new IntMap<HandlerList>();\r\n\r\n    } //new\r\n\r\n    @:noCompletion public function _emitter_destroy() {\r\n        while(_to_remove.length > 0) {\r\n            var _node = _to_remove.pop();\r\n            _node.event = null;\r\n            _node.handler = null;\r\n            _node = null;\r\n        }\r\n\r\n        while(connected.length > 0) {\r\n            var _node = connected.pop();\r\n            _node.event = null;\r\n            _node.handler = null;\r\n            _node = null;\r\n        }\r\n\r\n        _to_remove = null;\r\n        connected = null;\r\n        bindings = null;\r\n    }\r\n\r\n        /** Emit a named event */\r\n    // @:generic\r\n    @:noCompletion public function emit<T>( event:ET, ?data:T #if luxe_emitter_pos, ?pos:haxe.PosInfos #end ) {\r\n\r\n        if(bindings == null) return;\r\n\r\n        _check();\r\n\r\n        _checking = true;\r\n\r\n        var _list = bindings.get(event);\r\n        if(_list != null && _list.length > 0) {\r\n            for(handler in _list) {\r\n                #if luxe_emitter_pos _verboser('emit / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\r\n                handler(data);\r\n            }\r\n        }\r\n\r\n        _checking = false;\r\n\r\n            //needed because handlers\r\n            //might disconnect listeners\r\n        _check();\r\n\r\n    } //emit\r\n\r\n        /** connect a named event to a handler */\r\n    // @:generic\r\n    @:noCompletion public function on<T>(event:ET, handler: T->Void #if luxe_emitter_pos, ?pos:haxe.PosInfos #end ) {\r\n\r\n        if(bindings == null) return;\r\n\r\n        _check();\r\n\r\n        #if luxe_emitter_pos _verbose('on / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\r\n\r\n        if(!bindings.exists(event)) {\r\n\r\n            bindings.set(event, [handler]);\r\n            connected.push({ handler:handler, event:event #if luxe_emitter_pos, pos:pos #end });\r\n\r\n        } else {\r\n            var _list = bindings.get(event);\r\n            if(_list.indexOf(handler) == -1) {\r\n                _list.push(handler);\r\n                connected.push({ handler:handler, event:event #if luxe_emitter_pos, pos:pos #end });\r\n            }\r\n        }\r\n\r\n    } //on\r\n\r\n        /** disconnect a named event and handler. returns true on success, or false if event or handler not found */\r\n    // @:generic\r\n    @:noCompletion public function off<T>(event:ET, handler: T->Void #if luxe_emitter_pos, ?pos:haxe.PosInfos #end ) : Bool {\r\n\r\n        if(bindings == null) return false;\r\n\r\n        _check();\r\n\r\n        var _success = false;\r\n\r\n        if(bindings.exists(event)) {\r\n\r\n            #if luxe_emitter_pos _verbose('off / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\r\n\r\n            _to_remove.push({ event:event, handler:handler });\r\n\r\n            for(_info in connected) {\r\n                if(_info.event == event && _info.handler == handler) {\r\n                    connected.remove(_info);\r\n                }\r\n            }\r\n\r\n                //debateable :p\r\n            _success = true;\r\n\r\n        } //if exists\r\n\r\n        return _success;\r\n\r\n    } //off\r\n\r\n    @:noCompletion public function connections( handler:EmitHandler ) {\r\n\r\n        if(connected == null) return null;\r\n\r\n        var _list : Array<EmitNode<ET>> = [];\r\n\r\n        for(_info in connected) {\r\n            if(_info.handler == handler) {\r\n                _list.push(_info);\r\n            }\r\n        }\r\n\r\n        return _list;\r\n\r\n    } //connections\r\n\r\n    var _checking = false;\r\n\r\n    function _check() {\r\n\r\n        if(_checking || _to_remove == null) {\r\n            return;\r\n        }\r\n\r\n        _checking = true;\r\n\r\n        if(_to_remove.length > 0) {\r\n\r\n            for(_node in _to_remove) {\r\n\r\n                var _list = bindings.get(_node.event);\r\n                    //since bindings.remove removes all the events of this type,\r\n                    //it means subsequent similar types are still in the list and\r\n                    //would attempt to touch the null result, so we don't allow it\r\n                if(_list != null) {\r\n\r\n                    _list.remove( _node.handler );\r\n\r\n                        //clear the event list if there are no bindings\r\n                    if(_list.length == 0) {\r\n                        bindings.remove(_node.event);\r\n                    }\r\n\r\n                } //_list != null\r\n\r\n            } //each node\r\n\r\n            _to_remove = null;\r\n            _to_remove = new List();\r\n\r\n        } //_to_remove length > 0\r\n\r\n        _checking = false;\r\n\r\n    } //_check\r\n\r\n} //Emitter\r\n","package luxe;\r\n\r\nclass ID {\r\n\r\n        /** the id */\r\n    public var id : String;\r\n        /** the name */\r\n    public var name : String = '';\r\n\r\n    @:noCompletion public function new(?_name:String='', _id:String='') {\r\n\r\n        name = _name;\r\n        id = _id == '' ? Luxe.utils.uniqueid() : _id;\r\n\r\n    } //new\r\n\r\n} //ID\r\n\r\n\r\n/** A simple base object, event emitter, and ID. */\r\nclass Objects extends Emitter<Int> {\r\n\r\n        /** the id */\r\n    @:isVar public var id (get,set) : String = '';\r\n        /** the name */\r\n    @:isVar public var name (get,set) : String = '';\r\n\r\n    @:noCompletion public function new(?_name:String='', _id:String='') {\r\n\r\n        super();\r\n        name = _name;\r\n        id = _id == '' ? Luxe.utils.uniqueid() : _id;\r\n\r\n    } //new\r\n\r\n//These can't be inlined because they are intended to be overridden in subclasses\r\n\r\n    function set_name(_name:String) : String    return name = _name;\r\n    function set_id(_id:String) : String        return id = _id;\r\n    function get_name() : String                return name;\r\n    function get_id() : String                  return id;\r\n\r\n\r\n} //Objects","package luxe;\r\n\r\nimport luxe.Ev;\r\nimport luxe.Quaternion;\r\nimport luxe.Transform;\r\nimport luxe.Matrix;\r\n\r\nimport luxe.Input;\r\nimport luxe.Screen;\r\nimport luxe.Vector;\r\nimport luxe.Scene;\r\nimport luxe.components.Components;\r\nimport luxe.Component;\r\nimport luxe.Emitter;\r\nimport luxe.structural.OrderedMap;\r\n\r\nimport luxe.options.EntityOptions;\r\n\r\nimport luxe.Log.*;\r\n\r\n@:autoBuild(luxe.macros.EntityRules.apply())\r\nclass Entity extends Objects {\r\n\r\n        /** The map of attached components, by name. use .get to find components in children and from other components instead of accessing this unless you need to */\r\n    public var components (get,never) : OrderedMap<String, Component>;\r\n        /** A local event system for sending and receiving named events through the entity. Helps communicate between components, and more. */\r\n    public var events : luxe.Events;\r\n        /** The list of children this entity is parenting. Use `child.parent = null;` to remove, or `child.parent = entity;` to assign. */\r\n    public var children : Array<Entity>;\r\n\r\n        /** whether or not this entity has been destroyed */\r\n    public var destroyed : Bool = false;\r\n        /** whether or not this entity has been inited yet */\r\n    public var inited : Bool = false;\r\n        /** whether or not this entity has been started/reset by the scene */\r\n    public var started : Bool = false;\r\n\r\n        /** per entity fixed rate timer, if any. if 0 (default) no fixed update is called on this entity. */\r\n    @:isVar public var fixed_rate       (get,set) : Float = 0;\r\n        /** The parent entity if any, set to null for no parent */\r\n    @:isVar public var parent           (get,set) : Entity;\r\n        /** if the entity is in a scene, this is not null */\r\n    @:isVar public var scene            (get,set) : Scene;\r\n        /** if the entity is active in the scene or not. set to inactive to stop scene events propogating into this entity and it's components and children */\r\n    @:isVar public var active           (get,set) : Bool = true;\r\n\r\n        /** The spatial transform of the entity. */\r\n    @:isVar public var transform        (get,set) : Transform;\r\n        /** The local position of the spatial transform */\r\n    public var pos              (get,set) : Vector;\r\n        /** The local rotation of the spatial transform */\r\n    public var rotation         (get,set) : Quaternion;\r\n        /** The local scale of the spatial transform */\r\n    public var scale            (get,set) : Vector;\r\n        /** The local origin of the spatial transform */\r\n    public var origin           (get,set) : Vector;\r\n\r\n        /** the system for the entity */\r\n    var _components : Components;\r\n        /** the timer for the fixed update */\r\n    var fixed_rate_timer : snow.api.Timer;\r\n        /** the options passed in for giving to the init function */\r\n        //:todo:Entity: options dynamic for passing to super()\r\n    var options : Dynamic;\r\n\r\n        /** The scene that the top most parent is a part of, \r\n            i.e the scene that contains this entity via the parent tree */\r\n    @:allow(luxe.Scene)\r\n    var scene_root (default, set): Scene;\r\n\r\n\r\n        /** called when the scene is initiated. **use this instead of new** for state setup. it respects the order of creations, children, and component ordering. */\r\n    public function init() {}\r\n        /** called once per frame, passing the delta time */\r\n    public function update(dt:Float) {}\r\n        /** called once per fixed rate, only if fixed_rate != 0 */\r\n    public function onfixedupdate(rate:Float) {}\r\n\r\n        /** called when the scene starts or is reset. use this to reset state. */\r\n    @:noCompletion public function onreset() {}\r\n        /** called when the scene, parent or entity is destroyed. use this to clean up state. */\r\n    @:noCompletion public function ondestroy() {}\r\n\r\n        /** override this to get notified when a key is released. only called if overridden. */\r\n    @:noCompletion public function onkeyup( event:KeyEvent ) {}\r\n        /** override this to get notified when a key is pressed. only called if overridden. */\r\n    @:noCompletion public function onkeydown( event:KeyEvent ) {}\r\n        /** override this to get notified when a text input event happens. only called if overridden. */\r\n    @:noCompletion public function ontextinput( event:TextEvent ) {}\r\n\r\n        /** override this to get notified when a named input event happens. only called if overridden. */\r\n    @:noCompletion public function oninputdown( event:InputEvent ) {}\r\n        /** override this to get notified when a named input event happens. only called if overridden. */\r\n    @:noCompletion public function oninputup( event:InputEvent ) {}\r\n\r\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\r\n    @:noCompletion public function onmousedown( event:MouseEvent ) {}\r\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\r\n    @:noCompletion public function onmouseup( event:MouseEvent ) {}\r\n        /** override this to get notified when a mouse is moved. only called if overridden. */\r\n    @:noCompletion public function onmousemove( event:MouseEvent ) {}\r\n        /** override this to get notified when the mouse wheel/trackpad is scrolled. only called if overridden. */\r\n    @:noCompletion public function onmousewheel( event:MouseEvent ) {}\r\n\r\n        /** override this to get notified when a touch begins. only called if overridden. */\r\n    @:noCompletion public function ontouchdown( event:TouchEvent ) {}\r\n        /** override this to get notified when a touch ends. only called if overridden. */\r\n    @:noCompletion public function ontouchup( event:TouchEvent ) {}\r\n        /** override this to get notified when a touch moves. only called if overridden. */\r\n    @:noCompletion public function ontouchmove( event:TouchEvent ) {}\r\n\r\n        /** override this to get notified when a gamepad button is released. only called if overridden. */\r\n    @:noCompletion public function ongamepadup( event:GamepadEvent ) {}\r\n        /** override this to get notified when a gamepad button is pressed. only called if overridden. */\r\n    @:noCompletion public function ongamepaddown( event:GamepadEvent ) {}\r\n        /** override this to get notified when a gamepad axis changes. only called if overridden. */\r\n    @:noCompletion public function ongamepadaxis( event:GamepadEvent ) {}\r\n        /** override this to get notified when a gamepad device event happens. only called if overridden. */\r\n    @:noCompletion public function ongamepaddevice( event:GamepadEvent ) {}\r\n\r\n       /** override this to get notified when a window is moved, with the data containing the new x/y position */\r\n   @:noCompletion public function onwindowmoved( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is resized by the user, with the data containing the new x/y size */\r\n   @:noCompletion public function onwindowresized( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is resized by the system or code or the user, with the data containing the new x/y size */\r\n   @:noCompletion public function onwindowsized( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is minimized. */\r\n   @:noCompletion public function onwindowminimized( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is restored. */\r\n   @:noCompletion public function onwindowrestored( event:WindowEvent ) {}\r\n\r\n\r\n        /** Create a new entity with the given options */\r\n    public function new( ?_options:EntityOptions #if luxe_entity_pos, ?_pos_info:haxe.PosInfos #end ) {\r\n\r\n        super('entity');\r\n\r\n            //default to name.id\r\n        name += '.$id';\r\n\r\n        options = _options;\r\n\r\n        _verbose('create new entity with options ' + options);\r\n\r\n        _components = new Components( this );\r\n        children = [];\r\n        events = new luxe.Events();\r\n\r\n        if(options != null && options.transform != null) {\r\n            transform = options.transform;\r\n        } else {\r\n            transform = new Transform();\r\n        }\r\n\r\n            //listen for transform changes\r\n        transform.listen_pos(set_pos_from_transform);\r\n        transform.listen_scale(set_scale_from_transform);\r\n        transform.listen_origin(set_origin_from_transform);\r\n        transform.listen_parent(set_parent_from_transform);\r\n        transform.listen_rotation(set_rotation_from_transform);\r\n\r\n        if(options != null) {\r\n\r\n    //name\r\n                //default to non-unique name\r\n            def(options.name_unique, false);\r\n\r\n            if(options.name != null) {\r\n                name = options.name;\r\n                if(options.name_unique) {\r\n                    name += '.$id';\r\n                }\r\n            }\r\n\r\n    //position\r\n            if(options.pos != null) {\r\n                var _op : Vector = options.pos;\r\n                pos = _op.clone();\r\n            }\r\n    //scale\r\n            if(options.scale != null) {\r\n                var _os : Vector = options.scale;\r\n                scale = _os.clone();\r\n            }\r\n\r\n    //scene\r\n            _verbose('\\tnon null options, checking for scene placement no_scene:' + options.no_scene + ' scene:' + options.scene);\r\n                //if they haven't explicitly said \"no scene management\"\r\n                //we add to the scene they requested, or the default scene otherwise\r\n            var _should_add:Bool = true;\r\n\r\n            if(options.no_scene != null) {\r\n                if(options.no_scene == true) {\r\n                    _should_add = false;\r\n                    _verbose(\" \\tno_scene flag requested\");\r\n                }\r\n            }\r\n\r\n            if(options.parent != null) {\r\n\r\n                _should_add = false;\r\n                parent = options.parent;\r\n                _verbose(\" \\tparent specified, not adding to scene only to parent :\" + options.parent.name);\r\n\r\n            }\r\n\r\n            if(_should_add) {\r\n\r\n                if(options.scene != null) {\r\n                    scene = options.scene;\r\n                    _verbose(\" \\tscene specified, storing in scene named : \" + options.scene.name );\r\n                } else {\r\n                    scene = Luxe.scene;\r\n                    _verbose(\" \\tno scene specified, adding to default scene\");\r\n                }\r\n\r\n            } //_should_add\r\n\r\n        } else {\r\n\r\n            scene = Luxe.scene;\r\n\r\n            _verbose(\" \\tadding to default scene because no options were specified.\");\r\n\r\n        } //options ! null\r\n\r\n\r\n            //finally, add to the requested scene\r\n        if(scene != null) {\r\n\r\n            _verbose(\" \\tadding to scene \" + scene.name);\r\n\r\n            scene.add( this #if luxe_entity_pos, _pos_info #end );\r\n\r\n                //we also want to listen for scene events\r\n\r\n        } else {\r\n            _verbose(\" \\tnot adding to any scene.\");\r\n        }\r\n\r\n        _verbose(\" created \" + name);\r\n\r\n    } //new\r\n\r\n\r\n//components\r\n\r\n\r\n        /** attach a component to the entity */\r\n    var component_count : Int = 0;\r\n    public inline function add<T:Component>( _component:T ) : T {\r\n        component_count++;\r\n        return _components.add( _component );\r\n    } //add\r\n\r\n        /** remove a component from the entity */\r\n    public inline function remove( _name:String ) : Bool {\r\n        component_count--;\r\n        return _components.remove( _name );\r\n    } //remove\r\n\r\n        /** get a component from the entity, by name */\r\n    public inline function get<T>(_name:String, ?_in_children:Bool = false ) : T {\r\n        return _components.get( _name, _in_children );\r\n    } //get\r\n\r\n        /** get all component from the entity, by name */\r\n    public inline function get_any<T>(_name:String, ?_in_children:Bool = false, ?_first_only:Bool = true ) : Array<T> {\r\n        return _components.get_any( _name, _in_children, _first_only );\r\n    } //get\r\n\r\n        /** returns true if the entity has a component by the given name */\r\n    public inline function has( _name:String ) : Bool {\r\n        return _components.has( _name );\r\n    } //has\r\n\r\n\r\n\r\n//internal\r\n\r\n    @:allow(luxe.Scene)\r\n    inline function _init() {\r\n\r\n            //verbose debugging\r\n        _verbose('${this} inside _init with options as $options' );\r\n        _debug('calling init on ' + name);\r\n\r\n\r\n        init();\r\n            //for any potential listeners, after the init() direct call\r\n            //as there is likely connections made during init\r\n        emit(Ev.init);\r\n\r\n        if(component_count > 0) {\r\n            //init all the components attached\r\n            for(_component in components) {\r\n                _verbose(\"          \" + name + \" calling init on component \" + _component.name );\r\n                _component.init();\r\n            } //for each component\r\n        } //component_count\r\n\r\n            //now init our children, so they do the same\r\n        if(children.length > 0) {\r\n            for(_child in children) {\r\n                _verbose(\"         parent \" + name + \" calling init on child \" + _child.name );\r\n                _child._init();\r\n            } //for each child\r\n        }\r\n\r\n            //flag internally\r\n        inited = true;\r\n\r\n    } //_init\r\n\r\n    @:allow(luxe.Scene)\r\n    inline function _reset(_) {\r\n\r\n        _debug('calling reset on ' + name);\r\n\r\n            //parent\r\n        onreset();\r\n            //potential listeners\r\n        emit(Ev.reset);\r\n\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _verbose(\"          \" + name + \" calling reset on component \" + _component.name );\r\n                _component.onreset();\r\n            } //for each component\r\n        }\r\n\r\n            //now reset our children, so they do the same\r\n        if(children.length > 0) {\r\n            for(_child in children) {\r\n                _child._reset(_);\r\n                _debug(\"         parent \" + name + \" calling reset on child \" + _child.name );\r\n            } //for each child\r\n        }\r\n\r\n            //start the fixed rate timer\r\n        _set_fixed_rate_timer( fixed_rate );\r\n\r\n            //flag internally\r\n        started = true;\r\n\r\n    } //_reset\r\n\r\n        /** destroy this entity. removes it from the scene if any, from the parent etc. */\r\n    public function destroy( ?_from_parent:Bool=false ) {\r\n\r\n        assert(destroyed == false, 'entity / destroying repeatedly $name');\r\n\r\n        _debug('destroy ' + name + ' with ' + children.length + ' children and ' + Lambda.count(components) + \" components / \" + id);\r\n\r\n            //first destroy children\r\n        if(children.length > 0) {\r\n            for(_child in children) {\r\n                _verbose('     calling destroy on child ' + _child.name);\r\n                _child.destroy(true);\r\n                _child = null;\r\n            } //for each child\r\n        }\r\n\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _verbose(\"          \" + name + \" calling onremoved on component \" + _component.name );\r\n                _component.onremoved();\r\n                _verbose(\"          \" + name + \" calling ondestroy on component \" + _component.name );\r\n                _component.ondestroy();\r\n                _component = null;\r\n            } //for each component\r\n        }\r\n\r\n        children = null;\r\n        _components.destroy();\r\n        _components = null;\r\n        component_count = 0;\r\n\r\n            //tell listeners\r\n        emit(Ev.destroy);\r\n            //then parent\r\n        ondestroy();\r\n\r\n            //remove it from it's parent if any\r\n        if(parent != null && !_from_parent) {\r\n            _verbose(\"     removing \" + name + \"/\" + id + \" from parent \" + parent.name + \" / \" + parent.id );\r\n            parent._remove_child(this);\r\n        }\r\n\r\n            //kill any fixed rate timers\r\n        _stop_fixed_rate_timer();\r\n\r\n            //mark the flags\r\n        destroyed = true;\r\n        inited = false;\r\n        started = false;\r\n\r\n            //remove from the scene it's in if any\r\n        _verbose( \"     removing \" + name + \" / \" + id + \" from scene \" + scene );\r\n\r\n        if(scene != null) {\r\n            scene.remove(this);\r\n        }\r\n\r\n            //kill the events\r\n        if(events != null) {\r\n            events.destroy();\r\n            events = null;\r\n        }\r\n\r\n        if(transform != null) {\r\n            transform.destroy();\r\n            transform = null;\r\n        }\r\n\r\n        _emitter_destroy();\r\n        // name = null;\r\n        id = null;\r\n\r\n    } //destroy\r\n\r\n    @:allow(luxe.Scene)\r\n    inline function _update(dt:Float) {\r\n\r\n        if(destroyed) {\r\n            _debug(\" calling update AFTER DESTROYED on \" + name + \" / \" + id );\r\n            return;\r\n        }\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _verboser('calling update on ' + name);\r\n\r\n            //make sure transforms are resolved\r\n        transform.clean_check();\r\n\r\n            //update the parent first\r\n        update(dt);\r\n\r\n        if(events != null) {\r\n                //update the events\r\n            events.process();\r\n        }\r\n\r\n            //update all the components attached directly to us\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.update(dt);\r\n            } //for each component\r\n        }\r\n\r\n            //now update our children, so they do the same\r\n        if(children != null && children.length > 0) {\r\n            for(_child in children) {\r\n                _child._update(dt);\r\n            } //for each child\r\n        }\r\n\r\n    } //_update\r\n\r\n//timing\r\n\r\n    @:allow(luxe.Entity)\r\n    function _fixed_update() {\r\n\r\n        if(destroyed) {\r\n            return;\r\n        }\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _verboser('calling fixedupdate on ' + name);\r\n\r\n        emit(Ev.fixedupdate);\r\n\r\n        onfixedupdate(fixed_rate);\r\n\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.onfixedupdate(fixed_rate);\r\n            }\r\n        }\r\n\r\n        if(children.length > 0) {\r\n            for(_child in children) {\r\n                _child._fixed_update();\r\n            }\r\n        }\r\n\r\n    } //_fixed_update\r\n\r\n//events\r\n\r\n    inline function _find_emit_source(?_from_unlisten:Bool=false) : Emitter<luxe.Ev> {\r\n\r\n        var _source = null;\r\n\r\n        if(scene != null) {\r\n\r\n            _source = scene;\r\n\r\n        } else if(parent != null) {\r\n\r\n            var _looking = true;\r\n            var _parent = parent;\r\n\r\n            while(_looking) {\r\n\r\n                    //not a root item\r\n                if(_parent.scene == null) {\r\n                        //no parent? this is not connected at all\r\n                    if(_parent.parent == null) {\r\n                        if(!_from_unlisten) {\r\n                            log('entity has no parent or scene, currently no core events will reach it.');\r\n                        }\r\n                        _looking = false;\r\n                        break;\r\n                    } else {\r\n                        //still has a parent,\r\n                        //keep looking\r\n                        _parent = _parent.parent;\r\n                    }\r\n\r\n                } else {\r\n\r\n                    _source = _parent.scene;\r\n                    _looking = false;\r\n                    break;\r\n\r\n                } //no scene\r\n\r\n            } //while looking\r\n\r\n        } else {\r\n            if(!_from_unlisten) {\r\n                log('entity has no parent or scene, currently no core events will reach it.');\r\n            }\r\n        }\r\n\r\n        return _source;\r\n\r\n    } //_find_emit_source\r\n\r\n    @:allow(luxe.Component)\r\n    function _listen( _event:Int, _handler:EmitHandler, ? _self:Bool=false ) {\r\n\r\n        //this function is called when a component, or a subclass tries to override the onmousedown handler,\r\n        //at which point it makes sure this entity is connected to the scene handlers, and then makes sure\r\n        //that the calling component or this instance is connected to its own events to the requested handler\r\n\r\n        //the duplication of events&handler combo is handled internally by Emitter, so we don't have to worry\r\n        //todo: potential consolidation to avoid the switch here\r\n\r\n\r\n        if( !_self ){\r\n            on(_event, _handler);\r\n        }\r\n\r\n        var _source = _find_emit_source();\r\n\r\n        _debug('$name / listen to $_event sourced from $_source');\r\n\r\n        if(_source != null) {\r\n            switch(_event) {\r\n\r\n                case Ev.keyup           : _source.on(_event, _keyup);\r\n                case Ev.keydown         : _source.on(_event, _keydown);\r\n                case Ev.textinput       : _source.on(_event, _textinput);\r\n\r\n                case Ev.mousedown       : _source.on(_event, _mousedown);\r\n                case Ev.mouseup         : _source.on(_event, _mouseup);\r\n                case Ev.mousemove       : _source.on(_event, _mousemove);\r\n                case Ev.mousewheel      : _source.on(_event, _mousewheel);\r\n\r\n                case Ev.touchdown       : _source.on(_event, _touchdown);\r\n                case Ev.touchup         : _source.on(_event, _touchup);\r\n                case Ev.touchmove       : _source.on(_event, _touchmove);\r\n\r\n                case Ev.inputup         : _source.on(_event, _inputup);\r\n                case Ev.inputdown       : _source.on(_event, _inputdown);\r\n\r\n                case Ev.gamepaddown     : _source.on(_event, _gamepaddown);\r\n                case Ev.gamepadup       : _source.on(_event, _gamepadup);\r\n                case Ev.gamepadaxis     : _source.on(_event, _gamepadaxis);\r\n                case Ev.gamepaddevice   : _source.on(_event, _gamepaddevice);\r\n\r\n                case Ev.windowmoved     : _source.on(_event, _windowmoved);\r\n                case Ev.windowresized   : _source.on(_event, _windowresized);\r\n                case Ev.windowsized     : _source.on(_event, _windowsized);\r\n                case Ev.windowminimized : _source.on(_event, _windowminimized);\r\n                case Ev.windowrestored  : _source.on(_event, _windowrestored);\r\n\r\n            } //switch event\r\n        } //source != null\r\n\r\n    } //_listen\r\n\r\n    @:allow(luxe.Entity)\r\n    @:allow(luxe.Component)\r\n    @:allow(luxe.macros.ComponentRules)\r\n    function _unlisten( _event:Int, _handler:EmitHandler, ?_self:Bool=false ) {\r\n\r\n        var _source = _find_emit_source(true);\r\n\r\n        _debug('$name / unlisten to $_event from $_source');\r\n\r\n        if(!_self) {\r\n            off(_event, _handler);\r\n        }\r\n\r\n        if(_source != null) {\r\n            switch(_event) {\r\n\r\n                case Ev.keyup           : _source.off(_event, _keyup);\r\n                case Ev.keydown         : _source.off(_event, _keydown);\r\n                case Ev.textinput       : _source.off(_event, _textinput);\r\n\r\n                case Ev.mousedown       : _source.off(_event, _mousedown);\r\n                case Ev.mouseup         : _source.off(_event, _mouseup);\r\n                case Ev.mousemove       : _source.off(_event, _mousemove);\r\n                case Ev.mousewheel      : _source.off(_event, _mousewheel);\r\n\r\n                case Ev.touchdown       : _source.off(_event, _touchdown);\r\n                case Ev.touchup         : _source.off(_event, _touchup);\r\n                case Ev.touchmove       : _source.off(_event, _touchmove);\r\n\r\n                case Ev.inputup         : _source.off(_event, _inputup);\r\n                case Ev.inputdown       : _source.off(_event, _inputdown);\r\n\r\n                case Ev.gamepaddown     : _source.off(_event, _gamepaddown);\r\n                case Ev.gamepadup       : _source.off(_event, _gamepadup);\r\n                case Ev.gamepadaxis     : _source.off(_event, _gamepadaxis);\r\n                case Ev.gamepaddevice   : _source.off(_event, _gamepaddevice);\r\n\r\n                case Ev.windowmoved     : _source.off(_event, _windowmoved);\r\n                case Ev.windowresized   : _source.off(_event, _windowresized);\r\n                case Ev.windowsized     : _source.off(_event, _windowsized);\r\n                case Ev.windowminimized : _source.off(_event, _windowminimized);\r\n                case Ev.windowrestored  : _source.off(_event, _windowrestored);\r\n\r\n            } //switch event\r\n        } //source != null\r\n\r\n    } //_unlisten\r\n\r\n\r\n//scene\r\n\r\n    function _detach_scene() {\r\n\r\n        if(scene != null) {\r\n\r\n            scene.off(Ev.reset, _reset);\r\n            scene.off(Ev.destroy, destroy);\r\n\r\n                //precaution\r\n            scene.off(Ev.keyup, _keyup);\r\n            scene.off(Ev.keydown, _keydown);\r\n            scene.off(Ev.textinput, _textinput);\r\n            scene.off(Ev.mousedown, _mousedown);\r\n            scene.off(Ev.mouseup, _mouseup);\r\n            scene.off(Ev.mousemove, _mousemove);\r\n            scene.off(Ev.mousewheel, _mousewheel);\r\n            scene.off(Ev.touchdown, _touchdown);\r\n            scene.off(Ev.touchup, _touchup);\r\n            scene.off(Ev.touchmove, _touchmove);\r\n            scene.off(Ev.inputup, _inputup);\r\n            scene.off(Ev.inputdown, _inputdown);\r\n            scene.off(Ev.gamepaddown, _gamepaddown);\r\n            scene.off(Ev.gamepadup, _gamepadup);\r\n            scene.off(Ev.gamepadaxis, _gamepadaxis);\r\n            scene.off(Ev.gamepaddevice, _gamepaddevice);\r\n            scene.off(Ev.windowmoved, _windowmoved);\r\n            scene.off(Ev.windowresized, _windowresized);\r\n            scene.off(Ev.windowsized, _windowsized);\r\n            scene.off(Ev.windowminimized, _windowminimized);\r\n            scene.off(Ev.windowrestored, _windowrestored);\r\n\r\n        } //scene != null\r\n\r\n    } //detach_scene\r\n\r\n    function _attach_scene() {\r\n\r\n        if(scene != null) {\r\n            scene.on(Ev.reset, _reset);\r\n            scene.on(Ev.destroy, destroy);\r\n        }\r\n\r\n    } //attach_scene\r\n\r\n//Keys\r\n\r\n    function _keyup( _event:KeyEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _keyup on `$name`');\r\n\r\n        onkeyup(_event);\r\n        emit(Ev.keyup, _event);\r\n\r\n    } //_keyup\r\n\r\n    function _keydown( _event:KeyEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _keydown on `$name`');\r\n\r\n        onkeydown(_event);\r\n        emit(Ev.keydown, _event);\r\n\r\n    } //_keydown\r\n\r\n    function _textinput( _event:TextEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _textinput on `$name`');\r\n\r\n        ontextinput(_event);\r\n        emit(Ev.textinput, _event);\r\n\r\n    } //_textinput\r\n\r\n\r\n//Mouse\r\n\r\n    function _mousedown( _event:MouseEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _mousedown on `$name`');\r\n\r\n        onmousedown(_event);\r\n        emit(Ev.mousedown, _event);\r\n\r\n    } //_mousedown\r\n\r\n\r\n    function _mouseup( _event:MouseEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _mouseup on `$name`');\r\n\r\n        onmouseup(_event);\r\n        emit(Ev.mouseup, _event);\r\n\r\n    } //_mouseup\r\n\r\n    function _mousewheel( _event:MouseEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _mousewheel on `$name`');\r\n\r\n        onmousewheel(_event);\r\n        emit(Ev.mousewheel, _event);\r\n\r\n    } //_mousewheel\r\n\r\n    function _mousemove( _event:MouseEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _mousemove on `$name`');\r\n\r\n        onmousemove(_event);\r\n        emit(Ev.mousemove, _event);\r\n\r\n    } //_mousemove\r\n\r\n//Touch\r\n    function _touchdown( _event:TouchEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _touchdown on `$name`');\r\n\r\n        ontouchdown(_event);\r\n        emit(Ev.touchdown, _event);\r\n\r\n    } //_touchdown\r\n\r\n    function _touchup( _event:TouchEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _touchup on `$name`');\r\n\r\n        ontouchup(_event);\r\n        emit(Ev.touchup, _event);\r\n\r\n    } //_touchup\r\n\r\n    function _touchmove( _event:TouchEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _touchmove on `$name`');\r\n\r\n        ontouchmove(_event);\r\n        emit(Ev.touchmove, _event);\r\n\r\n    } //_touchmove\r\n\r\n//Gamepad\r\n    function _gamepadaxis( _event:GamepadEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _gamepadaxis on `$name`');\r\n\r\n        ongamepadaxis(_event);\r\n        emit(Ev.gamepadaxis, _event);\r\n\r\n    } //_gamepadaxis\r\n\r\n    function _gamepaddown( _event:GamepadEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _gamepaddown on `$name`');\r\n\r\n        ongamepaddown(_event);\r\n        emit(Ev.gamepaddown, _event);\r\n\r\n    } //_gamepaddown\r\n\r\n    function _gamepadup( _event:GamepadEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _gamepadup on `$name`');\r\n\r\n        ongamepadup(_event);\r\n        emit(Ev.gamepadup, _event);\r\n\r\n    } //_gamepadup\r\n\r\n    function _gamepaddevice( _event:GamepadEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _gamepaddevice on `$name`');\r\n\r\n        ongamepaddevice(_event);\r\n        emit(Ev.gamepaddevice, _event);\r\n\r\n    } //_gamepaddevice\r\n\r\n//Windowing\r\n\r\n    function _windowmoved( _event:WindowEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _windowmoved on `$name`');\r\n\r\n        onwindowmoved(_event);\r\n        emit(Ev.windowmoved, _event);\r\n\r\n    } //_windowmoved\r\n\r\n    function _windowresized( _event:WindowEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _windowresized on `$name`');\r\n\r\n        onwindowresized(_event);\r\n        emit(Ev.windowresized, _event);\r\n\r\n    } //_windowresized\r\n\r\n    function _windowsized( _event:WindowEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _windowsized on `$name`');\r\n\r\n        onwindowsized(_event);\r\n        emit(Ev.windowsized, _event);\r\n\r\n    } //_windowsized\r\n\r\n    function _windowminimized( _event:WindowEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _windowminimized on `$name`');\r\n\r\n        onwindowminimized(_event);\r\n        emit(Ev.windowminimized, _event);\r\n\r\n    } //_windowminimized\r\n\r\n    function _windowrestored( _event:WindowEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _windowrestored on `$name`');\r\n\r\n        onwindowrestored(_event);\r\n        emit(Ev.windowrestored, _event);\r\n\r\n    } //_windowrestored\r\n\r\n//Input\r\n\r\n    function _inputdown( _event:InputEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _inputdown on `$name`');\r\n\r\n        oninputdown(_event);\r\n        emit(Ev.inputdown, _event);\r\n\r\n    } //_inputdown\r\n\r\n    function _inputup( _event:InputEvent ) {\r\n\r\n        if(!active || !inited || !started) {\r\n            return;\r\n        }\r\n\r\n        _debug('calling _inputup on `$name`');\r\n\r\n        oninputup(_event);\r\n        emit(Ev.inputup, _event);\r\n\r\n    } //_inputup\r\n\r\n\r\n//timing\r\n\r\n    inline function get_fixed_rate() : Float {\r\n\r\n        return fixed_rate;\r\n\r\n    } //get_fixed_rate\r\n\r\n    inline function set_fixed_rate( _rate:Float ) : Float {\r\n\r\n        fixed_rate = _rate;\r\n\r\n        if(started) {\r\n            _set_fixed_rate_timer( _rate );\r\n        }\r\n\r\n        return fixed_rate;\r\n\r\n    } //set_fixed_rate\r\n\r\n    inline function _stop_fixed_rate_timer() {\r\n\r\n        if(fixed_rate_timer != null) {\r\n            fixed_rate_timer.stop();\r\n            fixed_rate_timer = null;\r\n        }\r\n\r\n    } //_stop_fixed_rate_timer\r\n\r\n    inline function _set_fixed_rate_timer( _rate:Float #if luxe_entity_pos , ?_pos:haxe.PosInfos #end ) {\r\n\r\n        _stop_fixed_rate_timer();\r\n\r\n            //only top tier entities call this,\r\n            //all their children are fixed under the parent rate\r\n            //for now, that is.\r\n        if(_rate != 0 && parent == null && !destroyed) {\r\n            fixed_rate_timer = new snow.api.Timer( _rate );\r\n            fixed_rate_timer.run = _fixed_update;\r\n        } //_rate\r\n\r\n    } //_set_fixed_rate_timer\r\n\r\n//components\r\n\r\n    inline function get_components() {\r\n        return _components.components;\r\n    } //get_components\r\n\r\n//children\r\n\r\n    @:allow(luxe.Entity)\r\n    function _add_child( child:Entity ) {\r\n\r\n        children.push(child);\r\n\r\n        child.scene_root = scene_root;\r\n\r\n        _debug('$name / add child / ${child.name}');\r\n\r\n            //children inherit the updates and such from the parent, so they shouldn't be in the root of the scene\r\n        if(child.scene != null) {\r\n            _debug('$name / add child / ${child.name} being parented, removing from scene as root of ${child.scene.name}');\r\n            var _removed = child.scene.remove( child );\r\n        } else {\r\n\r\n            _debug('$name / add child ${child.name} being parented, but not from a scene');\r\n            \r\n            if(inited && !child.inited) {\r\n                scene_root._delayed_init_entities.push(child);\r\n            }\r\n            \r\n            if(started && !child.started) {\r\n                scene_root._delayed_reset_entities.push(child);\r\n            }\r\n        }\r\n\r\n    } //_add_child\r\n\r\n    @:allow(luxe.Entity)\r\n    function _remove_child(child:Entity) {\r\n\r\n        children.remove(child);\r\n\r\n    } //removeChild\r\n\r\n//listeners\r\n\r\n    function set_pos_from_transform( _pos:Vector ) {\r\n\r\n            //and we have to propogate the values to the components\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.entity_pos_change( _pos );\r\n            } //for each _component\r\n        }\r\n\r\n    } //set_pos_from_transform\r\n\r\n    function set_rotation_from_transform( _rotation:Quaternion ) {\r\n\r\n            //and we have to propogate the values to the components\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.entity_rotation_change( _rotation );\r\n            } //for each _component\r\n        }\r\n\r\n    } //set_rotation_from_transform\r\n\r\n    function set_scale_from_transform( _scale:Vector ) {\r\n\r\n            //and we have to propogate the values to the components\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.entity_scale_change( _scale );\r\n            } //for each _component\r\n        }\r\n\r\n    } //set_scale_from_transform\r\n\r\n    function set_origin_from_transform( _origin:Vector ) {\r\n\r\n            //and we have to propogate the values to the components\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.entity_origin_change( _origin );\r\n            } //for each _component\r\n        }\r\n\r\n    } //set_origin_from_transform\r\n\r\n    function set_parent_from_transform( _parent:Transform ) {\r\n\r\n            //and we have to propogate the values to the components\r\n        if(component_count > 0) {\r\n            for(_component in components) {\r\n                _component.entity_parent_change( _parent );\r\n            } //for each _component\r\n        }\r\n\r\n    } //set_parent_from_transform\r\n\r\n//pos\r\n\r\n    function set_pos(_p:Vector) {\r\n\r\n        return transform.pos = _p;\r\n\r\n    } //set_pos\r\n\r\n    function get_pos() {\r\n\r\n        return transform.pos;\r\n\r\n    } //get_pos\r\n\r\n//rotation\r\n\r\n    function set_rotation( _r:Quaternion ) {\r\n\r\n        return transform.rotation = _r;\r\n\r\n    } //set_rotation\r\n\r\n    function get_rotation() {\r\n\r\n        return transform.rotation;\r\n\r\n    } //get_rotation\r\n\r\n//scale\r\n\r\n    function set_scale( _s:Vector ) {\r\n\r\n        return transform.scale = _s;\r\n\r\n    } //set_scale\r\n\r\n    function get_scale() {\r\n\r\n        return transform.scale;\r\n\r\n    } //get_scale\r\n\r\n//origin\r\n\r\n    function set_origin( _origin:Vector ) {\r\n\r\n        return transform.origin = _origin;\r\n\r\n    } //set_origin\r\n\r\n\r\n    function get_origin() {\r\n\r\n        return transform.origin;\r\n\r\n    } //get_origin\r\n\r\n//transform\r\n\r\n    function set_transform( _transform:Transform ) {\r\n\r\n        return transform = _transform;\r\n\r\n    } //set_transform\r\n\r\n\r\n    function get_transform() {\r\n\r\n        return transform;\r\n\r\n    } //get_transform\r\n\r\n//parent\r\n\r\n    function set_parent( other:Entity ) {\r\n\r\n        assert(other != this, 'Entity setting itself as parent makes no sense');\r\n\r\n        _debug('>>  ' + name + ' calling set parent to ' + (other == null ? 'null' : other.name) );\r\n\r\n            //if we are parented already,\r\n            //remove ourselves from that parent\r\n        if(parent != null) {\r\n            parent._remove_child( this );\r\n        } //remove\r\n\r\n            //store the new parent, even if it's null, that is ok\r\n        parent = other;\r\n\r\n            //and if we are not detaching parent using null\r\n            //we add it to the parent directly and update its transform\r\n        if(parent != null) {\r\n            parent._add_child(this);\r\n            transform.parent = parent.transform;\r\n        } else {\r\n            transform.parent = null;\r\n            scene_root.add(this);\r\n        }\r\n\r\n        return parent;\r\n\r\n    } //set_parent\r\n\r\n    function get_parent() {\r\n\r\n        return parent;\r\n\r\n    } //get_parent\r\n\r\n//scene\r\n\r\n    function set_scene(_scene:Scene) {\r\n\r\n        _detach_scene();\r\n\r\n            scene = _scene;\r\n\r\n        _attach_scene();\r\n\r\n        return scene;\r\n\r\n    } //set_scene\r\n\r\n    function get_scene() {\r\n\r\n        return scene;\r\n\r\n    } //get_scene\r\n\r\n    function set_scene_root(_scene:Scene) {\r\n        \r\n        scene_root = _scene;\r\n\r\n        for(_child in children) {\r\n            _child.scene_root = _scene;\r\n        }\r\n\r\n        return scene_root;\r\n\r\n    } //set_scene_root\r\n\r\n//name\r\n\r\n    override function set_name(_name:String) : String {\r\n\r\n        var _scene = scene;\r\n\r\n        if(_scene != null && name != null) {\r\n            _scene.entities.remove(name);\r\n            _scene.handle_duplicate_warning(_name);\r\n            _scene.entities.set(_name, this);\r\n            _scene._has_changed = true;\r\n        }\r\n\r\n        return name = _name;\r\n\r\n    } //set_name\r\n\r\n//active\r\n\r\n    function set_active(_active:Bool) : Bool {\r\n\r\n        return active = _active;\r\n\r\n    } //set_active\r\n\r\n    function get_active() {\r\n\r\n        return active;\r\n\r\n    } //get_active\r\n\r\n// \r\n\r\n    inline function toString() {\r\n        if (destroyed) return 'luxe Entity: $name / DESTROYED / id: $id';\r\n\r\n        //:todo:\r\n        var _list = []; for(_c in components.keys()) _list.push(_c);\r\n        return 'luxe Entity: $name / ${Lambda.count(components)} components:[${_list.join(\", \")}] / id: $id';\r\n    }\r\n\r\n} //Entity\r\n","package luxe;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Rectangle;\r\nimport luxe.utils.Maths;\r\nimport luxe.Vector;\r\nimport luxe.Entity;\r\nimport luxe.tween.Actuate;\r\nimport luxe.tween.easing.Quad;\r\nimport phoenix.Camera.ProjectionType;\r\nimport phoenix.Quaternion;\r\n\r\nimport luxe.options.CameraOptions;\r\n\r\ntypedef ProjectionType = phoenix.Camera.ProjectionType;\r\n\r\n    /** A value to use when controlling the camera size property only. */\r\nenum SizeMode {\r\n\r\n        /** fit the size into the camera viewport (possible letter/pillar box) */\r\n    fit;\r\n        /** cover the viewport with the size (possible cropping) */\r\n    cover;\r\n        /** contain the size (stretch to fit the viewport)*/\r\n    contain;\r\n\r\n} //SizeMode\r\n\r\n    /** An entity based camera class */\r\nclass Camera extends Entity {\r\n\r\n        /** The viewport size for this camera, proxy to the view */\r\n    public var viewport (get,set) : Rectangle;\r\n        /** The center point of this camera, proxy to the view */\r\n    public var center (get,set) : Vector;\r\n        /** The current zoom value this camera can be set to, proxy to the view */\r\n    public var zoom (get,set) : Float;\r\n        /** The minimum zoom value this camera can be set to, proxy to the view */\r\n    public var minimum_zoom (get,set) : Float;\r\n\r\n        /** The virtual size of this camera. allows simple upscaling world coordinates, using `size_mode`. Note that this changes the view `scale` values and the `center` property. */\r\n    @:isVar public var size (get,set) : Vector;\r\n        /** When the size of the world is set using the `size` property, this controls how the scaling will apply. */\r\n    @:isVar public var size_mode (get,set) : SizeMode;\r\n\r\n        /** the view camera this entity wraps */\r\n    public var view : phoenix.Camera;\r\n        /** if set, the camera will not move outside of this region (world space) */\r\n    public var bounds : Rectangle;\r\n\r\n        /** the current shake vector amounts in x,y,z */\r\n    @:noCompletion public var shake_vector : Vector;\r\n        /** the last shake amount */\r\n    @:noCompletion public var shake_amount : Float;\r\n        /** if true, shake is busy happening */\r\n    @:noCompletion public var shaking : Bool = false;\r\n        /** the threshold cutoff for shaking */\r\n    @:noCompletion public var minimum_shake : Float = 0.1;\r\n\r\n    var _size_factor : Vector;\r\n    var _rotation_radian : Vector;\r\n    var _rotation_cache : Quaternion;\r\n\r\n        /** create a new camera with the given options */\r\n    public function new( ?_options:LuxeCameraOptions ) {\r\n\r\n            //cache for later\r\n        _size_factor = new Vector();\r\n        _rotation_radian = new Vector();\r\n        _rotation_cache = new Quaternion();\r\n        size_mode = SizeMode.fit;\r\n\r\n        var _name = 'untitled camera';\r\n\r\n        if(_options != null) {\r\n            if(_options.name != null) {\r\n                _name = _options.name;\r\n                _options.camera_name = '$_name.view';\r\n            }\r\n        } else {\r\n            _options = {\r\n                no_scene : false\r\n            }\r\n        }\r\n\r\n            //create or assign the underlying camera view\r\n        view = def(_options.view, new phoenix.Camera( _options ));\r\n\r\n            //Init the entity part\r\n        super({\r\n            name : _name,\r\n            no_scene : _options.no_scene\r\n        });\r\n\r\n    } //new\r\n\r\n    function get_viewport() : Rectangle {\r\n        return view.viewport;\r\n    } //get_viewport\r\n\r\n    function set_viewport( _v:Rectangle ) : Rectangle {\r\n        return view.viewport = _v;\r\n    } //set_viewport\r\n\r\n    function get_center() : Vector {\r\n        return view.center;\r\n    } //get_center\r\n\r\n    function set_center( _c:Vector ) : Vector {\r\n\r\n        pos = new Vector(_c.x - (viewport.w/2), _c.y - (viewport.h/2));\r\n        return view.center = _c;\r\n\r\n    } //set_center\r\n\r\n    function get_minimum_zoom() : Float {\r\n        return view.minimum_zoom;\r\n    } //get_minimum_zoom\r\n\r\n    function set_minimum_zoom( _m:Float ) : Float {\r\n        return view.minimum_zoom = _m;\r\n    } //set_minimum_zoom\r\n\r\n    function get_zoom() : Float {\r\n        return view.zoom;\r\n    } //get_zoom\r\n\r\n    function set_zoom( _z:Float ) : Float {\r\n\r\n            //assign the base zoom\r\n        view.zoom = _z;\r\n\r\n            //handle size mode scale factor\r\n        if(size != null) {\r\n            view.scale.x *= (1/_size_factor.x);\r\n            view.scale.y *= (1/_size_factor.y);\r\n        }\r\n\r\n        return view.zoom;\r\n\r\n    } //set_zoom\r\n\r\n    function get_size() : Vector {\r\n        return size;\r\n    } //get_size\r\n\r\n    function get_size_mode() : SizeMode {\r\n        return size_mode;\r\n    } //get_size\r\n\r\n    function set_size_mode( _m:SizeMode ) : SizeMode {\r\n\r\n        if(size_mode != null) {\r\n            size_mode = _m;\r\n            if(size != null) {\r\n                set_size( size );\r\n            }\r\n        }\r\n\r\n        return size_mode = _m;\r\n\r\n    } //get_size\r\n\r\n    var _connected = false;\r\n    function _onwindowsized( _event:luxe.Screen.WindowEvent ) {\r\n        if(size != null) {\r\n                //:todo: set_xy handlers on viewport etc\r\n                //:todo: disconnect on destroy when destroy exists for camera\r\n            viewport = new Rectangle(viewport.x, viewport.y, _event.x, _event.y);\r\n            set_size(size);\r\n        }\r\n    }\r\n\r\n    function set_size( _size:Vector ) : Vector {\r\n\r\n            //disable size\r\n        if( _size == null ) {\r\n            center = new Vector(viewport.w/2, viewport.h/2);\r\n            size = null;\r\n            _size_factor.x = _size_factor.y = 1;\r\n            set_zoom(zoom);\r\n            _connected = false;\r\n            Luxe.off(luxe.Ev.windowsized, _onwindowsized);\r\n            return size;\r\n        }\r\n\r\n        if(!_connected) {\r\n            Luxe.on(luxe.Ev.windowsized, _onwindowsized);\r\n            _connected = true;\r\n        }\r\n\r\n            //setting the size is an explicit action,\r\n            //making the center point fixed to the middle of the size,\r\n            //and making the scale of the view a ratio between the viewport\r\n            //size and the actual \"world\" size given\r\n        var _ratio_x = viewport.w / _size.x;\r\n        var _ratio_y = viewport.h / _size.y;\r\n        var _shortest = Math.max( _ratio_x, _ratio_y );\r\n        var _longest = Math.min( _ratio_x, _ratio_y );\r\n\r\n        switch(size_mode) {\r\n\r\n            case fit:{\r\n                _ratio_x = _ratio_y = _longest;\r\n            }\r\n\r\n            case cover: {\r\n                _ratio_x = _ratio_y = _shortest;\r\n            }\r\n\r\n            case contain: {\r\n                //use actual size\r\n            }\r\n\r\n        } //size_mode\r\n\r\n            //assign the scale values\r\n        _size_factor.x = _ratio_x;\r\n        _size_factor.y = _ratio_y;\r\n\r\n        view.scale.x = 1/(_size_factor.x * zoom);\r\n        view.scale.y = 1/(_size_factor.y * zoom);\r\n\r\n            //set the center\r\n        center = new Vector( _size.x/2, _size.y/2 );\r\n\r\n            //return\r\n        return size = _size.clone();\r\n\r\n    } //set_size\r\n\r\n        /**Focus the camera on a specific point, for Ortho only.\r\n        Use `.target` for a focus in perspective */\r\n    public function focus( _p:Vector, _t:Float = 0.6, ?_oncomplete:Void->Void=null ) {\r\n\r\n        Actuate.tween(view.center, _t, { x:_p.x, y:_p.y }, true )\r\n            .onComplete( _oncomplete ).ease( Quad.easeInOut )\r\n            .onUpdate( function() {\r\n                transform.pos.set_xy(view.pos.x, view.pos.y);\r\n            });\r\n\r\n    } //focus\r\n\r\n        /** convert a screen point to world space for this camera. handles zoom, rotation, scale, etc */\r\n    public function screen_point_to_world( _vector:Vector ) : Vector {\r\n\r\n        return view.screen_point_to_world( _vector );\r\n\r\n    } //screen_point_to_world\r\n\r\n        /** convert a world point to screen space for this camera. handles zoom, rotation, scale, etc */\r\n    public function world_point_to_screen( _vector:Vector, ?_viewport:Rectangle=null ) : Vector {\r\n\r\n        return view.world_point_to_screen( _vector, _viewport );\r\n\r\n    } //world_point_to_screen\r\n\r\n    // var cnt = 0;\r\n    override function set_pos_from_transform(_pos:Vector) {\r\n\r\n        var _vw = view.viewport.w;\r\n        var _vh = view.viewport.h;\r\n        var _hvw = _vw/2;\r\n        var _hvh = _vh/2;\r\n\r\n        var _px = _pos.x; \r\n        var _py = _pos.y;\r\n\r\n        if(bounds != null) {\r\n            if(_px < bounds.x)        _px = bounds.x;\r\n            if(_py < bounds.y)        _py = bounds.y;\r\n            if(_px+_hvw > bounds.w-_vw) _px = bounds.w-_vw-_hvw;\r\n            if(_py+_hvh > bounds.h-_vh) _py = bounds.h-_vh-_hvh;\r\n        }\r\n\r\n        var _prev = _pos.ignore_listeners;\r\n            _pos.ignore_listeners = true;\r\n        _pos.set_xy(_px, _py);\r\n            _pos.ignore_listeners = _prev;\r\n\r\n        super.set_pos_from_transform(_pos);\r\n\r\n        view.pos = view.pos.set_xyz(_pos.x, _pos.y, _pos.z);\r\n\r\n    } //set_pos_from_transform\r\n\r\n    override function set_rotation_from_transform(_rotation:Quaternion) {\r\n\r\n        super.set_rotation_from_transform(_rotation);\r\n\r\n        if(view != null) {\r\n            view.rotation = _rotation;\r\n        }\r\n\r\n    } //set_scale_from_transform\r\n\r\n    override function set_scale_from_transform(_scale:Vector) {\r\n\r\n        super.set_scale_from_transform(_scale);\r\n\r\n        if(view != null) {\r\n            view.scale = _scale;\r\n        }\r\n\r\n    } //set_scale_from_transform\r\n\r\n        /** Shake the camera a given amount */\r\n    public function shake(_amount:Float) {\r\n\r\n        shake_amount = _amount;\r\n        shaking = true;\r\n\r\n    } //shake\r\n\r\n        //Called by the scene the camera belongs to, or manually if you want\r\n    @:noCompletion override public function update(dt:Float) {\r\n\r\n            //add camera shake\r\n        if(shaking) {\r\n\r\n                //get a random direction\r\n            shake_vector = Luxe.utils.geometry.random_point_in_unit_circle();\r\n\r\n                //apply the shake amount scale\r\n            shake_vector.x *= shake_amount;\r\n            shake_vector.y *= shake_amount;\r\n            shake_vector.z *= shake_amount;\r\n\r\n                //fade the shake down\r\n            shake_amount *= 0.9;\r\n\r\n                //stop when it's too low\r\n            if(shake_amount <= minimum_shake) {\r\n                shake_amount = 0;\r\n                shaking = false;\r\n            }\r\n\r\n                //tell it to update the view\r\n            view.pos = view.pos.set_xyz(transform.pos.x + shake_vector.x, transform.pos.y + shake_vector.y, transform.pos.z + shake_vector.z);\r\n\r\n        } //shaking\r\n\r\n    } //update\r\n\r\n} //Camera\r\n","package luxe.macros;\r\n\r\nimport haxe.macro.Context;\r\nimport haxe.macro.Expr;\r\nimport haxe.macro.ExprTools;\r\n\r\n@:noCompletion class EntityRules {\r\n\r\n#if macro\r\n\r\n    static var init_field : Field;\r\n    static var ondestroy_field : Field;\r\n\r\n    macro public static function apply() : Array<Field> {\r\n\r\n        init_field = null;\r\n        ondestroy_field = null;\r\n\r\n        var _fields = Context.getBuildFields();\r\n\r\n            //do this first to ensure the values are set\r\n        for(_field in _fields) {\r\n            switch(_field.name) {\r\n                case 'init': init_field = _field;\r\n                case 'ondestroy': ondestroy_field = _field;\r\n            }\r\n        }\r\n\r\n            //if no init field, insert one\r\n        if(init_field == null) {\r\n            init_field = {\r\n                name: 'init',\r\n                doc: null, meta: [],\r\n                access: [AOverride,APublic],\r\n                kind: FFun({ params:[], args:[], ret:null, expr:macro { super.init(); } }),\r\n                pos: Context.currentPos()\r\n            };\r\n            _fields.push(init_field);\r\n        }\r\n\r\n            //if no ondestroy field, insert one\r\n        if(ondestroy_field == null) {\r\n            ondestroy_field = {\r\n                name: 'ondestroy',\r\n                doc: null, meta: [],\r\n                access: [AOverride,APublic],\r\n                kind: FFun({ params:[], args:[], ret:null, expr:macro { super.ondestroy(); } }),\r\n                pos: Context.currentPos()\r\n            };\r\n            _fields.push(ondestroy_field);\r\n        }\r\n\r\n        for(_field in _fields) {\r\n\r\n            switch(_field.name) {\r\n\r\n                case\r\n                    'ontouchmove',\r\n                    'ontouchdown',\r\n                    'ontouchup',\r\n                    'onmousemove',\r\n                    'onmousedown',\r\n                    'onmouseup',\r\n                    'onmousewheel',\r\n                    'ongamepadaxis',\r\n                    'ongamepadup',\r\n                    'ongamepaddown',\r\n                    'ongamepaddevice',\r\n                    'onkeydown',\r\n                    'onkeyup',\r\n                    'ontextinput',\r\n                    'oninputdown',\r\n                    'oninputup',\r\n                    'onwindowmoved',\r\n                    'onwindowresized',\r\n                    'onwindowsized',\r\n                    'onwindowminimized',\r\n                    'onwindowrestored' :\r\n                {\r\n                    connect_event(_field);\r\n                }\r\n\r\n            } //switch _field.name\r\n\r\n        } //for field in fields\r\n\r\n        return _fields;\r\n\r\n    } //apply\r\n\r\n\r\n\r\n    static function connect_event( _field:haxe.macro.Field ) {\r\n\r\n        if(_field.access.indexOf(AOverride) != -1) {\r\n\r\n            var _event_name : String = _field.name.substr(2);\r\n\r\n                //inject the init connection\r\n            switch(init_field.kind) {\r\n                default:\r\n                case FFun(f):\r\n                    switch(f.expr.expr) {\r\n                        default:\r\n                        case EBlock(exprs):\r\n                            exprs.push( Context.parse('_listen( luxe.Ev.${_event_name}, ${_field.name}, true )', _field.pos) );\r\n                    } //switch exp\r\n            } //switch kind\r\n\r\n                //and inject the ondestroy connection\r\n            switch(ondestroy_field.kind) {\r\n                default:\r\n                case FFun(f):\r\n                    switch(f.expr.expr) {\r\n                        default:\r\n                        case EBlock(exprs):\r\n                            exprs.push( Context.parse('_unlisten( luxe.Ev.${_event_name}, ${_field.name}, true )', _field.pos) );\r\n                    } //switch exp\r\n            } //switch kind\r\n\r\n        } //if override\r\n\r\n    } //connect_event\r\n\r\n#end //macro\r\n\r\n} //EntityRules\r\n","package luxe;\r\n\r\nimport luxe.Quaternion;\r\nimport luxe.Vector;\r\nimport luxe.Transform;\r\nimport luxe.Input;\r\nimport luxe.Screen;\r\nimport luxe.Objects.ID;\r\nimport luxe.options.ComponentOptions;\r\n\r\nimport luxe.Log.log;\r\nimport luxe.Log._debug;\r\nimport luxe.Log._verbose;\r\n\r\n@:autoBuild(luxe.macros.ComponentRules.apply())\r\nclass Component extends ID {\r\n\r\n        /** the entity this component is attached to */\r\n    @:isVar public var entity (get,set) : Entity;\r\n\r\n        /** The spatial transform of the attached entity. direct proxy to the entity transform */\r\n    public var transform : Transform;\r\n        /** The local position of the spatial transform. direct proxy to the entity transform */\r\n    public var pos              (get,set) : Vector;\r\n        /** The local rotation of the spatial transform. direct proxy to the entity transform */\r\n    public var rotation         (get,set) : Quaternion;\r\n        /** The local scale of the spatial transform. direct proxy to the entity transform */\r\n    public var scale            (get,set) : Vector;\r\n        /** The local origin of the spatial transform. direct proxy to the entity transform */\r\n    public var origin           (get,set) : Vector;\r\n\r\n        /** called when the scene is initiated. **use this instead of new** for state setup. it respects the order of creations, children, and component ordering. */\r\n    public function init() {}\r\n        /** called once per frame, passing the delta time */\r\n    public function update(dt:Float) {}\r\n\r\n        /** called when the component is attached to an entity */\r\n    public function onadded() {}\r\n        /** called when the component is removed from an entity */\r\n    public function onremoved() {}\r\n\r\n        /** called when the fixed update is triggered, if the entity has a fixed_rate set. hands the fixed_rate for interchangeable update/fixedupdate convenience */\r\n    @:noCompletion public function onfixedupdate(rate:Float) {}\r\n       /** called when the scene starts or is reset. use this to reset state. */\r\n    @:noCompletion public function onreset() {}\r\n        /** called when the scene, parent or entity is destroyed. use this to clean up state. */\r\n    @:noCompletion public function ondestroy() {}\r\n\r\n        /** override this to get notified when a key is released. only called if overridden. */\r\n    @:noCompletion public function onkeyup( event:KeyEvent ) {}\r\n        /** override this to get notified when a key is pressed. only called if overridden. */\r\n    @:noCompletion public function onkeydown( event:KeyEvent ) {}\r\n        /** override this to get notified when a text input event happens. only called if overridden. */\r\n    @:noCompletion public function ontextinput( event:TextEvent ) {}\r\n\r\n        /** override this to get notified when a named input event happens. only called if overridden. */\r\n    @:noCompletion public function oninputdown( event:InputEvent ) {}\r\n        /** override this to get notified when a named input event happens. only called if overridden. */\r\n    @:noCompletion public function oninputup( event:InputEvent ) {}\r\n\r\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\r\n    @:noCompletion public function onmousedown( event:MouseEvent ) {}\r\n        /** override this to get notified when a mouse button is pressed. only called if overridden. */\r\n    @:noCompletion public function onmouseup( event:MouseEvent ) {}\r\n        /** override this to get notified when a mouse is moved. only called if overridden. */\r\n    @:noCompletion public function onmousemove( event:MouseEvent ) {}\r\n        /** override this to get notified when the mouse wheel/trackpad is scrolled. only called if overridden. */\r\n    @:noCompletion public function onmousewheel( event:MouseEvent ) {}\r\n\r\n        /** override this to get notified when a touch begins. only called if overridden. */\r\n    @:noCompletion public function ontouchdown( event:TouchEvent ) {}\r\n        /** override this to get notified when a touch ends. only called if overridden. */\r\n    @:noCompletion public function ontouchup( event:TouchEvent ) {}\r\n        /** override this to get notified when a touch moves. only called if overridden. */\r\n    @:noCompletion public function ontouchmove( event:TouchEvent ) {}\r\n\r\n        /** override this to get notified when a gamepad button is released. only called if overridden. */\r\n    @:noCompletion public function ongamepadup( event:GamepadEvent ) {}\r\n        /** override this to get notified when a gamepad button is pressed. only called if overridden. */\r\n    @:noCompletion public function ongamepaddown( event:GamepadEvent ) {}\r\n        /** override this to get notified when a gamepad axis changes. only called if overridden. */\r\n    @:noCompletion public function ongamepadaxis( event:GamepadEvent ) {}\r\n        /** override this to get notified when a gamepad device event happens. only called if overridden. */\r\n    @:noCompletion public function ongamepaddevice( event:GamepadEvent ) {}\r\n\r\n       /** override this to get notified when a window is moved, with the data containing the new x/y position */\r\n   @:noCompletion public function onwindowmoved( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is resized by the user, with the data containing the new x/y size */\r\n   @:noCompletion public function onwindowresized( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is resized by the system or code or the user, with the data containing the new x/y size */\r\n   @:noCompletion public function onwindowsized( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is minimized. */\r\n   @:noCompletion public function onwindowminimized( event:WindowEvent ) {}\r\n       /** override this to get notified when a window is restored. */\r\n   @:noCompletion public function onwindowrestored( event:WindowEvent ) {}\r\n\r\n        /** Use this to pass instance specific data and values to the component. */\r\n    public function new( ?_options:ComponentOptions ) {\r\n\r\n        var _name = '';\r\n\r\n        if(_options != null) {\r\n            if(_options.name != null) {\r\n                _name = _options.name;\r\n            }\r\n        }\r\n\r\n        super(_name == '' ? Luxe.utils.uniqueid() : _name);\r\n\r\n    } //new\r\n\r\n//components\r\n\r\n        /** attach a component to the entity */\r\n    public function add<T:Component>( component:T ) : T {\r\n        return entity.add( component );\r\n    } //add\r\n\r\n        /** remove a component from the entity */\r\n    public function remove( _name:String ) : Bool {\r\n        return entity.remove( _name );\r\n    } //add\r\n\r\n        /** get a component from the entity, by name */\r\n    public function get<T>( _name:String, ?in_children:Bool = false ) : T {\r\n        return entity.get( _name, in_children );\r\n    } //get\r\n\r\n        /** get all component from the entity, by name */\r\n    public function get_any<T>( _name:String, ?in_children:Bool = false, ?first_only:Bool = true ) : Array<T> {\r\n        return entity.get_any( _name, in_children, first_only );\r\n    } //get_any\r\n\r\n        /** returns true if the entity has a component by the given name */\r\n    public function has( _name:String ) : Bool {\r\n        return entity.has( _name );\r\n    } //has\r\n\r\n//Internal\r\n\r\n//entity\r\n\r\n    function _detach_entity() {\r\n\r\n        if(entity != null) {\r\n            //entity.off(luxe.Ev.reset, _reset);\r\n        }\r\n\r\n    } //detach_entity\r\n\r\n    function _attach_entity() {\r\n\r\n        if(entity != null) {\r\n            //entity.on(luxe.Ev.reset, _reset);\r\n        }\r\n\r\n    } //attach_entity\r\n\r\n    function set_entity(_entity:Entity) {\r\n\r\n        _detach_entity();\r\n\r\n            entity = _entity;\r\n\r\n        _attach_entity();\r\n\r\n        return entity;\r\n\r\n    } //set_entity\r\n\r\n    function get_entity() {\r\n\r\n        return entity;\r\n\r\n    } //get_entity\r\n\r\n//transforms\r\n\r\n    function set_pos( _p:Vector ) {\r\n        return entity.transform.pos = _p;\r\n    } //set_pos\r\n\r\n    function get_pos() {\r\n        return entity.transform.pos;\r\n    } //get_pos\r\n\r\n    function set_rotation( _r:Quaternion ) {\r\n        return entity.transform.rotation = _r;\r\n    } //set_rotation\r\n\r\n    function get_rotation() {\r\n        return entity.transform.rotation;\r\n    } //get_rotation\r\n\r\n    function set_scale(_s:Vector) {\r\n        return entity.transform.scale = _s;\r\n    } //set_scale\r\n\r\n    function get_scale() {\r\n        return entity.transform.scale;\r\n    } //get_scale\r\n\r\n    function set_origin(_o:Vector) {\r\n        return entity.transform.origin = _o;\r\n    } //set_origin\r\n\r\n    function get_origin() {\r\n        return entity.transform.origin;\r\n    } //get_origin\r\n\r\n    function set_transform(_o:Transform) {\r\n        return entity.transform = _o;\r\n    } //set_transform\r\n\r\n    function get_transform() {\r\n        return entity.transform;\r\n    } //get_transform\r\n\r\n    @:noCompletion public function entity_pos_change( _pos:Vector ) {}\r\n    @:noCompletion public function entity_scale_change( _scale:Vector ) {}\r\n    @:noCompletion public function entity_rotation_change( _rotation:Quaternion ) {}\r\n    @:noCompletion public function entity_origin_change( _origin:Vector ) {}\r\n    @:noCompletion public function entity_parent_change( _parent:Transform ) {}\r\n\r\n    inline function toString() {\r\n        return 'luxe Component: $name on ${entity.name} / id: $id';\r\n    }\r\n\r\n//internal api\r\n\r\n} //Component\r\n","package luxe;\r\n\r\nimport luxe.Engine;\r\nimport luxe.Input;\r\nimport luxe.Ev;\r\n\r\nimport luxe.debug.Inspector;\r\nimport luxe.debug.DebugView;\r\n\r\nimport phoenix.Camera;\r\nimport phoenix.Batcher;\r\nimport phoenix.BitmapFont;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.geometry.QuadGeometry;\r\n\r\nimport luxe.utils.Maths;\r\nimport luxe.Log._debug;\r\nimport luxe.Log.assert;\r\n\r\nusing StringTools;\r\n\r\n@:allow(luxe.Engine)\r\nclass Debug {\r\n\r\n    public var app : Engine;\r\n    public var visible (default, set) : Bool = false;\r\n\r\n    public var inspector : Inspector;\r\n    public var overlay : QuadGeometry;\r\n\r\n    public var batcher : Batcher;\r\n    public var view : Camera;\r\n    public var debug_font : BitmapFont;\r\n\r\n        //track a delta frame average\r\n    public var dt_average : Float = 0;\r\n    public var dt_average_accum : Float = 0;\r\n    public var dt_average_span : Int = 60;\r\n    public var dt_average_count : Int = 0;\r\n\r\n//views\r\n    public var current_view_index = 0;\r\n    public var last_view_index = 0;\r\n    public var current_view : DebugView;\r\n    public static var views : Array<DebugView>;\r\n\r\n    public var padding : Vector;\r\n\r\n//Profile path\r\n    public var profile_path : String = \"profile.txt\";\r\n    public var profiling : Bool = false;\r\n\r\n    function new( _app:Engine ) {\r\n\r\n        app = _app;\r\n\r\n    } //new\r\n\r\n//public API\r\n\r\n        /** Fetch the instance of the debug view for manipulation by name */\r\n    public function get_view<T>(_name:String) : T {\r\n\r\n        for(view in views) {\r\n\r\n            if(view.name == _name) {\r\n                return cast view;\r\n            }\r\n\r\n        } //view\r\n\r\n        return null;\r\n\r\n    } //get_view\r\n\r\n    #if !luxe_noprofile\r\n\r\n        /** start a profiling section for the profiler debug view */\r\n        public function start(_name:String, ?_max:Float) {\r\n            #if !no_debug_console\r\n                if(!app.headless) {\r\n                    luxe.debug.ProfilerDebugView.start(_name, _max);\r\n                }\r\n            #end\r\n        }\r\n\r\n            /** end a profiling section for the profiler debug view */\r\n        public function end(_name:String) {\r\n            #if !no_debug_console\r\n                if(!app.headless) {\r\n                    luxe.debug.ProfilerDebugView.end(_name);\r\n                }\r\n            #end\r\n        }\r\n    #end\r\n\r\n//Internal\r\n\r\n    function init() {\r\n\r\n        views = [];\r\n\r\n        #if !no_debug_console\r\n\r\n            views.push(new luxe.debug.TraceDebugView(this));\r\n            views.push(new luxe.debug.StatsDebugView(this));\r\n            //views.push(new luxe.debug.BatcherDebugView(this));\r\n            views.push(new luxe.debug.ProfilerDebugView(this));\r\n            views.push(new luxe.debug.SceneDebugView(this));\r\n\r\n            current_view = views[0];\r\n\r\n        #end\r\n\r\n        haxe.Log.trace = internal_trace;\r\n\r\n        _debug('\\t debug initialized.');\r\n\r\n    } //init\r\n\r\n    function create_debug_console() {\r\n\r\n        #if !no_debug_console\r\n\r\n            app.on(Ev.keyup, keyup);\r\n            app.on(Ev.keydown, keydown);\r\n            app.on(Ev.mouseup, mouseup);\r\n            app.on(Ev.mousedown, mousedown);\r\n            app.on(Ev.mousemove, mousemove);\r\n            app.on(Ev.mousewheel, mousewheel);\r\n            app.on(Ev.touchup, touchup);\r\n            app.on(Ev.touchdown, touchdown);\r\n            app.on(Ev.touchmove, touchmove);\r\n\r\n                //create the debug renderer and view\r\n            batcher = new Batcher( app.renderer, 'debug_batcher', Math.floor(Math.pow(2, 20)));\r\n            batcher.show_stats = 0;\r\n            \r\n                //create a camera\r\n            view = new Camera({ camera_name:'debug_batcher_camera' });\r\n                //set the camera of the batcher\r\n            batcher.view = view;\r\n                //Also, set the layer so it renders last\r\n            batcher.layer = 999;\r\n\r\n            overlay = new QuadGeometry({\r\n                id: 'debug.overlay',\r\n                x:0, y:0,\r\n                w: app.screen.w,  h: app.screen.h,\r\n                color : new Color(0,0,0,0.8),\r\n                depth : 999,    //debug depth\r\n                visible : false, //default invisible\r\n                batcher : batcher\r\n            });\r\n\r\n            overlay.locked = true;\r\n\r\n                //create the scene inspector\r\n            padding = new Vector(app.screen.w*0.05,app.screen.h*0.05);\r\n            inspector = new Inspector({\r\n                pos : new Vector(padding.x, padding.y),\r\n                size : new Vector(app.screen.w-(padding.x*2), app.screen.h-(padding.y*2)),\r\n                batcher : batcher\r\n            });\r\n\r\n\r\n            inspector.onrefresh = refresh;\r\n\r\n            app.on(Ev.windowsized, function( _event:luxe.Screen.WindowEvent ){\r\n\r\n                var _w = _event.x;\r\n                var _h = _event.y;\r\n\r\n                padding.set_xy(_w*0.05,_h*0.05);\r\n\r\n                overlay.resize_xy(_w, _h);\r\n                view.viewport = new Rectangle(0, 0, _w, _h);\r\n                inspector.size = new Vector(_w-(padding.x*2), _h-(padding.y*2));\r\n                inspector.pos = new Vector(padding.x, padding.y);\r\n\r\n                for(view in views) {\r\n                    view.onwindowsized(_event);\r\n                }\r\n            });\r\n\r\n            for(view in views) {\r\n                view.create();\r\n            }\r\n\r\n        #end //no_debug_console\r\n\r\n    } //create_debug_console\r\n\r\n    static var debug_batch_tag  = 'batcher.debug_batcher';\r\n    function render() {\r\n\r\n        #if !no_debug_console\r\n\r\n            if(visible) {\r\n\r\n                #if !luxe_noprofile start(debug_batch_tag); #end\r\n\r\n                    batcher.draw();\r\n\r\n                #if !luxe_noprofile end(debug_batch_tag); #end\r\n\r\n            } //visible\r\n\r\n        #end\r\n\r\n    } //render\r\n\r\n//Trace capturing\r\n\r\n    public static var trace_callbacks : Array<Dynamic->?haxe.PosInfos->Void> = [];\r\n\r\n    static var shut_down : Bool = false;\r\n    static var tracing : Bool = false;\r\n\r\n    static function internal_trace(_value:Dynamic, ?_info:haxe.PosInfos) {\r\n\r\n        assert(tracing == false, 'luxe.Debug: calling trace from a trace callback is an infinite loop!');\r\n        tracing = true;\r\n\r\n            var _out = '$_value';\r\n\r\n            if(_info != null && _info.customParams != null) {\r\n                _out += ' ' + _info.customParams.join(' ');\r\n            }\r\n\r\n            #if cpp \r\n                untyped __trace(_out, _info);\r\n            #elseif luxe_web \r\n                untyped console.log('${_info.fileName}::${Std.string(_info.lineNumber).rpad(\" \", 4)} $_out'); \r\n            #end\r\n\r\n            if(!shut_down) {\r\n                for(_callback in trace_callbacks) {\r\n                    _callback(_value, _info);\r\n                }\r\n            }\r\n\r\n        tracing = false;\r\n\r\n    } //internal_trace\r\n\r\n//Events\r\n\r\n    function mouseup(e:MouseEvent) {\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.onmouseup(e);\r\n            }\r\n        }\r\n    } //mouseup\r\n\r\n    function mousedown(e:MouseEvent) {\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.onmousedown(e);\r\n            }\r\n        }\r\n    } //mousedown\r\n\r\n    function mousemove(e:MouseEvent) {\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.onmousemove(e);\r\n            }\r\n        }\r\n    } //mousemove\r\n\r\n    function mousewheel(e:MouseEvent) {\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.onmousewheel(e);\r\n            }\r\n        }\r\n    } //mousewheel\r\n\r\n   function touchup(e:TouchEvent) {\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.ontouchup(e);\r\n            }\r\n        }\r\n    } //touchup\r\n\r\n    function touchdown(e:TouchEvent) {\r\n\r\n        #if (!no_debug_console && mobile)\r\n\r\n                //3 finger tap when console opens will switch tabs\r\n            if(app.app.input.touch_count == 3) {\r\n                if(visible) {\r\n                    switch_view();\r\n                }\r\n            }\r\n\r\n                //4 finger tap toggles console\r\n            if(app.app.input.touch_count == 4) {\r\n                visible = !visible;\r\n            }\r\n\r\n        #end //no_debug_console\r\n\r\n\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.ontouchdown(e);\r\n            }\r\n        }\r\n    } //touchdown\r\n\r\n    function touchmove(e:TouchEvent) {\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.ontouchmove(e);\r\n            }\r\n        }\r\n    } //touchmove\r\n\r\n    function keyup(e:KeyEvent) {\r\n\r\n        if(visible) {\r\n            for(view in views) {\r\n                view.onkeyup(e);\r\n            }\r\n        } //visible\r\n\r\n        #if profiler\r\n            #if luxe_native\r\n                if(e.keycode == Key.key_p && profiling) {\r\n                    cpp.vm.Profiler.stop();\r\n                    profiling = false;\r\n                    trace(\"profiling complete. Look for the results in \" + profile_path );\r\n                }\r\n            #end //luxe_native\r\n        #end //profiler\r\n\r\n    } //keyup\r\n\r\n    function keydown(e:KeyEvent) {\r\n\r\n        if(e.scancode == Scan.grave) {\r\n            visible = !visible;\r\n        }\r\n\r\n        if(visible) {\r\n\r\n            if(e.keycode == Key.key_1 && visible) {\r\n                switch_view();\r\n            }\r\n\r\n            for(view in views) {\r\n                view.onkeydown(e);\r\n            }\r\n\r\n        }\r\n\r\n        #if profiler\r\n            #if luxe_native\r\n                if(e.keycode == Key.key_p && e.mod.ctrl && !e.repeat) {\r\n                    trace(\"starting profiler ... let go of key to stop profiling.\");\r\n                    cpp.vm.Profiler.start( profile_path );\r\n                    profiling = true;\r\n                }\r\n            #end //luxe_native\r\n        #end //profiler\r\n\r\n    } //keydown\r\n\r\n    function refresh() {\r\n\r\n        if(current_view != null) {\r\n            current_view.refresh();\r\n        }\r\n\r\n    } //refresh\r\n\r\n        /** programmatically switch the debug console view. currently cycles the view. */\r\n    @:noCompletion public function switch_view() {\r\n\r\n            //keep knowledge of this\r\n        last_view_index = current_view_index;\r\n            //then go up one, :todo : make easier to jump to specific view?\r\n        current_view_index++;\r\n\r\n            //handle looping\r\n        if(current_view_index > views.length-1) {\r\n            current_view_index = 0;\r\n        }\r\n\r\n            //now hide the last view\r\n        views[last_view_index].hide();\r\n            //store the new one\r\n        current_view = views[current_view_index];\r\n\r\n            //show the new one\r\n        current_view.show();\r\n\r\n    } //switch_view\r\n\r\n    var last_cursor_grab : Bool = false;\r\n\r\n    function set_visible(_value:Bool) {\r\n\r\n        #if no_debug_console\r\n            return visible = false;\r\n        #end\r\n\r\n        visible = _value;\r\n        overlay.visible = visible;\r\n\r\n        if(visible) {\r\n\r\n                //revert cursor grab\r\n            last_cursor_grab = app.screen.cursor.grab;\r\n            app.screen.cursor.grab = false;\r\n                //show views\r\n            current_view.show();\r\n            inspector.show();\r\n\r\n        } else {\r\n\r\n            if(last_cursor_grab != false) {\r\n                app.screen.cursor.grab = last_cursor_grab;\r\n            }\r\n\r\n            current_view.hide();\r\n            inspector.hide();\r\n\r\n        } //visible\r\n\r\n        return visible;\r\n\r\n    } //set_visible\r\n\r\n    function destroy() {\r\n\r\n        app.off(Ev.keyup, keyup);\r\n        app.off(Ev.keydown, keydown);\r\n        app.off(Ev.mouseup, mouseup);\r\n        app.off(Ev.mousedown, mousedown);\r\n        app.off(Ev.mousemove, mousemove);\r\n        app.off(Ev.mousewheel, mousewheel);\r\n\r\n        _debug('\\t debug shut down.');\r\n        shut_down = true;\r\n\r\n    } //destroy\r\n\r\n    function process() {\r\n\r\n        dt_average_accum += app.frame_delta;\r\n        dt_average_count++;\r\n\r\n        if(dt_average_count == dt_average_span - 1) {\r\n            dt_average = dt_average_accum/dt_average_span;\r\n            dt_average_accum = dt_average;\r\n            dt_average_count = 0;\r\n        }\r\n\r\n        if(!visible) {\r\n            return;\r\n        }\r\n\r\n            //update the title\r\n        inspector.title.text = '[${current_view.name}] / ${Math.round(1/dt_average)} / ${Maths.fixed(app.frame_delta,5)} / ${Maths.fixed(dt_average,5)}';\r\n\r\n        for(view in views) {\r\n            view.process();\r\n        }\r\n\r\n    } //process\r\n\r\n} //Debug\r\n\r\n","package luxe;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Color;\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.*;\r\n\r\n    //:todo: move text options to the options package\r\nimport phoenix.geometry.TextGeometry.TextGeometryOptions;\r\n\r\nimport luxe.options.GeometryOptions;\r\nimport luxe.options.DrawOptions;\r\n\r\n/**\r\n    The `draw` API class implementation.\r\n    This class handles quick access to drawing common geometry options,\r\n    and is a facilitator for higher level drawing. These can be used given to a `Visual` to convert\r\n    them into a higher level entity for use with the default scene.\r\n */\r\nclass Draw {\r\n\r\n//Public API\r\n\r\n        /** Draw a line geometry between points `p0` and `p1` with options */\r\n    public function line( options:DrawLineOptions ) {\r\n\r\n        assertnull(options.p0, 'draw.line requires p0:Vector, and p1:Vector');\r\n        assertnull(options.p1, 'draw.line requires p0:Vector, and p1:Vector');\r\n\r\n        def(options.id, 'line.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n            return new LineGeometry(options);\r\n\r\n    } // line\r\n\r\n        /** Draw a rectangle outline at the specified `x`,`y`,`w`,`h` with options */\r\n    public function rectangle( options:DrawRectangleOptions ) {\r\n\r\n        def(options.id, 'rectangle.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        return new RectangleGeometry(options);\r\n\r\n    } //rectangle\r\n\r\n        /** Draw a solid rectangle box at the specified `x`,`y`,`w`,`h` with options */\r\n    public function box( options:DrawBoxOptions ) {\r\n\r\n        def(options.id, 'quad.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        return new QuadGeometry(options);\r\n\r\n    } //box\r\n\r\n        /** Draw a circle outline at the specified `x`,`y` with radius `r` (or `rx`,`ry` optionally for an ellipse), with options */\r\n    public function ring( options:DrawRingOptions ) {\r\n\r\n        def(options.id, 'ring.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        return new RingGeometry(options);\r\n\r\n    } //ring\r\n\r\n        /** Draw a solid circle at the specified `x`,`y` with radius `r` (or `rx`,`ry` optionally for an ellipse), with options */\r\n    public function circle( options:DrawCircleOptions ) {\r\n\r\n        def(options.id, 'circle.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        return new CircleGeometry(options);\r\n\r\n    } //circle\r\n\r\n        /** Draw an arc (open circle) at the specified `x`,`y`, between `start_angle` and `end_angle` with radius `r` (or `rx`,`ry` optionally for an ellipsical arc), with options */\r\n    public function arc( options:DrawArcOptions ) {\r\n\r\n        def(options.id, 'arc.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        return new ArcGeometry(options);\r\n\r\n    } //arc\r\n\r\n        /** Draw an n-sided polygon (3 sides for triangle, 6 for hexagon etc) at `x`,`y` with a radius `r` and `sides` with options  */\r\n    public function ngon( options:DrawNgonOptions ) : Geometry {\r\n\r\n        def(options.id, 'ngon.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        var _sides : Int = 3;\r\n        var _radius : Float = 64;\r\n        var _solid : Bool = false;\r\n        var _x : Float = 0;\r\n        var _y : Float = 0;\r\n        var _angle : Float = 0;\r\n\r\n        if(options.sides != null) {\r\n            _sides = options.sides;\r\n        }\r\n\r\n        if(options.r != null) { _radius = options.r; }\r\n        if(options.x != null) { _x = options.x; }\r\n        if(options.y != null) { _y = options.y; }\r\n        if(options.angle != null) { _angle = options.angle; }\r\n        if(options.solid != null) { _solid = options.solid; }\r\n\r\n        if(!_solid) {\r\n            options.primitive_type = PrimitiveType.lines;\r\n        } else {\r\n            options.primitive_type = PrimitiveType.triangle_fan;\r\n        }\r\n\r\n        var _geometry = new Geometry(options);\r\n        var _two_pi : Float = 2 * Math.PI;\r\n        var _sides_over_pi : Float = Math.PI / _sides;\r\n        var _sides_over_twopi : Float = _two_pi / _sides;\r\n        var _angle_rad : Float = luxe.utils.Maths.radians(_angle);\r\n        var _color = options.color;\r\n\r\n        if(_solid) {\r\n                //add the center vertex\r\n            _geometry.add( new Vertex( new Vector( _x, _y ), _color ) );\r\n        }\r\n\r\n        var _count : Int = (_solid == false) ? _sides : _sides+1;\r\n        var _points:Array<Vector> = [];\r\n\r\n        for(i in 0 ... _count ) {\r\n\r\n            var __x   = (_radius * Math.sin(_angle_rad + (_sides_over_pi) + (i * (_sides_over_twopi))));\r\n            var __y   = (_radius * Math.cos(_angle_rad + (_sides_over_pi) + (i * (_sides_over_twopi))));\r\n            var __pos = new Vector( _x + __x, _y + __y, 0 );\r\n\r\n            _geometry.add( new Vertex( __pos, _color ) );\r\n\r\n            if(!_solid) {\r\n                if(i > 0) {\r\n                    var _last = _points[i - 1];\r\n                    _geometry.add( new Vertex( __pos, _color ) );\r\n                }\r\n            }\r\n\r\n            _points.push(__pos);\r\n\r\n        } //for all sides\r\n\r\n        if(!_solid) {\r\n            _geometry.add( new Vertex( _points[0], _color ) );\r\n        }\r\n\r\n        return _geometry;\r\n\r\n    } //ngon\r\n\r\n        /** Draw an arbitrary polygon of points with options.\r\n            Uses triangle fans (no additional verts added) for solid,\r\n            Uses lines for non-solid, adding verts as needed to form lines. */\r\n    public function poly( options:DrawPolygonOptions ) {\r\n\r\n        def(options.id, 'poly.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n        def(options.solid, true);\r\n        def(options.close, false);\r\n\r\n        var _default_col:Color = null;\r\n        var _has_colors = (options.colors != null);\r\n        if(!_has_colors) _default_col = def(options.color, new Color());\r\n\r\n        if(options.solid) {\r\n\r\n            def(options.primitive_type, PrimitiveType.triangle_fan);\r\n\r\n            var _geometry = new Geometry(options);\r\n\r\n            var _idx = 0;\r\n            var _l = options.points.length;\r\n            for(_point in options.points) {\r\n                var _color = _has_colors ? options.colors[_idx] : _default_col;\r\n                _geometry.add(new Vertex(_point, _color));\r\n                ++_idx;\r\n            }\r\n\r\n            return _geometry;\r\n\r\n        } else {\r\n\r\n            def(options.primitive_type, PrimitiveType.lines);\r\n\r\n            var _geometry = new Geometry(options);\r\n\r\n            var _idx = 0;\r\n            var _l = options.points.length;\r\n\r\n            for(_point in options.points) {\r\n                var _color = _has_colors ? options.colors[_idx] : _default_col;\r\n                _geometry.add(new Vertex(_point, _color));\r\n                if(_idx < _l-2) {\r\n                    var _color_next = _has_colors ? options.colors[_idx+1] : _default_col;\r\n                    _geometry.add(new Vertex(options.points[_idx+1], _color_next));\r\n                }\r\n                ++_idx;\r\n            }\r\n\r\n            if(options.close) {\r\n                var _last = options.points.length-1;\r\n                var _color1 = _has_colors ? options.colors[0] : _default_col;\r\n                var _color2 = _has_colors ? options.colors[_last] : _default_col;\r\n                _geometry.add(new Vertex(options.points[_last], _color1));\r\n                _geometry.add(new Vertex(options.points[0], _color2));\r\n            }\r\n\r\n            return _geometry;\r\n\r\n        }\r\n\r\n    } //poly\r\n\r\n        /** Draw a textured `box` with image `texture` at `x`,`y`,`w`,`h` OR with `pos` and `size`, and `uv` with options */\r\n    public function texture( options:DrawTextureOptions ) {\r\n\r\n        def(options.id, 'texture.geometry');\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        var _x : Float = 0;\r\n        var _y : Float = 0;\r\n        var _w : Float = 0;\r\n        var _h : Float = 0;\r\n\r\n            //this is an arbitrary default\r\n        var _tw : Int = 64;\r\n        var _th : Int = 64;\r\n\r\n            if(options.texture != null) {\r\n                _tw = options.texture.width;\r\n                _th = options.texture.height;\r\n\r\n                if(options.size == null) {\r\n                    _w = _tw;\r\n                    _h = _th;\r\n                }\r\n            }\r\n\r\n            if(options.pos != null) {\r\n                _x = options.pos.x;\r\n                _y = options.pos.y;\r\n            }\r\n            if(options.size != null) {\r\n                _w = options.size.x;\r\n                _h = options.size.y;\r\n            }\r\n\r\n            def(options.x, _x);\r\n            def(options.y, _y);\r\n            def(options.w, _w);\r\n            def(options.h, _h);\r\n\r\n            var _quad = new QuadGeometry(options);\r\n\r\n            var _ux : Float = 0;\r\n            var _uy : Float = 0;\r\n            var _uw : Float = _tw;\r\n            var _uh : Float = _th;\r\n\r\n            if(options.uv != null) {\r\n                _ux = options.uv.x;\r\n                _uy = options.uv.y;\r\n                _uw = options.uv.w;\r\n                _uh = options.uv.h;\r\n            }\r\n\r\n            _quad.uv( new Rectangle(_ux, _uy, _uw, _uh) );\r\n\r\n        return _quad;\r\n\r\n    } //texture\r\n\r\n        /** Draw `text` with options (default font used if none specified) */\r\n    public function text( options:TextGeometryOptions ) {\r\n\r\n        def(options.batcher, Luxe.renderer.batcher);\r\n\r\n        return new TextGeometry(options);\r\n\r\n    } //text\r\n\r\n//Internal API\r\n\r\n    var core : Engine;\r\n    @:allow(luxe.Engine)\r\n    function new( _core:Engine ) {\r\n\r\n        core = _core;\r\n\r\n    } //new\r\n\r\n\r\n} //Draw\r\n","package phoenix.geometry;\r\n\r\nimport phoenix.Vector;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.geometry.TextureCoord;\r\nimport phoenix.Batcher;\r\nimport phoenix.Vector;\r\nimport luxe.Log.*;\r\n\r\nimport luxe.options.GeometryOptions.QuadGeometryOptions;\r\n\r\nclass QuadGeometry extends Geometry {\r\n\r\n    @:isVar public var flipx(default, set) : Bool = false;\r\n    @:isVar public var flipy(default, set) : Bool = false;\r\n        //Has to be a multiple of 90\r\n    @:isVar public var uv_angle(default, set) : Int = 0;\r\n\r\n    var _uv_x:Float = 0;\r\n    var _uv_y:Float = 0;\r\n    var _uv_w:Float = 1;\r\n    var _uv_h:Float = 1;\r\n\r\n    public function new(_options : QuadGeometryOptions) {\r\n\r\n        _options.primitive_type = PrimitiveType.triangles;\r\n\r\n        super(_options);\r\n\r\n            //Do these before set, so they can be applied\r\n        if(_options.flipx != null) flipx = _options.flipx;\r\n        if(_options.flipy != null) flipy = _options.flipy;\r\n\r\n        var _x : Float = _options.x;\r\n        var _y : Float = _options.y;\r\n        var _w : Float = _options.w;\r\n        var _h : Float = _options.h;\r\n\r\n        if(_options.rect != null) {\r\n            _x = _options.rect.x;\r\n            _y = _options.rect.y;\r\n            _w = _options.rect.w;\r\n            _h = _options.rect.h;\r\n        }\r\n\r\n            //First triangle\r\n            //tl\r\n        add(new Vertex( new Vector(  0,  0 ), color ));\r\n            //tr\r\n        add(new Vertex( new Vector( _w,  0 ), color ));\r\n            //br\r\n        add(new Vertex( new Vector( _w, _h ), color ));\r\n\r\n           //Second triangle\r\n            //bl\r\n        add(new Vertex( new Vector(  0, _h ), color ));\r\n            //tl\r\n        add(new Vertex( new Vector(  0,  0 ), color ));\r\n            //br\r\n        add(new Vertex( new Vector( _w, _h ), color ));\r\n\r\n        transform.pos = transform.pos.set_xy(_x, _y);\r\n\r\n        if(_options.uv != null) {\r\n            uv(_options.uv);\r\n        } else {\r\n            uv_space( 0, 0, 1, 1 );\r\n        }\r\n\r\n    } //new\r\n\r\n    public inline function uv( _rect:luxe.Rectangle ) {\r\n\r\n        assertnull(texture, \"QuadGeometry; Calling UV on a geometry with null texture.\");\r\n\r\n        var tlx = _rect.x/texture.width_actual;\r\n        var tly = _rect.y/texture.height_actual;\r\n        var szx = _rect.w/texture.width_actual;\r\n        var szy = _rect.h/texture.height_actual;\r\n\r\n        uv_space( tlx, tly, szx, szy );\r\n\r\n    } //uv\r\n\r\n    public inline function uv_space( _rect_x:Float,_rect_y:Float,_rect_w:Float,_rect_h:Float ) {\r\n\r\n        if(vertices.length == 0) return;\r\n\r\n        //the uv width and height\r\n        var sz_x = _rect_w;\r\n        var sz_y = _rect_h;\r\n\r\n            //tl\r\n        var tl_x = _rect_x;\r\n        var tl_y = _rect_y;\r\n\r\n            //Keep for later, before changing the values for flipping\r\n        _uv_x = tl_x;\r\n        _uv_y = tl_y;\r\n        _uv_w = sz_x;\r\n        _uv_h = sz_y;\r\n\r\n            //tr\r\n        var tr_x = tl_x + sz_x;\r\n        var tr_y = tl_y;\r\n            //br\r\n        var br_x = tl_x + sz_x;\r\n        var br_y = tl_y + sz_y;\r\n            //bl\r\n        var bl_x = tl_x;\r\n        var bl_y = tl_y + sz_y;\r\n\r\n        var tmp_x = 0.0;\r\n        var tmp_y = 0.0;\r\n\r\n            //rotates uvs 90 degrees counter-clockwise, i.e. the rotates the texture 90 degrees clockwise\r\n        inline function rotate_uvs() {\r\n            tmp_x = tl_x;\r\n            tl_x = bl_x;\r\n            bl_x = br_x;\r\n            br_x = tr_x;\r\n            tr_x = tmp_x;\r\n\r\n            tmp_y = tl_y;\r\n            tl_y = bl_y;\r\n            bl_y = br_y;\r\n            br_y = tr_y;\r\n            tr_y = tmp_y;\r\n        }\r\n\r\n            var rotations:Int = Std.int(uv_angle / 90);\r\n            rotations = rotations - 4 * Math.floor(rotations / 4);\r\n\r\n            for(r in 0...rotations) {\r\n                rotate_uvs();\r\n            }\r\n                //flipped y swaps tl and tr with bl and br\r\n            if(flipy) {\r\n                    //swap tl and bl\r\n                tmp_y = bl_y;\r\n                    bl_y = tl_y;\r\n                    tl_y = tmp_y;\r\n\r\n                tmp_x = bl_x;\r\n                    bl_x = tl_x;\r\n                    tl_x = tmp_x;\r\n\r\n                    //swap tr and br\r\n                tmp_y = br_y;\r\n                    br_y = tr_y;\r\n                    tr_y = tmp_y;\r\n\r\n                tmp_x = br_x;\r\n                    br_x = tr_x;\r\n                    tr_x = tmp_x;\r\n            } //flipy\r\n\r\n                //flipped x swaps tl and bl with tr and br\r\n            if(flipx) {\r\n                    //swap tl and tr\r\n                tmp_x = tr_x;\r\n                    tr_x = tl_x;\r\n                    tl_x = tmp_x;\r\n\r\n                tmp_y = tr_y;\r\n                    tr_y = tl_y;\r\n                    tl_y = tmp_y;\r\n\r\n                    //swap bl and br\r\n                tmp_x = br_x;\r\n                    br_x = bl_x;\r\n                    bl_x = tmp_x;\r\n\r\n                tmp_y = br_y;\r\n                    br_y = bl_y;\r\n                    bl_y = tmp_y;\r\n            } //flipx\r\n\r\n        vertices[0].uv.uv0.set_uv( tl_x , tl_y );\r\n        vertices[1].uv.uv0.set_uv( tr_x , tr_y );\r\n        vertices[2].uv.uv0.set_uv( br_x , br_y );\r\n\r\n        vertices[3].uv.uv0.set_uv( bl_x , bl_y );\r\n        vertices[4].uv.uv0.set_uv( tl_x , tl_y );\r\n        vertices[5].uv.uv0.set_uv( br_x , br_y );\r\n\r\n            //if it's locked, it needs to be refreshed to the gpu\r\n        dirty = true;\r\n\r\n    } //set uv in uv space directly\r\n\r\n    public function resize_xy( _x:Float, _y:Float ) {\r\n\r\n        if(vertices.length == 0) return;\r\n\r\n        vertices[0].pos.set_xy( 0,      0    );\r\n        vertices[1].pos.set_xy( 0+_x,   0    );\r\n        vertices[2].pos.set_xy( 0+_x,   0+_y );\r\n\r\n        vertices[3].pos.set_xy( 0,      0+_y );\r\n        vertices[4].pos.set_xy( 0,      0    );\r\n        vertices[5].pos.set_xy( 0+_x,   0+_y );\r\n\r\n    } //resize_xy\r\n\r\n    public inline function resize( quad:luxe.Vector ) {\r\n\r\n        resize_xy(quad.x, quad.y);\r\n\r\n    } //resize\r\n\r\n    public inline function set(quad:luxe.Rectangle) {\r\n\r\n        set_xywh(quad.x, quad.y, quad.w, quad.h);\r\n\r\n    } //set\r\n\r\n    public function set_xywh( _x:Float, _y:Float, _w:Float, _h:Float ) {\r\n\r\n        if(vertices.length == 0) return;\r\n\r\n            //tl\r\n        vertices[0].pos.set_xy(  0,  0 );\r\n            //tr\r\n        vertices[1].pos.set_xy( _w,  0 );\r\n            //br\r\n        vertices[2].pos.set_xy( _w, _h );\r\n\r\n            //bl\r\n        vertices[3].pos.set_xy(  0, _h );\r\n            //tl\r\n        vertices[4].pos.set_xy(  0,  0 );\r\n            //br\r\n        vertices[5].pos.set_xy( _w, _h );\r\n\r\n        transform.pos = transform.pos.set_xy(_x, _y);\r\n\r\n    } //set\r\n\r\n    function set_flipx(_val:Bool) {\r\n\r\n            //set before calling uv_space\r\n        flipx = _val;\r\n\r\n        uv_space(_uv_x, _uv_y, _uv_w, _uv_h);\r\n\r\n        return flipx;\r\n\r\n    } //set_flipx\r\n\r\n    function set_flipy(_val:Bool) {\r\n\r\n            //set before calling uv_space\r\n        flipy = _val;\r\n\r\n        uv_space(_uv_x, _uv_y, _uv_w, _uv_h);\r\n\r\n        return flipy;\r\n\r\n    } //set_flipy\r\n\r\n    function set_uv_angle(_val:Int) {\r\n        assert(_val % 90 == 0, 'uv_angle has to be a multiple of 90');\r\n        uv_angle = _val;\r\n        uv_space(_uv_x, _uv_y, _uv_w, _uv_h);\r\n        return uv_angle;\r\n    }\r\n\r\n}\r\n","package snow;\r\n\r\nimport snow.api.Debug.assertnull;\r\nimport snow.types.Types;\r\n\r\n\r\n/** The default type of snow application, with variable delta, update limit, render limit, timescale and more. \r\n    See the {App Guide} for complete details. */\r\n@:allow(snow)\r\nclass App {\r\n\r\n//Access to the snow API\r\n\r\n        /** use this to access the api features. *i.e* `app.assets.text(_id)` */\r\n    public var app : Snow;\r\n\r\n//Configurable values\r\n\r\n        /** the scale of time */\r\n    public var timescale : Float = 1;\r\n        /** if this is non zero this will be passed in */\r\n    public var fixed_delta : Float = 0;\r\n        /** if this is non zero, updates will be forced to this rate */\r\n    public var update_rate : Float = 0;\r\n\r\n//Timing information\r\n\r\n        /** The time at the start of this tick */\r\n    public var tick_start : Float = 1.0/60.0;\r\n        /** The time at the start of the previous tick */\r\n    public var tick_start_prev : Float = 0.0;\r\n        /** The amount of time the last tick took */\r\n    public var tick_delta : Float = 1.0/60;\r\n\r\n        /** The time at the start of this tick */\r\n    public var frame_start : Float = 1.0/60.0;\r\n        /** The time at the start of the previous frame */\r\n    public var frame_start_prev : Float = 0.0;\r\n        /** The amount of time the last frame took */\r\n    public var frame_delta : Float = 1.0/60;\r\n        /** the maximum frame time */\r\n    public var frame_max_delta : Float = 0.25;\r\n\r\n        /** the simulated time the last frame took to run, relative to scale etc */\r\n    public var sim_delta : Float = 1/60;\r\n        /** the current simulation time */\r\n    public var sim_time : Float = 0;\r\n\r\n//Specific to fixed timestep\r\n\r\n        /** the alpha time for a interpolating between frame updates */\r\n    public var fixed_alpha : Float = 1.0;\r\n        /** use a \"fix your timestep approach\" */\r\n    public var fixed_timestep : Bool = false;\r\n        /** fixed simulation update speed */\r\n    public var fixed_frame_time : Float = 0.0167;\r\n        /** the overflow of the updates. This is used internally, for you, to calculate the alpha time for rendering interpolation as follows `alpha = overflow / fixed_frame_time;` */\r\n    public var fixed_overflow : Float = 0.0;\r\n\r\n\r\n//Internal values\r\n\r\n        /** for update_rate, the time when the next tick should occur around */\r\n    var next_tick : Float = 0;\r\n\r\n//override these in your game class\r\n\r\n    /** Called by snow to request config changes, override this to change the defaults.\r\n            This happens before ready, so the values are available when ready is called. */\r\n    function config(_config:AppConfig) : AppConfig return _config;\r\n        /** Your entry point. Called for you when you can initialize your application */\r\n    function ready() {}\r\n        /** Your update loop. Called every frame for you. The dt value depends on the timing configuration (see the {App Guide}) */\r\n    function update(dt:Float) {}\r\n        /** The frame update loop. */\r\n    function tick(dt:Float) {}\r\n        /** Your exit point. Called for you when you should shut down your application */\r\n    function ondestroy() {}\r\n        /** Low level event handler from snow core. Often handled by the subsystems so check there first. */\r\n    function onevent(event:SystemEvent) {}\r\n\r\n        /** Called each frame *before* everything, the beginning of the frame. Use with understanding. */\r\n    function ontickstart() {}\r\n        /** Called each frame *after* everything, at the end of the frame. Use with understanding. */\r\n    function ontickend() {}\r\n\r\n        /** Called for you when a key is pressed down */\r\n    function onkeydown(keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int) {}\r\n        /** Called for you when a key is released */\r\n    function onkeyup(keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int) {}\r\n        /** Called for you when text input is happening. Use this for textfields, as it handles the complexity of unicode etc. */\r\n    function ontextinput( text:String, start:Int, length:Int, type:TextEventType, timestamp:Float, window_id:Int) {}\r\n\r\n        /** Called for you when a mouse button is pressed */\r\n    function onmousedown(x:Int, y:Int, button:Int, timestamp:Float, window_id:Int) {}\r\n        /** Called for you when a mouse button is released */\r\n    function onmouseup(x:Int, y:Int, button:Int, timestamp:Float, window_id:Int) {}\r\n        /** Called for you when the mouse wheel moves */\r\n    function onmousewheel(x:Float, y:Float, timestamp:Float, window_id:Int) {}\r\n        /** Called for you when the mouse moves */\r\n    function onmousemove(x:Int, y:Int, xrel:Int, yrel:Int, timestamp:Float, window_id:Int) {}\r\n\r\n        /** Called for you when a touch is released, use the `touch_id` to track which */\r\n    function ontouchdown(x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float) {}\r\n        /** Called for you when a touch is first pressed, use the `touch_id` to track which */\r\n    function ontouchup(x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float) {}\r\n        /** Called for you when a touch is moved, use the `touch_id` to track which */\r\n    function ontouchmove(x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float) {}\r\n\r\n        /** Called for you when a connected gamepad axis moves, use `which` to determine gamepad id */\r\n    function ongamepadaxis(gamepad:Int, axis:Int, value:Float, timestamp:Float) {}\r\n        /** Called for you when a connected gamepad button is pressed, use `which` to determine gamepad id */\r\n    function ongamepaddown(gamepad:Int, button:Int, value:Float, timestamp:Float) {}\r\n        /** Called for you when a connected gamepad button is released, use `which` to determine gamepad id */\r\n    function ongamepadup(gamepad:Int, button:Int, value:Float, timestamp:Float) {}\r\n        /** Called for you when a gamepad is connected or disconnected, use `which` to determine gamepad id. \r\n            `id` is the string name identifier for the controller, specified from the system. */\r\n    function ongamepaddevice(gamepad:Int, id:String, type:GamepadDeviceEventType, timestamp:Float) {}\r\n\r\n\r\n    function internal_init() {\r\n\r\n        sim_time = 0;\r\n        fixed_frame_time = 1.0/60.0;\r\n\r\n        tick_start = app.time;\r\n        tick_start_prev = tick_start - fixed_frame_time;\r\n        tick_delta = fixed_frame_time;\r\n\r\n        frame_start = app.time;\r\n        frame_start_prev = frame_start - fixed_frame_time;\r\n        frame_delta = sim_delta = fixed_frame_time;\r\n\r\n    } //internal_init\r\n\r\n    function internal_tick() {\r\n\r\n        ontickstart();\r\n\r\n        tick_start = app.time;\r\n        tick_delta = (tick_start - tick_start_prev);\r\n        tick_start_prev = tick_start;\r\n\r\n            if(fixed_timestep) {\r\n                internal_tick_fixed_timestep();\r\n            } else {\r\n                internal_tick_default();\r\n            }\r\n\r\n        tick(tick_delta);\r\n\r\n        ontickend();\r\n\r\n        #if (snow_native && !snow_native_no_tick_sleep)\r\n            Sys.sleep(0);\r\n        #end\r\n\r\n    } //internal_tick\r\n\r\n    //inline  //:todo: better handling of update_rate for inlining\r\n    function internal_tick_default() : Void {\r\n\r\n        if(update_rate != 0) {\r\n\r\n            if(app.time < next_tick) {\r\n                return;\r\n            }\r\n\r\n            next_tick = app.time + update_rate;\r\n\r\n        }\r\n\r\n        frame_start = tick_start;\r\n        frame_delta = (frame_start - frame_start_prev);\r\n        frame_start_prev = frame_start;\r\n\r\n        if(frame_delta > frame_max_delta) {\r\n            frame_delta = frame_max_delta;\r\n        }\r\n\r\n        var _used_delta = (fixed_delta == 0) ? frame_delta : fixed_delta;\r\n        _used_delta *= timescale;\r\n        sim_delta = _used_delta;\r\n\r\n        sim_time += _used_delta;\r\n        update(_used_delta);\r\n\r\n    } //internal_tick_default\r\n\r\n    inline function internal_tick_fixed_timestep() : Void {\r\n\r\n        frame_start = app.time;\r\n        frame_delta = (frame_start - frame_start_prev);\r\n        frame_start_prev = frame_start;\r\n\r\n        sim_delta = frame_delta * timescale;\r\n        if(sim_delta > frame_max_delta) {\r\n            sim_delta = frame_max_delta;\r\n        }\r\n\r\n        fixed_overflow += sim_delta;\r\n\r\n        var _slice = fixed_frame_time * timescale;\r\n        while(fixed_overflow >= fixed_frame_time) {\r\n\r\n            update(_slice);\r\n            sim_time += _slice;\r\n            fixed_overflow -= _slice;\r\n\r\n        }\r\n\r\n        fixed_alpha = fixed_overflow / fixed_frame_time;\r\n\r\n    } //internal_tick_fixed_timestep\r\n\r\n//Internal\r\n\r\n    //Main app entry point\r\n\r\n    #if !snow_no_main\r\n\r\n        static function main() {\r\n\r\n            new snow.Snow(new AppHost());\r\n\r\n        } //main\r\n\r\n    #end //!snow_no_main\r\n\r\n} //App\r\n","package luxe;\r\n\r\nimport snow.Snow;\r\nimport snow.types.Types;\r\nimport snow.systems.assets.Asset;\r\nimport snow.api.buffers.Uint8Array;\r\n\r\nimport Luxe;\r\nimport luxe.IO;\r\nimport luxe.Audio;\r\nimport luxe.Events;\r\nimport luxe.Emitter;\r\nimport luxe.Input;\r\nimport luxe.Scene;\r\nimport luxe.Debug;\r\nimport luxe.Timer;\r\nimport luxe.Physics;\r\nimport luxe.GameConfig;\r\nimport luxe.Resources;\r\n\r\nimport luxe.debug.ProfilerDebugView;\r\n\r\nimport phoenix.Renderer;\r\nimport phoenix.Texture;\r\nimport phoenix.Shader;\r\n\r\nimport luxe.Game;\r\nimport luxe.Log.*;\r\n\r\ntypedef UserConfig = Dynamic\r\n\r\n@:keep\r\n@:noCompletion\r\n@:log_as('luxe')\r\nclass Engine extends snow.App {\r\n\r\n        //the game object running the core\r\n    public var game : Game;\r\n    public var game_config : GameConfig;\r\n\r\n    public var version   : String = 'dev';\r\n    public var build     : String = luxe.macros.BuildVersion.latest();\r\n\r\n//Sub Systems, mostly in order of importance\r\n    public var emitter   : Emitter<luxe.Ev>;\r\n    public var debug     : Debug;\r\n    public var io        : IO;\r\n    public var draw      : Draw;\r\n    public var timer     : Timer;\r\n    public var events    : Events;\r\n    public var input     : Input;\r\n    public var audio     : Audio;\r\n    public var scene     : Scene;\r\n    public var resources : Resources;\r\n    public var renderer  : Renderer;\r\n    public var screen    : luxe.Screen;\r\n    public var physics   : Physics;\r\n\r\n//flags\r\n\r\n    public var shutting_down : Bool = false;\r\n    public var has_shutdown : Bool = false;\r\n    public var inited : Bool = false;\r\n    public var headless = false;\r\n    public var auto_render = true;\r\n\r\n    var running = false;\r\n\r\n        /** Create a new luxe engine instance.\r\n            Call run when you are ready for it to start up,\r\n            which allows you to attach to events in between. */\r\n    public function new(_game:Game) {\r\n\r\n        game = _game;\r\n\r\n            //Create internal stuff\r\n        emitter = new Emitter<luxe.Ev>();\r\n\r\n            //Set external references\r\n        Luxe.core = this;\r\n        Luxe.utils = new luxe.utils.Utils(this);\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n        /** Runs the engine. Can only be called once.\r\n            Does not return until engine is shut down. */\r\n    public function run() {\r\n\r\n        assert(running == false);\r\n\r\n        running = true;\r\n\r\n        new snow.Snow(this);\r\n\r\n    } //run\r\n\r\n        /** Shut down the engine */\r\n    public function shutdown() {\r\n\r\n            //Make sure all systems know we are going down\r\n        shutting_down = true;\r\n\r\n            //shutdown snow, which calls ondestroy for us\r\n        snow.Snow.next(app.shutdown);\r\n\r\n    } //shutdown\r\n\r\n        /** Returns information about the runtime, like the build number, debug state, os, platform */\r\n    public inline function runtime_info() {\r\n\r\n        return '${build} / debug:${app.debug} / os:${app.os} / platform:${app.platform}';\r\n\r\n    } //runtime_info\r\n\r\n    // @:generic\r\n    inline\r\n    public function on<T>(event:luxe.Ev, handler:T->Void ) {\r\n        emitter.on(event, handler);\r\n    }\r\n\r\n    // @:generic\r\n    inline\r\n    public function off<T>(event:luxe.Ev, handler:T->Void ) {\r\n        return emitter.off(event, handler);\r\n    }\r\n\r\n    // @:generic\r\n    inline\r\n    public function emit<T>(event:luxe.Ev, ?data:T) {\r\n        return emitter.emit(event, data);\r\n    }\r\n\r\n//Internal\r\n\r\n    override function ready() {\r\n\r\n        if(luxe.Log.get_level() > 1) {\r\n            log('log / level to ${luxe.Log.get_level()}' );\r\n            log('log / filter : ${luxe.Log.get_filter()}');\r\n            log('log / exclude : ${luxe.Log.get_exclude()}');\r\n        }\r\n\r\n        version = haxe.Resource.getString('version');\r\n            //Don't change this, it matches semantic versioning http://semver.org/\r\n        build = version + haxe.Resource.getString('build');\r\n\r\n        log(runtime_info());\r\n\r\n            //:todo: I'm not happy about this but for now it will do\r\n        #if no_default_font\r\n\r\n            init(null);\r\n\r\n        #else\r\n\r\n            headless = game_config.headless;\r\n            if(!headless) {\r\n\r\n                var _font_name = 'default.png';\r\n                var _font_image = Uint8Array.fromBytes(haxe.Resource.getBytes(_font_name));\r\n                var _font_load = app.assets.image_from_bytes(_font_name, _font_image);\r\n\r\n                _font_load.then(function(asset:AssetImage) {\r\n                    init(asset);\r\n                }).error(function(error) {\r\n                    log(\"failed to load default font, things will probably not look right... $error\");\r\n                    init(null);\r\n                });\r\n\r\n            } else {\r\n\r\n                auto_render = false;\r\n                init(null);\r\n\r\n            }\r\n\r\n        #end //no_default_font\r\n\r\n    } //ready\r\n\r\n    override function ondestroy() {\r\n\r\n        shutting_down = true;\r\n\r\n        log('shutting down...');\r\n\r\n            //shutdown the default scene\r\n        emitter.emit(luxe.Ev.destroy);\r\n        game.ondestroy();\r\n\r\n            //Order is imporant here too\r\n        if(renderer != null) {\r\n            renderer.destroy();\r\n        }\r\n\r\n        physics.destroy();\r\n        input.destroy();\r\n        audio.destroy();\r\n        timer.destroy();\r\n        events.destroy();\r\n        debug.destroy();\r\n\r\n            //Clear up for GC\r\n        emitter = null;\r\n        input = null;\r\n        audio = null;\r\n        events = null;\r\n        timer = null;\r\n        debug = null;\r\n        Luxe.utils = null;\r\n\r\n            //Flag it\r\n        has_shutdown = true;\r\n\r\n        log('goodbye.');\r\n\r\n    } //ondestroy\r\n\r\n    var pixel_scale : Float = 1;\r\n\r\n    function init(asset:AssetImage) {\r\n\r\n        _debug('creating subsystems...');\r\n\r\n            //Order is important here\r\n\r\n        Luxe.debug = debug = new Debug(this);\r\n        Luxe.io = io = new IO(this);\r\n\r\n        draw    = new Draw(this);\r\n        timer   = new Timer(this);\r\n        events  = new Events();\r\n        audio   = new Audio(this);\r\n        input   = new Input(this);\r\n        physics = new Physics(this);\r\n\r\n        resources = new Resources();\r\n        Luxe.resources = resources;\r\n\r\n        if(!headless) {\r\n            renderer = new Renderer(this, asset);\r\n            Luxe.renderer = renderer;\r\n        }\r\n\r\n        var _render_w = app.runtime.window_width();\r\n        var _render_h = app.runtime.window_height();\r\n\r\n        #if luxe_no_device_pixel_scaling\r\n            screen = new luxe.Screen(this, _render_w, _render_h);\r\n        #else\r\n            pixel_scale = app.runtime.window_device_pixel_ratio();\r\n            screen = new luxe.Screen(this, Math.floor(_render_w/pixel_scale), Math.floor(_render_h/pixel_scale));\r\n        #end\r\n\r\n        debug.init();\r\n           io.init();\r\n        timer.init();\r\n        audio.init();\r\n        input.init();\r\n\r\n        if(!headless) {\r\n            renderer.init();\r\n        }\r\n\r\n        physics.init();\r\n\r\n        Luxe.audio  = audio;\r\n        Luxe.draw   = draw;\r\n        Luxe.events = events;\r\n        Luxe.timer  = timer;\r\n        Luxe.input  = input;\r\n\r\n        if(!headless) {\r\n            Luxe.camera = new luxe.Camera({ name:'default camera', view:renderer.camera });\r\n        }\r\n\r\n        Luxe.physics = physics;\r\n\r\n        scene = new Scene('default scene');\r\n        Luxe.scene = scene;\r\n\r\n        if(!headless) {\r\n            scene.add(Luxe.camera);\r\n            debug.create_debug_console();\r\n        }\r\n\r\n        internal_pre_ready();\r\n\r\n    } //init\r\n\r\n    function internal_pre_ready() {\r\n\r\n        if(!headless) {\r\n\r\n            _debug('ready. loading default parcel ' + game_config.preload);\r\n\r\n                //pre load config parcel\r\n            var _default_parcel = new Parcel({\r\n                id:         'default_parcel',\r\n                system:     resources,\r\n                bytes:      game_config.preload.bytes,\r\n                texts:      game_config.preload.texts,\r\n                jsons:      game_config.preload.jsons,\r\n                textures:   game_config.preload.textures,\r\n                fonts:      game_config.preload.fonts,\r\n                shaders:    game_config.preload.shaders,\r\n                sounds:     game_config.preload.sounds,\r\n                oncomplete: internal_ready,\r\n                onfailed: function(_error:Dynamic) {\r\n                    log('config / preload / failed to load');\r\n                    throw Error.error(_error);\r\n                }\r\n            });\r\n\r\n            _default_parcel.load();\r\n\r\n        } else {\r\n\r\n            internal_ready(null);\r\n\r\n        }\r\n\r\n    } //internal_pre_ready\r\n\r\n    function internal_ready(_) {\r\n\r\n        if(!headless) {\r\n\r\n            #if !luxe_noprofile\r\n                    //start called here, so that end is called first, in update/tick\r\n                debug.start(Tag.update, 50);\r\n                debug.start(Tag.tick, 50);\r\n            #end\r\n\r\n        } //!headless\r\n\r\n            //Call the main ready function\r\n            //and send the ready event to the game\r\n        game.ready();\r\n\r\n            //shutdown can come from the ready function\r\n        if(!shutting_down) {\r\n\r\n                //emit the init event\r\n                //so that scene and others can start up\r\n            emitter.emit(luxe.Ev.init);\r\n            inited = true;\r\n\r\n                //Reset the physics (starts the timer etc)\r\n            physics.reset();\r\n\r\n        } //!shutting down\r\n\r\n    } //internal_ready\r\n\r\n//System events\r\n\r\n    override function onevent(_event:snow.types.Types.SystemEvent) {\r\n\r\n        if(_event.window != null) {\r\n            window_event(_event.window);\r\n        }\r\n\r\n        game.onevent(_event);\r\n\r\n    } //onevent\r\n\r\n//Update events\r\n\r\n    override function update(_delta:Float) {\r\n\r\n        if(has_shutdown) return;\r\n        if(!inited) return;\r\n\r\n        //The order of end/start matters\r\n\r\n            #if !luxe_noprofile\r\n                debug.end(Tag.update);\r\n                debug.start(Tag.update);\r\n            #end\r\n\r\n        //Update all the subsystems, again, order important\r\n\r\n            //Timers first\r\n            #if luxe_fullprofile debug.start(Tag.timer); #end\r\n        timer.process();\r\n            #if luxe_fullprofile debug.end(Tag.timer); #end\r\n            //Input second\r\n            #if luxe_fullprofile debug.start(Tag.input); #end\r\n        input.process();\r\n            #if luxe_fullprofile debug.end(Tag.input); #end\r\n            //Audio\r\n            #if luxe_fullprofile debug.start(Tag.audio); #end\r\n        audio.process();\r\n            #if luxe_fullprofile debug.end(Tag.audio); #end\r\n            //Events\r\n            #if luxe_fullprofile debug.start(Tag.events); #end\r\n        events.process();\r\n            #if luxe_fullprofile debug.end(Tag.events); #end\r\n\r\n            //Physics\r\n            //note that this does not update the physics, simply processes the active engines\r\n        physics.process();\r\n\r\n            //Run update callbacks\r\n            #if !luxe_noprofile debug.start(Tag.updates); #end\r\n        emitter.emit(luxe.Ev.update, _delta);\r\n            #if !luxe_noprofile debug.end(Tag.updates); #end\r\n\r\n            //Update the game\r\n            #if !luxe_noprofile debug.start(Tag.game_update); #end\r\n        game.update(_delta);\r\n            #if !luxe_noprofile debug.end(Tag.game_update); #end\r\n\r\n            //And finally the debug stuff\r\n            #if luxe_fullprofile debug.start(Tag.debug); #end\r\n        debug.process();\r\n            #if luxe_fullprofile debug.end(Tag.debug); #end\r\n\r\n    } //update\r\n\r\n    override function tick(_delta:Float) {\r\n\r\n        if(shutting_down) return;\r\n        if(!inited) return;\r\n\r\n        #if !luxe_noprofile\r\n            debug.end(Tag.tick);\r\n            debug.start(Tag.tick);\r\n        #end\r\n\r\n        if(auto_render) {\r\n            render();\r\n        }\r\n\r\n    } //tick\r\n\r\n    @:noCompletion \r\n    public function render() {\r\n\r\n        #if !luxe_noprofile debug.start(Tag.render); #end\r\n\r\n        renderer.prerender();\r\n\r\n        emitter.emit(luxe.Ev.prerender);\r\n        game.onprerender();\r\n\r\n            emitter.emit(luxe.Ev.render);\r\n            game.onrender();\r\n            renderer.process();\r\n\r\n        emitter.emit(luxe.Ev.postrender);\r\n        game.onpostrender();\r\n\r\n        #if !luxe_noprofile debug.end(Tag.render); #end\r\n\r\n        debug.render();\r\n\r\n    } //render\r\n\r\n    override function ontickstart() {\r\n\r\n        if(!has_shutdown) {\r\n            emitter.emit(luxe.Ev.tickstart);\r\n        }\r\n\r\n    } //ontickstart\r\n\r\n    override function ontickend() {\r\n\r\n        if(!has_shutdown) {\r\n            emitter.emit(luxe.Ev.tickend);\r\n        }\r\n\r\n    } //ontickend\r\n\r\n//Window events\r\n\r\n    function window_event(_event:snow.types.Types.WindowEvent) {\r\n\r\n        if(shutting_down) return;\r\n        if(!inited) return;\r\n\r\n            //sizes from snow are in renderable pixels\r\n        var _render_w = _event.x;\r\n        var _render_h = _event.y;\r\n\r\n            //first ensure our pixel scale still matches\r\n        #if !luxe_no_device_pixel_scaling\r\n            pixel_scale = app.runtime.window_device_pixel_ratio();\r\n        #end\r\n        \r\n            //and then ensure that our event matches our expectations\r\n        _event.x = Math.floor(_render_w/pixel_scale);\r\n        _event.y = Math.floor(_render_h/pixel_scale);\r\n\r\n        emitter.emit(luxe.Ev.window, _event);\r\n\r\n        switch(_event.type) {\r\n\r\n            case we_moved : {\r\n                emitter.emit(luxe.Ev.windowmoved, _event);\r\n                game.onwindowmoved(_event);\r\n            } //moved\r\n\r\n            case we_resized : {\r\n                screen.internal_resized(_event.x, _event.y);\r\n                renderer.internal_resized(_render_w, _render_h);\r\n                emitter.emit(luxe.Ev.windowresized, _event);\r\n                game.onwindowresized(_event);\r\n            } //resized\r\n\r\n            case we_size_changed : {\r\n                screen.internal_resized(_event.x, _event.y);\r\n                renderer.internal_resized(_render_w, _render_h);\r\n                emitter.emit(luxe.Ev.windowsized, _event);\r\n                game.onwindowsized(_event);\r\n            } //size_changed\r\n\r\n            case we_minimized : {\r\n                emitter.emit(luxe.Ev.windowminimized, _event);\r\n                game.onwindowminimized(_event);\r\n            } //minimized\r\n\r\n            case we_restored : {\r\n                emitter.emit(luxe.Ev.windowrestored, _event);\r\n                game.onwindowrestored(_event);\r\n            } //restored\r\n\r\n            case _:\r\n\r\n        } //switch\r\n\r\n        _event = null;\r\n\r\n    } //window_event\r\n\r\n//Input events\r\n\r\n    //mouse\r\n\r\n        //input events come in renderable coord space\r\n        //so we take them to the right pixel scale if necessary.\r\n        //touch is 0...1 so that stays, and input events spawn from\r\n        //the input.* from the origin calls below, so they're fine\r\n\r\n        override function onmousedown(_x:Int, _y:Int, _button:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(!inited) return;\r\n\r\n            _x = Std.int(_x/pixel_scale);\r\n            _y = Std.int(_y/pixel_scale);\r\n\r\n            screen.cursor.set_internal(_x, _y);\r\n\r\n            input.onmousedown(_x, _y, _button, _timestamp, _window_id);\r\n\r\n        } //onmousedown\r\n\r\n        override function onmouseup(_x:Int, _y:Int, _button:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(!inited) return;\r\n\r\n            _x = Std.int(_x/pixel_scale);\r\n            _y = Std.int(_y/pixel_scale);\r\n\r\n            screen.cursor.set_internal(_x, _y);\r\n\r\n            input.onmouseup(_x, _y, _button, _timestamp, _window_id);\r\n\r\n        } //onmouseup\r\n\r\n        override function onmousemove(_x:Int, _y:Int, _x_rel:Int, _y_rel:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(!inited) return;\r\n\r\n            _x = Std.int(_x/pixel_scale);\r\n            _y = Std.int(_y/pixel_scale);\r\n\r\n            screen.cursor.set_internal(_x, _y);\r\n\r\n            input.onmousemove(_x, _y, _x_rel, _y_rel, _timestamp, _window_id);\r\n\r\n        } //onmousemove\r\n\r\n        override function onmousewheel(_x:Float, _y:Float, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(!inited) return;\r\n\r\n            input.onmousewheel(_x, _y, _timestamp, _window_id);\r\n\r\n        } //onmousewheel\r\n\r\n    //keys\r\n\r\n        override function onkeydown(_keycode:Int, _scancode:Int, _repeat:Bool, _mod:ModState, _timestamp:Float, _window_id:Int) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.onkeydown(_keycode, _scancode, _repeat, _mod, _timestamp, _window_id);\r\n\r\n        } //onkeydown\r\n\r\n        override function onkeyup(_keycode:Int, _scancode:Int, _repeat:Bool, _mod:ModState, _timestamp:Float, _window_id:Int) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.onkeyup(_keycode, _scancode, _repeat, _mod, _timestamp, _window_id);\r\n\r\n        } //onkeyup\r\n\r\n        override function ontextinput(_text:String, _start:Int, _length:Int, _etype:snow.types.TextEventType, _timestamp:Float, _window_id:Int) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ontextinput(_text, _start, _length, _etype, _timestamp, _window_id);\r\n\r\n        } //ontextinput\r\n\r\n    //touch\r\n\r\n        override function ontouchdown(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _timestamp:Float) {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ontouchdown(_x, _y, _dx, _dy, _touch_id, _timestamp);\r\n\r\n        } //ontouchdown\r\n\r\n        override function ontouchup(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _timestamp:Float) {\r\n\r\n            if(!inited) return;\r\n\r\n             input.ontouchup(_x, _y, _dx, _dy, _touch_id, _timestamp);\r\n\r\n        } //ontouchup\r\n\r\n        override function ontouchmove(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _timestamp:Float) {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ontouchmove(_x, _y, _dx, _dy, _touch_id, _timestamp);\r\n\r\n        } //ontouchmove\r\n\r\n    //input\r\n\r\n        public function oninputdown(_name:String, ?_key_event:KeyEvent, ?_mouse_event:MouseEvent, ?_touch_event:TouchEvent, ?_gamepad_event:GamepadEvent) {\r\n\r\n            if(!inited) return;\r\n\r\n            input.oninputdown(_name, _key_event, _mouse_event, _touch_event, _gamepad_event);\r\n\r\n        } //oninputdown\r\n\r\n        public function oninputup(_name:String, ?_key_event:KeyEvent, ?_mouse_event:MouseEvent, ?_touch_event:TouchEvent, ?_gamepad_event:GamepadEvent) {\r\n\r\n            if(!inited) return;\r\n\r\n            input.oninputup(_name, _key_event, _mouse_event, _touch_event, _gamepad_event);\r\n\r\n        } //oninputup\r\n\r\n    //gamepad\r\n\r\n        override function ongamepadaxis(_gamepad:Int, _axis:Int, _value:Float, _timestamp:Float) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ongamepadaxis(_gamepad, _axis, _value, _timestamp);\r\n\r\n        } //ongamepadaxis\r\n\r\n        override function ongamepaddown(_gamepad:Int, _button:Int, _value:Float, _timestamp:Float) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ongamepaddown(_gamepad, _button, _value, _timestamp);\r\n\r\n        } //ongamepadbuttondown\r\n\r\n        override function ongamepadup(_gamepad:Int, _button:Int, _value:Float, _timestamp:Float) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ongamepadup(_gamepad, _button, _value, _timestamp);\r\n\r\n        } //ongamepadup\r\n\r\n        override function ongamepaddevice(_gamepad:Int, _id:String, _etype:GamepadDeviceEventType, _timestamp:Float) : Void {\r\n\r\n            if(!inited) return;\r\n\r\n            input.ongamepaddevice(_gamepad, _id, _etype, _timestamp);\r\n\r\n        } //ongamepaddevice\r\n\r\n\r\n//config handling\r\n\r\n        /** return what the game decides for runtime config */\r\n    override function config(_config:snow.types.Types.AppConfig) : snow.types.Types.AppConfig {\r\n\r\n        if(_config.user == null) _config.user = {};\r\n\r\n            //start with the snow default config\r\n        game_config = cast _config;\r\n\r\n            //assign the default luxe values\r\n        game_config.window.title = 'luxe game';\r\n        game_config.window.width = 960;\r\n        game_config.window.height = 640;\r\n        game_config.window.resizable = true;\r\n        game_config.window.fullscreen = #if mobile true #else false #end;\r\n        game_config.window.borderless = #if mobile true #else false #end;\r\n\r\n        game_config.preload = {\r\n            bytes:      [],\r\n            texts:      [],\r\n            jsons:      [],\r\n            textures:   [],\r\n            fonts:      [],\r\n            shaders:    [],\r\n            sounds:     []\r\n        };\r\n\r\n            //fetch the user updates to the config\r\n        game_config = game.config( game_config );\r\n\r\n            //return the snow config\r\n        return cast game_config;\r\n\r\n    } //config\r\n\r\n} //Engine\r\n\r\n\r\n/**\r\nA tag class for the string based values in the core.\r\nNote that these values are not inline intentionally, they avoid\r\nallocating strings each frame.\r\n*/\r\n@:noCompletion\r\n@:allow(luxe.Engine)\r\nclass Tag {\r\n    static var update       = 'update dt';\r\n    static var tick         = 'tick dt';\r\n    static var game_update  = 'game.update';\r\n    static var render       = 'core.render';\r\n    static var debug        = 'core.debug';\r\n    static var updates      = 'core.updates';\r\n    static var events       = 'core.events';\r\n    static var audio        = 'core.audio';\r\n    static var input        = 'core.input';\r\n    static var timer        = 'core.timer';\r\n    static var scene        = 'core.scene';\r\n}\r\n","package luxe;\r\n\r\nimport luxe.Engine;\r\nimport luxe.Log.*;\r\n\r\n\r\n/** An event system that handles queued, immediate or\r\n    scheduled event id's to be fired and listened for.\r\n    Multiple listeners can be connected to a single event id,\r\n    and when fired all listeners are informed. Events are not\r\n    retroactive, only listeners that are attached at the time\r\n    will recieve the event notifications. Don't forget to disconnect events. */\r\nclass Events {\r\n\r\n    @:noCompletion public var event_queue : Array<EventObject>;\r\n    @:noCompletion public var event_connections : Map<String, EventConnection>; //event id, connect\r\n    @:noCompletion public var event_slots : Map<String, Array<EventConnection> >; //event name, array of connections\r\n    @:noCompletion public var event_filters : Map<String, Array<EventConnection> >; //event name, array of connections\r\n    @:noCompletion public var event_schedules : Map<String, snow.api.Timer>; //event id, timer\r\n\r\n    var event_queue_count = 0;\r\n\r\n        /** Create a new instance for sending/receiving events. */\r\n    public inline function new( ) {\r\n\r\n            //create the queue, lists and map\r\n        event_connections = new Map();\r\n        event_slots = new Map();\r\n        event_filters = new Map();\r\n        event_queue = [];\r\n        event_schedules = new Map();\r\n\r\n    } //new\r\n\r\n        /** Destroy this `Events` instance */\r\n    public function destroy() {\r\n\r\n        clear();\r\n\r\n    } //destroy\r\n\r\n        /** Clear any scheduled or bound events. Called on destroy. */\r\n    public function clear() {\r\n\r\n        for(schedule in event_schedules) {\r\n            schedule.stop();\r\n            schedule = null;\r\n        }\r\n\r\n        for(connection in event_connections.keys()) {\r\n            event_connections.remove(connection);\r\n        }\r\n\r\n        for(filter in event_filters.keys()) {\r\n            event_filters.remove(filter);\r\n        }\r\n\r\n        for(slot in event_slots.keys()) {\r\n            event_slots.remove(slot);\r\n        }\r\n\r\n        var _count = event_queue.length;\r\n        while(_count > 0) {\r\n            event_queue.pop();\r\n            _count--;\r\n        }\r\n\r\n    }\r\n\r\n        /** Convenience. Exposed for learning/testing the filtering API. */\r\n    public function does_filter_event( _filter:String, _event:String ) {\r\n\r\n        var _replace_stars = ~/\\*/gi;\r\n        var _final_filter = _replace_stars.replace( _filter, '.*?' );\r\n        var _final_search = new EReg(_final_filter, 'gi');\r\n\r\n        return _final_search.match( _event );\r\n\r\n    } //does_filter_event\r\n\r\n\r\n        /** Bind a signal (listener) to a slot (event_name)\r\n            event_name : The event id\r\n            listener : A function handler that should get called on event firing */\r\n    public function listen<T>( _event_name : String, _listener : T -> Void ):String {\r\n\r\n            //we need an ID and a connection to store\r\n        var _id = Luxe.utils.uniqueid();\r\n        var _connection = new EventConnection( _id, _event_name, _listener );\r\n\r\n            //now we store it in the map\r\n        event_connections.set( _id, _connection );\r\n\r\n            //first check if the event name in question has a * wildcard,\r\n            //if it does we have to store it as a filtered event so it's more optimal\r\n            //to search through when events are fired\r\n        var _has_stars = ~/\\*/gi;\r\n        if(_has_stars.match(_event_name)) {\r\n\r\n                //also store the listener inside the slots\r\n            if(!event_filters.exists(_event_name)) {\r\n                    //no slot exists yet? make one!\r\n                event_filters.set(_event_name, [] );\r\n            }\r\n\r\n                //it should exist by now, lets store the connection by event name\r\n            event_filters.get(_event_name).push( _connection );\r\n\r\n        } else {\r\n\r\n                //also store the listener inside the slots\r\n            if(!event_slots.exists(_event_name)) {\r\n                    //no slot exists yet? make one!\r\n                event_slots.set(_event_name, [] );\r\n            }\r\n\r\n                //it should exist by now, lets store the connection by event name\r\n            event_slots.get(_event_name).push( _connection );\r\n\r\n        }\r\n\r\n            //return the id for unlistening\r\n        return _id;\r\n\r\n    } //listen\r\n\r\n        /**Disconnect a bound signal\r\n            The event connection id is returned from listen()\r\n            and returns true if the event existed and was removed. */\r\n    public function unlisten( event_id : String ) : Bool {\r\n\r\n        if(event_connections.exists(event_id)) {\r\n\r\n            var _connection = event_connections.get(event_id);\r\n            var _event_slot = event_slots.get(_connection.event_name);\r\n\r\n            if(_event_slot != null) {\r\n                _event_slot.remove(_connection);\r\n                return true;\r\n            } else {\r\n                var _event_filter = event_filters.get(_connection.event_name);\r\n                if(_event_filter != null) {\r\n                    _event_filter.remove(_connection);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                } //event_filter != null\r\n            } //event_slot != null\r\n\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    } //unlisten\r\n\r\n        /*Queue an event in the next update loop\r\n            event_name : The event (register listeners with listen())\r\n            properties : A dynamic pass-through value to hand off data\r\n            returns : a String, the unique ID of the event */\r\n    public function queue<T>( event_name : String, ?properties : T ) : String {\r\n\r\n        var _id = Luxe.utils.uniqueid();\r\n\r\n            event_queue.push(new EventObject(_id, event_name, properties));\r\n\r\n        return _id;\r\n\r\n    } //queue\r\n\r\n        /** Remove an event from the queue by id returned from queue. */\r\n    public function dequeue( event_id: String ) {\r\n\r\n        //:todo: proper search, not string id's, etc\r\n        var _idx = 0;\r\n        var _count = event_queue.length;\r\n        do {\r\n\r\n            if(event_queue[_idx].id == event_id) {\r\n                event_queue.splice(_idx, 1);\r\n                return true;\r\n            }\r\n\r\n            ++_idx;\r\n\r\n        } while(_idx < _count);\r\n\r\n        return false;\r\n\r\n    } //dequeue\r\n\r\n        /** Process/update the events, firing any events in the queue.\r\n            if you create a custom instance, call this when you want to process. */\r\n    public function process() {\r\n\r\n            //fire each event in the queue\r\n        var _count = event_queue.length;\r\n        while(_count > 0) {\r\n            var _event = event_queue.shift();\r\n            fire(_event.name, _event.properties);\r\n            _count--;\r\n        }\r\n\r\n    } //update\r\n\r\n        /** Fire an event immediately, calling all listeners.\r\n            properties : An optional pass-through value to hand to the listener.\r\n            Returns true if event existed, false otherwise.\r\n            If the optional tag flag is set (default:false), the properties object will be modified\r\n            with some debug information, like _event_name_ and _event_connection_count_ */\r\n    public function fire<T>( _event_name : String, ?_properties : T, ?_tag:Bool=false ) : Bool {\r\n\r\n        var _fired = false;\r\n\r\n        //we have to check against our filters if this event matches anything\r\n        for(_filter in event_filters) {\r\n\r\n            if(_filter.length > 0) {\r\n\r\n                var _filter_name = _filter[0].event_name;\r\n                if(does_filter_event(_filter_name, _event_name)) {\r\n\r\n                    if(_tag) {\r\n                        _properties = tag_properties(_properties, _event_name, _filter.length);\r\n                    }\r\n\r\n                    for(_connection in _filter) {\r\n                        _connection.listener( cast _properties );\r\n                    } //each connection to this filter\r\n\r\n                    _fired = true;\r\n\r\n                } //if it actually fits this event filter\r\n            } //if there are any connections\r\n\r\n        } //for each of our filters\r\n\r\n        if(event_slots.exists( _event_name )) {\r\n\r\n                //we have an event by this name\r\n            var _connections = event_slots.get(_event_name);\r\n\r\n            if(_tag) {\r\n                _properties = tag_properties(_properties, _event_name, _connections.length);\r\n            }\r\n\r\n                //call each listener\r\n            for(connection in _connections) {\r\n                connection.listener( cast _properties );\r\n            }\r\n\r\n            _fired = true;\r\n\r\n        }\r\n\r\n        return _fired;\r\n\r\n    } //fire\r\n\r\n        /** Schedule and event in the future\r\n            event_name : The event (register listeners with listen())\r\n            properties : An optional pass-through value to hand to the listeners\r\n            Returns the ID of the schedule (for unschedule) */\r\n    public function schedule<T>( time:Float, event_name : String, ?properties : T ) : String {\r\n\r\n        var _id : String = Luxe.utils.uniqueid();\r\n\r\n            var _timer = Luxe.timer.schedule(time, fire.bind(event_name, properties));\r\n\r\n            event_schedules.set( _id, _timer );\r\n\r\n        return _id;\r\n\r\n    } //schedule\r\n\r\n        /** Unschedule a previously scheduled event\r\n            schedule_id : The id of the schedule (returned from schedule)\r\n            Returns false if fails, or event doesn't exist */\r\n    public function unschedule( schedule_id : String ) : Bool {\r\n\r\n        if(event_schedules.exists(schedule_id)) {\r\n                //find the timer\r\n            var _timer = event_schedules.get(schedule_id);\r\n                //kill it\r\n            _timer.stop();\r\n                //remove it from the list\r\n            event_schedules.remove(schedule_id);\r\n                //done\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    } //unschedule\r\n\r\n//Internal\r\n\r\n    function tag_properties(_properties:Dynamic, _name:String,_count:Int) {\r\n\r\n        def(_properties, {});\r\n\r\n            //tag these information slots, with _ so they don't clobber other stuff\r\n        Reflect.setField(_properties,'_event_name_', _name);\r\n            //tag a listener count\r\n        Reflect.setField(_properties,'_event_connection_count_', _count);\r\n\r\n        return _properties;\r\n\r\n    } //tag_properties\r\n\r\n} // Events\r\n\r\nprivate class EventConnection {\r\n\r\n\r\n    public var listener : Dynamic -> Void;\r\n    public var id : String;\r\n    public var event_name : String;\r\n\r\n\r\n    public function new( _id:String, _event_name:String, _listener : Dynamic -> Void ) {\r\n\r\n        id = _id;\r\n        listener = _listener;\r\n        event_name = _event_name;\r\n\r\n    } //new\r\n\r\n\r\n} //EventConnection\r\n\r\nprivate class EventObject {\r\n\r\n\r\n    public var id : String;\r\n    public var name:String;\r\n    public var properties : Dynamic;\r\n\r\n\r\n    public function new(_id:String, _event_name:String, _event_properties:Dynamic ) {\r\n\r\n        id = _id;\r\n        name = _event_name;\r\n        properties = _event_properties;\r\n\r\n    } //new\r\n\r\n\r\n} //EventObject\r\n","package luxe;\r\n\r\nimport luxe.Engine;\r\n\r\n@:allow(luxe.Engine)\r\nclass IO {\r\n\r\n    public var core : Engine;\r\n\r\n    function new( _core:Engine ) {\r\n        core = _core;\r\n    } //new\r\n\r\n//Path specifics\r\n#if luxe_native\r\n    public var app_path (get,never) : String;\r\n    public var app_path_prefs (get,never) : String;\r\n#end\r\n\r\n//Utility features\r\n\r\n        /** Open the system default browser with the given URL.\r\n            supported: mac/window/linux/iOS/web\r\n            pending: android https://github.com/underscorediscovery/snow/issues/25 */\r\n    public inline function url_open( _url:String ) {\r\n\r\n        core.app.io.url_open( _url );\r\n\r\n    } //url_open\r\n\r\n        /** Save a string value by key, with an optional slot.\r\n            To remove a saved key, pass value in as null.\r\n            Works on all targets as a simple save/load mechanism.\r\n            Data saved is plain text but obscured with basic encoding.\r\n            Any further obfuscation can be done on the value prior to saving.\r\n            Returns false if the save failed, errors being logged. */\r\n    public inline function string_save( _key:String, _value:String, _slot:Int = 0 ) : Bool {\r\n\r\n        return core.app.io.string_save(_key, _value, _slot);\r\n\r\n    } //string_save\r\n\r\n        /** Load a string value by key, with an optional slot.\r\n            Works on all targets as a simple save/load mechanism.\r\n            Returns the string or null if the key was invalid, or the slot was not found. */\r\n    public inline function string_load( _key:String, _slot:Int = 0 ) : String {\r\n\r\n        return core.app.io.string_load(_key, _slot);\r\n\r\n    } //string_load\r\n\r\n        /** Destroy a specific string slot, removing all values stored.\r\n            Does not ask for confirmation. Returns true if successful, false otherwise. */\r\n    public inline function string_destroy( _slot:Int = 0 ) : Bool {\r\n\r\n        return core.app.io.string_destroy(_slot);\r\n\r\n    } //string_destroy\r\n\r\n//Internal\r\n\r\n#if luxe_native\r\n\r\n    function get_app_path() {\r\n\r\n        return core.app.io.module.app_path();\r\n\r\n    } //get_app_path\r\n\r\n    function get_app_path_prefs() {\r\n\r\n        return core.app.io.module.app_path_prefs();\r\n\r\n    } //get_app_path\r\n\r\n#end\r\n\r\n    function init() {\r\n\r\n    } //init\r\n\r\n} //IO\r\n","package luxe;\r\n\r\nimport luxe.Engine;\r\nimport luxe.Log._debug;\r\nimport snow.types.Types;\r\n\r\n@:allow(luxe.Engine)\r\nclass Input {\r\n\r\n    var core : Engine;\r\n\r\n    @:noCompletion public var key_bindings : Map<String, Map<Int,Bool> >;\r\n    @:noCompletion public var mouse_bindings : Map<String, Map<Int,Bool> >;\r\n    @:noCompletion public var gamepad_bindings: Map<String, Map<Int, Null<Int>> >;\r\n\r\n    var _named_input_released : Map<String, Bool>;\r\n    var _named_input_pressed : Map<String, Bool>;\r\n    var _named_input_down : Map<String, Bool>;\r\n\r\n    var key_event: KeyEvent;\r\n    var text_event: TextEvent;\r\n    var mouse_event: MouseEvent;\r\n    var touch_event: TouchEvent;\r\n    var gamepad_event: GamepadEvent;\r\n    var input_event: InputEvent;\r\n//\r\n\r\n    function new( _core:Engine ) {\r\n\r\n        core = _core;\r\n\r\n        key_event = new KeyEvent();\r\n        text_event = new TextEvent();\r\n        mouse_event = new MouseEvent();\r\n        touch_event = new TouchEvent();\r\n        gamepad_event = new GamepadEvent();\r\n        input_event = new InputEvent();\r\n\r\n    } //new\r\n\r\n//Public API\r\n    //Input query\r\n\r\n        /** immediate query of the pressed state of a named input. only true if pressed within one frame */\r\n    public function inputpressed( _event:String ) : Bool {\r\n        return _named_input_pressed.exists( _event );\r\n    } //inputpressed\r\n\r\n        /** immediate query of the released state of a named input. only true if released within one frame */\r\n    public function inputreleased( _event:String ) : Bool {\r\n        return _named_input_released.exists( _event );\r\n    } //inputreleased\r\n\r\n        /** immediate query of the down state of a named input. only true while the key is down */\r\n    public function inputdown( _event:String ) : Bool {\r\n        return _named_input_down.exists( _event );\r\n    } //inputdown\r\n\r\n //Keys\r\n\r\n        /** immediate query of the pressed state of a `keycode`, use `Key` for named keycodes. only true if pressed within one frame */\r\n    public function keypressed( _code:Int ) : Bool {\r\n        return core.app.input.keypressed( _code );\r\n    } //keypressed\r\n\r\n        /** immediate query of the released state of a `keycode`, use `Key` for named keycodes. only true if released within one frame */\r\n    public function keyreleased( _code:Int ) : Bool{\r\n        return core.app.input.keyreleased( _code );\r\n    } //keyreleased\r\n\r\n        /** immediate query of the down state of a `keycode`, use `Key` for named keycodes. only true while the key is down */\r\n    public function keydown( _code:Int ) : Bool{\r\n        return core.app.input.keydown( _code );\r\n    } //keydown\r\n\r\n\r\n        /** immediate query of the pressed state of a `scancode`, use `Scan` for named scancodes. only true if pressed within one frame */\r\n    public function scanpressed( _code:Int ) : Bool {\r\n        return core.app.input.scanpressed( _code );\r\n    } //scanpressed\r\n\r\n        /** immediate query of the released state of a `scancode`, use `Scan` for named scancodes. only true if released within one frame */\r\n    public function scanreleased( _code:Int ) : Bool{\r\n        return core.app.input.scanreleased( _code );\r\n    } //scanreleased\r\n\r\n        /** immediate query of the down state of a `scancode`, use `Scan` for named scancodes. only true while the key is down */\r\n    public function scandown( _code:Int ) : Bool{\r\n        return core.app.input.scandown( _code );\r\n    } //scandown\r\n\r\n    //Mouse\r\n\r\n        /** immediate query of the pressed state of a mouse button. only true if pressed within one frame */\r\n    public function mousepressed( _button:MouseButton ) : Bool {\r\n        return core.app.input.mousepressed( _button );\r\n    } //mousepressed\r\n\r\n        /** immediate query of the released state of a mouse button. only true if released within one frame */\r\n    public function mousereleased( _button:MouseButton ) : Bool{\r\n        return core.app.input.mousereleased( _button );\r\n    } //mousereleased\r\n\r\n        /** immediate query of the down state of a mouse button. only true while the button is down. */\r\n    public function mousedown( _button:MouseButton ) : Bool{\r\n        return core.app.input.mousedown( _button );\r\n    } //mousedown\r\n\r\n    //Gamepad\r\n\r\n        /** immediate query of the pressed state of a gamepad button. only true if pressed within one frame */\r\n    public function gamepadpressed( _gamepad:Int, _button:Int ) : Bool {\r\n        return core.app.input.gamepadpressed( _gamepad, _button );\r\n    } //gamepadpressed\r\n\r\n        /** immediate query of the released state of a gamepad button. only true if released within one frame */\r\n    public function gamepadreleased( _gamepad:Int, _button:Int ) : Bool{\r\n        return core.app.input.gamepadreleased( _gamepad, _button );\r\n    } //gamepadreleased\r\n\r\n        /** immediate query of the down state of a gamepad button. only true while the button is down */\r\n    public function gamepaddown( _gamepad:Int, _button:Int ) : Bool{\r\n        return core.app.input.gamepaddown( _gamepad, _button );\r\n    } //gamepaddown\r\n\r\n        /** immediate query of the axis value of a gamepad axis. */\r\n    public function gamepadaxis( _gamepad:Int, _axis:Int ) : Float {\r\n        return core.app.input.gamepadaxis( _gamepad, _axis );\r\n    } //gamepadaxis\r\n\r\n\r\n//Named event handlers\r\n    //\r\n        /** Bind a named input binding to a `Key` keycode */\r\n    public function bind_key(_name:String, _key:Int) {\r\n\r\n        if( !key_bindings.exists(_name) ) {\r\n            key_bindings.set(_name, new Map<Int,Bool>() );\r\n        }\r\n\r\n        var _kb = key_bindings.get(_name);\r\n            _kb.set(_key, true);\r\n\r\n    } //bind_key\r\n\r\n        /** Unbind a previously bound named input binding to a `Key` keycode */\r\n    public function unbind_key(_name:String, _key:Int) {\r\n\r\n        if(!key_bindings.exists(_name)) return;\r\n\r\n        var _kb = key_bindings.get(_name);\r\n            _kb.remove(_key);\r\n\r\n    } //unbind_key\r\n\r\n        /** Bind a named input binding to a `MouseButton` */\r\n    public function bind_mouse(_name:String, _button:MouseButton) {\r\n\r\n        if( !mouse_bindings.exists(_name) ) {\r\n            mouse_bindings.set(_name, new Map<Int,Bool>());\r\n        }\r\n\r\n        var _mb = mouse_bindings.get(_name);\r\n            _mb.set(_button, true);\r\n\r\n    } //bind_mouse\r\n\r\n        /** Unbind a previously bound named input binding to a `MouseButton` */\r\n    public function unbind_mouse(_name:String, _button:MouseButton) {\r\n\r\n        if(!mouse_bindings.exists(_name)) return;\r\n\r\n        var _mb = mouse_bindings.get(_name);\r\n            _mb.remove(_button);\r\n\r\n    } //unbind_mouse\r\n\r\n    /** Bind a named input binding to a `Gamepad Button`. If no `Gamepad Id` is specified, any gamepad fires the named binding.*/\r\n    public function bind_gamepad(_name:String, _gamepad_button:Int, ?_gamepad_id:Null<Int> = null) {\r\n\r\n        if ( !gamepad_bindings.exists(_name) ) {\r\n            gamepad_bindings.set(_name, new Map<Int, Null<Int>>());\r\n        }\r\n\r\n        var _gp = gamepad_bindings.get(_name);\r\n            _gp.set(_gamepad_button, _gamepad_id);\r\n\r\n    } //bind_gamepad\r\n\r\n        /** Unbind a previously bound named input binding to a gamepad button */\r\n    public function unbind_gamepad(_name:String, _button:Int) {\r\n\r\n        if(!gamepad_bindings.exists(_name)) return;\r\n\r\n        var _gp = gamepad_bindings.get(_name);\r\n            _gp.remove(_button);\r\n\r\n    } //unbind_gamepad\r\n\r\n//Internal\r\n\r\n    function init() {\r\n\r\n        key_bindings = new Map();\r\n        mouse_bindings = new Map();\r\n        gamepad_bindings = new Map();\r\n\r\n        _named_input_down = new Map();\r\n        _named_input_pressed = new Map();\r\n        _named_input_released = new Map();\r\n\r\n        _debug('\\t input initialized.');\r\n\r\n    } //init\r\n\r\n    function destroy() {\r\n\r\n        _debug('\\t input shut down.');\r\n\r\n    } //destroy\r\n\r\n    function process() {\r\n        //\r\n\r\n           //remove any stale named pressed value\r\n            //unless it wasn't alive for a full frame yet,\r\n            //then flag it so that it may be\r\n        for(_event in _named_input_pressed.keys()){\r\n\r\n            if(_named_input_pressed.get(_event)){\r\n                _named_input_pressed.remove(_event);\r\n            } else {\r\n                _named_input_pressed.set(_event, true);\r\n            }\r\n\r\n        } //each _named_input_pressed\r\n\r\n            //remove any stale key released value\r\n            //unless it wasn't alive for a full frame yet,\r\n            //then flag it so that it may be\r\n        for(_event in _named_input_released.keys()){\r\n\r\n            if(_named_input_released.get(_event)){\r\n                _named_input_released.remove(_event);\r\n            } else {\r\n                _named_input_released.set(_event, true);\r\n            }\r\n\r\n        } //each _named_input_released\r\n\r\n    } //process\r\n\r\n//pass through events from core\r\n\r\n    //mouse\r\n\r\n        function onmousedown(_x:Int, _y:Int, _button:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            mouse_event.set_press(_x, _y, _button, InteractState.down, _timestamp, _window_id);\r\n\r\n            check_named_mouse(mouse_event, true);\r\n\r\n            core.emit(luxe.Ev.mousedown, mouse_event);\r\n\r\n            core.game.onmousedown(mouse_event);\r\n\r\n        } //onmousedown\r\n\r\n        function onmouseup(_x:Int, _y:Int, _button:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            mouse_event.set_press(_x, _y, _button, InteractState.up, _timestamp, _window_id);\r\n\r\n            check_named_mouse(mouse_event);\r\n\r\n            core.emit(luxe.Ev.mouseup, mouse_event);\r\n\r\n            core.game.onmouseup(mouse_event);\r\n\r\n        } //onmouseup\r\n\r\n        function onmousemove(_x:Int, _y:Int, _x_rel:Int, _y_rel:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            mouse_event.set_move(_x, _y, _x_rel, _y_rel, _timestamp, _window_id);\r\n\r\n            core.emit(luxe.Ev.mousemove, mouse_event);\r\n\r\n            core.game.onmousemove(mouse_event);\r\n\r\n        } //onmousemove\r\n\r\n        function onmousewheel(_x:Float, _y:Float, _timestamp:Float, _window_id:Int) {\r\n\r\n            if(core.shutting_down) return;\r\n            \r\n            mouse_event.set_wheel(_x, _y, _timestamp, _window_id);\r\n\r\n            check_named_mouse(mouse_event, false);\r\n                \r\n            core.emit(luxe.Ev.mousewheel, mouse_event);\r\n\r\n            core.game.onmousewheel(mouse_event);\r\n\r\n        } //onmousewheel\r\n\r\n    //keys\r\n\r\n        function onkeydown(_keycode:Int, _scancode:Int, _repeat:Bool, _mod:ModState, _timestamp:Float, _window_id:Int) : Void {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            key_event.set(_keycode, _scancode, _repeat, _mod, InteractState.down, _timestamp, _window_id);\r\n\r\n            check_named_keys(key_event, true);\r\n\r\n            core.emit(luxe.Ev.keydown, key_event);\r\n\r\n            core.game.onkeydown(key_event);\r\n\r\n        } //onkeydown\r\n\r\n        function onkeyup(_keycode:Int, _scancode:Int, _repeat:Bool, _mod:ModState, _timestamp:Float, _window_id:Int) : Void {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            key_event.set(_keycode, _scancode, _repeat, _mod, InteractState.up, _timestamp, _window_id);\r\n\r\n            check_named_keys(key_event);\r\n\r\n            core.emit(luxe.Ev.keyup, key_event);\r\n\r\n            core.game.onkeyup(key_event);\r\n\r\n        } //onkeyup\r\n\r\n        function ontextinput(_text:String, _start:Int, _length:Int, _etype:snow.types.TextEventType, _timestamp:Float, _window_id:Int) : Void {\r\n            \r\n            if(core.shutting_down) return;\r\n\r\n            var _type = switch(_etype) {\r\n                case te_edit: TextEventType.edit;\r\n                case te_input: TextEventType.input;\r\n                case _: return;\r\n            }\r\n\r\n            text_event.set(_text, _start, _length, _type, _timestamp, _window_id);\r\n\r\n            core.emit(luxe.Ev.textinput, text_event);\r\n\r\n            core.game.ontextinput(text_event);\r\n\r\n        } //ontextinput\r\n\r\n    //touch\r\n\r\n        function ontouchdown(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _timestamp:Float) : Void {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            touch_event.set(_x, _y, _dx, _dy, _touch_id, InteractState.down, _timestamp);\r\n\r\n            core.emit(luxe.Ev.touchdown, touch_event);\r\n\r\n            core.game.ontouchdown(touch_event);\r\n\r\n        } //ontouchdown\r\n\r\n        function ontouchup(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _timestamp:Float) : Void {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            touch_event.set(_x, _y, _dx, _dy, _touch_id, InteractState.up, _timestamp);\r\n\r\n            core.emit(luxe.Ev.touchup, touch_event);\r\n\r\n            core.game.ontouchup(touch_event);\r\n\r\n        } //ontouchup\r\n\r\n        function ontouchmove(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _timestamp:Float) : Void {\r\n\r\n            if(core.shutting_down) return;\r\n\r\n            touch_event.set(_x, _y, _dx, _dy, _touch_id, InteractState.move, _timestamp);\r\n\r\n            core.emit(luxe.Ev.touchmove, touch_event);\r\n\r\n            core.game.ontouchmove(touch_event);\r\n\r\n        } //ontouchmove\r\n\r\n    //gamepad\r\n\r\n        function ongamepadaxis(_gamepad:Int, _axis:Int, _value:Float, _timestamp:Float) : Void {\r\n                \r\n            if(core.shutting_down) return;\r\n\r\n            gamepad_event.set_axis(_gamepad, _axis, _value, _timestamp);\r\n\r\n            core.emit(luxe.Ev.gamepadaxis, gamepad_event);\r\n\r\n            core.game.ongamepadaxis(gamepad_event);\r\n\r\n        } //ongamepadaxis\r\n\r\n        function ongamepaddown(_gamepad:Int, _button:Int, _value:Float, _timestamp:Float) : Void {\r\n                \r\n            if(core.shutting_down) return;\r\n\r\n            gamepad_event.set_button(_gamepad, _button, _value, InteractState.down, _timestamp);\r\n\r\n            check_named_gamepad_buttons(gamepad_event, true);\r\n\r\n            core.emit(luxe.Ev.gamepaddown, gamepad_event);\r\n\r\n            core.game.ongamepaddown(gamepad_event);\r\n\r\n        } //ongamepaddown\r\n\r\n        function ongamepadup(_gamepad:Int, _button:Int, _value:Float, _timestamp:Float) : Void {\r\n                \r\n            if(core.shutting_down) return;\r\n\r\n            gamepad_event.set_button(_gamepad, _button, _value, InteractState.up, _timestamp);\r\n\r\n            check_named_gamepad_buttons(gamepad_event, false);\r\n\r\n            core.emit(luxe.Ev.gamepadup, gamepad_event);\r\n\r\n            core.game.ongamepadup(gamepad_event);\r\n\r\n        } //ongamepadup\r\n\r\n        function ongamepaddevice(_gamepad:Int, _id:String, _etype:GamepadDeviceEventType, _timestamp:Float) : Void {\r\n                \r\n            if(core.shutting_down) return;\r\n\r\n            var _type = switch(_etype) {\r\n                case ge_device_added:    GamepadEventType.device_added;\r\n                case ge_device_removed:  GamepadEventType.device_removed;\r\n                case ge_device_remapped: GamepadEventType.device_remapped;\r\n                case _:                  GamepadEventType.unknown;\r\n            }\r\n\r\n            gamepad_event.set_device(_gamepad, _id, _type, _timestamp);\r\n\r\n            core.emit(luxe.Ev.gamepaddevice, gamepad_event);\r\n\r\n            core.game.ongamepaddevice(gamepad_event);\r\n\r\n        } //ongamepaddevice\r\n\r\n    //input bindings\r\n\r\n        function oninputdown(_name:String, ?_key_event:KeyEvent, ?_mouse_event:MouseEvent, ?_touch_event:TouchEvent, ?_gamepad_event:GamepadEvent) {\r\n            \r\n            if(core.shutting_down) return;\r\n\r\n            if(_key_event != null) {\r\n                input_event.set_key(_name, InteractState.down, _key_event);\r\n            }\r\n            else if(_mouse_event != null) {\r\n                input_event.set_mouse(_name, InteractState.down, _mouse_event);\r\n            }\r\n            else if(_touch_event != null) {\r\n                input_event.set_touch(_name, InteractState.down, _touch_event);\r\n            }\r\n            else if(_gamepad_event != null) {\r\n                input_event.set_gamepad(_name, InteractState.down, _gamepad_event);\r\n            }\r\n            else {\r\n                input_event.set_unknown(_name, InteractState.down);\r\n            }\r\n\r\n            core.emit(luxe.Ev.inputdown, input_event);\r\n\r\n            core.game.oninputdown(input_event);\r\n\r\n        } //oninputdown\r\n\r\n        function oninputup(_name:String, ?_key_event:KeyEvent, ?_mouse_event:MouseEvent, ?_touch_event:TouchEvent, ?_gamepad_event:GamepadEvent) {\r\n            \r\n            if(core.shutting_down) return;\r\n\r\n            if(_key_event != null) {\r\n                input_event.set_key(_name, InteractState.up, _key_event);\r\n            }\r\n            else if(_mouse_event != null) {\r\n                input_event.set_mouse(_name, InteractState.up, _mouse_event);\r\n            }\r\n            else if(_touch_event != null) {\r\n                input_event.set_touch(_name, InteractState.up, _touch_event);\r\n            }\r\n            else if(_gamepad_event != null) {\r\n                input_event.set_gamepad(_name, InteractState.up, _gamepad_event);\r\n            }\r\n            else {\r\n                input_event.set_unknown(_name, InteractState.up);\r\n            }\r\n\r\n            core.emit(luxe.Ev.inputup, input_event);\r\n\r\n            core.game.oninputup(input_event);\r\n\r\n        } //oninputup\r\n\r\n//internal\r\n\r\n    function check_named_keys( e:KeyEvent, _down:Bool=false ) {\r\n\r\n        var _fired : Array<String> = [];\r\n        for(_name in key_bindings.keys()) {\r\n\r\n            var _b = key_bindings.get(_name);\r\n            var _is_down_repeat = _down && e.repeat;\r\n            if(_b.exists(e.keycode) && !_is_down_repeat) {\r\n                if( !Lambda.has(_fired, _name)) {\r\n                    _fired.push(_name);\r\n                }\r\n            } //if the key fired is stored in a named binding\r\n\r\n        } //for each binding\r\n\r\n        for(_f in _fired) {\r\n            if(_down) {\r\n\r\n                    //down but not yet processed\r\n                _named_input_pressed.set(_f, false);\r\n                    //down is true immediate, cos up removes it\r\n                _named_input_down.set(_f, true);\r\n\r\n                oninputdown(_f, e);\r\n\r\n            } else {\r\n\r\n                    //up but not yet processed\r\n                _named_input_released.set(_f, false);\r\n                    //remove down state\r\n                _named_input_down.remove(_f);\r\n\r\n                oninputup(_f, e);\r\n\r\n            } //if _down\r\n        } //_f in _fired\r\n\r\n    } //check_named_keys\r\n\r\n    function check_named_mouse( e:MouseEvent, _down:Bool=false ) {\r\n\r\n        var _fired : Array<String> = [];\r\n        for(_name in mouse_bindings.keys()) {\r\n\r\n            var _b = mouse_bindings.get(_name);\r\n            if(_b.exists(e.button)) {\r\n                if( !Lambda.has(_fired, _name)) {\r\n                    _fired.push(_name);\r\n                }\r\n            } //if the key fired is stored in a named binding\r\n\r\n        } //for each binding\r\n\r\n        for(_f in _fired) {\r\n            if(_down) {\r\n\r\n                    //down but not yet processed\r\n                _named_input_pressed.set( _f, false);\r\n                    //down is true immediate, cos up removes it\r\n                _named_input_down.set( _f, true);\r\n\r\n                oninputdown(_f, e);\r\n\r\n            } else {\r\n\r\n                    //up but not yet processed\r\n                _named_input_released.set( _f, false);\r\n                    //remove down state\r\n                _named_input_down.remove( _f );\r\n\r\n                oninputup(_f, e);\r\n\r\n            }\r\n        } //_f in _fired\r\n\r\n    } //check_named_keys\r\n\r\n    function check_named_gamepad_buttons( e:GamepadEvent, _down:Bool=false ) {\r\n\r\n        var _fired : Array<String> = [];\r\n        for (_name in gamepad_bindings.keys()) {\r\n\r\n            var _b = gamepad_bindings.get(_name);\r\n            if (_b.exists(e.button)) {\r\n                var _kb = _b.get(e.button);\r\n                var _accepted_gamepad = _kb == null || _kb == e.gamepad;\r\n                if ( !Lambda.has(_fired, _name) && _accepted_gamepad) {\r\n                    _fired.push(_name);\r\n                }\r\n            } // if the button fired is stored in a named binding\r\n        }\r\n\r\n        for(_f in _fired) {\r\n            if (_down) {\r\n\r\n                //down but now yet processed\r\n                _named_input_pressed.set( _f, false);\r\n                // down is true immediate, because up removes it\r\n                _named_input_down.set( _f, true);\r\n\r\n                oninputdown(_f, e);\r\n\r\n            } else {\r\n\r\n                // up but not yet processed\r\n                _named_input_released.set( _f, false);\r\n                // remove down state\r\n                _named_input_down.remove( _f );\r\n\r\n                oninputup(_f, e);\r\n\r\n            }\r\n        } //_f in _fired\r\n\r\n    } //check_named_gamepad_buttons\r\n\r\n} //Input\r\n\r\n    /** A modifier state for key events */\r\ntypedef ModState        =   snow.types.Types.ModState;\r\n    /** A named list of keycodes. Use to compare against key event `keycode` values */\r\ntypedef Key             =   snow.systems.input.Keycodes.Keycodes;\r\n    /** A named list of scancodes. Use to compare against key event `scancode` values */\r\ntypedef Scan            =   snow.systems.input.Keycodes.Scancodes;\r\n\r\n/** A typed mouse button id */\r\n@:enum abstract MouseButton(Int) from Int to Int {\r\n\r\n/** no mouse buttons */\r\n    var none = 0;\r\n/** left mouse button */\r\n    var left = 1;\r\n/** middle mouse button */\r\n    var middle = 2;\r\n/** right mouse button */\r\n    var right = 3;\r\n/** extra button pressed (4) */\r\n    var extra1 = 4;\r\n/** extra button pressed (5) */\r\n    var extra2 = 5;\r\n\r\n} //MouseButton\r\n\r\n/** A typed state for mouse, touch, or pressed/similar */\r\nenum InteractState {\r\n\r\n/** An unknown state */\r\n    unknown;\r\n/** An none state */\r\n    none;\r\n/** In a pressed state */\r\n    down;\r\n/** In a released state */\r\n    up;\r\n/** In a moving state */\r\n    move;\r\n/** A mouse wheel state */\r\n    wheel;\r\n/** A gamepad axis state */\r\n    axis;\r\n\r\n} //MouseState\r\n\r\n/** A typed text event type */\r\nenum TextEventType {\r\n\r\n/** An unknown event */\r\n    unknown;\r\n/** An edit text typing event */\r\n    edit;\r\n/** An input text typing event */\r\n    input;\r\n\r\n} //TextEventType\r\n\r\n/** Information about a keyboard event */\r\nclass KeyEvent {\r\n\r\n    public function new() {\r\n\r\n    } //new\r\n\r\n        /** The `Scan` code value for this event */\r\n    public var scancode (default, null): Int;\r\n        /** The `Key` code value for this event */\r\n    public var keycode (default, null): Int;\r\n        /** The state of the key in this event */\r\n    public var state (default, null): InteractState;\r\n        /** The modifier state of this event */\r\n    public var mod (default, null): ModState;\r\n        /** If this value is bigger than 0 this is a key repeat event of a key held down */\r\n    public var repeat (default, null): Bool;\r\n        /** The time in seconds when this touch event occurred, use for deltas */\r\n    public var timestamp (default, null): Float;\r\n        /** The window id this event originated from */\r\n    public var window_id (default, null): Int;\r\n\r\n    @:noCompletion\r\n    public function set(_keycode:Int, _scancode:Int, _repeat:Bool, _mod:ModState, _state:InteractState, _timestamp:Float, _window_id:Int) {\r\n\r\n        mod = _mod;\r\n        state = _state;\r\n        repeat = _repeat;\r\n        keycode = _keycode;\r\n        scancode = _scancode;\r\n        timestamp = _timestamp;\r\n        window_id = _window_id;\r\n\r\n    } //set\r\n\r\n} //KeyEvent\r\n\r\n/** Information about a touch event */\r\nclass TouchEvent {\r\n\r\n    public function new() {\r\n\r\n        pos = new luxe.Vector();\r\n\r\n    } //new\r\n\r\n        /** The state this touch event is in */\r\n    public var state (default, null): InteractState;\r\n        /** The time in seconds when this touch event occurred, use for deltas */\r\n    public var timestamp (default, null): Float;\r\n        /** The id of the touch that this event comes from, a finger id */\r\n    public var touch_id (default, null): Int;\r\n        /** The x position in the window of the touch event */\r\n    public var x (default, null): Float;\r\n        /** The x position in the window of the touch event */\r\n    public var y (default, null): Float;\r\n        /** The delta x value of the touch event, if the state is `moving` */\r\n    public var dx (default, null): Float;\r\n        /** The delta y value of the touch event, if the state is `moving` */\r\n    public var dy (default, null): Float;\r\n        /** A convenience vector access of the x and y position */\r\n    public var pos (default, null): luxe.Vector;\r\n\r\n    @:noCompletion\r\n    public function set(_x:Float, _y:Float, _dx:Float, _dy:Float, _touch_id:Int, _state:InteractState, _timestamp:Float) {\r\n\r\n        x = _x;\r\n        y = _y;\r\n        dx = _dx;\r\n        dy = _dy;\r\n        touch_id = _touch_id;\r\n        timestamp = _timestamp;\r\n        state = _state;\r\n\r\n        pos.set_xy(_x, _y);\r\n\r\n    } //set_press\r\n\r\n} //TouchEvent\r\n\r\n/** Information about a text input event */\r\nclass TextEvent {\r\n\r\n    public function new() {\r\n\r\n    } //new\r\n\r\n        /** The text that this event has generated */\r\n    public var text (default, null) : String;\r\n        /** The type of text event */\r\n    public var type (default, null) : TextEventType;\r\n        /** The time in seconds when this touch event occurred, use for deltas */\r\n    public var timestamp (default, null) : Float;\r\n        /** The window id this event originated from */\r\n    public var window_id (default, null) : Int;\r\n        /** The start position, if the `type` is `edit` */\r\n    public var start (default, null) : Int;\r\n        /** The length position, if the `type` is `edit` */\r\n    public var length (default, null) : Int;\r\n\r\n    @:noCompletion\r\n    public function set(_text:String, _start:Int, _length:Int, _type:TextEventType, _timestamp:Float, _window_id:Int) {\r\n\r\n        text = _text;\r\n        start = _start;\r\n        length = _length;\r\n        type = _type;\r\n        timestamp = _timestamp;\r\n        window_id = _window_id;\r\n\r\n    } //set\r\n\r\n} //TextEvent\r\n\r\n/** A typed gamepad event type */\r\nenum GamepadEventType {\r\n\r\n    /** An unknown event */\r\n    unknown;\r\n    /** An axis change event */\r\n    axis;\r\n    /** A button event */\r\n    button;\r\n    /** A device added event */\r\n    device_added;\r\n    /** A device removed event */\r\n    device_removed;\r\n    /** A device was remapped */\r\n    device_remapped;\r\n\r\n} //GamepadEventType\r\n\r\n/** Information about a gamepad event */\r\nclass GamepadEvent {\r\n\r\n    public function new() {\r\n\r\n    } //new\r\n\r\n        /** The time in seconds when this gamepad event occurred, use for deltas */\r\n    public var timestamp (default, null): Float;\r\n        /** The type of gamepad event that this corresponds with */\r\n    public var type (default, null): GamepadEventType;\r\n        /** The state this event is in */\r\n    public var state (default, null): InteractState;\r\n        /** The id of the gamepad this event comes from */\r\n    public var gamepad (default, null): Int;\r\n        /** The button id, if the event `type` is `button` */\r\n    public var button (default, null): Int;\r\n        /** The axis id, if the event `type` is `axis` */\r\n    public var axis (default, null): Int;\r\n        /** The axis value, if the event `type` is `axis` */\r\n    public var value (default, null): Float;\r\n        /** The system id / name of the device, **only** if the event `type` is `device_added`,`device_removed` or `device_remapped` */\r\n    public var id (default, null): String;\r\n\r\n    @:noCompletion\r\n    public function set_axis(_gamepad:Int, _axis:Int, _value:Float, _timestamp:Float) {\r\n\r\n        id = null;\r\n        button = -1;\r\n        axis = _axis;\r\n        value = _value;\r\n        gamepad = _gamepad;\r\n        timestamp = _timestamp;\r\n        state = InteractState.axis;\r\n        type = GamepadEventType.axis;\r\n\r\n    } //set_axis\r\n\r\n    @:noCompletion\r\n    public function set_button(_gamepad:Int, _button:Int, _value:Float, _state:InteractState, _timestamp:Float) {\r\n\r\n        id = null;\r\n        axis = -1;\r\n        state = _state;\r\n        value = _value;\r\n        button = _button;\r\n        gamepad = _gamepad;\r\n        timestamp = _timestamp;\r\n        type = GamepadEventType.button;\r\n\r\n    } //set_button\r\n\r\n    @:noCompletion\r\n    public function set_device(_gamepad:Int, _id:String, _type:GamepadEventType, _timestamp:Float) {\r\n\r\n        id = _id;\r\n        axis = -1;\r\n        value = 0;\r\n        button = -1;\r\n        type = _type;\r\n        gamepad = _gamepad;\r\n        timestamp = _timestamp;\r\n        state = InteractState.none;\r\n\r\n    } //set_device\r\n\r\n} //GamepadEvent\r\n\r\n/** Information about a mouse event */\r\nclass MouseEvent {\r\n\r\n    public function new() {\r\n        pos = new luxe.Vector();\r\n    }\r\n\r\n        /** The time in seconds when this touch event occurred, use for deltas */\r\n    public var timestamp (default, null) : Float = 0.0;\r\n        /** The window id this event originated from */\r\n    public var window_id (default, null) : Int = 1;\r\n        /** The state this event is in */\r\n    public var state (default, null) : InteractState;\r\n        /** The button id, if the event `state` is `down` or `up` */\r\n    public var button (default, null) : MouseButton;\r\n        /** The x position in the window of the mouse event */\r\n    public var x (default, null) : Int = 0;\r\n        /** The y position in the window of the mouse event */\r\n    public var y (default, null) : Int = 0;\r\n        /** The relative x position if `state` is `move` or a window has grabbed state */\r\n    public var x_rel (default, null) : Int = 0;\r\n        /** The relative y position if `state` is `move` or a window has grabbed state */\r\n    public var y_rel (default, null) : Int = 0;\r\n        /** A convenience vector access of the x and y position */\r\n    public var pos (default, null) : luxe.Vector;\r\n\r\n    @:noCompletion\r\n    public function set_press(_x:Int, _y:Int, _button:MouseButton, _state:InteractState, _timestamp:Float, _window_id:Int) {\r\n\r\n        x = _x;\r\n        y = _y;\r\n        x_rel = 0;\r\n        y_rel = 0;\r\n        state = _state;\r\n        button = _button;\r\n        window_id = _window_id;\r\n        timestamp = _timestamp;\r\n\r\n        pos.set_xy(_x, _y);\r\n\r\n    } //set_press\r\n\r\n    @:noCompletion\r\n    public function set_move(_x:Int, _y:Int, _x_rel:Int, _y_rel:Int, _timestamp:Float, _window_id:Int) {\r\n\r\n        x = _x;\r\n        y = _y;\r\n        x_rel = _x_rel;\r\n        y_rel = _y_rel;\r\n        state = InteractState.move;\r\n        button = MouseButton.none;\r\n        window_id = _window_id;\r\n        timestamp = _timestamp;\r\n\r\n        pos.set_xy(_x, _y);\r\n\r\n    } //set_move\r\n\r\n    @:noCompletion\r\n    public function set_wheel(_x:Float, _y:Float, _timestamp:Float, _window_id:Int) {\r\n\r\n            //:todo: mouse wheel float value\r\n        x = Math.floor(_x);\r\n        y = Math.floor(_y);\r\n        x_rel = 0;\r\n        y_rel = 0;\r\n        state = InteractState.wheel;\r\n        button = MouseButton.none;\r\n        window_id = _window_id;\r\n        timestamp = _timestamp;\r\n\r\n    } //set_wheel\r\n\r\n} //MouseEvent\r\n\r\n/** A type for a named input event */\r\nenum InputEventType {\r\n\r\n        /** An unknown input event */\r\n    unknown;\r\n        /** A mouse input event */\r\n    mouse;\r\n        /** A touch input event */\r\n    touch;\r\n        /** A key input event */\r\n    key;\r\n        /** A gamepad input event */\r\n    gamepad;\r\n\r\n} //InputEventType\r\n\r\n/** Information about a named input event */\r\nclass InputEvent {\r\n\r\n    public function new() {\r\n\r\n    } //new\r\n\r\n        /** The name of the input event */\r\n    public var name (default, null): String;\r\n        /** The type of input this event was generated for */\r\n    public var type (default, null): InputEventType;\r\n        /** The state of the event */\r\n    public var state (default, null): InteractState;\r\n        /** null, unless type is `mouse` */\r\n    public var mouse_event (default, null): MouseEvent;\r\n        /** null, unless type is `key` */\r\n    public var key_event (default, null): KeyEvent;\r\n        /** null, unless type is `touch` */\r\n    public var touch_event (default, null): TouchEvent;\r\n        /** null, unless type is `gamepad` */\r\n    public var gamepad_event (default, null): GamepadEvent;\r\n\r\n    @:noCompletion\r\n    public function set_key(_name:String, _state:InteractState, _key_event:KeyEvent) {\r\n        set_common(_name, InputEventType.key, _state);\r\n        set_events(_key_event, null, null, null);\r\n    } //set_key\r\n\r\n    @:noCompletion\r\n    public function set_mouse(_name:String, _state:InteractState, _mouse_event:MouseEvent) {\r\n        set_common(_name, InputEventType.mouse, _state);\r\n        set_events(null, _mouse_event, null, null);\r\n    } //set_mouse\r\n\r\n    @:noCompletion\r\n    public function set_touch(_name:String, _state:InteractState, _touch_event:TouchEvent) {\r\n        set_common(_name, InputEventType.touch, _state);\r\n        set_events(null, null, _touch_event, null);\r\n    } //set_touch\r\n\r\n    @:noCompletion\r\n    public function set_gamepad(_name:String, _state:InteractState, _gamepad_event:GamepadEvent) {\r\n        set_common(_name, InputEventType.gamepad, _state);\r\n        set_events(null, null, null, _gamepad_event);\r\n    } //set_gamepad\r\n\r\n    @:noCompletion\r\n    public function set_unknown(_name:String, _state:InteractState) {\r\n        set_common(_name, InputEventType.unknown, _state);\r\n        set_events(null, null, null, null);\r\n    } //set_unknown\r\n\r\n    function set_common(_name:String, _type:InputEventType, _state:InteractState) {\r\n        name = _name;\r\n        type = _type;\r\n        state = _state;\r\n    } //set_common\r\n\r\n    function set_events(_key_event:KeyEvent, _mouse_event:MouseEvent, _touch_event:TouchEvent, _gamepad_event:GamepadEvent) {\r\n        key_event = _key_event;\r\n        mouse_event = _mouse_event;\r\n        touch_event = _touch_event;\r\n        gamepad_event = _gamepad_event;\r\n    } //set_events\r\n\r\n} //InputEvent\r\n","package luxe;\r\n\r\nimport luxe.Color;\r\nimport luxe.Entity;\r\nimport luxe.Vector;\r\nimport luxe.Rectangle;\r\nimport luxe.utils.Maths;\r\nimport luxe.resource.Resource;\r\n\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.geometry.QuadGeometry;\r\n\r\nimport phoenix.Shader;\r\nimport phoenix.Batcher;\r\nimport phoenix.Quaternion;\r\nimport phoenix.Texture;\r\n\r\nimport luxe.options.VisualOptions;\r\n\r\nimport luxe.Log.*;\r\n\r\nclass Visual extends Entity {\r\n\r\n\r\n        /** the size of this geometry (only makes sense for QuadGeometry) */\r\n    @:isVar public var size         (default,set) : Vector;\r\n        /** the geometry this visual contains */\r\n    @:isVar public var geometry     (default,set) : Geometry;\r\n        /** the geometry static flag. This is a hint on how to render the geometry for performance */\r\n    @:isVar public var locked       (default,set) : Bool = false;\r\n        /** the texture for the geometry */\r\n    @:isVar public var texture      (default,set) : Texture;\r\n        /** the shader for the geometry */\r\n    @:isVar public var shader       (default,set) : Shader;\r\n        /** the base color */\r\n    @:isVar public var color        (default,set) : Color;\r\n        /** the visibility */\r\n    @:isVar public var visible      (default,set) : Bool = true;\r\n        /** the geometry depth value (see guides)*/\r\n    @:isVar public var depth        (default,set) : Float = 0.0;\r\n        /** If not null, the geometry will be clipped to this rectangle region (in window viewport space). */\r\n    @:isVar public var clip_rect    (default,set) : Rectangle;\r\n        /** convenience: controls the rotation around the z axis, in radians. */\r\n    @:isVar public var radians      (get,set) : Float = 0.0;\r\n        /** convenience: controls the rotation around the z axis, in degrees. */\r\n    public var rotation_z           (get,set) : Float;\r\n\r\n        /** Set whether or not blending is disabled for this visual. */\r\n    public var blend_disabled        (get, set) : Bool;\r\n        /** Set the per geometry source blending. \r\n        This sets blend_src_alpha and blend_src_rgb,\r\n        and returns blend_src_alpha (the get isn't really logical) */\r\n    public var blend_src            (get, set) : BlendMode;\r\n        /** Set the per geometry source blending. \r\n        This sets blend_dest_alpha and blend_dest_rgb \r\n        and returns blend_dest_alpha (the get isn't really logical) */\r\n    public var blend_dest           (get, set) : BlendMode;\r\n        /** Set the per geometry source blending, for the alpha component */\r\n    public var blend_src_alpha      (get, set) : BlendMode;\r\n        /** Set the per geometry source blending, for the rgb components */\r\n    public var blend_src_rgb        (get, set) : BlendMode;\r\n        /** Set the per geometry destination blending, for the alpha component */\r\n    public var blend_dest_alpha     (get, set) : BlendMode;\r\n        /** Set the per geometry destination blending, for the rgb components */\r\n    public var blend_dest_rgb       (get, set) : BlendMode;\r\n\r\n        //private\r\n    var _rotation_euler : Vector;\r\n    var _rotation_quat : Quaternion;\r\n    var _has_custom_origin : Bool = false;\r\n\r\n        /** Create a new visual based on the given options */\r\n    public function new( _options:VisualOptions #if luxe_visual_pos, ?_pos_info:haxe.PosInfos #end ) {\r\n\r\n        assertnull(_options, 'Visual requires non-null options');\r\n\r\n            //cached values\r\n            //these need to be before super\r\n        _rotation_euler = new Vector();\r\n        _rotation_quat = new Quaternion();\r\n\r\n            //call the entity constructor\r\n        super( _options #if luxe_visual_pos, _pos_info #end);\r\n\r\n            //create the position value so we can exploit it a bit\r\n        color = new Color();\r\n        size = new Vector();\r\n\r\n            //texture\r\n        if(options.texture != null) {\r\n            texture = options.texture;\r\n        }\r\n            //shader\r\n        if(options.shader != null) {\r\n            shader = options.shader;\r\n        }\r\n            //color\r\n        if(options.color != null) {\r\n            color = options.color;\r\n        }\r\n            //depth\r\n        if(options.depth != null) {\r\n            depth = options.depth;\r\n        }\r\n            //visible\r\n        if(options.visible != null) {\r\n            visible = options.visible;\r\n        }\r\n\r\n            //size is interesting, as it's possibly based on texture\r\n\r\n            //user specified a size\r\n        if(options.size != null) {\r\n\r\n            size = options.size;\r\n                //the size is explicit, so make the geometry\r\n            _create_geometry();\r\n\r\n        } else {\r\n\r\n                //if the texture isn't invalid entirely\r\n            if(texture != null) {\r\n\r\n                size = new Vector(texture.width, texture.height);\r\n                _create_geometry();\r\n\r\n            } else {\r\n\r\n                    //default to a value big enough to see\r\n                size = new Vector(64,64);\r\n                _create_geometry();\r\n\r\n            } //texture !=null\r\n\r\n        } //\r\n\r\n    } //new\r\n\r\n    var _creating_geometry : Bool = false;\r\n    @:noCompletion public function _create_geometry() {\r\n\r\n            //if they give a geometry, don't create one\r\n        if(options.geometry == null) {\r\n\r\n            if(options.no_geometry == null || options.no_geometry == false) {\r\n\r\n                _creating_geometry = true;\r\n\r\n                var _batcher : Batcher = null;\r\n                if(options.no_batcher_add == null || options.no_batcher_add == false) {\r\n                    if(options.batcher != null) {\r\n                        _batcher = options.batcher;\r\n                    } else {\r\n                        _batcher = Luxe.renderer.batcher;\r\n                    }\r\n                }\r\n\r\n                    geometry = new QuadGeometry({\r\n                        id:name + '.visual',\r\n                        x:0,\r\n                        y:0,\r\n                        w:size.x,\r\n                        h:size.y,\r\n                        scale: new Vector(1,1,1),\r\n                        texture : texture,\r\n                        color : color,\r\n                        shader : shader,\r\n                        batcher : _batcher,\r\n                        depth : (options.depth == null) ? 0 : options.depth,\r\n                        visible : (options.visible == null) ? visible : options.visible\r\n                    });\r\n\r\n                _creating_geometry = false;\r\n\r\n                    //call the geometry create listener\r\n                on_geometry_created();\r\n\r\n            } //no_geometry is not present\r\n\r\n        } else {\r\n\r\n            geometry = options.geometry;\r\n\r\n        }\r\n\r\n            //default to the visual name\r\n        if(geometry != null) {\r\n            geometry.id = name + \".visual\";\r\n            geometry.transform.id = name + \".visual.transform\";\r\n        }\r\n\r\n            //custom provided origin will override any until now\r\n        if(options.origin != null) {\r\n            _has_custom_origin = true;\r\n            origin = options.origin;\r\n        }\r\n\r\n            //apply the rotation if any\r\n        if(options.rotation_z != null) {\r\n            rotation_z = options.rotation_z;\r\n        }\r\n\r\n    } //create_geometry\r\n\r\n    override public function ondestroy() {\r\n\r\n            //drop the geometry\r\n        if(geometry != null && geometry.added ) {\r\n            geometry.drop( true );\r\n        }\r\n\r\n            //clear our references to these\r\n        transform = null;\r\n        options = null;\r\n        geometry = null;\r\n        texture = null;\r\n        shader = null;\r\n        color = null;\r\n        size = null;\r\n        clip_rect = null;\r\n        _rotation_euler = null;\r\n        _rotation_quat = null;\r\n\r\n    } //ondestroy\r\n\r\n    function on_geometry_created() {\r\n\r\n        // geometry.transform.parent = transform;\r\n\r\n    } //on_geometry_created\r\n\r\n//Visibility properties\r\n\r\n    function set_visible(_v:Bool) {\r\n\r\n        visible = _v;\r\n\r\n            //careful\r\n        if(geometry != null) {\r\n            geometry.visible = visible;\r\n        }\r\n\r\n        return visible;\r\n\r\n    } //set_visible\r\n\r\n    function set_depth(_v:Float) {\r\n\r\n        if(geometry != null) {\r\n            geometry.depth = _v;\r\n        } //geometry\r\n\r\n        return depth = _v;\r\n\r\n    } //set_depth\r\n\r\n//Color properties\r\n\r\n    function set_color(_c:Color) {\r\n\r\n        if(color != null && geometry != null) {\r\n            geometry.color = _c;\r\n        }\r\n\r\n        return color = _c;\r\n\r\n    } //set_color\r\n\r\n    function set_texture(_t:Texture) {\r\n\r\n        if(geometry != null && geometry.texture != _t) {\r\n            geometry.texture = _t;\r\n        } //geometry!=null\r\n\r\n        return texture = _t;\r\n    }\r\n\r\n    function set_shader(_s:Shader) {\r\n\r\n        if(geometry != null && geometry.shader != _s) {\r\n            geometry.shader = _s;\r\n        } //geometry!=null\r\n\r\n        return shader = _s;\r\n    }\r\n\r\n//Geometry\r\n\r\n    var ignore_texture_on_geometry_change : Bool = false;\r\n\r\n    function set_geometry(_g:Geometry) : Geometry {\r\n\r\n            //same geometry?\r\n        if(geometry == _g) {\r\n            return geometry;\r\n        }\r\n\r\n            //kill the existing geometry first\r\n        if(geometry != null) {\r\n            geometry.drop();\r\n        }\r\n\r\n            //store the new one\r\n        geometry = _g;\r\n\r\n            //rebind it's colors and whatever else\r\n        if(geometry != null) {\r\n\r\n                //make sure it's attached\r\n            geometry.transform.parent = transform;\r\n\r\n            _verbose('    assign geometry transform as child : $geometry.id to $name');\r\n\r\n                //:todo: This block is dumb\r\n                //and was solving some obscure issue\r\n                //and needs to be redone as it\r\n                //causes more issues than it solves.\r\n                {\r\n                    if(_creating_geometry == false) {\r\n\r\n                        geometry.color = color;\r\n                        geometry.depth = depth;\r\n                        geometry.visible = visible;\r\n                        // geometry.shader = shader;\r\n\r\n                        if(!ignore_texture_on_geometry_change) {\r\n                            // geometry.texture = texture;\r\n                        }\r\n\r\n                    } //_creating_geometry == false\r\n                }\r\n\r\n        } //geometry != null\r\n\r\n        return geometry;\r\n\r\n    } //set_geometry\r\n\r\n\r\n//Transforms\r\n\r\n    override function set_parent_from_transform( _parent:Transform ) {\r\n\r\n        super.set_parent_from_transform( _parent );\r\n\r\n        if(geometry != null) {\r\n                //make sure it's attached\r\n            geometry.transform.parent = transform;\r\n        }\r\n\r\n    } //set_parent_from_transform\r\n\r\n    override function set_rotation_from_transform( _rotation:Quaternion ) {\r\n\r\n        super.set_rotation_from_transform(_rotation);\r\n\r\n            //update caches\r\n        _rotation_euler.setEulerFromQuaternion(_rotation);\r\n        _rotation_quat.copy(_rotation);\r\n\r\n    } //set_rotation_from_transform\r\n\r\n//Size\r\n\r\n    function set_size( _v:Vector ) : Vector {\r\n\r\n        size = _v;\r\n\r\n        if(size != null)\r\n            Vector.Listen( size, _size_change );\r\n\r\n        return size;\r\n\r\n    } //set_size\r\n\r\n//Blending\r\n    \r\n    inline function get_blend_disabled() : Bool          return geometry.blend_disabled;\r\n    inline function get_blend_src() : BlendMode         return geometry.blend_src_alpha;\r\n    inline function get_blend_dest() : BlendMode        return geometry.blend_dest_alpha;\r\n    inline function get_blend_src_alpha() : BlendMode   return geometry.blend_src_alpha;\r\n    inline function get_blend_src_rgb() : BlendMode     return geometry.blend_src_rgb;\r\n    inline function get_blend_dest_alpha() : BlendMode  return geometry.blend_dest_alpha;\r\n    inline function get_blend_dest_rgb() : BlendMode    return geometry.blend_dest_rgb;\r\n    \r\n    inline function set_blend_disabled(val:Bool)  {\r\n        geometry.blend_disabled = val;\r\n        return val;\r\n    }\r\n\r\n    inline function set_blend_src(val:BlendMode)  {\r\n        geometry.blend_src_alpha = val;\r\n        geometry.blend_src_rgb = val;\r\n        return val;\r\n    }\r\n\r\n    inline function set_blend_dest(val:BlendMode) {\r\n        geometry.blend_dest_alpha = val;\r\n        geometry.blend_dest_rgb = val;\r\n        return val;\r\n    }\r\n\r\n    inline function set_blend_src_alpha(val:BlendMode)  {\r\n        geometry.blend_src_alpha = val;\r\n        return val;\r\n    }\r\n\r\n    inline function set_blend_src_rgb(val:BlendMode)    {\r\n        geometry.blend_src_rgb = val;\r\n        return val;\r\n    }\r\n\r\n    inline function set_blend_dest_alpha(val:BlendMode) {\r\n        geometry.blend_dest_alpha = val;\r\n        return val;\r\n    }\r\n\r\n    inline function set_blend_dest_rgb(val:BlendMode)   {\r\n        geometry.blend_dest_rgb = val;\r\n        return val;\r\n    }\r\n\r\n\r\n//Rotation\r\n\r\n    function get_rotation_z() : Float {\r\n\r\n        return Maths.degrees(radians);\r\n\r\n    } //get_rotation\r\n\r\n    function set_rotation_z( _degrees:Float ) : Float {\r\n\r\n        radians = Maths.radians(_degrees);\r\n\r\n        return _degrees;\r\n\r\n    } //set_rotation_z\r\n\r\n    function set_radians(_r:Float) : Float {\r\n\r\n        _rotation_euler.z = _r;\r\n        _rotation_quat.setFromEuler( _rotation_euler );\r\n\r\n        rotation = _rotation_quat.clone();\r\n\r\n        return radians = _r;\r\n\r\n    } //set_radians\r\n\r\n    function get_radians() : Float {\r\n        return radians;\r\n    } //get_radians\r\n\r\n//Locked\r\n\r\n    function set_locked(_l:Bool) : Bool {\r\n\r\n        if(geometry != null) {\r\n            geometry.locked = _l;\r\n        }\r\n\r\n        return locked = _l;\r\n\r\n    } //set_locked\r\n\r\n\r\n//Geometry properties\r\n//Clip rect\r\n    function set_clip_rect(_val : Rectangle) : Rectangle {\r\n\r\n        if(geometry != null) {\r\n            geometry.clip_rect = _val;\r\n        }\r\n\r\n        return clip_rect = _val;\r\n    }\r\n\r\n//Size\r\n\r\n        //An internal callback for when x y or z on a size changes\r\n    function _size_change( _v:Float ) { this.set_size( size ); }\r\n\r\n} //Visual\r\n","package phoenix;\r\n\r\nimport luxe.utils.Maths;\r\nimport luxe.Log.*;\r\n\r\nclass Vector {\r\n\r\n    @:isVar public var x (default, set) : Float = 0;\r\n    @:isVar public var y (default, set) : Float = 0;\r\n    @:isVar public var z (default, set) : Float = 0;\r\n    @:isVar public var w (default, default) : Float = 0;\r\n\r\n    @:isVar public var length        (get, set) : Float;\r\n    @:isVar public var lengthsq      (get, null) : Float;\r\n    @:isVar public var angle2D       (get, set) : Float;\r\n    @:isVar public var normalized    (get, null) : Vector;\r\n    @:isVar public var inverted      (get, null) : Vector;\r\n\r\n    public var ignore_listeners : Bool = false;\r\n\r\n    @:isVar public var listen_x(default,default) : Float -> Void;\r\n    @:isVar public var listen_y(default,default) : Float -> Void;\r\n    @:isVar public var listen_z(default,default) : Float -> Void;\r\n\r\n    var _construct = false;\r\n\r\n    inline public function new( _x:Float = 0, _y:Float = 0, _z:Float = 0, _w:Float = 0 ) {\r\n\r\n        _construct = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n            z = _z;\r\n            w = _w;\r\n\r\n        _construct = false;\r\n\r\n    } //new\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function copy_from( _other:Vector ) {\r\n\r\n        set( _other.x, _other.y, _other.z, _other.w );\r\n\r\n        return this;\r\n\r\n    } //copy_from\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function set( _x:Float, _y:Float, _z:Float, _w:Float ) {\r\n\r\n        var prev = ignore_listeners;\r\n\r\n        ignore_listeners = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n            z = _z;\r\n            w = _w;\r\n\r\n        ignore_listeners = prev;\r\n\r\n        if(listen_x != null && !ignore_listeners) listen_x(x);\r\n        if(listen_y != null && !ignore_listeners) listen_y(y);\r\n        if(listen_z != null && !ignore_listeners) listen_z(z);\r\n\r\n        return this;\r\n\r\n    } //set\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function set_xy( _x:Float, _y:Float ) {\r\n\r\n        var prev = ignore_listeners;\r\n\r\n        ignore_listeners = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n\r\n        ignore_listeners = prev;\r\n\r\n        if(listen_x != null && !ignore_listeners) listen_x(x);\r\n        if(listen_y != null && !ignore_listeners) listen_y(y);\r\n\r\n        return this;\r\n\r\n    } //set_xy\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function set_xyz( _x:Float, _y:Float, _z:Float ) {\r\n\r\n        var prev = ignore_listeners;\r\n\r\n        ignore_listeners = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n            z = _z;\r\n\r\n        ignore_listeners = prev;\r\n\r\n        if(listen_x != null && !ignore_listeners) listen_x(x);\r\n        if(listen_y != null && !ignore_listeners) listen_y(y);\r\n        if(listen_z != null && !ignore_listeners) listen_z(z);\r\n\r\n        return this;\r\n\r\n    } //set_xyz\r\n\r\n        //_t is between 0 and 1\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function lerp_xy( _dest_x:Float, _dest_y:Float, _t: Float ) {\r\n\r\n        set_xy(\r\n            Maths.lerp(x, _dest_x, _t),\r\n            Maths.lerp(y, _dest_y, _t)\r\n        );\r\n\r\n        return this;\r\n\r\n    } //lerp_xy\r\n\r\n        //_t is between 0 and 1\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function lerp_xyz( _dest_x:Float, _dest_y:Float, _dest_z:Float, _t: Float ) {\r\n\r\n        set_xyz(\r\n            Maths.lerp(x, _dest_x, _t),\r\n            Maths.lerp(y, _dest_y, _t),\r\n            Maths.lerp(z, _dest_z, _t)\r\n        );\r\n\r\n        return this;\r\n\r\n    } //lerp_xyz\r\n\r\n        //_t is between 0 and 1\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function lerp( _other:Vector, _t: Float ) {\r\n\r\n        set_xyz(\r\n            Maths.lerp(x, _other.x, _t),\r\n            Maths.lerp(y, _other.y, _t),\r\n            Maths.lerp(z, _other.z, _t)\r\n        );\r\n\r\n        return this;\r\n\r\n    } //lerp\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function weighted_average_xy( _dest_x:Float, _dest_y:Float, _slowness:Float ) {\r\n\r\n        set_xy(\r\n            Maths.weighted_avg(x, _dest_x, _slowness),\r\n            Maths.weighted_avg(y, _dest_y, _slowness)\r\n        );\r\n\r\n        return this;\r\n\r\n    } //weighted_average_xy\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function weighted_average_xyz( _dest_x:Float, _dest_y:Float, _dest_z:Float, _slowness:Float ) {\r\n\r\n        set_xyz(\r\n            Maths.weighted_avg(x, _dest_x, _slowness),\r\n            Maths.weighted_avg(y, _dest_y, _slowness),\r\n            Maths.weighted_avg(z, _dest_z, _slowness)\r\n        );\r\n\r\n        return this;\r\n\r\n    } //weighted_average_xyz\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function int() {\r\n\r\n        set_xyz( Math.round(x), Math.round(y), Math.round(z) );\r\n\r\n        return this;\r\n\r\n    } //int\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function int_x() {\r\n\r\n        x = Math.round(x);\r\n\r\n        return this;\r\n\r\n    } //int_z\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function int_y() {\r\n\r\n        y = Math.round(y);\r\n\r\n        return this;\r\n\r\n    } //int_y\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function int_z() {\r\n\r\n        z = Math.round(z);\r\n\r\n        return this;\r\n\r\n    } //int_y\r\n\r\n    inline function toString() {\r\n\r\n        return \"{ x:\"+x + \", y:\" + y + \", z:\" + z  + \" }\" ;\r\n\r\n    } //toString\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function equals(other:Vector) {\r\n        return (x == other.x && y == other.y && z == other.z && w == other.w);\r\n    }\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function clone() {\r\n        return new Vector(x, y, z, w);\r\n    } //clone\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function normalize() {\r\n        return divideScalar( length );\r\n    } //normalize\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function dot(other:Vector) {\r\n\r\n        return x * other.x + y * other.y + z * other.z;\r\n\r\n    } //dot\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function cross( a:Vector, b:Vector ) {\r\n\r\n        set_xyz( a.y * b.z - a.z * b.y,\r\n                 a.z * b.x - a.x * b.z,\r\n                 a.x * b.y - a.y * b.x );\r\n\r\n        return this;\r\n\r\n    } //cross\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function invert() : Vector {\r\n\r\n            set_xyz(-x, -y, -z);\r\n\r\n        return this;\r\n\r\n    } //invert\r\n\r\n//Static Functions\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Add(a:Vector, b:Vector) {\r\n        return new Vector(\r\n            a.x + b.x,\r\n            a.y + b.y,\r\n            a.z + b.z\r\n        );\r\n    } //Add\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Subtract(a:Vector, b:Vector) {\r\n        return new Vector(\r\n            a.x - b.x,\r\n            a.y - b.y,\r\n            a.z - b.z\r\n        );\r\n    } //Subtract\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function MultiplyVector(a:Vector, b:Vector) : Vector {\r\n        return new Vector(\r\n            a.x * b.x,\r\n            a.y * b.y,\r\n            a.z * b.z\r\n        );\r\n    } //MultiplyVector\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function DivideVector(a:Vector, b:Vector) {\r\n        return new Vector(\r\n            a.x / b.x,\r\n            a.y / b.y,\r\n            a.z / b.z\r\n        );\r\n    } //DivideVector\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Multiply(a:Vector, b:Float) {\r\n        return new Vector(\r\n            a.x * b,\r\n            a.y * b,\r\n            a.z * b\r\n        );\r\n    } //Multiply\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Divide(a:Vector, b:Float) {\r\n        return new Vector(\r\n            a.x / b,\r\n            a.y / b,\r\n            a.z / b\r\n        );\r\n    } //Divide\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function AddScalar(a:Vector, b:Float) {\r\n        return new Vector(\r\n            a.x + b,\r\n            a.y + b,\r\n            a.z + b\r\n        );\r\n    } //AddScalar\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function SubtractScalar(a:Vector, b:Float) {\r\n        return new Vector(\r\n            a.x - b,\r\n            a.y - b,\r\n            a.z - b\r\n        );\r\n    } //SubtractScalar\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Cross(a:Vector, b:Vector) {\r\n        return new Vector(\r\n             a.y * b.z - a.z * b.y,\r\n             a.z * b.x - a.x * b.z,\r\n             a.x * b.y - a.y * b.x\r\n        );\r\n    } //Cross\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function RotationTo(a:Vector,b:Vector) {\r\n\r\n        return a.rotationTo(b);\r\n\r\n    } //RotationTo\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Listen( _v:Vector, listener ) {\r\n\r\n        _v.listen_x = listener;\r\n        _v.listen_y = listener;\r\n        _v.listen_z = listener;\r\n\r\n    } //Listen\r\n\r\n        //_t is between 0 and 1\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Lerp( a:Vector, b:Vector, t: Float ) {\r\n\r\n        return new Vector(\r\n            Maths.lerp(a.x, b.x, t),\r\n            Maths.lerp(a.y, b.y, t),\r\n            Maths.lerp(a.z, b.z, t)\r\n        );\r\n\r\n    } //Lerp\r\n\r\n// Operations\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function add(other:Vector) {\r\n\r\n        assertnull(other);\r\n\r\n        set_xyz( x + other.x, y + other.y, z + other.z );\r\n\r\n        return this;\r\n\r\n    } //add\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function add_xyz( _x:Float = 0, _y:Float = 0, _z:Float = 0 ) {\r\n\r\n        set_xyz( x + _x, y + _y, z + _z);\r\n\r\n        return this;\r\n\r\n    } //add_xyz\r\n\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function subtract(other:Vector) {\r\n\r\n        assertnull(other);\r\n\r\n        set_xyz( x - other.x, y - other.y, z - other.z );\r\n\r\n        return this;\r\n\r\n    } //subtract\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function subtract_xyz( _x:Float = 0, _y:Float = 0, _z:Float = 0 ) {\r\n\r\n        set_xyz( x - _x, y - _y, z - _z);\r\n\r\n        return this;\r\n\r\n    } //subtract_xyz\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function multiply(other:Vector) {\r\n\r\n        assertnull(other);\r\n\r\n        set_xyz( x * other.x, y * other.y, z * other.z );\r\n\r\n        return this;\r\n\r\n    } //multiply\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function multiply_xyz( _x:Float = 1, _y:Float = 1, _z:Float = 1 ) {\r\n\r\n        set_xyz( x * _x, y * _y, z * _z);\r\n\r\n        return this;\r\n\r\n    } //multiply_xyz\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function divide(other:Vector) {\r\n\r\n        assertnull(other);\r\n        assert(other.x != 0, 'Vector: division by zero (other.x)');\r\n        assert(other.y != 0, 'Vector: division by zero (other.y)');\r\n\r\n        set_xyz( x / other.x, y / other.y, z / other.z );\r\n\r\n        return this;\r\n\r\n    } //divide\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function divide_xyz( _x:Float = 1, _y:Float = 1, _z:Float = 1 ) {\r\n\r\n        assert(_x != 0, 'Vector.divide_xyz: division by zero (x)');\r\n        assert(_y != 0, 'Vector.divide_xyz: division by zero (y)');\r\n        assert(_z != 0, 'Vector.divide_xyz: division by zero (z)');\r\n\r\n        set_xyz( x / _x, y / _y, z / _z);\r\n\r\n        return this;\r\n\r\n    } //multiply_xyz\r\n\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function addScalar( v:Float ) {\r\n\r\n        set_xyz( x + v, y + v, z + v );\r\n\r\n        return this;\r\n\r\n    } //addScalar\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function subtractScalar( v:Float ) {\r\n\r\n        set_xyz( x - v, y - v, z - v );\r\n\r\n        return this;\r\n\r\n    } //subtractScalar\r\n\r\n     #if !luxe_no_hotpath_inline @:extern inline #end\r\n     public function multiplyScalar( v:Float ) {\r\n\r\n        set_xyz( x * v, y * v, z * v );\r\n\r\n        return this;\r\n\r\n    } //multiplyScalar\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function divideScalar( v:Float ) : Vector {\r\n\r\n        if ( v != 0 ) {\r\n\r\n            set_xyz( x / v, y / v, z / v );\r\n\r\n        } else {\r\n\r\n            set_xyz(0, 0, 0);\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    } //divideScalar\r\n\r\n\r\n//Properties\r\n\r\n    #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function set_length( value:Float ) : Float {\r\n\r\n        normalize().multiplyScalar( value );\r\n\r\n        return value;\r\n\r\n    } //set_length\r\n\r\n    #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function get_length() : Float {\r\n\r\n        return Math.sqrt( x * x + y * y + z * z );\r\n\r\n    } //get_length\r\n\r\n\r\n    #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function get_lengthsq() : Float {\r\n\r\n        return x * x + y * y + z * z;\r\n\r\n    } //get_lengthsq\r\n\r\n    #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function get_normalized() {\r\n\r\n        return Vector.Divide( this, length );\r\n\r\n    } //get_normalized\r\n\r\n    // #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function set_x(_x:Float) : Float {\r\n\r\n        x = _x;\r\n\r\n        if(_construct) return x;\r\n\r\n            if(listen_x != null && !ignore_listeners) listen_x(_x);\r\n\r\n        return x;\r\n\r\n    } //set_x\r\n\r\n    // #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function set_y(_y:Float) : Float {\r\n\r\n        y = _y;\r\n\r\n        if(_construct) return y;\r\n\r\n            if(listen_y != null && !ignore_listeners) listen_y(_y);\r\n\r\n        return y;\r\n\r\n    } //set_y\r\n\r\n    // #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function set_z(_z:Float) : Float {\r\n\r\n        z = _z;\r\n\r\n        if(_construct) return z;\r\n\r\n            if(listen_z != null && !ignore_listeners) listen_z(_z);\r\n\r\n        return z;\r\n\r\n    } //set_z\r\n\r\n    #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function get_inverted() : Vector {\r\n\r\n        return new Vector(-x,-y,-z);\r\n\r\n    } //get_inverted\r\n\r\n\r\n        //Changes the angle of the vector.\r\n        //X and Y will change, length stays the same.\r\n    // #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function set_angle2D( value : Float ) : Float {\r\n\r\n        var len:Float = length;\r\n\r\n            set_xy(Math.cos(value) * len, Math.sin(value) * len);\r\n\r\n        return value;\r\n    }\r\n\r\n        //Get the angle of this vector.\r\n    #if !luxe_no_hotpath_inline @:extern #end\r\n    inline function get_angle2D():Float {\r\n\r\n        return Math.atan2(y, x);\r\n\r\n    }\r\n\r\n//Convenience functions\r\n\r\n        //Sets the length under the given value.\r\n        //Nothing is done if the vector is already shorter.\r\n        //max The max length this vector can be.\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function truncate( max:Float ) : Vector {\r\n\r\n        length = Math.min(max, length);\r\n\r\n        return this;\r\n\r\n    } //truncate\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function rotationTo( other:Vector ) : Float {\r\n        var theta =  Math.atan2(  other.x - x , other.y - y );\r\n        var r = -(180.0 + (theta*180.0/Math.PI));\r\n        return r;\r\n    }\r\n\r\n//Transforms\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function applyQuaternion( q:Quaternion ) : Vector {\r\n\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n            set_xyz( ix * qw + iw * -qx + iy * -qz - iz * -qy,\r\n                     iy * qw + iw * -qy + iz * -qx - ix * -qz,\r\n                     iz * qw + iw * -qz + ix * -qy - iy * -qx );\r\n\r\n        return this;\r\n\r\n    } //applyQuaternion\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function applyProjection( m:Matrix ) : Vector {\r\n\r\n        var e = m.elements;\r\n        var x = this.x, y = this.y, z = this.z;\r\n        var d:Float = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\r\n\r\n            set_xyz( (e[0] * x + e[4] * y + e[8] * z + e[12]) * d,\r\n                     (e[1] * x + e[5] * y + e[9] * z + e[13]) * d,\r\n                     (e[2] * x + e[6] * y + e[10] * z + e[14]) * d );\r\n\r\n        return this;\r\n\r\n    } //applyProjection\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function transform( _m:Matrix ) : Vector {\r\n\r\n        var _x = x;\r\n        var _y = y;\r\n        var _z = z;\r\n\r\n        var e = _m.elements;\r\n\r\n            set_xyz( e[0] * _x + e[4] * _y + e[8]  * _z + e[12],\r\n                     e[1] * _x + e[5] * _y + e[9]  * _z + e[13],\r\n                     e[2] * _x + e[6] * _y + e[10] * _z + e[14] );\r\n\r\n        return this;\r\n\r\n    } //transform\r\n    \r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function transformDirection( m:Matrix ) : Vector {\r\n\r\n        var e = m.elements;\r\n        var x = this.x, y = this.y, z = this.z;\r\n\r\n            set_xyz( e[0] * x + e[4] * y + e[8] * z,\r\n                     e[1] * x + e[5] * y + e[9] * z,\r\n                     e[2] * x + e[6] * y + e[10] * z );\r\n\r\n        normalize();\r\n\r\n        return this;\r\n\r\n    } //transformDirection\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function setEulerFromRotationMatrix (m:Matrix, order:ComponentOrder = XYZ) : Vector {\r\n\r\n        var te = m.elements;\r\n        var m11 = te[0], m12 = te[4], m13 = te[8];\r\n        var m21 = te[1], m22 = te[5], m23 = te[9];\r\n        var m31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n        var _x = x;\r\n        var _y = y;\r\n        var _z = z;\r\n\r\n        if (order == XYZ) {\r\n\r\n            _y = Math.asin( Maths.clamp( m13, -1, 1 ) );\r\n\r\n            if (Math.abs(m13) < 0.99999)\r\n            {\r\n                _x = Math.atan2( -m23, m33);\r\n                _z = Math.atan2( -m12, m11);\r\n            } else {\r\n                _x = Math.atan2( m32, m22 );\r\n                _z = 0;\r\n            }\r\n\r\n        }  else if ( order == YXZ ) {\r\n\r\n            _x = Math.asin( -Maths.clamp( m23, -1, 1 ) );\r\n\r\n            if ( Math.abs( m23 ) < 0.99999 ) {\r\n                _y = Math.atan2( m13, m33 );\r\n                _z = Math.atan2( m21, m22 );\r\n            } else {\r\n                _y = Math.atan2( -m31, m11 );\r\n                _z = 0;\r\n            }\r\n\r\n        } else if ( order == ZXY ) {\r\n\r\n            _x = Math.asin( Maths.clamp( m32, -1, 1 ) );\r\n\r\n            if ( Math.abs( m32 ) < 0.99999 ) {\r\n                _y = Math.atan2( -m31, m33 );\r\n                _z = Math.atan2( -m12, m22 );\r\n            } else {\r\n                _y = 0;\r\n                _z = Math.atan2( m21, m11 );\r\n            }\r\n\r\n        } else if ( order == ZYX ) {\r\n\r\n            _y = Math.asin( -Maths.clamp( m31, -1, 1 ) );\r\n\r\n            if ( Math.abs( m31 ) < 0.99999 ) {\r\n                _x = Math.atan2( m32, m33 );\r\n                _z = Math.atan2( m21, m11 );\r\n            } else {\r\n                _x = 0;\r\n                _z = Math.atan2( -m12, m22 );\r\n            }\r\n\r\n        } else if ( order == YZX ) {\r\n\r\n            _z = Math.asin( Maths.clamp( m21, -1, 1 ) );\r\n\r\n            if ( Math.abs( m21 ) < 0.99999 ) {\r\n                _x = Math.atan2( -m23, m22 );\r\n                _y = Math.atan2( -m31, m11 );\r\n            } else {\r\n                _x = 0;\r\n                _y = Math.atan2( m13, m33 );\r\n            }\r\n\r\n        } else if ( order == XZY ) {\r\n\r\n            _z = Math.asin( -Maths.clamp( m12, -1, 1 ) );\r\n\r\n            if ( Math.abs( m12 ) < 0.99999 ) {\r\n                _x = Math.atan2( m32, m22 );\r\n                _y = Math.atan2( m13, m11 );\r\n            } else {\r\n                _x = Math.atan2( -m23, m33 );\r\n                _y = 0;\r\n            }\r\n\r\n        } //order\r\n\r\n        set_xyz(_x, _y, _z);\r\n\r\n        return this;\r\n\r\n    } //setEulerFromRotationMatrix\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function setEulerFromQuaternion (q:Quaternion, order:ComponentOrder = XYZ) : Vector {\r\n\r\n        var sqx : Float = q.x * q.x;\r\n        var sqy : Float = q.y * q.y;\r\n        var sqz : Float = q.z * q.z;\r\n        var sqw : Float = q.w * q.w;\r\n\r\n        var _x = x;\r\n        var _y = y;\r\n        var _z = z;\r\n\r\n        if (order == XYZ) {\r\n            _x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );\r\n            _y = Math.asin(  Maths.clamp( 2 * ( q.x * q.z + q.y * q.w ), -1, 1 ) );\r\n            _z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );\r\n        } else if ( order ==  YXZ ) {\r\n            _x = Math.asin(  Maths.clamp( 2 * ( q.x * q.w - q.y * q.z ), -1, 1 ) );\r\n            _y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );\r\n            _z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );\r\n        } else if ( order == ZXY ) {\r\n            _x = Math.asin(  Maths.clamp( 2 * ( q.x * q.w + q.y * q.z ), -1, 1 ) );\r\n            _y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );\r\n            _z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n        } else if ( order == ZYX ) {\r\n            _x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );\r\n            _y = Math.asin(  Maths.clamp( 2 * ( q.y * q.w - q.x * q.z ), -1, 1 ) );\r\n            _z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n        } else if ( order == YZX ) {\r\n            _x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );\r\n            _y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );\r\n            _z = Math.asin(  Maths.clamp( 2 * ( q.x * q.y + q.z * q.w ), -1, 1 ) );\r\n        } else if ( order == XZY ) {\r\n            _x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );\r\n            _y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );\r\n            _z = Math.asin(  Maths.clamp( 2 * ( q.z * q.w - q.x * q.y ), -1, 1 ) );\r\n        } //order\r\n\r\n        set_xyz(_x,_y,_z);\r\n\r\n        return this;\r\n\r\n    } //setEulerFromQuaternion\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function degrees() : Vector {\r\n\r\n        set_xyz( Maths.degrees(x), Maths.degrees(y), Maths.degrees(z) );\r\n\r\n        return this;\r\n\r\n    } //degrees\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function radians() : Vector {\r\n\r\n        set_xyz( Maths.radians(x), Maths.radians(y), Maths.radians(z) );\r\n\r\n        return this;\r\n\r\n    } //radians\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Degrees( _radian_vector:Vector ) : Vector {\r\n\r\n        return _radian_vector.clone().degrees();\r\n\r\n    } //Degrees\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public static function Radians( _degree_vector:Vector ) : Vector {\r\n\r\n        return _degree_vector.clone().radians();\r\n\r\n    } //Radians\r\n\r\n} //Vector class\r\n\r\n\r\n\r\n@:enum abstract ComponentOrder(Int) from Int to Int {\r\n\r\n    var XYZ = 0;\r\n    var YXZ = 1;\r\n    var ZXY = 2;\r\n    var ZYX = 3;\r\n    var YZX = 4;\r\n    var XZY = 5;\r\n\r\n} //ComponentOrder\r\n\r\n\r\n@:forward\r\nabstract Vec(Vector) from Vector to Vector {\r\n\r\n    inline public function new(?_x,?_y,?_z,?_w) {\r\n        this = new Vector(_x,_y,_z,_w);\r\n    }\r\n//multiply\r\n    @:communitative @:op(A * B) static inline function _multiply(lhs:Vec, rhs:Vec) : Vec {\r\n        return Vector.MultiplyVector(lhs, rhs);\r\n    }\r\n    @:communitative @:op(A * B) static inline function _multiply_scalar(lhs:Vec, rhs:Float) : Vec {\r\n        return Vector.Multiply(lhs, rhs);\r\n    }\r\n    @:communitative @:op(A * B) static inline function _multiply_scalar_int(lhs:Vec, rhs:Int) : Vec {\r\n        return Vector.Multiply(lhs, rhs);\r\n    }\r\n// divide\r\n    @:communitative @:op(A / B) static inline function _divide(lhs:Vec, rhs:Vec) : Vec {\r\n        return Vector.DivideVector(lhs, rhs);\r\n    }\r\n    @:communitative @:op(A / B) static inline function _divide_scalar(lhs:Vec, rhs:Float) : Vec {\r\n        return Vector.Divide(lhs, rhs);\r\n    }\r\n    @:communitative @:op(A / B) static inline function _divide_scalar_int(lhs:Vec, rhs:Int) : Vec {\r\n        return Vector.Divide(lhs, rhs);\r\n    }\r\n// add\r\n    @:communitative @:op(A + B) static inline function _add(lhs:Vec, rhs:Vec) : Vec {\r\n        return Vector.Add(lhs, rhs);\r\n    }\r\n    @:communitative @:op(A + B) static inline function _add_scalar(lhs:Vec, rhs:Float) : Vec {\r\n        return Vector.AddScalar(lhs, rhs);\r\n    }\r\n    @:communitative @:op(A + B) static inline function _add_scalar_int(lhs:Vec, rhs:Int) : Vec {\r\n        return Vector.AddScalar(lhs, rhs);\r\n    }\r\n// subract\r\n    @:communitative @:op(A - B) static inline function _subtract(lhs:Vec, rhs:Vec) : Vec {\r\n        return Vector.Subtract(lhs,rhs);\r\n    }\r\n    @:communitative @:op(A - B) static inline function _subtract_scalar(lhs:Vec, rhs:Float) : Vec {\r\n        return Vector.SubtractScalar(lhs,rhs);\r\n    }\r\n    @:communitative @:op(A - B) static inline function _subtract_scalar_int(lhs:Vec, rhs:Int) : Vec {\r\n        return Vector.SubtractScalar(lhs,rhs);\r\n    }\r\n} //Vec\r\n","package luxe;\r\n\r\nimport luxe.Color;\r\nimport luxe.Rectangle;\r\nimport luxe.Sprite;\r\nimport luxe.Vector;\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.QuadPackGeometry;\r\nimport phoenix.geometry.QuadGeometry;\r\nimport phoenix.geometry.TextureCoord;\r\n\r\nimport luxe.options.NineSliceOptions;\r\n\r\nprivate typedef Slice = {\r\n    pos : Vector,\r\n    width : Float,\r\n    height : Float,\r\n    source_x : Float,\r\n    source_y : Float,\r\n    source_width : Float,\r\n    source_height : Float,\r\n    geometry_id : Int\r\n};\r\n\r\n/** A nineslice based sprite, for scaling */\r\nclass NineSlice extends luxe.Visual {\r\n\r\n    public var top : Float = 32;\r\n    public var left : Float = 32;\r\n    public var right : Float = 32;\r\n    public var width : Float = 0.0;\r\n    public var bottom : Float = 32;\r\n    public var height : Float = 0.0;\r\n    public var source_x : Float = 0.0;\r\n    public var source_y : Float = 0.0;\r\n    public var source_w : Float = 0.0;\r\n    public var source_h : Float = 0.0;\r\n    public var is_set : Bool = false;\r\n\r\n    @:noCompletion public var midwidth : Float = 0.0;\r\n    @:noCompletion public var midheight : Float = 0.0;\r\n    @:noCompletion public var slices : Array<Slice>;\r\n    @:noCompletion public var added : Bool = false;\r\n    @:noCompletion public var nineslice_options : NineSliceOptions;\r\n    @:noCompletion public var _geometry : QuadPackGeometry;\r\n\r\n    var _batcher : Batcher;\r\n\r\n        /** create a new nineslice with given options */\r\n    public function new( _options:NineSliceOptions ) {\r\n\r\n            //default to internal batcher\r\n        slices = [];\r\n\r\n            //we need to tell the visual not to create geometry ,\r\n            //because we create our own from here.\r\n        if(_options == null) {\r\n            _options = {\r\n                no_geometry : true,\r\n            }\r\n        } else {\r\n            _options.no_geometry = true;\r\n        }\r\n\r\n        nineslice_options = _options;\r\n\r\n        if(_options.batcher != null) {\r\n            _batcher = _options.batcher;\r\n        } else {\r\n            _batcher = Luxe.renderer.batcher;\r\n        }\r\n\r\n            //visual options to parent\r\n        super(_options);\r\n\r\n            //now local options\r\n        if(_options.top != null) top = _options.top;\r\n        if(_options.left != null) left = _options.left;\r\n        if(_options.right != null) right = _options.right;\r\n        if(_options.bottom != null) bottom = _options.bottom;\r\n\r\n        if(_options.source_x != null) { source_x = _options.source_x; }\r\n        if(_options.source_y != null) { source_y = _options.source_y; }\r\n        if(_options.source_w != null) {\r\n            source_w = _options.source_w;\r\n        } else {\r\n            source_w = texture.width;\r\n        }\r\n\r\n        if(_options.source_h != null) {\r\n            source_h = _options.source_h;\r\n        } else {\r\n            source_h = texture.height;\r\n        }\r\n\r\n        geometry = null;\r\n\r\n    } //new\r\n\r\n    public function lock() {\r\n        if(is_set && _geometry != null) {\r\n            _geometry.locked = true;\r\n        }\r\n    } //lock\r\n\r\n    public function dirty() {\r\n        if(is_set && _geometry != null) {\r\n            _geometry.dirty = true;\r\n        }\r\n    } //dirty\r\n\r\n    @:noCompletion public function update_size(_width:Float, _height:Float) {\r\n\r\n        width = _width;\r\n        height = _height;\r\n\r\n        midwidth = Math.abs(width - left - right);\r\n        midheight = Math.abs(height - top - bottom);\r\n\r\n        //top left\r\n        slices[0].source_width  = left;\r\n        slices[0].source_height = top;\r\n        slices[0].source_x = source_x;\r\n        slices[0].source_y = source_y;\r\n        slices[0].pos.set_xy(0,0);\r\n        slices[0].width = left;\r\n        slices[0].height = top;\r\n\r\n        //top middle\r\n        slices[1].source_width  = source_w - left - right;\r\n        slices[1].source_height = top;\r\n        slices[1].source_x = source_x+left;\r\n        slices[1].source_y = source_y;\r\n        slices[1].pos.set_xy(left,0);\r\n        slices[1].width = width - left - right;\r\n        slices[1].height = top;\r\n\r\n        //top right\r\n        slices[2].source_width  = right;\r\n        slices[2].source_height = top;\r\n        slices[2].source_x = source_x+ (source_w - right);\r\n        slices[2].source_y = source_y;\r\n        slices[2].pos.set_xy(left + midwidth,0);\r\n        slices[2].width = right;\r\n        slices[2].height = top;\r\n\r\n\r\n        //middle left\r\n        slices[3].source_width  = left;\r\n        slices[3].source_height = source_h - top - bottom;\r\n        slices[3].source_x = source_x;\r\n        slices[3].source_y = source_y+top;\r\n        slices[3].pos.set_xy(0,top);\r\n        slices[3].width = left;\r\n        slices[3].height = height - top - bottom;\r\n\r\n        //middle middle\r\n        slices[4].source_width  = source_w - left - right;\r\n        slices[4].source_height = source_h - top - bottom;\r\n        slices[4].source_x = source_x+left;\r\n        slices[4].source_y = source_y+top;\r\n        slices[4].pos.set_xy(left,top);\r\n        slices[4].width = width - left - right;\r\n        slices[4].height = height - top - bottom;\r\n\r\n        //middle right\r\n        slices[5].source_width  = right;\r\n        slices[5].source_height = source_h - top - bottom;\r\n        slices[5].source_x = source_x+(source_w - right);\r\n        slices[5].source_y = source_y+top;\r\n        slices[5].pos.set_xy(left + midwidth,top);\r\n        slices[5].width = right;\r\n        slices[5].height = height - top - bottom;\r\n\r\n\r\n        //bottom left\r\n        slices[6].source_width  = left;\r\n        slices[6].source_height = bottom;\r\n        slices[6].source_x = source_x;\r\n        slices[6].source_y = source_y+ (source_h - bottom);\r\n        slices[6].pos.set_xy(0,top + midheight);\r\n        slices[6].width = left;\r\n        slices[6].height = bottom;\r\n\r\n        //bottom middle\r\n        slices[7].source_width  = source_w - left - right;\r\n        slices[7].source_height = bottom;\r\n        slices[7].source_x = source_x+left;\r\n        slices[7].source_y = source_y+(source_h - bottom);\r\n        slices[7].pos.set_xy(left,top + midheight);\r\n        slices[7].width = width - left - right;\r\n        slices[7].height = bottom;\r\n\r\n        //bottom right\r\n        slices[8].source_width  = right;\r\n        slices[8].source_height = bottom;\r\n        slices[8].source_x = source_x+(source_w - right);\r\n        slices[8].source_y = source_y+(source_h - bottom);\r\n        slices[8].pos.set_xy(left + midwidth, top + midheight);\r\n        slices[8].width = right;\r\n        slices[8].height = bottom;\r\n\r\n    } //update_size\r\n\r\n    @:noCompletion public function set(_width:Float, _height:Float) {\r\n\r\n        if(added) {\r\n            _geometry.drop();\r\n            added = false;\r\n        }\r\n\r\n            //clear the slices\r\n        slices.splice(0,slices.length);\r\n        width = _width;\r\n        height = _height;\r\n\r\n        midwidth = Math.abs(width - left - right);\r\n        midheight = Math.abs(height - top - bottom);\r\n\r\n            //top left\r\n        slices.push({\r\n            source_width  : left,\r\n            source_height : top,\r\n            source_x : source_x,\r\n            source_y : source_y,\r\n            pos : new Vector(0,0),\r\n            width : left,\r\n            height : top,\r\n            geometry_id : 0\r\n        });\r\n            //top middle\r\n        slices.push({\r\n            source_width  : source_w - left - right,\r\n            source_height : top,\r\n            source_x : source_x+left,\r\n            source_y : source_y,\r\n            pos : new Vector(left,0),\r\n            width : width - left - right,\r\n            height : top,\r\n            geometry_id : 0\r\n        });\r\n            //top right\r\n        slices.push({\r\n            source_width  : right,\r\n            source_height : top,\r\n            source_x : source_x+ (source_w - right),\r\n            source_y : source_y,\r\n            pos : new Vector(left + midwidth,0),\r\n            width : right,\r\n            height : top,\r\n            geometry_id : 0\r\n        });\r\n\r\n\r\n            //middle left\r\n        slices.push({\r\n            source_width  : left,\r\n            source_height : source_h - top - bottom,\r\n            source_x : source_x,\r\n            source_y : source_y+top,\r\n            pos : new Vector(0,top),\r\n            width : left,\r\n            height : height - top - bottom,\r\n            geometry_id : 0\r\n        });\r\n            //middle middle\r\n        slices.push({\r\n            source_width  : source_w - left - right,\r\n            source_height : source_h - top - bottom,\r\n            source_x : source_x+left,\r\n            source_y : source_y+top,\r\n            pos : new Vector(left,top),\r\n            width : width - left - right,\r\n            height : height - top - bottom,\r\n            geometry_id : 0\r\n        });\r\n            //middle right\r\n        slices.push({\r\n            source_width  : right,\r\n            source_height : source_h - top - bottom,\r\n            source_x : source_x+(source_w - right),\r\n            source_y : source_y+top,\r\n            pos : new Vector(left + midwidth,top),\r\n            width : right,\r\n            height : height - top - bottom,\r\n            geometry_id : 0\r\n        });\r\n\r\n\r\n            //bottom left\r\n        slices.push({\r\n            source_width  : left,\r\n            source_height : bottom,\r\n            source_x : source_x,\r\n            source_y : source_y+ (source_h - bottom),\r\n            pos : new Vector(0,top + midheight),\r\n            width : left,\r\n            height : bottom,\r\n            geometry_id : 0\r\n        });\r\n            //bottom middle\r\n        slices.push({\r\n            source_width  : source_w - left - right,\r\n            source_height : bottom,\r\n            source_x : source_x+left,\r\n            source_y : source_y+(source_h - bottom),\r\n            pos : new Vector(left,top + midheight),\r\n            width : width - left - right,\r\n            height : bottom,\r\n            geometry_id : 0\r\n        });\r\n            //bottom right\r\n        slices.push({\r\n            source_width  : right,\r\n            source_height : bottom,\r\n            source_x : source_x+(source_w - right),\r\n            source_y : source_y+(source_h - bottom),\r\n            pos : new Vector(left + midwidth, top + midheight),\r\n            width : right,\r\n            height : bottom,\r\n            geometry_id : 0\r\n        });\r\n\r\n        is_set = true;\r\n\r\n    } //set\r\n\r\n    override function set_size( _v : Vector ) {\r\n\r\n        if(_v == null) {\r\n            return super.set_size(_v);\r\n        }\r\n\r\n        if(!is_set) {\r\n            return super.set_size(_v);\r\n        }\r\n\r\n            //update the values\r\n        update_size(_v.x, _v.y);\r\n            //update the vertices\r\n        for(slice in slices) {\r\n            if(_geometry != null) {\r\n                _geometry.quad_resize(slice.geometry_id , new Rectangle( slice.pos.x, slice.pos.y, slice.width, slice.height ));\r\n            } //_geometry\r\n        }\r\n\r\n        return super.set_size(_v);\r\n\r\n    } //set_size\r\n\r\n    function _create(_pos:Vector, _w:Float, _h:Float, ?_reset:Bool = false) {\r\n\r\n        if(!is_set || _reset) {\r\n            set(_w, _h);\r\n        }\r\n\r\n        var _color = new Color();\r\n\r\n        _geometry = new QuadPackGeometry({\r\n            texture : texture,\r\n            color : _color,\r\n            depth : nineslice_options.depth,\r\n            visible : nineslice_options.visible,\r\n            batcher : _batcher\r\n        });\r\n\r\n        for(slice in slices) {\r\n\r\n            slice.geometry_id = _geometry.quad_add({\r\n                x: slice.pos.x,\r\n                y: slice.pos.y,\r\n                w: slice.width,\r\n                h: slice.height,\r\n                color: nineslice_options.color,\r\n                uv: new Rectangle(slice.source_x, slice.source_y, slice.source_width, slice.source_height)\r\n            });\r\n\r\n            // _geometry.quad_pos( slice.geometry_id, new Vector(slice.pos.x, slice.pos.y) );\r\n\r\n        } //each slice\r\n\r\n        _geometry.id = name + '.NineSlice.' + _geometry.id;\r\n        geometry = _geometry;\r\n        pos = _pos;\r\n\r\n        added = true;\r\n        is_set = true;\r\n\r\n    } // _create\r\n\r\n    public function create( _pos:Vector, _w:Float, _h:Float, ?_reset:Bool = false ) {\r\n\r\n        if(texture != null) {\r\n            _create(_pos,_w,_h,_reset);\r\n        }\r\n\r\n    } //create\r\n\r\n\r\n} //NineSlice\r\n","package luxe;\r\n\r\nimport luxe.Emitter;\r\nimport luxe.Resources;\r\nimport luxe.resource.Resource;\r\nimport luxe.options.ResourceOptions;\r\nimport luxe.options.ParcelOptions;\r\nimport snow.api.Promise;\r\nimport phoenix.Texture;\r\nimport luxe.Log.*;\r\n\r\n@:enum abstract ParcelEvent(Int) from Int to Int {\r\n    var unknown     = 0;\r\n    var load        = 1;\r\n    var unload      = 2;\r\n    var progress    = 3;\r\n    var complete    = 4;\r\n    var failed      = 5;\r\n}\r\n\r\ntypedef ParcelChange = {\r\n    load_id: String,\r\n    id: String,\r\n    index: Int,\r\n    total: Int,\r\n    ? error: Dynamic,\r\n    ? resource: Resource,\r\n}\r\n\r\ntypedef ItemInfo = {\r\n    id: String\r\n}\r\n\r\ntypedef BytesInfo = ItemInfo;\r\ntypedef TextInfo = ItemInfo;\r\ntypedef JSONInfo = ItemInfo;\r\n\r\ntypedef TextureInfo = {\r\n    > ItemInfo,\r\n    > LoadTextureOptions,\r\n}\r\n\r\ntypedef ShaderInfo = {\r\n    > ItemInfo,\r\n    > LoadShaderOptions,\r\n}\r\n\r\ntypedef SoundInfo = {\r\n    > ItemInfo,\r\n    is_stream: Bool\r\n}\r\n\r\ntypedef BitmapFontInfo = {\r\n    > ItemInfo,\r\n    > LoadFontOptions,\r\n}\r\n\r\ntypedef ParcelList = {\r\n    bytes: Array<BytesInfo>,\r\n    texts: Array<TextInfo>,\r\n    jsons: Array<JSONInfo>,\r\n    textures: Array<TextureInfo>,\r\n    fonts: Array<BitmapFontInfo>,\r\n    shaders: Array<ShaderInfo>,\r\n    sounds: Array<SoundInfo>,\r\n}\r\n\r\n@:enum abstract ParcelState(Int) from Int to Int {\r\n    var unloaded = 0;\r\n    var loading = 1;\r\n    var loaded = 2;\r\n}\r\n\r\nclass Parcel {\r\n\r\n        /** The parent Resources system this Parcel is contained by. */\r\n    public var system: Resources;\r\n        /** The id of this `Parcel`. */\r\n    public var id : String;\r\n        /** The list of the resource infos within this parcel, used at load/unload time. */\r\n    public var list: ParcelList;\r\n        /** A list of resource ids that are loaded in this parcel, i.e that have a reference to the resource id */\r\n    public var loaded: Array<String>;\r\n        /** A list of resource ids that are known to this parcel */\r\n    public var listed (get, never): Array<String>;\r\n        /** Return the number of resources listed in this Parcel */\r\n    public var length (get, never) : Int;\r\n        /** The time in seconds the last load took */\r\n    public var time_to_load : Float = 0.0;\r\n        /** The current parcel state.\r\n            Set to unloaded by default,\r\n            changed to loading when calling `load`,\r\n            changed to loaded when complete,\r\n            changed to unloaded when `unload` completes */\r\n    public var state : ParcelState;\r\n\r\n    var emitter: Emitter<ParcelEvent>;\r\n    var oncomplete: Parcel->Void;\r\n    var onprogress: ParcelChange->Void;\r\n    var onfailed: ParcelChange->Void;\r\n    var start_load: Float = 0.0;\r\n    var load_time_spacing: Float = 1/20;\r\n    var load_start_delay: Float = 0.2;\r\n\r\n    public function new( ?_options:ParcelOptions ) {\r\n\r\n        def(_options, {});\r\n        def(_options.system, Luxe.resources);\r\n        def(_options.id, Luxe.utils.uniqueid());\r\n\r\n        if(_options.oncomplete != null)         oncomplete = _options.oncomplete;\r\n        if(_options.onprogress != null)         onprogress = _options.onprogress;\r\n        if(_options.onfailed != null)           onfailed = _options.onfailed;\r\n\r\n        if(_options.load_time_spacing != null)  load_time_spacing = _options.load_time_spacing;\r\n        if(_options.load_start_delay != null)   load_start_delay = _options.load_start_delay;\r\n\r\n        state = ParcelState.unloaded;\r\n        loaded = [];\r\n        emitter = new Emitter();\r\n        system = _options.system;\r\n        id = _options.id;\r\n        list = empty_list();\r\n\r\n            if(_options.bytes    != null) list.bytes    = _options.bytes;\r\n            if(_options.texts    != null) list.texts    = _options.texts;\r\n            if(_options.jsons    != null) list.jsons    = _options.jsons;\r\n            if(_options.textures != null) list.textures = _options.textures;\r\n            if(_options.fonts    != null) list.fonts    = _options.fonts;\r\n            if(_options.shaders  != null) list.shaders  = _options.shaders;\r\n            if(_options.sounds   != null) list.sounds   = _options.sounds;\r\n\r\n        system.track(this);\r\n\r\n    } //new\r\n\r\n//Public event handling\r\n\r\n    public inline function on<T>( ev:ParcelEvent, handler:T->Void ) emitter.on(ev, handler);\r\n    public inline function off<T>( ev:ParcelEvent, handler:T->Void ) emitter.off(ev, handler);\r\n    public inline function emit<T>( ev:ParcelEvent, data:T ) emitter.emit(ev, data);\r\n\r\n//Public load API\r\n\r\n    public inline function is_loaded( _id:String ) return loaded.indexOf(_id) != -1;\r\n\r\n        /** Load this parcel contents with the optional load id, which is added to events. */\r\n    public function load( ?_load_id:String ) {\r\n\r\n        emitter.emit(ParcelEvent.load, this);\r\n\r\n        state = ParcelState.loading;\r\n\r\n        Luxe.timer.schedule(load_start_delay, function() {\r\n\r\n            start_load = Luxe.time;\r\n\r\n            def(_load_id, id);\r\n\r\n            _debug('$id / $_load_id / loading $length items');\r\n            _debug('   bytes: ${list.bytes.length}');\r\n            _debug('   texts: ${list.texts.length}');\r\n            _debug('   jsons: ${list.jsons.length}');\r\n            _debug('   textures: ${list.textures.length}');\r\n            _debug('   fonts: ${list.fonts.length}');\r\n            _debug('   shaders: ${list.shaders.length}');\r\n            _debug('   sounds: ${list.sounds.length}');\r\n\r\n            if(length == 0) {\r\n                _debug('nothing to load for `$id` / `$_load_id`, skip');\r\n                do_complete(_load_id);\r\n                return;\r\n            }\r\n\r\n            var _index = 0;\r\n            var _load_index = 0;\r\n\r\n            inline function _handle(_item_id:String, _load:Promise) {\r\n                _load.then(function(_res) {\r\n                    one_loaded(_item_id, _load_id, _res, ++_index, length);\r\n                }, function(_err:Dynamic){\r\n                    one_failed(_item_id, _load_id, _err, ++_index, length);\r\n                });\r\n            }\r\n\r\n            //bytes\r\n\r\n                for(_bytes in list.bytes) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_bytes.id)) {\r\n\r\n                        loaded.push(_bytes.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            _handle( _bytes.id, system.load_bytes( _bytes.id ) );\r\n\r\n                        }); //timer\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_bytes.id} loaded, skipped');\r\n                        one_loaded(_bytes.id, _load_id, system.get(_bytes.id), ++_index, length);\r\n                    }\r\n\r\n                } //each bytes\r\n\r\n            //text\r\n\r\n                for(_text in list.texts) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_text.id)) {\r\n\r\n                        loaded.push(_text.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            _handle( _text.id, system.load_text( _text.id ) );\r\n\r\n                        }); //timer\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_text.id} loaded, skipped');\r\n                        one_loaded(_text.id, _load_id, system.get(_text.id), ++_index, length);\r\n                    }\r\n\r\n                } //each texts\r\n\r\n            //json\r\n\r\n                for(_json in list.jsons) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_json.id)) {\r\n\r\n                        loaded.push(_json.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            _handle( _json.id, system.load_json( _json.id ) );\r\n\r\n                        });\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_json.id} loaded, skipped');\r\n                        one_loaded(_json.id, _load_id, system.get(_json.id), ++_index, length);\r\n                    }\r\n\r\n                } //each jsons\r\n\r\n            //texture\r\n\r\n                for(_texture in list.textures) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_texture.id)) {\r\n\r\n                        loaded.push(_texture.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            var _load = system.load_texture( _texture.id, {\r\n                                load_premultiply_alpha:_texture.load_premultiply_alpha,\r\n                                filter_min:_texture.filter_min,\r\n                                filter_mag:_texture.filter_mag,\r\n                                clamp_s:_texture.clamp_s,\r\n                                clamp_t:_texture.clamp_t\r\n                            });\r\n\r\n                            _handle(_texture.id, _load);\r\n\r\n                        }); //timer\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_texture.id} loaded, skipped');\r\n                        one_loaded(_texture.id, _load_id, system.get(_texture.id), ++_index, length);\r\n                    }\r\n\r\n                } //each textures\r\n\r\n            //font\r\n\r\n                for(_font in list.fonts) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_font.id)) {\r\n\r\n                        loaded.push(_font.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            var _load = system.load_font( _font.id, {\r\n                                texture_path:_font.texture_path\r\n                            });\r\n\r\n                            _handle(_font.id, _load);\r\n\r\n                        }); //timer\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_font.id} loaded, skipped');\r\n                        one_loaded(_font.id, _load_id, system.get(_font.id), ++_index, length);\r\n                    }\r\n\r\n                } //each fonts\r\n\r\n            //shader\r\n\r\n                for(_shader in list.shaders) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_shader.id)) {\r\n\r\n                        loaded.push(_shader.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            var _load = system.load_shader( _shader.id, {\r\n                                frag_id: _shader.frag_id,\r\n                                vert_id: _shader.vert_id\r\n                            });\r\n\r\n                            _handle(_shader.id, _load);\r\n\r\n                        }); //timer\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_shader.id} loaded, skipped');\r\n                        one_loaded(_shader.id, _load_id, system.get(_shader.id), ++_index, length);\r\n                    }\r\n\r\n                } //each shaders\r\n\r\n            //audio\r\n\r\n                for(_sound in list.sounds) {\r\n\r\n                    ++_load_index;\r\n\r\n                    if(!is_loaded(_sound.id)) {\r\n\r\n                        loaded.push(_sound.id);\r\n                        Luxe.timer.schedule(load_time_spacing*_load_index, function() {\r\n\r\n                            var _load = system.load_audio( _sound.id, {\r\n                                is_stream: _sound.is_stream\r\n                            });\r\n\r\n                            _handle(_sound.id, _load);\r\n\r\n                        }); //timer\r\n\r\n                    } else { //!loaded\r\n                        log('$id / already had ${_sound.id} loaded, skipped');\r\n                        one_loaded(_sound.id, _load_id, system.get(_sound.id), ++_index, length);\r\n                    }\r\n\r\n                } //each sounds\r\n\r\n        }); //start delay timer\r\n\r\n    } //load\r\n\r\n        /** Unload this parcel contents, telling the system to remove the reference we have to them.\r\n            Optionally the list can be emptied out, but will be kept around for reloading the parcel again. */\r\n    public function unload( ?_empty_list:Bool = false ) {\r\n\r\n        emitter.emit(ParcelEvent.unload, this);\r\n\r\n        inline function _remove(_id) {\r\n            _debug('$_id / removing');\r\n            system.destroy(_id);\r\n            loaded.remove(_id);\r\n        }\r\n\r\n        for(item in list.bytes)     _remove(item.id);\r\n        for(item in list.texts)     _remove(item.id);\r\n        for(item in list.jsons)     _remove(item.id);\r\n        for(item in list.textures)  _remove(item.id);\r\n        for(item in list.fonts)     _remove(item.id);\r\n        for(item in list.shaders)   _remove(item.id);\r\n        for(item in list.sounds)    _remove(item.id);\r\n\r\n        if(_empty_list) {\r\n            list = null;\r\n            list = empty_list();\r\n        }\r\n\r\n        state = ParcelState.unloaded;\r\n\r\n    } //unload\r\n\r\n    public function from_json( _json_object:Dynamic ) {\r\n\r\n        assertnull(_json_object);\r\n\r\n        if(_json_object.bytes != null) {\r\n            var _bytes : Array<BytesInfo> = cast _json_object.bytes;\r\n            for(item in _bytes) {\r\n                if(item != null) {\r\n                    assertnull(item);\r\n                    assertnull(item.id);\r\n\r\n                    list.bytes.push(item);\r\n                } //item != null\r\n            } //each bytes\r\n        } //json object bytes\r\n\r\n        if(_json_object.text != null) {\r\n            var _texts : Array<TextInfo> = cast _json_object.text;\r\n            for(item in _texts) {\r\n                if(item != null) {\r\n                    assertnull(item);\r\n                    assertnull(item.id);\r\n\r\n                    list.texts.push(item);\r\n                } //item != null\r\n            } //each text\r\n        } //json object text\r\n\r\n        if(_json_object.json != null) {\r\n            var _jsons : Array<JSONInfo> = cast _json_object.json;\r\n            for(item in _jsons) {\r\n                if(item != null) {\r\n                    assertnull(item);\r\n                    assertnull(item.id);\r\n\r\n                    list.jsons.push(item);\r\n                } //item != null\r\n            } //each json\r\n        } //json object json\r\n\r\n        if(_json_object.textures != null) {\r\n            var _textures : Array<Dynamic> = cast _json_object.textures;\r\n            for(item in _textures) {\r\n                assertnull(item);\r\n                assertnull(item.id);\r\n\r\n                inline function _get_filter(_filter_type:String) : Null<FilterType> {\r\n                    if(_filter_type == null) return null;\r\n                    assert(_filter_type == 'nearest' || _filter_type == 'linear');\r\n                    return switch(_filter_type) {\r\n                        case 'nearest': FilterType.nearest;\r\n                        case 'linear': FilterType.linear;\r\n                        default: null;\r\n                    }\r\n                }\r\n\r\n                inline function _get_clamp(_clamp_type:String) : Null<ClampType> {\r\n                    if(_clamp_type == null) return null;\r\n                    assert(_clamp_type == 'edge' || _clamp_type == 'repeat' || _clamp_type == 'mirror');\r\n                    return switch(_clamp_type) {\r\n                        case 'edge':    ClampType.edge;\r\n                        case 'mirror':  ClampType.mirror;\r\n                        case 'repeat':  ClampType.repeat;\r\n                        default: null;\r\n                    }\r\n                }\r\n\r\n                list.textures.push({\r\n                    id: item.id,\r\n                    filter_min: _get_filter(item.filter_min),\r\n                    filter_mag: _get_filter(item.filter_mag),\r\n                    clamp_s: _get_clamp(item.clamp_s),\r\n                    clamp_t: _get_clamp(item.clamp_t),\r\n                    load_premultiply_alpha: item.load_premultiply_alpha\r\n                });\r\n\r\n            } //item in textures\r\n        } //json object textures\r\n\r\n        if(_json_object.fonts != null) {\r\n            var _fonts : Array<BitmapFontInfo> = cast _json_object.fonts;\r\n            for(item in _fonts) {\r\n                if(item != null) {\r\n                    assertnull(item);\r\n                    assertnull(item.id);\r\n\r\n                    list.fonts.push(item);\r\n                } //item != null\r\n            } //item in fonts\r\n        } //json object fonts\r\n\r\n        if(_json_object.shaders != null) {\r\n            var _shaders : Array<ShaderInfo> = cast _json_object.shaders;\r\n            for(item in _shaders) {\r\n                if(item != null) {\r\n                    assertnull(item);\r\n                    assertnull(item.id);\r\n                    assertnull(item.frag_id);\r\n                    assertnull(item.vert_id);\r\n\r\n                    list.shaders.push(item);\r\n                } //item != null\r\n            } //item in shaders\r\n        } //json object shaders\r\n\r\n        if(_json_object.sounds != null) {\r\n            var _sounds : Array<SoundInfo> = cast _json_object.sounds;\r\n            for(item in _sounds) {\r\n                if(item != null) {\r\n                    assertnull(item);\r\n                    assertnull(item.id);\r\n\r\n                    // if(item.is_stream == null) item.is_stream = false;\r\n\r\n                    list.sounds.push(item);\r\n                } //item != null\r\n            } //each sounds\r\n        } //json object sounds\r\n\r\n    } //from_json\r\n\r\n//Internal\r\n\r\n    function one_loaded( _item_id:String, _load_id:String, _resource:Resource, _index:Int, _total:Int ) {\r\n\r\n        _debug('loaded $_index / $_item_id / $_total for $_load_id / ' + Std.string(_resource) );\r\n\r\n        var _state : ParcelChange = {\r\n            id: _item_id,\r\n            load_id: _load_id,\r\n            resource: _resource,\r\n            index: _index,\r\n            total: _total\r\n        };\r\n\r\n        emitter.emit(ParcelEvent.progress, _state);\r\n\r\n        if(onprogress != null) {\r\n            onprogress(_state);\r\n        }\r\n\r\n        if(_index == _total) {\r\n            do_complete(_load_id);\r\n        }\r\n\r\n    } //one_loaded\r\n\r\n    function one_failed( _item_id:String, _load_id:String, _error:Dynamic, _index:Int, _total:Int ) {\r\n\r\n        _debug('failed $_index / $_item_id / $_total for $_load_id / ${_error}');\r\n\r\n        var _state : ParcelChange = {\r\n            id: _item_id,\r\n            load_id: _load_id,\r\n            error: _error,\r\n            index: _index,\r\n            total: _total\r\n        };\r\n\r\n        emitter.emit(ParcelEvent.failed, _state);\r\n\r\n        if(onfailed != null) {\r\n            onfailed(_state);\r\n        }\r\n\r\n    } //one_failed\r\n\r\n        //\r\n    inline function get_listed() : Array<String> {\r\n        var _result = [];\r\n\r\n        for(item in list.bytes)     _result.push(item.id);\r\n        for(item in list.texts)     _result.push(item.id);\r\n        for(item in list.jsons)     _result.push(item.id);\r\n        for(item in list.textures)  _result.push(item.id);\r\n        for(item in list.fonts)     _result.push(item.id);\r\n        for(item in list.shaders)   _result.push(item.id);\r\n        for(item in list.sounds)    _result.push(item.id);\r\n\r\n        return _result;\r\n    }\r\n\r\n    inline function get_length() {\r\n        return\r\n            list.bytes.length +\r\n            list.texts.length +\r\n            list.jsons.length +\r\n            list.textures.length +\r\n            list.shaders.length +\r\n            list.fonts.length +\r\n            list.sounds.length;\r\n    }\r\n\r\n        //do_complete\r\n    inline function do_complete( _load_id:String ) {\r\n\r\n        state = ParcelState.loaded;\r\n        time_to_load = Luxe.time - start_load;\r\n\r\n        _debug('completed load $_load_id in $time_to_load');\r\n\r\n        emitter.emit(ParcelEvent.complete, this);\r\n\r\n        if(oncomplete != null) {\r\n            oncomplete(this);\r\n        }\r\n\r\n    } //do_complete\r\n\r\n    function empty_list() : ParcelList {\r\n        return {\r\n            bytes:[],\r\n            texts:[],\r\n            jsons:[],\r\n            textures:[],\r\n            fonts:[],\r\n            shaders:[],\r\n            sounds:[],\r\n        };\r\n    }\r\n\r\n} //Parcel\r\n","package luxe;\r\n\r\nimport luxe.Ev;\r\nimport luxe.Engine;\r\nimport luxe.Vector;\r\nimport snow.api.Timer;\r\n\r\n#if deflect\r\n    import luxe.physics.deflect.PhysicsDeflect;\r\n#end //deflect\r\n\r\n#if nape\r\n    import luxe.physics.nape.PhysicsNape;\r\n#end //nape\r\n\r\n\r\nclass Physics {\r\n\r\n\r\n    #if deflect\r\n        public var deflect : PhysicsDeflect;\r\n    #end //deflect\r\n\r\n    #if nape\r\n        public var nape : PhysicsNape;\r\n    #end //nape\r\n\r\n    public var core : Engine;\r\n    public var engines : Array<PhysicsEngine>;\r\n\r\n        //how often to update\r\n    public var step_rate (default,set) : Float = 1/60;\r\n        //how much is a single step. This is set from step_rate initially, but can be changed manually\r\n    public var step_delta : Float = 1/60;\r\n\r\n//Physics fixed updates\r\n    @:noCompletion public var timer : Timer;\r\n\r\n    var emitter : luxe.Emitter<PhysicsEvent>;\r\n\r\n    public function new( _core:Engine ) {\r\n\r\n        core = _core;\r\n        emitter = new Emitter();\r\n\r\n    } //new\r\n\r\n    public function init() {\r\n\r\n        engines = [];\r\n\r\n        #if deflect\r\n            deflect = add_engine(PhysicsDeflect);\r\n        #end //deflect\r\n\r\n        #if nape\r\n            nape = add_engine(PhysicsNape);\r\n        #end //nape\r\n\r\n    } //init\r\n\r\n    public function reset() {\r\n\r\n            //stop any existing loop\r\n        if(timer != null) {\r\n            timer.stop();\r\n            timer = null;\r\n        }\r\n\r\n        if(step_rate != 0) {\r\n\r\n                //Start the physics update loop\r\n            timer = Luxe.timer.schedule( step_rate, fixed_update, true );\r\n\r\n        } //only if there is a step rate\r\n\r\n    } //reset\r\n\r\n    static var tag_physics : String = 'physics';\r\n\r\n        //called by the timer at a fixed rate\r\n    function fixed_update() {\r\n\r\n            #if !luxe_noprofile Luxe.debug.start(tag_physics); #end\r\n\r\n            //calculated because the values will change\r\n        emit(ph_fixed_update, step_delta * Luxe.timescale);\r\n\r\n        update();\r\n\r\n        emit(ph_fixed_update_post, step_delta * Luxe.timescale);\r\n\r\n            #if !luxe_noprofile Luxe.debug.end(tag_physics); #end\r\n\r\n    } //fixed_update\r\n\r\n        /** Add a physics engine type to be run by this class. */\r\n    public function add_engine<T1,T2>( type:Class<T1>, ?_data:T2 ) : T1 {\r\n\r\n        var _engine_instance = Type.createInstance( type, [ _data ] );\r\n        var _physics_engine : PhysicsEngine = cast _engine_instance;\r\n\r\n            //start with init\r\n        _physics_engine.init();\r\n\r\n            //push the engine into the list to be updated\r\n        engines.push( _physics_engine );\r\n\r\n            //return typed instance\r\n        return _engine_instance;\r\n\r\n    } //add_engine\r\n\r\n        /** Only call this manually if step_rate is 0! */\r\n    public function update() {\r\n        for(engine in engines) {\r\n            engine.update();\r\n        }\r\n    }\r\n\r\n    public function process() {\r\n        for(engine in engines) {\r\n            engine.process();\r\n        }\r\n    } //process\r\n\r\n    public function render() {\r\n        for(engine in engines) {\r\n            engine.render();\r\n        }\r\n    } //render\r\n\r\n    public function destroy() {\r\n\r\n        if(timer != null) {\r\n            timer.stop();\r\n        }\r\n\r\n        timer = null;\r\n\r\n        for(engine in engines) {\r\n            engine.destroy();\r\n        }\r\n\r\n    } //destroy\r\n\r\n//Events\r\n\r\n    public inline function on(_event:PhysicsEvent, _handler:Float->Void) : Void {\r\n        emitter.on(_event, _handler);\r\n    }\r\n\r\n    public inline function off(_event:PhysicsEvent, _handler:Float->Void) : Bool {\r\n        return emitter.off(_event, _handler);\r\n    }\r\n\r\n    public inline function emit(_event:PhysicsEvent, _float:Float) : Void {\r\n        emitter.emit(_event, _float);\r\n    }\r\n\r\n//Internal\r\n\r\n        //on changing the fixed rate, update the physics timer\r\n    function set_step_rate( _rate:Float ) {\r\n\r\n            //update the step size\r\n        step_rate = _rate;\r\n        step_delta = step_rate;\r\n\r\n            //reset the timer so it runs at the new rate\r\n        reset();\r\n\r\n        return step_rate;\r\n\r\n    } //set_step_rate\r\n\r\n\r\n} //Physics\r\n\r\n\r\n/** :todo:WIP: This api is work in progress, and might change a bit */\r\n@:enum abstract PhysicsEvent(Int) from Int to Int {\r\n\r\n        /** An unknown physics engine event */\r\n    var ph_unknown           = 0;\r\n        /** Emitted at the start of the fixed update, before the world is updated */\r\n    var ph_fixed_update      = 1;\r\n        /** Emitted at the end of the fixed update, after the world is updated */\r\n    var ph_fixed_update_post = 2;\r\n\r\n} //PhysicsEvent\r\n\r\n    //base class for simple physics world\r\n    //updates and access\r\nclass PhysicsEngine {\r\n\r\n    public var name : String = 'engine';\r\n\r\n    @:isVar public var paused (get,set) : Bool = false;\r\n    @:isVar public var gravity (get,set) : Vector;\r\n    @:isVar public var draw (get,set) : Bool = true;\r\n\r\n    public function new() {\r\n\r\n        gravity = new Vector(0, -9.8, 0);\r\n        Luxe.on(Ev.render, _render);\r\n\r\n    } //new\r\n\r\n    public function init() {\r\n\r\n    } //init\r\n\r\n    function _render(_) {\r\n\r\n        render();\r\n\r\n    } //_render\r\n\r\n    public function process() {\r\n\r\n    } //process\r\n\r\n    public function update() {\r\n\r\n    } //update\r\n\r\n    public function render() {\r\n\r\n    } //render\r\n\r\n    public function destroy() {\r\n\r\n    } //destroy\r\n\r\n//Properties\r\n\r\n    function get_paused() : Bool {\r\n\r\n        return paused;\r\n\r\n    } //get_paused\r\n\r\n    function set_paused( ?_pause:Bool ) {\r\n\r\n        return paused = _pause;\r\n\r\n    } //set_paused\r\n\r\n    function get_draw() : Bool {\r\n\r\n        return draw;\r\n\r\n    } //get_draw\r\n\r\n    function set_draw( _draw:Bool ) : Bool {\r\n\r\n        return draw = _draw;\r\n\r\n    } //set_draw\r\n\r\n    function get_gravity() : Vector {\r\n\r\n        return gravity;\r\n\r\n    } //get_gravity\r\n\r\n    function set_gravity( _gravity:Vector ) {\r\n\r\n        return gravity = _gravity;\r\n\r\n    } //set_gravity\r\n\r\n} //PhysicsEngine\r\n","package luxe;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.resource.Resource;\r\nimport luxe.Parcel;\r\nimport luxe.options.ResourceOptions;\r\nimport phoenix.Texture;\r\nimport phoenix.BitmapFont;\r\nimport phoenix.Shader;\r\nimport snow.api.Promise;\r\n\r\nclass Resources {\r\n\r\n        /** The Parcel set that this system contains. */\r\n    public var parcels : Array<Parcel>;\r\n        /** The resource cache, stored by `Resource` id.\r\n            All resources in a `Parcel` contained by this system, will be here. */\r\n    public var cache: Map<String, Resource>;\r\n\r\n        /** General statistics about this system. */\r\n    public var stats : ResourceStats;\r\n\r\n//Internal vars\r\n\r\n    @:allow(luxe.Parcel)\r\n    var emitter: Emitter<ResourceEvent>;\r\n\r\n//\r\n\r\n    public function new() {\r\n        parcels = [];\r\n        emitter = new Emitter();\r\n        cache = new Map();\r\n        stats = new ResourceStats();\r\n    }\r\n\r\n//Public `Parcel` tracking\r\n\r\n    public function track(_cache:Parcel) {\r\n\r\n        assertnull(_cache);\r\n        assert(parcels.indexOf(_cache) == -1);\r\n\r\n        parcels.push(_cache);\r\n        emit(ResourceEvent.cache_tracked, _cache);\r\n\r\n    } //track\r\n\r\n    public function untrack(_cache:Parcel) {\r\n\r\n        assertnull(_cache);\r\n\r\n        var _removed = parcels.remove(_cache);\r\n\r\n        if(_removed) {\r\n            emit(ResourceEvent.cache_untracked, _cache);\r\n        }\r\n\r\n    } //untrack\r\n\r\n//Public Resource list\r\n\r\n        /** Add a resource to be tracked by this system. */\r\n    public function add(resource:Resource) {\r\n\r\n        assert(!cache.exists(resource.id));\r\n\r\n        cache.set(resource.id, resource);\r\n\r\n        emit(ResourceEvent.listed, resource);\r\n\r\n        update_stats(resource, 1);\r\n\r\n    } //add\r\n\r\n        /** Remove a resource being tracked by this system. */\r\n    public function remove(resource:Resource #if luxe_resource_pos, ?_pos:haxe.PosInfos #end) : Bool {\r\n\r\n        assert(cache.exists(resource.id));\r\n\r\n        emit(ResourceEvent.unlisted, resource);\r\n\r\n        update_stats(resource, -1);\r\n\r\n        return cache.remove(resource.id);\r\n\r\n    } //remove\r\n\r\n        /** Destroy a resource by id. Returns false if the resource wasn't found. */\r\n    public function destroy(_id:String, ?_force:Bool=false) : Bool {\r\n\r\n        var _resource = get(_id);\r\n\r\n        if(_resource == null) return false;\r\n\r\n        _resource.destroy(_force);\r\n\r\n        return true;\r\n\r\n    } //destroy\r\n\r\n        /** Invalidate a resource by id. Returns false if the resource wasn't found. */\r\n    public function invalidate(_id:String) : Bool {\r\n\r\n        var _resource = get(_id);\r\n\r\n        if(_resource == null) return false;\r\n\r\n        _resource.invalidate();\r\n\r\n        return true;\r\n\r\n    } //invalidate\r\n\r\n//Public event handling\r\n\r\n    public function on<T>(ev:ResourceEvent, handler:T->Void) {\r\n\r\n        emitter.on(ev, handler);\r\n\r\n    } //on\r\n\r\n    public function off<T>(ev:ResourceEvent, handler:T->Void) {\r\n\r\n        emitter.off(ev, handler);\r\n\r\n    } //off\r\n\r\n    public function emit<T>(ev:ResourceEvent, data:T) {\r\n\r\n        emitter.emit(ResourceEvent.any, data);\r\n        emitter.emit(ev, data);\r\n\r\n    } //emit\r\n\r\n\r\n//Public load api\r\n\r\n    public function load_bytes(_id:String) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = bytes(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('bytes / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('bytes / loading / $_id');\r\n\r\n        _resource = new BytesResource({\r\n            id: _id,\r\n            system: this,\r\n            asset: null\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_bytes\r\n\r\n    public function load_text(_id:String) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = text(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('text / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('text / loading / $_id');\r\n\r\n        _resource = new TextResource({\r\n            id: _id,\r\n            system: this,\r\n            asset: null\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_text\r\n\r\n    public function load_json(_id:String) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = json(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('json / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('json / loading / $_id');\r\n\r\n        _resource = new JSONResource({\r\n            id: _id,\r\n            system: this,\r\n            asset: null\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_json\r\n\r\n    public function load_texture(_id:String, ?_options:LoadTextureOptions) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = texture(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('texture / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('texture / loading / $_id');\r\n\r\n        //options\r\n\r\n            var _filter_min = null;\r\n            var _filter_mag = null;\r\n            var _clamp_s = null;\r\n            var _clamp_t = null;\r\n            var _premultiply = null;\r\n\r\n            if(_options != null) {\r\n                _filter_min  = _options.filter_min;\r\n                _filter_mag  = _options.filter_mag;\r\n                _clamp_s     = _options.clamp_s;\r\n                _clamp_t     = _options.clamp_t;\r\n                _premultiply = _options.load_premultiply_alpha;\r\n            }\r\n\r\n        _resource = new Texture({\r\n            id: _id,\r\n            system: this,\r\n            filter_min: _filter_min,\r\n            filter_mag: _filter_mag,\r\n            clamp_s: _clamp_s,\r\n            clamp_t: _clamp_t,\r\n            load_premultiply_alpha: _premultiply\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_texture\r\n\r\n    public function load_font(_id:String, ?_options:LoadFontOptions) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = font(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('font / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('font / loading / $_id');\r\n\r\n        var _texture_path = null;\r\n        if(_options != null) {\r\n            _texture_path = _options.texture_path;\r\n        }\r\n\r\n        _resource = new BitmapFont({\r\n            id: _id,\r\n            system: this,\r\n            texture_path: _texture_path\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_font\r\n\r\n    public function load_shader(_id:String, _options:LoadShaderOptions) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = shader(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('shader / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('shader / loading / $_id');\r\n\r\n        _resource = new Shader({\r\n            id: _id,\r\n            system: this,\r\n            frag_id: _options.frag_id,\r\n            vert_id: _options.vert_id\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_shader\r\n\r\n\r\n    public function load_audio(_id:String, ?_options:LoadAudioOptions) : Promise {\r\n\r\n        assertnull(_id);\r\n\r\n        var _resource = audio(_id);\r\n\r\n        if(_resource != null) {\r\n            _debug('audio / existed / $_id');\r\n            _resource.ref++;\r\n            return Promise.resolve(_resource);\r\n        }\r\n\r\n        _debug('audio / loading / $_id');\r\n\r\n        var _is_stream = false;\r\n        if(_options != null) {\r\n            _is_stream = _options.is_stream;\r\n        }\r\n\r\n        _resource = new AudioResource({\r\n            id: _id,\r\n            system: this,\r\n            asset: null,\r\n            is_stream: _is_stream\r\n        });\r\n\r\n        add(_resource);\r\n\r\n        return _resource.reload();\r\n\r\n    } //load_audio\r\n\r\n//Public fetch API\r\n\r\n    public inline function has      (_id:String) : Bool           return cache.exists(_id);\r\n    public inline function get      (_id:String) : Resource       return fetch(_id);\r\n    public inline function bytes    (_id:String) : BytesResource  return fetch(_id);\r\n    public inline function text     (_id:String) : TextResource   return fetch(_id);\r\n    public inline function json     (_id:String) : JSONResource   return fetch(_id);\r\n    public inline function texture  (_id:String) : Texture        return fetch(_id);\r\n    public inline function font     (_id:String) : BitmapFont     return fetch(_id);\r\n    public inline function shader   (_id:String) : Shader         return fetch(_id);\r\n    public inline function audio    (_id:String) : AudioResource  return fetch(_id);\r\n\r\n//Internal\r\n\r\n    inline function fetch<T>(_id:String) : T {\r\n        return cast cache.get(_id);\r\n    } //fetch\r\n\r\n    inline function update_stats(_res:Resource, _offset:Int) {\r\n\r\n        switch(_res.resource_type) {\r\n            case ResourceType.unknown:          stats.unknown   += _offset;\r\n            case ResourceType.bytes:            stats.bytes     += _offset;\r\n            case ResourceType.text:             stats.texts     += _offset;\r\n            case ResourceType.json:             stats.jsons     += _offset;\r\n            case ResourceType.texture:          stats.textures  += _offset;\r\n            case ResourceType.render_texture:   stats.rtt       += _offset;\r\n            case ResourceType.font:             stats.fonts     += _offset;\r\n            case ResourceType.shader:           stats.shaders   += _offset;\r\n            case ResourceType.audio:            stats.audios    += _offset;\r\n        }\r\n\r\n        stats.total += _offset;\r\n\r\n    }\r\n\r\n} //Resources\r\n\r\n\r\n\r\n/** The state a resource can be in. The state is\r\n    mutually exclusive (only one at a time), and states\r\n    that lead to other states should always change in a fixed order.\r\n    In other words, state can never go from unknown to loaded, without\r\n    first passing through listed and loading. */\r\n@:enum abstract ResourceState(Int) from Int to Int {\r\n    //\r\n        /** This resource id is not known to the system,\r\n            either it wasn't added or was subsequently removed */\r\n    var unknown     = 0;\r\n\r\n        /** This id is known, but is not loaded.\r\n            unloaded resources go back to this state unless removed. */\r\n    var listed      = 1;\r\n\r\n        /** The resource is pending a load completion or timeout. */\r\n    var loading     = 2;\r\n\r\n        /** The resource is loaded and stored for query/fetching. */\r\n    var loaded      = 3;\r\n\r\n        /** The resource has failed to be created. */\r\n    var failed      = 4;\r\n\r\n        /** The resource has been invalidated, either manually or\r\n            from an event (change on disk, graphics context lost, etc)\r\n            and needs to be reloaded from the source data if desired. */\r\n    var invalidated = 5;\r\n\r\n        /** The resource has been destroyed. If the asset is in this\r\n            state it should not be considered for reuse and will assert on use it */\r\n    var destroyed   = 6;\r\n\r\n} //ResourceState\r\n\r\n@:enum abstract ResourceEvent(Int) from Int to Int {\r\n\r\n    var unknown             = 0;\r\n    var any                 = 1;\r\n    var listed              = 2;\r\n    var loading             = 3;\r\n    var loaded              = 4;\r\n    var failed              = 5;\r\n    var invalidated         = 6;\r\n    var unlisted            = 7;\r\n    var destroyed           = 8;\r\n    var reference           = 9;\r\n    var dereference         = 10;\r\n    var cache_tracked       = 11;\r\n    var cache_untracked     = 12;\r\n\r\n} //ResourceEvent\r\n\r\n\r\n@:enum\r\nabstract ResourceType(Int) from Int to Int {\r\n    var unknown         = 0;\r\n    var text            = 1;\r\n    var json            = 2;\r\n    var bytes           = 3;\r\n    var texture         = 4;\r\n    var render_texture  = 5;\r\n    var font            = 6;\r\n    var shader          = 7;\r\n    var audio           = 8;\r\n}\r\n\r\n\r\nclass ResourceStats {\r\n\r\n    public var total : Int = 0;\r\n    public var fonts : Int = 0;\r\n    public var textures : Int = 0;\r\n    public var rtt : Int = 0;\r\n    public var shaders : Int = 0;\r\n    public var texts : Int = 0;\r\n    public var jsons : Int = 0;\r\n    public var bytes : Int = 0;\r\n    public var audios : Int = 0;\r\n    public var unknown : Int = 0;\r\n\r\n    public function new() {\r\n\r\n    } //new\r\n\r\n    function toString() {\r\n\r\n        return\r\n            'Resource Statistics\\n' +\r\n            '\\ttotal : ' + total + '\\n' +\r\n            '\\ttexture : ' + textures + ' \\n' + '' +\r\n            '\\trender texture : ' + rtt + ' \\n' +\r\n            '\\tfont : ' + fonts + '\\n' +\r\n            '\\tshader : ' + shaders + '\\n' +\r\n            '\\ttext : ' + texts + '\\n' +\r\n            '\\tjson : ' + jsons + '\\n' +\r\n            '\\tbytes : ' + bytes + '\\n' +\r\n            '\\taudios : ' + audios + '\\n' +\r\n            '\\tunknown : ' + unknown;\r\n\r\n    } //toString\r\n\r\n    public function reset() {\r\n\r\n        total = 0;\r\n        fonts = 0;\r\n        textures = 0;\r\n        rtt = 0;\r\n        shaders = 0;\r\n        texts = 0;\r\n        jsons = 0;\r\n        bytes = 0;\r\n        audios = 0;\r\n        unknown = 0;\r\n\r\n    } //reset\r\n\r\n\r\n} //ResourceStats\r\n","package luxe;\r\n\r\nimport luxe.Ev;\r\nimport luxe.Input;\r\nimport luxe.Screen;\r\nimport luxe.options.EntityOptions;\r\n\r\nimport luxe.Log.*;\r\n\r\nclass Scene extends Objects {\r\n\r\n        /** The list of entities within this `Scene` */\r\n    public var entities : Map<String,Entity>;\r\n        /** Whether or not the `Scene` has called init */\r\n    public var inited : Bool = false;\r\n        /** Whether or not the `Scene` has called reset */\r\n    public var started : Bool = false;\r\n        /** The number of entities in this `Scene` */\r\n    public var length(get, null) : Int = 0;\r\n        /** whether or not this scene has been destroyed */\r\n    public var destroyed : Bool = false;\r\n\r\n//internal\r\n    \r\n    @:allow(luxe.Entity)\r\n    var _delayed_init_entities : Array<Entity>;\r\n\r\n    @:allow(luxe.Entity)\r\n    var _delayed_reset_entities : Array<Entity>;\r\n\r\n    @:allow(luxe.Entity)\r\n    @:allow(luxe.debug.SceneDebugView)\r\n    var _has_changed: Bool = false;\r\n\r\n//\r\n\r\n    public function new( ?_name:String='untitled scene' ) {\r\n\r\n        super(_name);\r\n\r\n        entities = new Map<String,Entity>();\r\n\r\n        _delayed_init_entities = [];\r\n        _delayed_reset_entities = [];\r\n\r\n        Luxe.core.on(Ev.init, init);\r\n        Luxe.core.on(Ev.destroy, _destroy);\r\n        Luxe.core.on(Ev.update, update);\r\n\r\n        Luxe.core.on(Ev.prerender, prerender);\r\n        Luxe.core.on(Ev.postrender, postrender);\r\n        Luxe.core.on(Ev.render, render);\r\n\r\n        Luxe.core.on(Ev.keydown, keydown);\r\n        Luxe.core.on(Ev.keyup, keyup);\r\n        Luxe.core.on(Ev.textinput, textinput);\r\n\r\n        Luxe.core.on(Ev.inputup, inputup);\r\n        Luxe.core.on(Ev.inputdown, inputdown);\r\n\r\n        Luxe.core.on(Ev.mouseup, mouseup);\r\n        Luxe.core.on(Ev.mousedown, mousedown);\r\n        Luxe.core.on(Ev.mousemove, mousemove);\r\n        Luxe.core.on(Ev.mousewheel, mousewheel);\r\n\r\n        Luxe.core.on(Ev.touchup, touchup);\r\n        Luxe.core.on(Ev.touchdown, touchdown);\r\n        Luxe.core.on(Ev.touchmove, touchmove);\r\n\r\n        Luxe.core.on(Ev.gamepadup, gamepadup);\r\n        Luxe.core.on(Ev.gamepaddown, gamepaddown);\r\n        Luxe.core.on(Ev.gamepadaxis, gamepadaxis);\r\n        Luxe.core.on(Ev.gamepaddevice, gamepaddevice);\r\n\r\n        Luxe.core.on(Ev.windowmoved, windowmoved);\r\n        Luxe.core.on(Ev.windowresized, windowresized);\r\n        Luxe.core.on(Ev.windowsized, windowsized);\r\n        Luxe.core.on(Ev.windowminimized, windowminimized);\r\n        Luxe.core.on(Ev.windowrestored, windowrestored);\r\n\r\n            //if we have already missed the internal init\r\n        if(Luxe.core.inited) {\r\n            init(null);\r\n        }\r\n\r\n        var _view:luxe.debug.SceneDebugView = Luxe.core.debug.get_view('Scenes');\r\n        if(_view != null) {\r\n            _view.add_scene(this);\r\n        }\r\n\r\n    } //new\r\n\r\n    @:allow(luxe.Entity)\r\n    inline function handle_duplicate_warning(_name:String) {\r\n        if(entities.exists(_name)) {\r\n            log('${name} / adding a second entity named $_name!\r\n                This will replace the existing one, possibly leaving the previous one in limbo.');\r\n        }\r\n    }\r\n\r\n        /** add given entity to this scene */\r\n    var entity_count : Int = 0;\r\n    public function add( entity:Entity #if luxe_scene_pos, ?pos:haxe.PosInfos #end ) {\r\n\r\n        assertnull(entity, 'can\\'t put entity in a scene if the entity is null.');\r\n\r\n            _debug('${name} / adding ${entity.name} with id : ${entity.id}');\r\n\r\n        handle_duplicate_warning(entity.name);\r\n\r\n        entity.scene = this;\r\n        entity.scene_root = this;\r\n        entities.set( entity.name, entity );\r\n        entity_count++;\r\n\r\n\r\n            if(inited) {\r\n                _debug('adding a delayed entity to init list ' + entity.name);\r\n                _delayed_init_entities.push(entity);\r\n            } //inited\r\n\r\n            if(started) {\r\n                _debug('adding a delayed entity to reset list ' + entity.name);\r\n                _delayed_reset_entities.push(entity);\r\n            } //started\r\n\r\n        _has_changed = true;\r\n\r\n    } //add\r\n\r\n        /** removes given entity from this scene */\r\n    public function remove( entity:Entity ) : Bool {\r\n\r\n        assertnull(entity, 'can\\'t remove entity from a scene if the entity is null.');\r\n\r\n        _has_changed = true;\r\n\r\n        if(entity.scene == this) {\r\n\r\n            _debug('${name} / removing ${entity.name} with id : ${entity.id}');\r\n            entity.scene = null;\r\n            entity_count--;\r\n            return entities.remove( entity.name );\r\n\r\n        } else {\r\n\r\n            log('can\\'t remove the entity(`${entity.name}`) from this scene(`$name`), it is not mine (entity.scene != this)');\r\n            return false;\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    } //remove\r\n\r\n    public inline function get<T:(Entity)>(_name:String) : T {\r\n\r\n        return cast entities.get(_name);\r\n\r\n    } //get\r\n\r\n        /** Destroy all entities in this scene.\r\n            There is one exception: If `entity == Luxe.camera`,\r\n            it will not be destroyed. Call Luxe.camera.destroy()\r\n            explicitly. This exception will change in future,\r\n            but saves a lot of confusion for and improves workflow. */\r\n    public function empty() {\r\n\r\n        _debug('$name / empty');\r\n\r\n        if(entity_count > 0) {\r\n            #if luxe_camera_is_not_special\r\n                for(entity in entities) {\r\n                    if(entity != null) {\r\n                        // remove( entity );\r\n                        entity.destroy();\r\n                        entity = null;\r\n                    }\r\n                } //each entity\r\n            #else\r\n                for(entity in entities) {\r\n                    if(entity != null && entity != Luxe.camera) {\r\n                        // remove( entity );\r\n                        entity.destroy();\r\n                        entity = null;\r\n                    }\r\n                } //each entity\r\n            #end\r\n        } //entity_count > 0\r\n\r\n    } //empty\r\n\r\n        /**\r\n            Return a list of similarly named entities in the scene.\r\n            For example, enemy.1 enemy.2 enemy.3 with 'enemy' will return all of these.\r\n            Useful for the EntityOptions name_unique flag.\r\n            Iterates all entities in the scene, use carefully.\r\n            Note that this is a function that will likely become a part of a set of functions so it may change slightly.\r\n            Current behavior works based on (name.)* from the beginning of the name only.\r\n            `enemy.1` will match, `enemy` will not (no .), `this.enemy.name` will not.\r\n            `^((?:enemy)[.]{1})`\r\n        */\r\n    public function get_named_like(_name:String, into:Array<Entity> ) {\r\n\r\n        if(entity_count > 0) {\r\n            var _filter : EReg = new EReg('^((?:' + _name + ')[.]{1})', 'g');\r\n            for(_entity in entities) {\r\n                if( _filter.match(_entity.name) ) {\r\n                    into.push(_entity);\r\n                }\r\n            }\r\n        }\r\n\r\n        return into;\r\n\r\n    } //get_named_like\r\n\r\n//render\r\n\r\n    function render(_) {\r\n\r\n        emit(Ev.render);\r\n\r\n    } //render\r\n\r\n    function prerender(_) {\r\n\r\n        emit(Ev.prerender);\r\n\r\n    } //prerender\r\n\r\n    function postrender(_) {\r\n\r\n        emit(Ev.postrender);\r\n\r\n    } //postrender\r\n\r\n//Keys\r\n\r\n    function keydown(e:KeyEvent) {\r\n\r\n        _verboser('$name / key down / $e');\r\n\r\n        emit(Ev.keydown, e);\r\n\r\n    } //keydown\r\n\r\n    function keyup(e:KeyEvent) {\r\n\r\n        _verboser('$name / key up / $e');\r\n\r\n        emit(Ev.keyup, e);\r\n\r\n    } //keyup\r\n\r\n    function textinput(e:TextEvent) {\r\n\r\n        _verboser('$name / text event / $e');\r\n\r\n        emit(Ev.textinput, e);\r\n\r\n    } //textinput\r\n\r\n//Mouse\r\n\r\n    function mousedown(e:MouseEvent) {\r\n\r\n        _verboser('$name / mousedown / $e');\r\n\r\n        emit(Ev.mousedown, e);\r\n\r\n    } //onmousedown\r\n\r\n    function mousewheel(e:MouseEvent) {\r\n\r\n        _verboser('$name / mousewheel / $e');\r\n\r\n        emit(Ev.mousewheel, e);\r\n\r\n    } //onmousewheel\r\n\r\n    function mouseup(e:MouseEvent) {\r\n\r\n        _verboser('$name / mouseup / $e');\r\n\r\n        emit(Ev.mouseup, e);\r\n\r\n    } //onmouseup\r\n\r\n    function mousemove(e:MouseEvent) {\r\n\r\n        _verboser('$name / mousemove / $e');\r\n\r\n        emit(Ev.mousemove, e);\r\n\r\n    } //onmousemove\r\n\r\n//Touch\r\n\r\n    function touchdown( event : TouchEvent ) {\r\n\r\n        emit(Ev.touchdown, event);\r\n\r\n    } //ontouchdown\r\n\r\n    function touchup( event : TouchEvent ) {\r\n\r\n        emit(Ev.touchup, event);\r\n\r\n    } //ontouchup\r\n\r\n    function touchmove( event : TouchEvent ) {\r\n\r\n        emit(Ev.touchmove, event);\r\n\r\n    } //ontouchmove\r\n\r\n//Gamepad\r\n\r\n    function gamepadaxis( event:GamepadEvent ) {\r\n\r\n        emit(Ev.gamepadaxis, event);\r\n\r\n    } //gamepadaxis\r\n\r\n    function gamepadup( event:GamepadEvent ) {\r\n\r\n        emit(Ev.gamepadup, event);\r\n\r\n    } //gamepadup\r\n\r\n    function gamepaddown( event:GamepadEvent ) {\r\n\r\n        emit(Ev.gamepaddown, event);\r\n\r\n    } //gamepaddown\r\n\r\n    function gamepaddevice( event:GamepadEvent ) {\r\n\r\n        emit(Ev.gamepaddevice, event);\r\n\r\n    } //gamepaddown\r\n\r\n\r\n//windowing\r\n\r\n    function windowmoved( event:WindowEvent ) {\r\n\r\n        emit(Ev.windowmoved, event);\r\n\r\n    } //windowmoved\r\n\r\n    function windowresized( event:WindowEvent ) {\r\n\r\n        emit(Ev.windowresized, event);\r\n\r\n    } //windowresized\r\n\r\n    function windowsized( event:WindowEvent ) {\r\n\r\n        emit(Ev.windowsized, event);\r\n\r\n    } //windowsized\r\n\r\n    function windowminimized( event:WindowEvent ) {\r\n\r\n        emit(Ev.windowminimized, event);\r\n\r\n    } //windowminimized\r\n\r\n    function windowrestored( event:WindowEvent ) {\r\n\r\n        emit(Ev.windowrestored, event);\r\n\r\n    } //windowrestored\r\n\r\n//Input\r\n\r\n    function inputdown(_event:InputEvent) {\r\n\r\n        emit(Ev.inputdown, _event);\r\n\r\n    } //inputdown\r\n\r\n    function inputup(_event:InputEvent) {\r\n\r\n        emit(Ev.inputup, _event);\r\n\r\n    } //inputup\r\n\r\n//Cleanup\r\n\r\n    function _destroy(_) {\r\n\r\n        destroy();\r\n\r\n    } //destroy\r\n\r\n    public function destroy() {\r\n\r\n        assert(destroyed == false, 'scene / destroying repeatedly `$name`');\r\n\r\n        _debug('destroy / `$name` with $length entities / $id');\r\n\r\n        destroyed = true;\r\n\r\n        Luxe.core.off(Ev.init, init);\r\n        Luxe.core.off(Ev.destroy, _destroy);\r\n        Luxe.core.off(Ev.update, update);\r\n\r\n        Luxe.core.off(Ev.prerender, prerender);\r\n        Luxe.core.off(Ev.postrender, postrender);\r\n        Luxe.core.off(Ev.render, render);\r\n\r\n        Luxe.core.off(Ev.keydown, keydown);\r\n        Luxe.core.off(Ev.keyup, keyup);\r\n        Luxe.core.off(Ev.textinput, textinput);\r\n\r\n        Luxe.core.off(Ev.inputup, inputup);\r\n        Luxe.core.off(Ev.inputdown, inputdown);\r\n\r\n        Luxe.core.off(Ev.mouseup, mouseup);\r\n        Luxe.core.off(Ev.mousedown, mousedown);\r\n        Luxe.core.off(Ev.mousemove, mousemove);\r\n        Luxe.core.off(Ev.mousewheel, mousewheel);\r\n\r\n        Luxe.core.off(Ev.touchup, touchup);\r\n        Luxe.core.off(Ev.touchdown, touchdown);\r\n        Luxe.core.off(Ev.touchmove, touchmove);\r\n\r\n        Luxe.core.off(Ev.gamepadup, gamepadup);\r\n        Luxe.core.off(Ev.gamepaddown, gamepaddown);\r\n        Luxe.core.off(Ev.gamepadaxis, gamepadaxis);\r\n        Luxe.core.off(Ev.gamepaddevice, gamepaddevice);\r\n\r\n        Luxe.core.off(Ev.windowmoved, windowmoved);\r\n        Luxe.core.off(Ev.windowresized, windowresized);\r\n        Luxe.core.off(Ev.windowsized, windowsized);\r\n        Luxe.core.off(Ev.windowminimized, windowminimized);\r\n        Luxe.core.off(Ev.windowrestored, windowrestored);\r\n\r\n        emit(Ev.destroy);\r\n\r\n        var _view : luxe.debug.SceneDebugView = Luxe.core.debug.get_view('Scenes');\r\n        if(_view != null) {\r\n            _view.remove_scene(this);\r\n        }\r\n\r\n    } //destroy\r\n\r\n    function _do_init() : Bool {\r\n\r\n        var _before_count = length;\r\n\r\n        if(entity_count > 0) {\r\n            for(entity in entities) {\r\n                if(entity != null) {\r\n                    if(!entity.inited) {\r\n                        _verbose('calling init on an entity : ' + entity.name);\r\n                        entity._init();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var _after_count = length;\r\n\r\n        return _before_count != _after_count;\r\n\r\n    } // _do_init\r\n\r\n        //Entities themselves can create entities\r\n        //inside of their init so we have to keep checking\r\n    public function init(_) {\r\n\r\n        var _keep_going = true;\r\n        \r\n        while(_keep_going) {\r\n            _keep_going = _do_init();\r\n        }\r\n\r\n        inited = true;\r\n\r\n        emit(Ev.init);\r\n\r\n        reset();\r\n\r\n    } //init\r\n\r\n        /** reset this scene, allowing all entities, children and attached components to be notified of the reset */\r\n    public function reset() {\r\n\r\n        started = false;\r\n\r\n            emit(Ev.reset);\r\n\r\n        started = true;\r\n\r\n    } //reset\r\n\r\n    function update(dt:Float) {\r\n\r\n        #if !luxe_noprofile Luxe.core.debug.start('scene.' + name); #end\r\n\r\n            //late scene additions get init'ed and start'ed\r\n        handle_delayed_additions();\r\n            //just in case, as the entities are called directly\r\n        emit(Ev.update, dt);\r\n\r\n            //finally update them\r\n        if(entity_count > 0) {\r\n            for(entity in entities) {\r\n                if(entity != null) {\r\n                    entity._update(dt);\r\n                }\r\n            } //for each entity\r\n        }\r\n\r\n        #if !luxe_noprofile Luxe.core.debug.end('scene.' + name); #end\r\n\r\n    } //update\r\n\r\n    function handle_delayed_additions() {\r\n\r\n        if(_delayed_init_entities.length != 0 || _delayed_reset_entities.length != 0) {\r\n            _debug(\"delayed entities in scene will init/reset now! \" + _delayed_init_entities.length + ' / ' + _delayed_reset_entities.length);\r\n        }\r\n\r\n        if(_delayed_init_entities.length > 0) {\r\n            for(entity in _delayed_init_entities) {\r\n                if(entity.destroyed) continue;\r\n                if(!entity.inited) {\r\n                    _debug('\\t handling late entity init ' + entity.name);\r\n                    entity._init();\r\n                } else {\r\n                    _debug('\\t skipped late entity init, already inited ' + entity.name);\r\n                }\r\n            }\r\n            _delayed_init_entities = null;\r\n            _delayed_init_entities = [];\r\n        }\r\n\r\n        if(_delayed_reset_entities.length > 0) {\r\n            for(entity in _delayed_reset_entities) {\r\n                if(entity.destroyed) continue;\r\n                _debug('\\t handling late entity reset ' + entity.name);\r\n                entity._reset(null);\r\n            }\r\n            _delayed_reset_entities = null;\r\n            _delayed_reset_entities = [];\r\n        }\r\n\r\n    } //handle_delayed_additions\r\n\r\n    function get_length() : Int {\r\n\r\n        return Lambda.count(entities);\r\n\r\n    } //get_length\r\n\r\n    function toString() {\r\n\r\n        return 'luxe Scene: $name / $length entities / id: $id';\r\n\r\n    } //toString\r\n\r\n\r\n} //Scene\r\n","package luxe;\r\n\r\nimport luxe.Rectangle;\r\nimport luxe.Vector;\r\n\r\n\r\ntypedef WindowEventType = snow.types.Types.WindowEventType;\r\n\r\n/** The data related to the specific window event. */\r\ntypedef WindowEventData = {\r\n        /** The x data for the event, if applicable */\r\n    @:optional var x:Int;\r\n        /** The y data for the event, if applicable */\r\n    @:optional var y:Int;\r\n\r\n} //WindowEventData\r\n\r\n\r\n/** A window event */\r\ntypedef WindowEvent = snow.types.Types.WindowEvent;\r\n\r\n\r\n\r\n@:allow(luxe.Engine)\r\n@:allow(luxe.Cursor)\r\nclass Screen {\r\n\r\n        /** Convenience: Returns *a new vector*, the middle of the screen, rounded as (w/2, h/2) */\r\n    public var mid (get,null) : Vector;\r\n        /** Convenience: Returns *a new vector*, the size of the screen */\r\n    public var size (get,null) : Vector;\r\n        /** Convenience: Returns *a new rectangle*, the bounds of the screen (0, 0, w, h) */\r\n    public var bounds (get,null) : Rectangle;\r\n\r\n        /** Returns the screen width as an Int */\r\n    public var w (get,null) : Int;\r\n        /** Returns the screen height as an Int */\r\n    public var h (get,null) : Int;\r\n        /** Returns the device pixel ratio, a scaling factor for high DPI devices.\r\n            There are two sizes to consider, the \"renderable pixels\" that you draw, and the device pixels (i.e window size).\r\n            If `luxe_no_device_pixel_scaling` is defined,  API returns renderable pixels, if not it returns device pixels.\r\n            This value can be used to convert from one to the other.\r\n            For device -> renderable, `device * device_pixel_ratio`.\r\n            For renderable -> device, `pixels / device_pixel_ratio`  */\r\n    public var device_pixel_ratio (get,null) : Float;\r\n\r\n        /** Convenience: Returns the screen width as a Float */\r\n    @:isVar public var width (default,null) : Float;\r\n        /** Convenience: Returns the screen height as a Float */\r\n    @:isVar public var height (default,null) : Float;\r\n\r\n        /** Access to the mouse cursor, position, visibility, locking etc. */\r\n    public var cursor : Cursor;\r\n\r\n    var core : Engine;\r\n\r\n    @:allow(luxe.Engine)\r\n    function new(_core:Engine, _w:Int, _h:Int) {\r\n\r\n        core = _core;\r\n        cursor = new Cursor(this);\r\n\r\n        width = _w;\r\n        height = _h;\r\n\r\n    } //new\r\n\r\n    function toString() {\r\n        return 'luxe.Screen({ w:$w, h:$h })';\r\n    }\r\n\r\n//Public API\r\n\r\n        /** Returns true if the given point falls within the bounds of the w/h of the screen. */\r\n    public function point_inside( _p:Vector ) {\r\n\r\n        if( _p.x < 0 )  return false;\r\n        if( _p.y < 0 )  return false;\r\n        if( _p.x > width )  return false;\r\n        if( _p.y > height )  return false;\r\n\r\n        return true;\r\n\r\n    } //point_inside\r\n\r\n        /** Returns true if the given point as floats fall within the bounds of the w/h of the screen. */\r\n    public function point_inside_xy( _x:Float, _y:Float ) {\r\n\r\n        if( _x < 0 )  return false;\r\n        if( _y < 0 )  return false;\r\n        if( _x > width )  return false;\r\n        if( _y > height )  return false;\r\n\r\n        return true;\r\n\r\n    } //point_inside_xy\r\n\r\n//Internal\r\n\r\n    function internal_resized(_w:Float, _h:Float) {\r\n\r\n        width = _w;\r\n        height = _h;\r\n\r\n    } //set_size\r\n\r\n//getters/setters\r\n\r\n        //:todo:immutable: create immutable types, that way these can be cached instead of new\r\n\r\n    function get_mid() : Vector return new Vector( Math.round(w/2), Math.round(h/2) );\r\n    function get_size() : Vector return new Vector( w, h );\r\n    function get_bounds() : Rectangle return new Rectangle( 0, 0, w, h );\r\n    function get_w() : Int return Std.int(width);\r\n    function get_h() : Int return Std.int(height);\r\n    function get_device_pixel_ratio() return core.app.runtime.window_device_pixel_ratio();\r\n\r\n} //Screen\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Cursor {\r\n\r\n        /** Locking the cursor hides it, and enables the `x_rel`/`y_rel`   \r\n            values on the mouse move events. This changes the mouse to   \r\n            allow movement without it stopping at the bounds.   \r\n            On `web`, this must come from a user initiated action, and asks their permission. (get/set) */\r\n    @:isVar public var grab (get,set): Bool = false;\r\n        /** The current mouse position. `read only` */\r\n    @:isVar public var pos (get,null): Vector;\r\n\r\n        /** The screen this cursor relates to. */\r\n    var screen : Screen;\r\n    var ignore : Bool = false;\r\n\r\n    @:allow(luxe.Screen)\r\n    function new( _screen:Screen ) {\r\n\r\n        screen = _screen;\r\n        pos = new Vector();\r\n\r\n    } //new\r\n\r\n    @:allow(luxe.Engine)\r\n    inline function set_internal(_x:Float, _y:Float) {\r\n\r\n            //this has to be a new value because if it's cached,\r\n            //it sends in references that get kept by user code\r\n            //or accidentally modified by .operation calls\r\n            //this is temporary till embers immutable stuff\r\n            //:todo:immutable: Vector types\r\n        ignore = true;\r\n\r\n            pos = new luxe.Vector(_x, _y);\r\n\r\n        ignore = false;\r\n\r\n    } //set_internal\r\n\r\n//getters/setters\r\n\r\n    function get_grab() : Bool {\r\n\r\n        return grab;\r\n\r\n    } //get_grab\r\n\r\n    function set_grab( _grab:Bool ) : Bool {\r\n\r\n        screen.core.app.runtime.window_grab(_grab);\r\n\r\n        return grab = _grab;\r\n\r\n    } //set_grab\r\n\r\n    function get_pos() : Vector {\r\n\r\n        return pos;\r\n\r\n    } //get_pos\r\n\r\n} //Cursor\r\n","package luxe;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Visual;\r\nimport luxe.Vector;\r\nimport luxe.Rectangle;\r\n\r\nimport luxe.Resources;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.geometry.QuadGeometry;\r\n\r\nimport luxe.options.SpriteOptions;\r\n\r\nclass Sprite extends Visual {\r\n\r\n\r\n    @:isVar public var centered     (default, set) : Bool = true;\r\n    @:isVar public var flipx        (default, set) : Bool = false;\r\n    @:isVar public var flipy        (default, set) : Bool = false;\r\n    @:isVar public var uv           (default, set) : Rectangle;\r\n\r\n    public var geometry_quad : QuadGeometry;\r\n\r\n\r\n    public function new( options:SpriteOptions ) {\r\n\r\n        uv = new Rectangle();\r\n\r\n        assertnull(options, 'Sprite requires non-null options');\r\n\r\n            //centered\r\n        if(options.centered != null) {\r\n            centered = options.centered;\r\n        }\r\n\r\n            //flipx\r\n        if(options.flipx != null) {\r\n            flipx = options.flipx;\r\n        }\r\n\r\n            //flipy\r\n        if(options.flipy != null) {\r\n            flipy = options.flipy;\r\n        }\r\n\r\n            //create visual\r\n        super( options );\r\n\r\n    }\r\n\r\n    override function on_geometry_created() {\r\n\r\n        super.on_geometry_created();\r\n\r\n        if(texture != null) {\r\n\r\n                //because the default is 0,0,1,1 uv for the quad, we don't want that when\r\n                //textures are padded (like on web)\r\n            uv = def(options.uv, new Rectangle(0,0,texture.width,texture.height));\r\n\r\n                //if texture is render target, flipy\r\n            if(texture.resource_type == ResourceType.render_texture) {\r\n                flipy = true;\r\n            }\r\n\r\n        } //texture !null\r\n\r\n            //set the origin and centered once created\r\n        centered = !!centered;\r\n            //and re assign the flip values\r\n        flipx = !!flipx;\r\n        flipy = !!flipy;\r\n\r\n    } //on_geometry_created\r\n\r\n    override function set_geometry( _g:Geometry ) {\r\n\r\n        geometry_quad = cast _g;\r\n        return super.set_geometry(_g);\r\n\r\n    } //set_geometry\r\n\r\n    override public function ondestroy() {\r\n\r\n        uv = null;\r\n        geometry_quad = null;\r\n\r\n        super.ondestroy();\r\n\r\n    }\r\n\r\n//Helper functions\r\n\r\n        /** Returns true if a point is inside the sprite, takes into account the sprite transform,\r\n            which includes more cost than simple AABB like `point_inside_AABB` */\r\n    public function point_inside( _p:Vector ) : Bool {\r\n\r\n        if(geometry == null) return false;\r\n\r\n        return Luxe.utils.geometry.point_in_geometry(_p, geometry);\r\n\r\n    } //point_inside\r\n\r\n        /** Returns true if a point is inside the AABB unrotated */\r\n    public function point_inside_AABB(_p:Vector) : Bool {\r\n\r\n        if(pos == null) return false;\r\n        if(size == null) return false;\r\n\r\n            //scaled size\r\n        var _s_x = size.x * scale.x;\r\n        var _s_y = size.y * scale.y;\r\n\r\n        if(centered) {\r\n            var _hx = _s_x / 2;\r\n            var _hy = _s_y / 2;\r\n            if(_p.x < pos.x - _hx) return false;\r\n            if(_p.y < pos.y - _hy) return false;\r\n            if(_p.x > pos.x+_s_x - _hx) return false;\r\n            if(_p.y > pos.y+_s_y - _hy) return false;\r\n        } else {\r\n            if(_p.x < pos.x) return false;\r\n            if(_p.y < pos.y) return false;\r\n            if(_p.x > pos.x+_s_x) return false;\r\n            if(_p.y > pos.y+_s_y) return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    } //point_inside_AABB\r\n\r\n//Properties\r\n\r\n\r\n//UV / source rect\r\n\r\n    function set_uv(_uv:Rectangle) : Rectangle {\r\n\r\n        if(_uv == null) return uv = _uv;\r\n\r\n        if(geometry_quad != null) {\r\n            geometry_quad.uv(_uv);\r\n        }\r\n\r\n        uv = _uv;\r\n\r\n        Rectangle.listen( uv, _uv_change );\r\n\r\n        return uv;\r\n    }\r\n\r\n//Flipping\r\n\r\n    function set_flipy(_v:Bool) {\r\n\r\n        if(_v == flipy) {\r\n            return flipy;\r\n        }\r\n\r\n        if(geometry_quad != null) {\r\n            geometry_quad.flipy = _v;\r\n        }\r\n\r\n        return flipy = _v;\r\n\r\n    } //set_flipy\r\n\r\n    function set_flipx(_v:Bool) {\r\n\r\n        if(_v == flipx) {\r\n            return flipx;\r\n        }\r\n\r\n        if(geometry_quad != null) {\r\n            geometry_quad.flipx = _v;\r\n        }\r\n\r\n        return flipx = _v;\r\n\r\n    } //set_flipv\r\n\r\n//Size\r\n\r\n    override function set_size( _v:Vector ) : Vector {\r\n\r\n            //resize the mesh vertices themselves, as scale is relative to this size\r\n            //if explicitly set\r\n        if(geometry_quad != null) {\r\n\r\n            geometry_quad.resize( new Vector( _v.x, _v.y ) );\r\n\r\n                //If the user doesn't specify a custom origin, we try and work with the center\r\n            if(!_has_custom_origin) {\r\n                if(centered) {\r\n                        //half of the new size\r\n                    origin = _v.clone().divideScalar(2);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n            //done\r\n        return super.set_size(_v);\r\n\r\n    } //set_size\r\n\r\n//Centered\r\n\r\n    function set_centered(_c:Bool) : Bool {\r\n\r\n            //centered geometry affects the origin directly\r\n        if(size != null) {\r\n            if(_c) {\r\n                origin = new Vector(size.x/2, size.y/2);\r\n            } else {\r\n                origin = new Vector();\r\n            }\r\n        } //size != null\r\n\r\n        return centered = _c;\r\n\r\n    } //set_centered\r\n\r\n\r\n        //An internal callback for when x y or w or h on a transform changes\r\n    function _uv_change(_v:Float) { this.set_uv(uv); }\r\n\r\n} //Sprite\r\n","package luxe;\r\n\r\nimport luxe.Rectangle;\r\nimport luxe.Vector;\r\nimport luxe.Visual;\r\nimport luxe.options.VisualOptions;\r\nimport luxe.options.TextOptions;\r\n\r\nimport phoenix.Batcher;\r\nimport phoenix.BitmapFont;\r\nimport phoenix.geometry.TextGeometry;\r\n\r\ntypedef TextAlign = phoenix.BitmapFont.TextAlign;\r\n\r\nclass Text extends Visual {\r\n\r\n        public var geom : TextGeometry;\r\n\r\n    //regular font stuff\r\n\r\n        public var text (get,set) : String;\r\n            function get_text() return geom.text;\r\n            function set_text(_s) return geom.text = _s;\r\n        public var font (get,set) : BitmapFont;\r\n            function get_font() return geom.font;\r\n            function set_font(_f) return geom.font = _f;\r\n        public var point_size (get,set) : Float;\r\n            function get_point_size() return geom.point_size;\r\n            function set_point_size(_s) return geom.point_size = _s;\r\n        public var letter_spacing (get,set) : Float;\r\n            function get_letter_spacing() return geom.letter_spacing;\r\n            function set_letter_spacing(_s) return geom.letter_spacing = _s;\r\n        public var line_spacing (get,set) : Float;\r\n            function get_line_spacing() return geom.line_spacing;\r\n            function set_line_spacing(_s) return geom.line_spacing = _s;\r\n\r\n        public var bounds (get,set) : Rectangle;\r\n            function get_bounds() return geom.bounds;\r\n            function set_bounds(_b) return geom.bounds = _b;\r\n        public var bounds_wrap (get,set) : Bool;\r\n            function get_bounds_wrap() return geom.bounds_wrap;\r\n            function set_bounds_wrap(_b) return geom.bounds_wrap = _b;\r\n\r\n        public var align (get,set) : TextAlign;\r\n            function get_align() return geom.align;\r\n            function set_align(_a) return geom.align = _a;\r\n        public var align_vertical (get,set) : TextAlign;\r\n            function get_align_vertical() return geom.align_vertical;\r\n            function set_align_vertical(_a) return geom.align_vertical = _a;\r\n\r\n    //distance field specific\r\n\r\n        public var sdf (get,set) : Bool;\r\n            function get_sdf() return geom.sdf;\r\n            function set_sdf(_s) return geom.sdf = _s;\r\n\r\n        public var smoothness (get,set) : Float;\r\n            function get_smoothness() return geom.smoothness;\r\n            function set_smoothness(_s) return geom.smoothness = _s;\r\n        public var thickness (get,set) : Float;\r\n            function get_thickness() return geom.thickness;\r\n            function set_thickness(_t) return geom.thickness = _t;\r\n\r\n        public var outline (get,set) : Float;\r\n            function get_outline() return geom.outline;\r\n            function set_outline(_o) return geom.outline = _o;\r\n        public var outline_color (get,set) : Color;\r\n            function get_outline_color() return geom.outline_color;\r\n            function set_outline_color(_c) return geom.outline_color = _c;\r\n\r\n        public var glow_threshold (get,set) : Float;\r\n            function get_glow_threshold() return geom.glow_threshold;\r\n            function set_glow_threshold(_s) return geom.glow_threshold = _s;\r\n        public var glow_amount (get,set) : Float;\r\n            function get_glow_amount() return geom.glow_amount;\r\n            function set_glow_amount(_e) return geom.glow_amount = _e;\r\n        public var glow_color (get,set) : Color;\r\n            function get_glow_color() return geom.glow_color;\r\n            function set_glow_color(_c) return geom.glow_color = _c;\r\n\r\n    public var text_options : TextOptions;\r\n\r\n    public function new( _options : TextOptions #if luxe_text_pos, ?_pos_info:haxe.PosInfos #end ) {\r\n\r\n            //store for later\r\n        text_options = _options;\r\n        text_bounds = new Rectangle();\r\n\r\n        var _batcher : Batcher = null;\r\n        if(_options.no_batcher_add == null || _options.no_batcher_add == false) {\r\n            if(_options.batcher != null) {\r\n                _batcher = _options.batcher;\r\n            } else {\r\n                _batcher = Luxe.renderer.batcher;\r\n            }\r\n        }\r\n\r\n            //create the text geometry\r\n        geom = new TextGeometry({\r\n\r\n                //render properties\r\n            batcher: _batcher,\r\n            depth : _options.depth,\r\n            visible : _options.visible,\r\n            immediate : _options.immediate,\r\n                //transform properties\r\n            // pos : _options.pos,\r\n            // rotation : _options.rotation,\r\n            // scale : _options.scale,\r\n            // origin : _options.origin,\r\n                //geometry specific\r\n            color : _options.color,\r\n            shader : _options.shader,\r\n            texture : _options.texture,\r\n                //text geometry specific\r\n            text: _options.text,\r\n            font: _options.font,\r\n            point_size: _options.point_size,\r\n            line_spacing: _options.line_spacing,\r\n            letter_spacing: _options.letter_spacing,\r\n\r\n            bounds : _options.bounds,\r\n            bounds_wrap : _options.bounds_wrap,\r\n            align : _options.align,\r\n            align_vertical : _options.align_vertical,\r\n\r\n            sdf: _options.sdf,\r\n            smoothness: _options.smoothness,\r\n            thickness: _options.thickness,\r\n\r\n            outline: _options.outline,\r\n            outline_color: _options.outline_color,\r\n\r\n            glow_threshold: _options.glow_threshold,\r\n            glow_amount: _options.glow_amount,\r\n            glow_color: _options.glow_color\r\n\r\n        });\r\n\r\n        geom.emitter.on(EvTextGeometry.update_text, on_geom_text_update);\r\n\r\n        _options.geometry = geom;\r\n        _options.shader = geom.shader;\r\n\r\n            //create the visual\r\n        super(_options #if luxe_text_pos, _pos_info #end);\r\n            //flush\r\n        _update_bounds();\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n    public function point_inside( p:Vector ) {\r\n\r\n        _update_bounds();\r\n        return text_bounds.point_inside(p);\r\n\r\n    } //point_inside\r\n\r\n//Internal\r\n\r\n    override function set_pos_from_transform( _p:Vector ) {\r\n\r\n        super.set_pos_from_transform(_p);\r\n        _update_bounds();\r\n        text_options.pos = pos;\r\n\r\n    } //set_pos_from_transform\r\n\r\n//\r\n\r\n        //:todo: This is being considered overall, for the best fit.\r\n        //for now, for basic behavior that was there before, it'll do.\r\n    @:noCompletion\r\n    public var text_bounds : Rectangle;\r\n\r\n    function on_geom_text_update(_) {\r\n        _update_bounds();\r\n    }\r\n\r\n    @:noCompletion\r\n    inline function _update_bounds() {\r\n\r\n        var _x = pos.x;\r\n        var _y = pos.y;\r\n        var _tw = geom.text_width;\r\n        var _th = geom.text_height;\r\n        var _bw = geom.text_width;\r\n        var _bh = geom.text_height;\r\n\r\n        if(bounds != null) {\r\n            _bh = bounds.h;\r\n            _bw = bounds.w;\r\n            _x = bounds.x;\r\n            _y = bounds.y;\r\n\r\n            _x += switch(align) {\r\n                case center: _tw/2;\r\n                case right: _tw;\r\n                case _: 0.0;\r\n            }\r\n\r\n            _y += switch(align_vertical) {\r\n                case center: (_bh/2)-(_th/2);\r\n                case bottom: _bh - _th;\r\n                case _: 0.0;\r\n            }\r\n\r\n        } else {\r\n\r\n            _x -= switch(align) {\r\n                case center: _tw/2;\r\n                case right: _tw;\r\n                case _: 0.0;\r\n            }\r\n\r\n            _y -= switch(align_vertical) {\r\n                case center: _th/2;\r\n                case bottom: _th;\r\n                case _: 0.0;\r\n            }\r\n\r\n        } //bounds based\r\n\r\n        text_bounds.set( _x, _y, _tw, _th );\r\n\r\n    } //_update_bounds\r\n\r\n\r\n    override public function ondestroy() {\r\n\r\n        geom = null;\r\n        text_options = null;\r\n        text_bounds = null;\r\n\r\n        super.ondestroy();\r\n\r\n    }\r\n\r\n} //Text\r\n","package luxe;\r\n\r\nimport luxe.Engine;\r\nimport haxe.Timer;\r\nimport luxe.Log._debug;\r\n\r\nclass Timer {\r\n\r\n\r\n    @:noCompletion public var core : Engine;\r\n    @:noCompletion public var timers : Array<snow.api.Timer>;\r\n\r\n\r\n    @:noCompletion public function new( _core:Engine ) {\r\n        core = _core;\r\n        timers = [];\r\n    } //new\r\n\r\n    @:noCompletion public function init() {\r\n\r\n        _debug('\\t timer initialized.');\r\n\r\n    } //init\r\n\r\n    @:noCompletion public function destroy() {\r\n\r\n        reset();\r\n        _debug('\\t timer shut down.');\r\n\r\n    } //destroy\r\n\r\n    @:noCompletion public function process() {\r\n\r\n    } //process\r\n\r\n        /** Kill all existing scheduled timers created through `schedule` */\r\n    public function reset() {\r\n\r\n        for( t in timers ) {\r\n            t.stop();\r\n            t = null;\r\n        }\r\n\r\n        timers = null;\r\n        timers = [];\r\n\r\n    } //reset\r\n\r\n    public function schedule( _time_in_seconds:Float, _on_time:Void->Void, ?repeat:Bool = false ) : snow.api.Timer {\r\n\r\n        var t = new snow.api.Timer( _time_in_seconds );\r\n\r\n        t.run = function () {\r\n            if(!repeat) {\r\n                t.stop ();\r\n                timers.remove(t);\r\n            }\r\n            _on_time();\r\n        };\r\n\r\n        timers.push(t);\r\n\r\n        return t;\r\n\r\n    } //schedule\r\n\r\n\r\n} //Timer\r\n","package luxe.components;\r\n\r\nimport luxe.Quaternion;\r\nimport luxe.structural.OrderedMap;\r\n\r\nimport luxe.Log._debug;\r\nimport luxe.Log._verbose;\r\n\r\n\r\n@:noCompletion class Components {\r\n\r\n        //the list of attached components\r\n    public var components : OrderedMap<String, Component>;\r\n        //the root entity\r\n    public var entity : Entity;\r\n\r\n    public function new( _entity:Entity ) {\r\n\r\n        var _map = new Map<String,Component>();\r\n        components = new OrderedMap(_map);\r\n        entity = _entity;\r\n\r\n    } //new\r\n\r\n    public function destroy() {\r\n\r\n        components.map = null;\r\n        components = null;\r\n        entity = null;\r\n\r\n    }\r\n\r\n    public function add<T:Component>( _component:T ) : T {\r\n\r\n        if(_component == null) {\r\n            trace('attempt to add null component to ${entity.name}' );\r\n            return _component;\r\n        }\r\n\r\n        _component.entity = entity;\r\n\r\n        components.set( _component.name, _component );\r\n\r\n            _debug('    entity ${entity.name} added component ${_component.name}, now at ${Lambda.count(components)} components');\r\n            _debug('    entity ${entity.name} added component, calling added() on ${_component.name}');\r\n\r\n        _component.onadded();\r\n\r\n            //now check against the entity already being init'ed and reset'ed\r\n            //and if so, call them manually\r\n        if(entity.inited) {\r\n            _debug('\\t entity ${entity.name} adding component after init, so doing init on ${_component.name}' );\r\n            _component.init();\r\n        }\r\n\r\n        if(entity.started) {\r\n            _debug('\\t entity ${entity.name} adding component after reset, so doing reset on ${_component.name}' );\r\n            _component.onreset();\r\n        }\r\n\r\n        return _component;\r\n\r\n    } //add component\r\n\r\n    public function remove( _name:String ) : Bool {\r\n\r\n            //doesn't exist?\r\n        if(!components.exists(_name)) {\r\n            trace('attempt to remove $_name from ${entity.name} failed because that component was not attached to this entity');\r\n            return false;\r\n        }\r\n\r\n        _debug('\\t entity ${entity.name} removing component $_name');\r\n\r\n        var _component = components.get( _name );\r\n            _component.onremoved();\r\n\r\n            //we also set the entity to null\r\n            _component.entity = null;\r\n\r\n        return components.remove(_name);\r\n\r\n    } //remove\r\n\r\n    public function get<T>(_name:String, ?in_children:Bool = false ) : T {\r\n\r\n        _debug('looking for all of ' + _name + ' in children : ' + in_children );\r\n\r\n        if(!in_children) {\r\n\r\n            return cast components.get(_name);\r\n\r\n        } else {\r\n\r\n                //if found in the root entity\r\n            var in_this_entity = components.get( _name );\r\n            if( in_this_entity != null ) {\r\n                return cast in_this_entity;\r\n            }\r\n\r\n            _debug('check each of our children for the component');\r\n\r\n                //check each child of our entity\r\n            for(_child in entity.children) {\r\n\r\n                _debug('looking at ' + _child.name + ' for ' + _name );\r\n\r\n                var found : T = _child.get( _name, true );\r\n\r\n                if(found != null) {\r\n                    return cast found;\r\n                } //found\r\n\r\n            } //for each child\r\n\r\n            return null;\r\n\r\n        } //if in children\r\n\r\n        return null;\r\n\r\n    } //get\r\n\r\n    public function get_any<T>(_name:String, ?in_children:Bool = false, ?first_only:Bool = true ) : Array<T> {\r\n\r\n        _debug('looking for all of ' + _name + ' in children : ' + in_children + ' first only ; ' + first_only);\r\n\r\n        var results : Array<T> = [];\r\n\r\n        if(!in_children) {\r\n\r\n            return [cast components.get(_name)];\r\n\r\n        } else {\r\n\r\n            var in_this_entity = components.get( _name );\r\n            if( in_this_entity != null ) {\r\n                if(first_only) {\r\n                    return [cast in_this_entity];\r\n                } else {\r\n                    results.push( cast in_this_entity );\r\n                }\r\n            } //if found in the root entity\r\n\r\n            _debug('check each of our children for the component');\r\n\r\n                //check each child of our entity\r\n            for(_child in entity.children) {\r\n\r\n                _debug('looking at ' + _child.name + ' for ' + _name );\r\n\r\n                var found : Array<T> = _child.get_any( _name, true, first_only );\r\n\r\n                if(found != null) {\r\n\r\n                        //only want the first result, i.e not a list\r\n                    if(first_only && found.length > 0) {\r\n                        return [cast found[0]];\r\n                    } else {\r\n                        results.concat(found);\r\n                    } //append to the list\r\n\r\n                } //found\r\n\r\n            } //for each child\r\n\r\n        } //if in children\r\n\r\n        return results;\r\n\r\n    } //get_any\r\n\r\n    public function has(_name:String) : Bool {\r\n        return components.exists(_name);\r\n    } //has\r\n\r\n} //Components\r\n","package luxe.debug;\r\n\r\nimport luxe.Input.KeyEvent;\r\nimport luxe.Input.MouseEvent;\r\nimport luxe.Input.TouchEvent;\r\nimport luxe.Screen.WindowEvent;\r\n\r\n\r\nclass DebugView extends luxe.Objects {\r\n        \r\n    public var debug: luxe.Debug;\r\n    public var visible : Bool = false;\r\n\r\n    public function new(_debug:luxe.Debug) {\r\n        super();\r\n        debug = _debug;\r\n    }\r\n\r\n    public function refresh() {}\r\n    public function process() {}\r\n    public function ontouchdown(e:TouchEvent) {}\r\n    public function ontouchup(e:TouchEvent) {}\r\n    public function ontouchmove(e:TouchEvent) {}\r\n    public function onmousedown(e:MouseEvent) {}\r\n    public function onmouseup(e:MouseEvent) {}\r\n    public function onmousemove(e:MouseEvent) {}\r\n    public function onmousewheel(e:MouseEvent) {}\r\n    public function onkeydown(e:KeyEvent) {}\r\n    public function onkeyup(e:KeyEvent) {}\r\n    public function onwindowsized(e:WindowEvent) {}\r\n    public function create() {}\r\n    public function show() {\r\n        visible = true;\r\n    }\r\n    public function hide() {\r\n        visible = false;\r\n    }\r\n}\r\n","package luxe.debug;\r\n\r\nimport luxe.Text;\r\nimport luxe.NineSlice;\r\nimport phoenix.Batcher;\r\n\r\ntypedef DebugInspectorOptions = {\r\n    ? batcher : Batcher,\r\n    ? pos : Vector,\r\n    ? size : Vector,\r\n}\r\n\r\n@:noCompletion class Inspector {\r\n\r\n    @:isVar public var pos (default,set): Vector;\r\n    @:isVar public var size (default,set): Vector;\r\n\r\n    public var title : Text;\r\n    public var version : Text;\r\n    public var window : Sprite;\r\n    public var batcher : Batcher;\r\n\r\n    public var onrefresh : Void->Void;\r\n\r\n    public function new( _options:DebugInspectorOptions ) {\r\n\r\n        size = new Vector(Std.int(Luxe.screen.w*0.2), Std.int(Luxe.screen.h*0.6));\r\n        pos = new Vector((Luxe.screen.w/2) - (size.x/2), (Luxe.screen.h/2) - (size.y/2));\r\n\r\n            //default to the internal batcher\r\n        batcher = Luxe.renderer.batcher;\r\n\r\n        if(_options != null) {\r\n\r\n            if(_options.batcher != null) batcher = _options.batcher;\r\n            if(_options.size != null) size = _options.size;\r\n            if(_options.pos != null) pos = _options.pos;\r\n\r\n        } //_options != null\r\n\r\n    } //new\r\n\r\n    public function refresh() {\r\n\r\n        if(window == null) {\r\n            create_window();\r\n        }\r\n\r\n        if(onrefresh != null) {\r\n            onrefresh();\r\n        }\r\n\r\n    } //refresh\r\n\r\n    public function show() {\r\n        refresh();\r\n        window.visible = true;\r\n        title.visible = true;\r\n        version.visible = true;\r\n    }\r\n\r\n    public function hide() {\r\n        window.visible = false;\r\n        title.visible = false;\r\n        version.visible = false;\r\n    }\r\n\r\n    function set_size(_size:Vector) {\r\n\r\n        if(_size != null && window != null) {\r\n            window.size = _size;\r\n            window.geometry.dirty = true;\r\n        }\r\n\r\n        if(version != null) {\r\n            version.pos = new Vector( pos.x+(_size.x-14), pos.y+6 );\r\n        }\r\n\r\n        return size = _size;\r\n\r\n    } //set_size\r\n\r\n    function set_pos(_pos:Vector) {\r\n\r\n        if(_pos != null && window != null) {\r\n            window.pos = _pos;\r\n            window.geometry.dirty = true;\r\n        }\r\n\r\n        if(title != null) {\r\n            title.pos = new Vector( _pos.x+14, _pos.y+6 );\r\n        }\r\n\r\n        if(version != null) {\r\n            version.pos = new Vector( _pos.x+(size.x-14), _pos.y+6 );\r\n        }\r\n\r\n        return pos = _pos;\r\n\r\n    } //set_pos\r\n\r\n    function create_window() {\r\n\r\n        window = new Sprite({\r\n            name: 'debug.window',\r\n            batcher: batcher,\r\n            no_scene: true,\r\n            depth: 999.1,\r\n            visible: false,\r\n            color: new Color().rgb(0x161619),\r\n            centered: false,\r\n            size: size,\r\n            pos: pos,\r\n        });\r\n\r\n        title = new Text({\r\n            name: 'debug.title',\r\n            batcher: batcher,\r\n            no_scene: true,\r\n            depth: 999.2,\r\n            visible: false,\r\n            color: new Color().rgb(0xf6007b),\r\n            pos: new Vector( pos.x+14, pos.y+6 ),\r\n\r\n            text: 'Inspector',\r\n            point_size: 15,\r\n            align: TextAlign.left\r\n        });\r\n\r\n        version = new Text({\r\n            name: 'debug.version',\r\n            batcher: batcher,\r\n            no_scene: true,\r\n            depth: 999.2,\r\n            visible: false,\r\n            color: new Color().rgb(0x545459),\r\n            pos: new Vector( pos.x+(size.x-14), pos.y+6 ),\r\n\r\n            text: '${Luxe.core.runtime_info()}',\r\n            point_size: 13,\r\n            align: TextAlign.right,\r\n        });\r\n\r\n        window.locked = true;\r\n        window.geometry.id = 'debug.Inspector';\r\n        title.geometry.id = 'debug.title.text';\r\n        version.geometry.id = 'debug.version.text';\r\n\r\n    }\r\n\r\n}\r\n","package phoenix;\r\n\r\nimport luxe.tween.Actuate;\r\nimport luxe.tween.actuators.SimpleActuator;\r\n\r\n//Pieces of the color conversion code come from\r\n// http://haxe.org/doc/snip/colorconverter\r\nimport luxe.options.ColorOptions;\r\n\r\nclass Color {\r\n\r\n    @:isVar public var r (default, set) : Float = 1.0;\r\n    @:isVar public var g (default, set) : Float = 1.0;\r\n    @:isVar public var b (default, set) : Float = 1.0;\r\n\r\n    public var a : Float = 1.0;\r\n\r\n    var is_hsl : Bool = false;\r\n    var is_hsv : Bool = false;\r\n    var refreshing : Bool = false;\r\n\r\n    public function new( _r:Float = 1.0, _g:Float = 1.0, _b:Float = 1.0, _a:Float = 1.0 ) {\r\n\r\n        r = _r;\r\n        g = _g;\r\n        b = _b;\r\n        a = _a;\r\n\r\n    }\r\n\r\n    function set_r(_r:Float) {\r\n        r = _r;\r\n\r\n        if(!refreshing) {\r\n            if(is_hsl) {\r\n                var colorhsl : ColorHSL = cast this;\r\n                colorhsl.fromColor(this);\r\n            } else if(is_hsv) {\r\n                var colorhsv : ColorHSV = cast this;\r\n                colorhsv.fromColor(this);\r\n            }\r\n        } //refreshing\r\n\r\n        return r;\r\n    }\r\n    function set_g(_g:Float) {\r\n        g = _g;\r\n\r\n        if(!refreshing) {\r\n            if(is_hsl) {\r\n                var colorhsl : ColorHSL = cast this;\r\n                colorhsl.fromColor(this);\r\n            } else if(is_hsv) {\r\n                var colorhsv : ColorHSV = cast this;\r\n                colorhsv.fromColor(this);\r\n            }\r\n        } //!refreshing\r\n\r\n        return g;\r\n    }\r\n    function set_b(_b:Float) {\r\n        b = _b;\r\n\r\n        if(!refreshing) {\r\n            if(is_hsl) {\r\n                var colorhsl : ColorHSL = cast this;\r\n                colorhsl.fromColor(this);\r\n            } else if(is_hsv) {\r\n                var colorhsv : ColorHSV = cast this;\r\n                colorhsv.fromColor(this);\r\n            }\r\n        } //refreshing\r\n\r\n        return b;\r\n    }\r\n\r\n\r\n    public static function random(?_include_alpha:Bool=false) : Color {\r\n        return new Color(Math.random(), Math.random(), Math.random(), _include_alpha ? Math.random() : 1.0 );\r\n    }\r\n\r\n    public function set( ?_r : Float, ?_g : Float, ?_b : Float, ?_a : Float ) : Color {\r\n\r\n        var _setr = r;\r\n        var _setg = g;\r\n        var _setb = b;\r\n        var _seta = a;\r\n\r\n            //assign new values\r\n        if(_r != null) _setr = _r;\r\n        if(_g != null) _setg = _g;\r\n        if(_b != null) _setb = _b;\r\n        if(_a != null) _seta = _a;\r\n\r\n        r = _setr;\r\n        g = _setg;\r\n        b = _setb;\r\n        a = _seta;\r\n\r\n        return this;\r\n    }\r\n\r\n    public function maxRGB() : Float {\r\n        return Math.max(r, Math.max(g, b));\r\n    }\r\n\r\n    public function minRGB() : Float {\r\n        return Math.min(r, Math.min(g, b));\r\n    }\r\n\r\n    public function tween( ?_time_in_seconds:Float = 0.5, ?_properties_to_tween:ColorOptions = null, _override:Bool = true ) {\r\n\r\n        if(_properties_to_tween != null) {\r\n\r\n            var _dest_r = r;\r\n            var _dest_g = g;\r\n            var _dest_b = b;\r\n            var _dest_a = a;\r\n\r\n            var _change_r = false;\r\n            var _change_g = false;\r\n            var _change_b = false;\r\n            var _change_a = false;\r\n\r\n            if(Std.is(_properties_to_tween, Color)) {\r\n\r\n                _dest_r = _properties_to_tween.r;\r\n                _dest_g = _properties_to_tween.g;\r\n                _dest_b = _properties_to_tween.b;\r\n                _dest_a = _properties_to_tween.a;\r\n\r\n                _change_r = true;\r\n                _change_g = true;\r\n                _change_b = true;\r\n                _change_a = true;\r\n\r\n            } else {\r\n\r\n                if(_properties_to_tween.r != null) { _dest_r = _properties_to_tween.r; _change_r = true; }\r\n                if(_properties_to_tween.g != null) { _dest_g = _properties_to_tween.g; _change_g = true; }\r\n                if(_properties_to_tween.b != null) { _dest_b = _properties_to_tween.b; _change_b = true; }\r\n                if(_properties_to_tween.a != null) { _dest_a = _properties_to_tween.a; _change_a = true; }\r\n\r\n            }\r\n\r\n            var _properties : Dynamic = {};\r\n\r\n            if(_change_r) _properties.r = _dest_r;\r\n            if(_change_g) _properties.g = _dest_g;\r\n            if(_change_b) _properties.b = _dest_b;\r\n            if(_change_a) _properties.a = _dest_a;\r\n\r\n            return Actuate.tween( this, _time_in_seconds, _properties, _override );\r\n\r\n        } else { //dest is null?\r\n            throw \" Warning: Color.tween passed a null destination \";\r\n        }\r\n\r\n    } //tween\r\n\r\n    public function clone() : Color {\r\n        return new Color(r,g,b,a);\r\n    } //clone\r\n\r\n    public function rgb(_rgb:Int = 0xFFFFFF) : Color {\r\n        from_int(_rgb);\r\n        return this;\r\n    } //rgb\r\n\r\n    public function toColorHSL() : ColorHSL {\r\n        return new ColorHSL().fromColor(this);\r\n    } //toColorHSL\r\n\r\n    public function toColorHSV() : ColorHSV {\r\n        return new ColorHSV().fromColor(this);\r\n    } //toColorHSV\r\n\r\n    public function fromColorHSV( _color_hsv:ColorHSV ) {\r\n\r\n        var d:Float = (_color_hsv.h%360) / 60;\r\n\r\n        if (d < 0) {\r\n            d += 6;\r\n        }\r\n\r\n        var hf:Int = Math.floor(d);\r\n        var hi:Int = hf % 6;\r\n        var f:Float = d - hf;\r\n\r\n        var v:Float = _color_hsv.v;\r\n        var p:Float = _color_hsv.v * (1 - _color_hsv.s);\r\n        var q:Float = _color_hsv.v * (1 - f * _color_hsv.s);\r\n        var t:Float = _color_hsv.v * (1 - (1 - f) * _color_hsv.s);\r\n\r\n        switch(hi) {\r\n            case 0: { r = v; g = t; b = p; };\r\n            case 1: { r = q; g = v; b = p; };\r\n            case 2: { r = p; g = v; b = t; };\r\n            case 3: { r = p; g = q; b = v; };\r\n            case 4: { r = t; g = p; b = v; };\r\n            case 5: { r = v; g = p; b = q; };\r\n        }\r\n\r\n        a = _color_hsv.a;\r\n\r\n    } //fromColorHSV\r\n\r\n    public function fromColorHSL( _color_hsl:ColorHSL ) : Color {\r\n\r\n        var q:Float = 1;\r\n\r\n        if (_color_hsl.l < 1 / 2) {\r\n            q = _color_hsl.l * (1 + _color_hsl.s);\r\n        } else {\r\n            q = _color_hsl.l + _color_hsl.s - (_color_hsl.l * _color_hsl.s);\r\n        }\r\n\r\n        var p:Float = 2 * _color_hsl.l - q;\r\n        var hk:Float = (_color_hsl.h % 360) / 360;\r\n\r\n        var tr:Float = hk + 1 / 3;\r\n        var tg:Float = hk;\r\n        var tb:Float = hk - 1 / 3;\r\n\r\n        var tc:Array<Float> = [ tr, tg, tb ];\r\n\r\n            for (n in 0...tc.length) {\r\n\r\n                var t:Float = tc[n];\r\n\r\n                if (t < 0) t += 1;\r\n                if (t > 1) t -= 1;\r\n\r\n                tc[n] = if (t < 1 / 6) {\r\n                    p + ((q - p) * 6 * t);\r\n                } else if (t < 1 / 2) {\r\n                    q;\r\n                } else if (t < 2 / 3) {\r\n                    p + ((q - p) * 6 * (2 / 3 - t));\r\n                } else {\r\n                    p;\r\n                }\r\n\r\n            } //for each in tc\r\n\r\n            //store in rgb\r\n        r = tc[0];\r\n        g = tc[1];\r\n        b = tc[2];\r\n            //alpha is passed straight through\r\n        a = _color_hsl.a;\r\n\r\n        return this;\r\n\r\n    } // fromColorHSL\r\n\r\n        //make it traceable\r\n    function toString() : String {\r\n        return \"{ r:\"+r+\" , g:\"+g+\" , b:\"+b+\" , a:\"+a+\" }\";\r\n    }\r\n\r\n    function from_int(_i:Int) {\r\n\r\n        var _r = _i >> 16;\r\n        var _g = _i >> 8 & 0xFF;\r\n        var _b = _i & 0xFF;\r\n\r\n            //convert to 0-1\r\n        r = _r / 255;\r\n        g = _g / 255;\r\n        b = _b / 255;\r\n\r\n            //alpha not specified in 0xFFFFFF\r\n            //but we don't need to clobber it,\r\n            //it was set in the member list\r\n        // a = 1.0;\r\n    }\r\n\r\n} //Color\r\n\r\nclass ColorHSL extends Color {\r\n\r\n    @:isVar public var h (default,set) : Float = 0.0;\r\n    @:isVar public var s (default,set) : Float = 1.0;\r\n    @:isVar public var l (default,set) : Float = 1.0;\r\n\r\n    function set_h(_h:Float) {\r\n        h = _h;\r\n        _refresh();\r\n        return _h;\r\n    }\r\n    function set_s(_s:Float) {\r\n        s = _s;\r\n        _refresh();\r\n        return _s;\r\n    }\r\n    function set_l(_l:Float) {\r\n        l = _l;\r\n        _refresh();\r\n        return _l;\r\n    }\r\n\r\n    public function new( _h:Float = 0.0, _s:Float = 1.0, _l:Float = 1.0, _a:Float = 1.0 ) {\r\n\r\n        super();\r\n\r\n        is_hsl = true;\r\n\r\n        h = _h;\r\n        s = _s;\r\n        l = _l;\r\n        a = _a;\r\n\r\n        _refresh();\r\n\r\n    } //new\r\n\r\n    public override function set( ?_h : Float, ?_s : Float, ?_l : Float, ?_a : Float ) : ColorHSL {\r\n\r\n        var _seth = h;\r\n        var _sets = s;\r\n        var _setl = l;\r\n        var _seta = a;\r\n\r\n            //assign new values\r\n        if(_h != null) _seth = _h;\r\n        if(_s != null) _sets = _s;\r\n        if(_l != null) _setl = _l;\r\n        if(_a != null) _seta = _a;\r\n\r\n            h = _seth;\r\n            s = _sets;\r\n            l = _setl;\r\n            a = _seta;\r\n\r\n        _refresh();\r\n\r\n        return this;\r\n\r\n    } //set\r\n\r\n    public override function tween( ?_time_in_seconds:Float = 0.5, ?_dest:ColorOptions = null, _override:Bool = true ) {\r\n\r\n        super.tween(_time_in_seconds, _dest, _override);\r\n\r\n        if(_dest != null) {\r\n\r\n            var _dest_h = h;\r\n            var _dest_s = s;\r\n            var _dest_l = l;\r\n            var _dest_a = a;\r\n\r\n            var _change_h = false;\r\n            var _change_s = false;\r\n            var _change_l = false;\r\n            var _change_a = false;\r\n\r\n            if(Std.is(_dest, ColorHSL)) {\r\n\r\n                _dest_h = _dest.h;\r\n                _dest_s = _dest.s;\r\n                _dest_l = _dest.l;\r\n                _dest_a = _dest.a;\r\n\r\n                _change_h = true;\r\n                _change_s = true;\r\n                _change_l = true;\r\n                _change_a = true;\r\n\r\n            } else {\r\n\r\n                if(_dest.h != null) { _dest_h = _dest.h; _change_h = true; }\r\n                if(_dest.s != null) { _dest_s = _dest.s; _change_s = true; }\r\n                if(_dest.l != null) { _dest_l = _dest.l; _change_l = true; }\r\n                if(_dest.a != null) { _dest_a = _dest.a; _change_a = true; }\r\n\r\n            }\r\n\r\n            var _properties : Dynamic = {};\r\n\r\n            if(_change_h) _properties.h = _dest_h;\r\n            if(_change_s) _properties.s = _dest_s;\r\n            if(_change_l) _properties.l = _dest_l;\r\n            if(_change_a) _properties.a = _dest_a;\r\n\r\n            return Actuate.tween( this, _time_in_seconds, _properties, _override );\r\n\r\n        } else { //dest is null?\r\n            throw \" Warning: Color.tween passed a null destination \";\r\n        }\r\n\r\n    } //tween\r\n\r\n    public function _refresh() : ColorHSL {\r\n\r\n        refreshing = true;\r\n            super.fromColorHSL(this);\r\n        refreshing = false;\r\n\r\n        return this;\r\n    } //_refresh\r\n\r\n    public override function clone() : ColorHSL {\r\n        return new ColorHSL(h,s,l,a);\r\n    } //clone\r\n\r\n    public function toColor() : Color {\r\n        return cast _refresh();\r\n    } //toColor\r\n\r\n    public function fromColor( _color:Color ) : ColorHSL {\r\n\r\n        var max:Float = _color.maxRGB();\r\n        var min:Float = _color.minRGB();\r\n        var add:Float = max + min;\r\n        var sub:Float = max - min;\r\n\r\n        var _h:Float = 0;\r\n        if (max == min) {\r\n            _h = 0;\r\n        } else if (max == _color.r) {\r\n            _h = ((60 * (_color.g - _color.b) / sub + 360) % 360);\r\n        } else if (max == _color.g) {\r\n            _h = (60 * (_color.b - _color.r) / sub + 120);\r\n        } else if (max == _color.b) {\r\n            _h = (60 * (_color.r - _color.g) / sub + 240);\r\n        }\r\n\r\n        var _l:Float = add / 2;\r\n\r\n        var _s:Float = if (max == min) {\r\n            0;\r\n        } else if (l <= 1 / 2) {\r\n            sub / add;\r\n        } else {\r\n            sub / (2 - add);\r\n        }\r\n\r\n            h = _h;\r\n            s = _s;\r\n            l = _l;\r\n            a = _color.a;\r\n\r\n        return this;\r\n\r\n    } //fromColor\r\n\r\n    public override function toString() : String {\r\n        return \"{ h:\"+h+\" , s:\"+s+\" , l:\"+l+\" , a:\"+a+\" }\";\r\n    }\r\n\r\n\r\n} //ColorHSL\r\n\r\n\r\nclass ColorHSV extends Color {\r\n\r\n    @:isVar public var h (default,set) : Float = 0.0;\r\n    @:isVar public var s (default,set) : Float = 0.0;\r\n    @:isVar public var v (default,set) : Float = 1.0;\r\n\r\n    function set_h(_h:Float) {\r\n        h = _h;\r\n        _refresh();\r\n        return _h;\r\n    }\r\n    function set_s(_s:Float) {\r\n        s = _s;\r\n        _refresh();\r\n        return s;\r\n    }\r\n    function set_v(_v:Float) {\r\n        v = _v;\r\n        _refresh();\r\n        return v;\r\n    }\r\n\r\n    public function new( _h:Float = 0.0, _s:Float = 0.0, _v:Float = 1.0, _a:Float = 1.0 ) {\r\n\r\n        super();\r\n\r\n        is_hsv = true;\r\n\r\n        h = _h;\r\n        s = _s;\r\n        v = _v;\r\n        a = _a;\r\n\r\n        _refresh();\r\n\r\n    } //new\r\n\r\n    public override function set( ?_h : Float, ?_s : Float, ?_v : Float, ?_a : Float ) : Color {\r\n\r\n        var _seth = h;\r\n        var _sets = s;\r\n        var _setv = v;\r\n        var _seta = a;\r\n\r\n            //assign new values\r\n        if(_h != null) _seth = _h;\r\n        if(_s != null) _sets = _s;\r\n        if(_v != null) _setv = _v;\r\n        if(_a != null) _seta = _a;\r\n\r\n            h = _seth;\r\n            s = _sets;\r\n            v = _setv;\r\n            a = _seta;\r\n\r\n            //update parent rgba values\r\n        _refresh();\r\n\r\n        return this;\r\n\r\n    } //set\r\n\r\n    public override function tween( ?_time_in_seconds:Float = 0.5, ?_dest:ColorOptions = null, _override:Bool = true ) {\r\n\r\n        super.tween(_time_in_seconds, _dest, _override);\r\n\r\n        if(_dest != null) {\r\n\r\n            var _dest_h = h;\r\n            var _dest_s = s;\r\n            var _dest_v = v;\r\n            var _dest_a = a;\r\n\r\n            var _change_h = false;\r\n            var _change_s = false;\r\n            var _change_v = false;\r\n            var _change_a = false;\r\n\r\n            if(Std.is(_dest, ColorHSV)) {\r\n\r\n                _dest_h = _dest.h;\r\n                _dest_s = _dest.s;\r\n                _dest_v = _dest.v;\r\n                _dest_a = _dest.a;\r\n\r\n                _change_h = true;\r\n                _change_s = true;\r\n                _change_v = true;\r\n                _change_a = true;\r\n\r\n            } else {\r\n\r\n                if(_dest.h != null) { _dest_h = _dest.h; _change_h = true; }\r\n                if(_dest.s != null) { _dest_s = _dest.s; _change_s = true; }\r\n                if(_dest.v != null) { _dest_v = _dest.v; _change_v = true; }\r\n                if(_dest.a != null) { _dest_a = _dest.a; _change_a = true; }\r\n\r\n            }\r\n\r\n            var _properties : Dynamic = {};\r\n\r\n            if(_change_h) _properties.h = _dest_h;\r\n            if(_change_s) _properties.s = _dest_s;\r\n            if(_change_v) _properties.v = _dest_v;\r\n            if(_change_a) _properties.a = _dest_a;\r\n\r\n            return Actuate.tween( this, _time_in_seconds, _properties, _override );\r\n\r\n        } else { //dest is null?\r\n            throw \" Warning: Color.tween passed a null destination \";\r\n        }\r\n\r\n    } //tween\r\n\r\n    public function _refresh() {\r\n\r\n        refreshing = true;\r\n            super.fromColorHSV(this);\r\n        refreshing = false;\r\n\r\n        return this;\r\n    }\r\n\r\n    public override function clone() : ColorHSV {\r\n        return new ColorHSV(h,s,v,a);\r\n    } //clone\r\n\r\n    public function toColor() : Color {\r\n        //make sure the values are passed up to parent color\r\n        return cast _refresh();\r\n    } //toColor\r\n\r\n    public override function toColorHSL() : ColorHSL {\r\n        _refresh();\r\n        return super.toColorHSL();\r\n    } //to hsl\r\n\r\n    public override function fromColorHSL( _color_hsl:ColorHSL ) : ColorHSV {\r\n            //make sure that it it's updated in the parent\r\n        _color_hsl._refresh();\r\n        return fromColor( cast _color_hsl );\r\n    } //from hsl\r\n\r\n    public function fromColor( _color:Color ) : ColorHSV {\r\n\r\n        var max:Float = _color.maxRGB();\r\n        var min:Float = _color.minRGB();\r\n        var add:Float = max + min;\r\n        var sub:Float = max - min;\r\n\r\n        var _h:Float = 0;\r\n\r\n        if (max == min) {\r\n            _h = 0;\r\n        } else if (max == _color.r) {\r\n            _h = (60 * (_color.g - _color.b) / sub + 360) % 360;\r\n        } else if (max == _color.g) {\r\n            _h = 60 * (_color.b - _color.r) / sub + 120;\r\n        } else if (max == _color.b) {\r\n            _h = 60 * (_color.r - _color.g) / sub + 240;\r\n        }\r\n\r\n        var _s:Float = if (max == 0) {\r\n            0;\r\n        } else {\r\n            1 - min / max;\r\n        }\r\n\r\n        h = _h;\r\n        s = _s;\r\n        v = max;\r\n        a = _color.a;\r\n\r\n        return this;\r\n\r\n    } //fromColor\r\n\r\n    public override function toString() : String {\r\n        return \"{ h:\"+h+\" , s:\"+s+\" , v:\"+v+\" , a:\"+a+\" }\";\r\n    }\r\n\r\n} //ColorHSV\r\n","package luxe.debug;\r\n\r\nimport luxe.Input.MouseEvent;\r\nimport luxe.Rectangle;\r\nimport luxe.Text;\r\nimport luxe.utils.Maths;\r\nimport luxe.Vector;\r\nimport phoenix.Batcher.PrimitiveType;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.geometry.QuadGeometry;\r\nimport phoenix.geometry.Vertex;\r\n\r\nclass ProfilerDebugView extends luxe.debug.DebugView {\r\n\r\n    public static var lists:Map<String,ProfilerValue>;\r\n\r\n    public static var color_red : Color = new Color().rgb(0xcc0000);\r\n    public static var color_green : Color = new Color().rgb(0x228844);\r\n    public static var color_normal : Color = new Color().rgb(0xf0f0f0);\r\n\r\n    #if cpp\r\n        public var memgraph:ProfilerGraph;\r\n        public var memgraph2:ProfilerGraph;\r\n        public var memgraph3:ProfilerGraph;\r\n        public var memgraph4:ProfilerGraph;\r\n        public var memtext:Text;\r\n    #end //cpp\r\n\r\n    public function new(_debug:luxe.Debug) {\r\n\r\n        super(_debug);\r\n\r\n        name = 'Profiler';\r\n        lists = new Map();\r\n\r\n    } //new\r\n\r\n    var margin = 32;\r\n    override function create() {\r\n\r\n        #if cpp\r\n\r\n            var debug = Luxe.debug;\r\n\r\n            var viewrect = new Rectangle(\r\n                debug.inspector.pos.x + (margin/2),\r\n                debug.inspector.pos.y + (margin*1.5),\r\n                debug.inspector.size.x - margin,\r\n                debug.inspector.size.y - margin - (margin*1.5)\r\n            );\r\n\r\n            memgraph = new ProfilerGraph('usage');\r\n            memgraph2 = new ProfilerGraph('current',false);\r\n            memgraph3 = new ProfilerGraph('large',false);\r\n            memgraph4 = new ProfilerGraph('reserved',false);\r\n\r\n            var gh = 48;\r\n            var gp = new Vector(viewrect.x, viewrect.h );\r\n            var gw = viewrect.w;//Luxe.screen.w-(Luxe.debug.padding.x*4);\r\n\r\n                memgraph.color = new Color().rgb(0xf6007b);\r\n                memgraph2.color = new Color().rgb(0x007bf6);\r\n                memgraph3.color = new Color(0,0,0,0.5).rgb(0xf6001a);\r\n                memgraph4.color = new Color(0,0,0,0.5).rgb(0x00f67b);\r\n\r\n                memgraph.history = memgraph2.history = memgraph3.history = memgraph4.history = 256;\r\n                memgraph.height = memgraph2.height = memgraph3.height = memgraph4.height = gh;\r\n                memgraph.width = memgraph2.width = memgraph3.width = memgraph4.width = gw;\r\n\r\n            memgraph.create();\r\n            memgraph2.create();\r\n            memgraph3.create();\r\n            memgraph4.create();\r\n\r\n            memgraph.pos = memgraph2.pos = memgraph3.pos = memgraph4.pos = gp;\r\n\r\n            memtext = new Text({\r\n                no_scene : true,\r\n                name : 'profiler.memgraph',\r\n                pos : gp.clone().add_xyz(0, -gh),\r\n                color : ProfilerDebugView.color_normal.clone(),\r\n                point_size : 12,\r\n                depth : 999.3,\r\n                text : '1 mb',\r\n                batcher : Luxe.debug.batcher,\r\n                visible: false,\r\n            });\r\n\r\n            memtext.color.a = 0.4;\r\n\r\n        #end //cpp\r\n\r\n    } //create\r\n\r\n    var tickamount = 0.017;\r\n    var nexttick = 0.0;\r\n    var peak = 1.0;\r\n    var minpeak = 1.0;\r\n    var _byte_levels = ['bytes', 'Kb', 'MB', 'GB', 'TB'];\r\n\r\n    function update_graph(graph:ProfilerGraph, val:Float) {\r\n\r\n        var _byte_index = Math.floor( Math.log(val) / Math.log(1024) );\r\n        var _byte_value = ( val / Math.pow(1024, _byte_index) );\r\n\r\n        if(_byte_value > peak) {\r\n            peak = Math.ceil(_byte_value + (_byte_value*0.1));\r\n        }\r\n\r\n        if(_byte_value < minpeak) {\r\n            minpeak = Math.floor(_byte_value - (_byte_value*0.1));\r\n        }\r\n\r\n        if(graph.max != peak) {\r\n            graph.max = peak;\r\n        }\r\n\r\n        graph.ping = Maths.fixed(_byte_value,4);\r\n\r\n    } //update_graph\r\n\r\n    override function process() {\r\n\r\n        #if cpp\r\n\r\n            var u = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_USAGE);\r\n            var c = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_CURRENT);\r\n            var l = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_LARGE);\r\n            var r = cpp.vm.Gc.memInfo(cpp.vm.Gc.MEM_INFO_RESERVED);\r\n\r\n            update_graph(memgraph,  u);\r\n            update_graph(memgraph2, c);\r\n            update_graph(memgraph3, l);\r\n            update_graph(memgraph4, r);\r\n\r\n            var _index = Math.floor( Math.log(u) / Math.log(1024) );\r\n            var s = _byte_levels[_index];\r\n\r\n            memtext.text =\r\n                '(y axis) ${memgraph.max} $s\\n'+\r\n                'usage/pink: ${memgraph.ping} $s  |  '+\r\n                'current/blue: ${memgraph2.ping} $s\\n'+\r\n                'large/red: ${memgraph3.ping} $s  |  '+\r\n                'reserved/green: ${memgraph4.ping} $s\\n';\r\n\r\n        #end //cpp\r\n\r\n    }\r\n\r\n    var _setup : Bool = false;\r\n\r\n    public static function add_offset(_id:String, _offset:String) {\r\n        var _item = lists.get(_id);\r\n        var _offsetitem = lists.get(_offset);\r\n        if(_item != null && _offsetitem != null) {\r\n            _item.offsets.push(_offsetitem);\r\n        } else {\r\n            trace(\"not found for \" + _id + \" or \" + _offset);\r\n            trace(_item + \" / \" + _offsetitem);\r\n        }\r\n    }\r\n\r\n    public static function hide_item(_id:String) {\r\n        var _item = lists.get(_id);\r\n        if(_item != null) {\r\n            _item.hidden = true;\r\n            _item.bar.hide();\r\n        }\r\n    } //hide_item\r\n\r\n    public static function show_item(_id:String) {\r\n        var _item = lists.get(_id);\r\n        if(_item != null) {\r\n            _item.hidden = false;\r\n            _item.bar.show();\r\n        }\r\n    } //show_item\r\n\r\n    public static function start(_id:String, ?_max:Float) {\r\n\r\n        var _item = lists.get(_id);\r\n\r\n        if(_item == null) {\r\n            //create it\r\n            _item = new ProfilerValue(_id, new ProfilerBar(_id, _max, new Color().rgb(0xf6007b) ));\r\n            _item.bar.pos = new Vector(Luxe.debug.padding.x*2,(Luxe.debug.padding.y*3) + (Lambda.count(lists) * 20) );\r\n            lists.set(_id, _item);\r\n        }\r\n\r\n        _item.start = Luxe.time;\r\n\r\n    } //start\r\n\r\n    public static function end(_id:String) {\r\n\r\n        var _item = lists.get(_id);\r\n\r\n        if(_item!=null) {\r\n            _item.set();\r\n        } else {\r\n            throw \"Debug / profile end called for \" + _id + \" but no start called\";\r\n        }\r\n\r\n    } //end\r\n\r\n    public override function show() {\r\n\r\n        for(_item in lists) {\r\n            if(!_item.hidden) {\r\n                _item.bar.show();\r\n            }\r\n        }\r\n\r\n        #if cpp\r\n            memgraph.show();\r\n            memgraph2.show();\r\n            memgraph3.show();\r\n            memgraph4.show();\r\n            memtext.visible = true;\r\n        #end //cpp\r\n\r\n        if(!_setup) {\r\n            // ProfilerDebugView.add_offset('core.render' , 'batch.debug_batcher');\r\n            // ProfilerDebugView.add_offset('core.render' , 'batch.debug_batcher_view');\r\n            // ProfilerDebugView.hide_item('batch.debug_batcher');\r\n            // ProfilerDebugView.hide_item('batch.debug_batcher_view');\r\n            _setup = true;\r\n        }\r\n\r\n    } //show\r\n\r\n    public override function hide() {\r\n\r\n        for(_item in lists) {\r\n            _item.bar.hide();\r\n        }\r\n\r\n        #if cpp\r\n            memgraph.hide();\r\n            memgraph2.hide();\r\n            memgraph3.hide();\r\n            memgraph4.hide();\r\n            memtext.visible = false;\r\n        #end\r\n\r\n    } //hide\r\n\r\n}\r\n\r\nprivate class ProfilerValue {\r\n\r\n    public var offsets : Array<ProfilerValue>;\r\n    public var bar : ProfilerBar;\r\n    public var name : String;\r\n    public var start : Float = 0.0;\r\n    public var history : Array<Float>;\r\n    public var avg : Int = 10;\r\n    public var hidden : Bool = false;\r\n    var count : Int = 0;\r\n    var accum : Float = 0;\r\n\r\n    public function new(_name:String, _bar:ProfilerBar) {\r\n        name = _name; bar = _bar;\r\n        history = [];\r\n        offsets = [];\r\n    }\r\n\r\n    public function set() {\r\n\r\n        var _t = Luxe.time - start;\r\n\r\n            //adjust by any offsets\r\n        for(_offset in offsets) {\r\n            _t -= _offset.history[_offset.history.length-1];\r\n        }\r\n\r\n            //push the value into history\r\n        history.push(_t);\r\n            //drop old values\r\n        if(history.length > avg) {\r\n            history.shift();\r\n        }\r\n\r\n        count++;\r\n            //reset if maxed average\r\n        if(count == avg) {\r\n            var __t = accum / avg;\r\n            bar.value = __t;\r\n            accum = 0;\r\n            count = 0;\r\n        }\r\n\r\n        accum += _t;\r\n\r\n        if(bar.visible) {\r\n            bar.text = Std.string(Maths.fixed(_t*1000,4));\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nprivate class ProfilerGraph {\r\n\r\n    public var graphbg_geometry : QuadGeometry;\r\n    public var graph_geometry : Geometry;\r\n    public var name : String;\r\n\r\n    var bg : Bool = true;\r\n\r\n    public var width : Float = 128;\r\n    public var height : Float = 8;\r\n    public var height2 : Float = 8;\r\n    public var history:Int = 33;\r\n    public var visible:Bool = false;\r\n    public var color:Color;\r\n\r\n    @:isVar public var max (default,set) : Float;\r\n    @:isVar public var ping (default,set) : Float;\r\n    @:isVar public var pos (default,set) : Vector;\r\n\r\n    var segment : Float;\r\n\r\n    public function new(_name:String, _bg:Bool=true){\r\n\r\n        bg = _bg;\r\n        name = _name;\r\n        color = new Color();\r\n        max = Maths.fixed((1/60) * 1000, 2);\r\n\r\n    } //new\r\n\r\n    public function create() {\r\n\r\n        segment = (width/history);\r\n        height2 = height*2;\r\n\r\n        if(bg) {\r\n            graphbg_geometry = Luxe.draw.box({\r\n                color : new Color().rgb(0x101010),\r\n                depth : 999.3,\r\n                batcher : Luxe.debug.batcher,\r\n                x:0, y:0, w:width-segment, h:height2\r\n            });\r\n        }\r\n\r\n        graph_geometry = new Geometry({\r\n            color : color,\r\n            depth : 999.33,\r\n            batcher : Luxe.debug.batcher\r\n        });\r\n\r\n        for(i in 0 ... history) {\r\n            var _b = new Vertex(new Vector(segment*i, height2), color);\r\n            graph_geometry.add( _b );\r\n        }\r\n\r\n        graph_geometry.primitive_type = PrimitiveType.line_strip;\r\n\r\n        hide();\r\n\r\n    }\r\n\r\n        //when changing the max we adjust\r\n        //all the values in the history to reflect\r\n    function set_max(_v:Float) {\r\n\r\n        var oldmax = max;\r\n        max = _v;\r\n\r\n        if(graph_geometry != null) {\r\n            var ratio = 1.0;\r\n            if(oldmax != 0) {\r\n                ratio = oldmax/_v;\r\n            }\r\n            for(v in graph_geometry.vertices) {\r\n                if(v != null) {\r\n                    //get the value out as 0 - 1\r\n                    var vp = 1.0 - (v.pos.y / height2);\r\n                    //multiply it by the old max to get the value\r\n                    var vv = vp * oldmax;\r\n                    //get the new % over new max\r\n                    vp = vv / max;\r\n                    //and then set the new y pos\r\n                    v.pos.y = height2*(1.0-vp);\r\n                }\r\n            }\r\n        }\r\n\r\n        return max;\r\n    }\r\n\r\n    function set_ping(_v:Float) {\r\n\r\n        var _vv = Maths.fixed(_v,4);\r\n        var _p = _vv/max;\r\n\r\n            //shift every vertex left\r\n        for(i in 0 ... history) {\r\n            //copy x from the next one\r\n            var v = graph_geometry.vertices[i];\r\n            if(i < (history-1)) {\r\n                var v1 = graph_geometry.vertices[i+1];\r\n                if(v1 != null) {\r\n                    v.pos.y = Math.floor(v1.pos.y);\r\n                    v.color = v1.color;\r\n                }\r\n            }\r\n        }\r\n\r\n        _p = Maths.clamp(_p, 0.001, 1);\r\n\r\n        if(_p > 1) {\r\n            graph_geometry.vertices[history-1].color = ProfilerDebugView.color_red;\r\n        } else if(_p < 0.2) {\r\n            graph_geometry.vertices[history-1].color = ProfilerDebugView.color_green;\r\n        } else {\r\n            graph_geometry.vertices[history-1].color = color;\r\n        }\r\n\r\n        graph_geometry.vertices[history-1].pos.y = Math.floor(((height2)*(1.0-_p)));\r\n\r\n        return ping = _v;\r\n\r\n    } //set_ping\r\n\r\n    public function hide() {\r\n        visible = false;\r\n        graph_geometry.visible = false;\r\n        if(graphbg_geometry != null) graphbg_geometry.visible = false;\r\n    }\r\n\r\n    public function show() {\r\n        visible = true;\r\n        graph_geometry.visible = true;\r\n        if(graphbg_geometry != null) graphbg_geometry.visible = true;\r\n    }\r\n\r\n    function set_pos(_p:Vector) {\r\n\r\n        if(graphbg_geometry != null) graphbg_geometry.transform.pos.copy_from(_p);\r\n        graph_geometry.transform.pos.copy_from(_p);\r\n\r\n        return pos = _p;\r\n\r\n    } //set_pos\r\n\r\n} //ProfilerGraph\r\n\r\nprivate class ProfilerBar {\r\n\r\n    public var bar_geometry : QuadGeometry;\r\n    public var bg_geometry : QuadGeometry;\r\n    public var graph : ProfilerGraph;\r\n\r\n    public var text_item : Text;\r\n    public var name : String;\r\n\r\n    public var visible:Bool = false;\r\n    public var height : Float = 8;\r\n    public var max : Float = 16.7;\r\n\r\n    @:isVar public var text (default,set) : String;\r\n    @:isVar public var pos (default,set) : Vector;\r\n    @:isVar public var value (default,set) : Float;\r\n\r\n    public function new(_name:String, ?_max:Float, _color:Color) {\r\n\r\n        name = _name;\r\n\r\n        graph = new ProfilerGraph(_name);\r\n        graph.create();\r\n        if(_max != null) graph.max = _max;\r\n\r\n        text_item = new Text({\r\n            no_scene : true,\r\n            name : 'profiler.text.' + _name,\r\n            pos : new Vector(0,0),\r\n            color : _color,\r\n            point_size : height*1.8,\r\n            depth : 999.3,\r\n            text : '',\r\n            batcher : Luxe.debug.batcher\r\n        });\r\n\r\n        bg_geometry = Luxe.draw.box({\r\n            color : new Color().rgb(0x090909),\r\n            depth : 999.3,\r\n            batcher : Luxe.debug.batcher,\r\n            x:0, y:0, w:graph.width, h:graph.height\r\n        });\r\n\r\n        bar_geometry = Luxe.draw.box({\r\n            color : _color,\r\n            depth : 999.33,\r\n            batcher : Luxe.debug.batcher,\r\n            x:1, y:1, w:graph.width-2, h:graph.height-2\r\n        });\r\n\r\n        hide();\r\n\r\n    } //new\r\n\r\n    public function hide() {\r\n        visible = false;\r\n        bar_geometry.visible = false;\r\n        bg_geometry.visible = false;\r\n        text_item.visible = false;\r\n        graph.hide();\r\n    }\r\n\r\n    public function show() {\r\n        visible = true;\r\n        bar_geometry.visible = true;\r\n        bg_geometry.visible = true;\r\n        text_item.visible = true;\r\n        graph.show();\r\n    }\r\n\r\n    function set_value(_v:Float) {\r\n\r\n        graph.ping = _v * 1000;\r\n\r\n        if(!this.visible) return value = _v;\r\n\r\n        var _vv = Maths.fixed(_v*1000,4);\r\n        var _p = _vv/max;\r\n\r\n        _p = Maths.clamp(_p, 0.005, 1);\r\n\r\n        if(_p > 1) {\r\n            bar_geometry.color = ProfilerDebugView.color_red;\r\n        } else if(_p < 0.15) {\r\n            bar_geometry.color = ProfilerDebugView.color_green;\r\n        } else {\r\n            bar_geometry.color = ProfilerDebugView.color_normal;\r\n        }\r\n\r\n        var nx = (graph.width-2) * _p;\r\n        bar_geometry.resize_xy(nx, graph.height-2);\r\n\r\n        return value = _v;\r\n\r\n    } //set_value\r\n\r\n    function set_pos(_p:Vector) {\r\n        bg_geometry.transform.pos = _p;\r\n        bar_geometry.transform.pos.set_xy(_p.x+1, _p.y+1);\r\n        text_item.pos.set_xy(_p.x+(graph.width*2)+10, _p.y-6);\r\n        graph.pos = _p.clone().add_xyz(graph.width+2, -graph.height+4);\r\n        return pos = _p;\r\n    }\r\n\r\n    function set_text(_t:String) {\r\n        text_item.text = '$name (${graph.max}ms) | ${_t}ms';\r\n        return text = _t;\r\n    }\r\n\r\n} //ProfilerBar\r\n","package luxe.debug;\r\n\r\nimport luxe.Text;\r\nimport luxe.utils.Maths;\r\nimport luxe.Vector;\r\nimport luxe.Input;\r\nimport luxe.Screen.WindowEvent;\r\nimport luxe.Log.*;\r\n\r\nclass SceneDebugView extends luxe.debug.DebugView  {\r\n\r\n    var items_list : luxe.Text;\r\n\r\n    public function new(_debug:luxe.Debug) {\r\n\r\n        super(_debug);\r\n\r\n        name = 'Scenes';\r\n        scenes = [];\r\n\r\n    }\r\n\r\n    var margin = 32;\r\n    var font_size = 15.0;\r\n    public override function create() {\r\n\r\n        var debug = Luxe.debug;\r\n\r\n        items_list = new luxe.Text({\r\n            name: 'debug.scene.list',\r\n            depth : 999.3,\r\n            no_scene : true,\r\n            color : new Color(0,0,0,1).rgb(0xf6007b),\r\n            pos : new Vector(0,0),\r\n            font : Luxe.renderer.font,\r\n            text : get_list(),\r\n            point_size : font_size,\r\n            batcher : debug.batcher,\r\n            visible : false,\r\n        });\r\n\r\n        items_list.geometry.id = 'debug.scene.list.geometry';\r\n\r\n        resize();\r\n\r\n    }\r\n\r\n    var scenes : Array<luxe.Scene>;\r\n\r\n    public function add_scene(_scene:luxe.Scene) : Void {\r\n\r\n        assert(scenes.indexOf(_scene) == -1);\r\n\r\n        scenes.push(_scene);\r\n\r\n    } //add_scene\r\n\r\n    public function remove_scene(_scene:luxe.Scene) : Bool {\r\n\r\n            //maybe this isn't as handy\r\n        assert(scenes.indexOf(_scene) != -1);\r\n\r\n        var _result = scenes.remove(_scene);\r\n\r\n        refresh();\r\n\r\n        return _result;\r\n\r\n    } //remove_scene\r\n\r\n    public override function onkeydown(e:KeyEvent) {\r\n\r\n        if(e.keycode == Key.key_2 && visible) {\r\n            toggle_ids();\r\n        }\r\n\r\n    } //onkeydown\r\n\r\n    var hide_ids : Bool = true;\r\n    function toggle_ids() {\r\n        hide_ids = !hide_ids;\r\n        refresh();\r\n    }\r\n\r\n\r\n    inline function tabs(_d:Int) {\r\n        var res = '';\r\n        for(i in 0 ... _d) res += '    ';\r\n        return res;\r\n    }\r\n\r\n    inline function list_entity(_list:String, e:luxe.Entity, _depth:Int = 1) : String {\r\n\r\n        var _active = (e.active) ? '' : '/ inactive';\r\n        var _pre = (_depth == 1) ? tabs(_depth) : tabs(_depth)+'> ';\r\n        var _id = hide_ids ? '' : e.id;\r\n        var _comp_count = Lambda.count(e.components);\r\n        var _comp = '• ' + _comp_count;\r\n        var _childs = '> ${e.children.length}';\r\n\r\n        _list += '${_pre}$_id ${e.name} $_childs $_comp $_active\\n';\r\n\r\n        for(_name in e.components.keys()) {\r\n            var comp = e.components.get(_name);\r\n            var _comp_id = hide_ids ? '' : ' '+comp.id;\r\n            _list += tabs(_depth+1) + '•$_comp_id ${comp.name}\\n';\r\n        }\r\n\r\n        for(_child in e.children) {\r\n            _list = list_entity(_list, _child, _depth+2);\r\n        }\r\n\r\n        return _list;\r\n    }\r\n\r\n    inline function get_list() : String {\r\n\r\n        var _result = '';\r\n\r\n            for(_scene in scenes) {\r\n                var _id = hide_ids ? '' : '${_scene.id} ';\r\n\r\n                _result += _id;\r\n                _result += '${_scene.name} ';\r\n                _result += '( ${_scene.length} )\\n';\r\n                for(_entity in _scene.entities) {\r\n                    _result = list_entity(_result, _entity);\r\n                }\r\n            }\r\n\r\n        return _result;\r\n\r\n    } //get_list\r\n\r\n    public override function refresh() {\r\n\r\n        items_list.text = get_list();\r\n\r\n    } //refresh\r\n\r\n    public override function process() {\r\n\r\n        if(!visible) return;\r\n\r\n        var _has_changed = false;\r\n\r\n        for(_scene in scenes) {\r\n            if(_scene._has_changed) {\r\n                _has_changed = true;\r\n                _scene._has_changed = false;\r\n            }\r\n        } //each scene\r\n\r\n        if(_has_changed) {\r\n\r\n            refresh();\r\n\r\n        } //_has_changed\r\n\r\n    } //process\r\n\r\n#if (desktop || web)\r\n    //:wip:\r\n    override function onmousewheel(e:MouseEvent) {\r\n        var h = items_list.text_bounds.h;\r\n        var vh = Luxe.debug.inspector.size.y - margin;\r\n        var diff = h - vh;\r\n\r\n        var new_y = items_list.pos.y;\r\n        var max_y = Luxe.debug.padding.y +(margin*1.5);\r\n        var min_y = max_y;\r\n\r\n        if(diff > 0) {\r\n            min_y = (max_y - (diff+(margin*2)));\r\n        }\r\n\r\n        new_y -= (margin/2) * e.y;\r\n        new_y = Maths.clamp(new_y, min_y, max_y);\r\n        items_list.pos.y = new_y;\r\n    }\r\n#end\r\n\r\n//state\r\n    public override function show() {\r\n\r\n        super.show();\r\n        refresh();\r\n        items_list.visible = true;\r\n\r\n    } //show\r\n\r\n    public override function hide() {\r\n\r\n        super.hide();\r\n        items_list.visible = false;\r\n\r\n    } //hide\r\n\r\n//sizing\r\n\r\n    function resize() {\r\n\r\n        var debug = Luxe.debug;\r\n\r\n        var viewrect = new Rectangle(\r\n            debug.inspector.pos.x + (margin/2),\r\n            debug.inspector.pos.y + (margin*1.5),\r\n            debug.inspector.size.x - margin,\r\n            debug.inspector.size.y - margin - (margin*1.5)\r\n        );\r\n\r\n        var left = debug.padding.x + margin;\r\n        var top = debug.padding.y +(margin*1.5);\r\n\r\n        if(items_list != null) {\r\n            items_list.pos = new Vector(left, top);\r\n            items_list.clip_rect = viewrect;\r\n        }\r\n\r\n    }\r\n    override function onwindowsized(e:WindowEvent) resize();\r\n\r\n}\r\n","package luxe.debug;\r\n\r\nimport luxe.Input;\r\nimport luxe.Text;\r\nimport luxe.Screen.WindowEvent;\r\nimport luxe.resource.Resource;\r\nimport luxe.Resources;\r\nimport luxe.tween.Actuate;\r\nimport luxe.utils.Maths;\r\nimport phoenix.Shader;\r\nimport phoenix.Texture;\r\n\r\nclass StatsDebugView extends luxe.debug.DebugView  {\r\n\r\n    public var _last_render_stats : RenderStats;\r\n    public var _render_stats : RenderStats;\r\n\r\n    public var debug_draw_call_count : Int = 3;\r\n    public var debug_geometry_count : Int = 13;\r\n    public var font_size : Int = 15;\r\n\r\n        //stats console\r\n    public var render_stats_text : luxe.Text;\r\n    public var resource_list_text : luxe.Text;\r\n\r\n    public function new(_debug:luxe.Debug) {\r\n\r\n        super(_debug);\r\n\r\n        name = 'Statistics';\r\n\r\n        _last_render_stats = {\r\n            batchers : 0,\r\n            geometry_count : 0,\r\n            dynamic_batched_count : 0,\r\n            static_batched_count : 0,\r\n            visible_count : 0,\r\n            draw_calls : 0,\r\n            vert_count : 0\r\n        };\r\n\r\n        _render_stats = {\r\n            batchers : 0,\r\n            geometry_count : 0,\r\n            dynamic_batched_count : 0,\r\n            static_batched_count : 0,\r\n            visible_count : 0,\r\n            draw_calls : 0,\r\n            vert_count : 0\r\n        };\r\n\r\n    } //new\r\n\r\n    public function get_resource_stats_string() {\r\n\r\n        return Std.string( Luxe.resources.stats );\r\n\r\n    } //get_resource_stats_string\r\n\r\n    inline function get_batcher_info(b:phoenix.Batcher) {\r\n        var _s = '  ${b.name} (enabled ${b.enabled}, layer ${b.layer})\\n';\r\n            _s += '    shader: ' + (b.shader == null ? 'none' : b.shader.id) + '\\n';\r\n            _s += '    max verts/batch: ${b.max_verts}\\n';\r\n            _s += '    visible geom: ${b.visible_count}\\n';\r\n            _s += '    verts: ${b.vert_count}\\n';\r\n            _s += '    draw calls: ${b.draw_calls}\\n';\r\n            _s += '    batched: ${b.dynamic_batched_count}\\n';\r\n            _s += '    static: ${b.static_batched_count}\\n';\r\n        return _s;\r\n    }\r\n\r\n    public function get_render_stats_string() {\r\n\r\n        var _bs = '';\r\n\r\n        for(b in phoenix.Batcher.all) {\r\n            if(b.show_stats != 0) {\r\n                _bs += get_batcher_info(b);\r\n            }\r\n        }\r\n\r\n        return\r\n            'Renderer Statistics\\n\\n' +\r\n            'total geometry : ' + _render_stats.geometry_count + '\\n' +\r\n            'visible geometry : ' + _render_stats.visible_count + '\\n' +\r\n            'dynamic batch count : ' + _render_stats.dynamic_batched_count + '\\n' +\r\n            'static batch count : ' + _render_stats.static_batched_count + '\\n' +\r\n            'total draw calls : ' + _render_stats.draw_calls + '\\n' +\r\n            'total vert count : ' + _render_stats.vert_count + '\\n' +\r\n            'batchers : ' + _render_stats.batchers + '\\n'+\r\n            _bs;\r\n\r\n    } //get_render_stats_string\r\n\r\n    var margin = 32;\r\n    public override function create() {\r\n\r\n        var debug = Luxe.debug;\r\n\r\n        render_stats_text = new luxe.Text({\r\n            name:'debug.render.stats',\r\n            depth : 999.3,\r\n            no_scene : true,\r\n            color : new Color(0,0,0,1).rgb(0xf6007b),\r\n            pos : new Vector(0,0),\r\n            font : Luxe.renderer.font,\r\n            text : get_render_stats_string(),\r\n            point_size : font_size,\r\n            batcher : debug.batcher,\r\n            visible : false,\r\n        });\r\n\r\n        resource_list_text = new luxe.Text({\r\n            name:'debug.resource.stats',\r\n            depth : 999.3,\r\n            no_scene : true,\r\n            color : new Color(0,0,0,1).rgb(0xf6007b),\r\n            pos : new Vector(0,0),\r\n            font : Luxe.renderer.font,\r\n            text : '',\r\n            align : TextAlign.right,\r\n            point_size : font_size*0.9,\r\n            batcher : debug.batcher,\r\n            visible : false,\r\n        });\r\n\r\n        render_stats_text.geometry.id = 'debug.render.stats.geometry';\r\n        render_stats_text.geometry.id = 'debug.resource.stats.geometry';\r\n\r\n        resize();\r\n\r\n        Luxe.resources.on(ResourceEvent.any, function(_) if(visible) refresh() );\r\n\r\n    } //create\r\n\r\n    function resize() {\r\n\r\n        if( resource_list_text == null ||\r\n            render_stats_text == null) {\r\n            return;\r\n        }\r\n\r\n        var debug = Luxe.debug;\r\n\r\n        var viewrect = new Rectangle(\r\n            debug.inspector.pos.x + (margin/2),\r\n            debug.inspector.pos.y + (margin*1.5),\r\n            debug.inspector.size.x - margin,\r\n            debug.inspector.size.y - margin - (margin*1.5)\r\n        );\r\n\r\n        var left = debug.padding.x + margin;\r\n        var right = debug.padding.x + debug.inspector.size.x - margin;\r\n        var top = debug.padding.y +(margin*1.5);\r\n        var render_w = render_stats_text.text_bounds.w;\r\n        var render_h = render_stats_text.text_bounds.h;\r\n\r\n        if(resource_list_text != null) {\r\n            resource_list_text.pos = new Vector(right, top);\r\n            resource_list_text.clip_rect = viewrect;\r\n        }\r\n\r\n        if(render_stats_text != null) {\r\n            render_stats_text.pos = new Vector(left, top);\r\n            render_stats_text.clip_rect = viewrect;\r\n        }\r\n\r\n        reset_tween();\r\n\r\n    }\r\n\r\n    override function onwindowsized(e:WindowEvent) resize();\r\n\r\n    public override function refresh() {\r\n\r\n        var bytes_lists = '';\r\n        var text_lists = '';\r\n        var json_lists = '';\r\n        var texture_lists = '';\r\n        var rtt_lists = '';\r\n        var font_lists = '';\r\n        var shader_lists = '';\r\n        var audio_lists = '';\r\n\r\n        var _total_txt = 0;\r\n        var _total_tex = 0;\r\n        var _total_rtt = 0;\r\n        var _total_snd = 0;\r\n        var _total_all = 0;\r\n\r\n        inline function _res(res:Resource) return '${res.id} • ${res.ref}\\t\\n';\r\n        inline function _shd(res:Shader) return '(${res.vert_id}, ${res.frag_id})    ${res.id} • ${res.ref}\\t\\n';\r\n        inline function _txt(res:TextResource) {\r\n            var _l = if(res.asset != null  && res.asset.text != null) res.asset.text.length else 0;\r\n            _total_txt += _l;\r\n            return '(~${Luxe.utils.bytes_to_string(_l)}) ${res.id} • ${res.ref}\\t\\n';\r\n        }\r\n        inline function _tex(tex:Texture) {\r\n            if(tex.resource_type == ResourceType.render_texture) {\r\n                _total_rtt += tex.memory_use();\r\n            } else {\r\n                _total_tex += tex.memory_use();\r\n            }\r\n            return '(${tex.width_actual}x${tex.height_actual} ~${Luxe.utils.bytes_to_string(tex.memory_use())})    ${tex.id} • ${tex.ref}\\t\\n';\r\n        }\r\n        // inline\r\n        function _snd(res:AudioResource) return {\r\n            var _s = '';\r\n            if(res.source != null) {\r\n                _s += res.source.data.is_stream ? 'STREAM •' : '';\r\n                _s += ' ${res.id} • ${res.ref}\\t\\n';\r\n                if(res.source.data != null && !res.source.data.is_stream) {\r\n                    _s += '~${Luxe.utils.bytes_to_string(res.source.data.length)}';\r\n                    _total_snd += res.source.data.length;\r\n                }\r\n                if(res.source.data != null) {\r\n                    _s += ' ${res.source.data.channels}ch';\r\n                    _s += ' ${luxe.utils.Maths.fixed(res.source.data.rate/1000,1)}khz';\r\n                    _s += ' ${res.source.data.format}';\r\n                    _s += ' ${luxe.utils.Maths.fixed(res.source.duration(),4)}s';\r\n                }\r\n                _s += '\\t\\t\\n\\n';\r\n            } else {\r\n                _s += '${res.id} • ${res.ref}\\t\\n';\r\n            }\r\n\r\n            return _s;\r\n        }\r\n\r\n        for(res in Luxe.resources.cache) {\r\n            switch(res.resource_type) {\r\n                case ResourceType.bytes:            bytes_lists += _res(res);\r\n                case ResourceType.text:             text_lists += _txt(cast res);\r\n                case ResourceType.json:             json_lists += _res(res);\r\n                case ResourceType.texture:          texture_lists += _tex(cast res);\r\n                case ResourceType.render_texture:   rtt_lists += _tex(cast res);\r\n                case ResourceType.font:             font_lists += _res(res);\r\n                case ResourceType.shader:           shader_lists += _shd(cast res);\r\n                case ResourceType.audio:            audio_lists += _snd(cast res);\r\n                default:\r\n            }\r\n        }\r\n\r\n        inline function orblank(v:String) return (v == '') ? '-\\t\\n' : v;\r\n\r\n        _total_all += _total_txt;\r\n        _total_all += _total_tex;\r\n        _total_all += _total_rtt;\r\n        _total_all += _total_snd;\r\n\r\n        var lists = 'Resource list (${Luxe.resources.stats.total} • ~${Luxe.utils.bytes_to_string(_total_all)})\\n\\n';\r\n\r\n            lists += 'Bytes (${Luxe.resources.stats.bytes})\\n';\r\n                lists += orblank(bytes_lists);\r\n            lists += '\\nText (${Luxe.resources.stats.texts} • ~${Luxe.utils.bytes_to_string(_total_txt)})\\n';\r\n                lists += orblank(text_lists);\r\n            lists += '\\nJSON (${Luxe.resources.stats.jsons})\\n';\r\n                lists += orblank(json_lists);\r\n            lists += '\\nTexture (${Luxe.resources.stats.textures} • ~${Luxe.utils.bytes_to_string(_total_tex)})\\n';\r\n                lists += orblank(texture_lists);\r\n            lists += '\\nRenderTexture (${Luxe.resources.stats.rtt} • ~${Luxe.utils.bytes_to_string(_total_rtt)})\\n';\r\n                lists += orblank(rtt_lists);\r\n            lists += '\\nFont (${Luxe.resources.stats.fonts})\\n';\r\n                lists += orblank(font_lists);\r\n            lists += '\\nShader (${Luxe.resources.stats.shaders})\\n';\r\n                lists += orblank(shader_lists);\r\n            lists += '\\nAudio (${Luxe.resources.stats.audios} • ~${Luxe.utils.bytes_to_string(_total_snd)})\\n';\r\n                lists += orblank(audio_lists);\r\n\r\n        resource_list_text.text = lists;\r\n\r\n        if(resource_list_text.geometry != null) {\r\n            resource_list_text.geometry.dirty = true;\r\n        }\r\n\r\n        reset_tween();\r\n\r\n    } //refresh\r\n\r\n    public override function process() {\r\n\r\n        if(!visible) return;\r\n\r\n        var dirty = false;\r\n\r\n            //Update the local statistics\r\n        update_render_stats();\r\n\r\n        if(_last_render_stats.batchers != _render_stats.batchers)\r\n            { dirty = true; _last_render_stats.batchers = _render_stats.batchers; }\r\n        if(_last_render_stats.geometry_count != _render_stats.geometry_count)\r\n            { dirty = true; _last_render_stats.geometry_count = _render_stats.geometry_count; }\r\n        if(_last_render_stats.dynamic_batched_count != _render_stats.dynamic_batched_count)\r\n            { dirty = true; _last_render_stats.dynamic_batched_count = _render_stats.dynamic_batched_count; }\r\n        if(_last_render_stats.static_batched_count != _render_stats.static_batched_count)\r\n            { dirty = true; _last_render_stats.static_batched_count = _render_stats.static_batched_count; }\r\n        if(_last_render_stats.visible_count != _render_stats.visible_count)\r\n            { dirty = true; _last_render_stats.visible_count = _render_stats.visible_count; }\r\n        if(_last_render_stats.draw_calls != _render_stats.draw_calls)\r\n            { dirty = true; _last_render_stats.draw_calls = _render_stats.draw_calls; }\r\n        if(_last_render_stats.vert_count != _render_stats.vert_count)\r\n            { dirty = true; _last_render_stats.vert_count = _render_stats.vert_count; }\r\n\r\n        if(dirty) {\r\n            refresh_render_stats();\r\n        } //dirty\r\n\r\n    } //process\r\n\r\n#if (desktop || web)\r\n    //:wip:\r\n    override function onmousewheel(e:MouseEvent) {\r\n\r\n        Actuate.stop(resource_list_text.pos);\r\n        Actuate.stop(render_stats_text.pos);\r\n\r\n            var vh = Luxe.debug.inspector.size.y - margin;\r\n            var max_y = Luxe.debug.padding.y +(margin*1.5);\r\n            var min_y = max_y;\r\n\r\n        var px = e.pos.x/Luxe.screen.w;\r\n        if(px > 0.5) {\r\n\r\n                //resource list\r\n            var h = resource_list_text.text_bounds.h;\r\n            var diff = h - vh;\r\n            var new_y = resource_list_text.pos.y;\r\n\r\n            if(diff > 0) {\r\n                min_y = (max_y - (diff+(margin*2)));\r\n            }\r\n\r\n            new_y -= (margin/2) * e.y;\r\n            new_y = Maths.clamp(new_y, min_y, max_y);\r\n            resource_list_text.pos.y = new_y;\r\n            resource_list_text.geometry.dirty = true;\r\n\r\n        } else {\r\n\r\n                //render list\r\n            var h = render_stats_text.text_bounds.h;\r\n            var diff = h - vh;\r\n            var new_y = render_stats_text.pos.y;\r\n\r\n            if(diff > 0) {\r\n                min_y = (max_y - (diff+(margin*2)));\r\n            }\r\n\r\n            new_y -= (margin/2) * e.y;\r\n            new_y = Maths.clamp(new_y, min_y, max_y);\r\n            render_stats_text.pos.y = new_y;\r\n            render_stats_text.geometry.dirty = true;\r\n\r\n        }\r\n\r\n    }\r\n#end\r\n\r\n    public override function onkeydown(e:KeyEvent) {\r\n\r\n        if(e.keycode == Key.key_2 && visible) {\r\n            if(debug.batcher.show_stats == 0) {\r\n                debug.batcher.show_stats = 1;\r\n            } else {\r\n                debug.batcher.show_stats = 0;\r\n            }\r\n        }\r\n\r\n    } //onkeydown\r\n\r\n    public override function show() {\r\n\r\n        super.show();\r\n        refresh();\r\n        render_stats_text.visible = true;\r\n        resource_list_text.visible = true;\r\n\r\n    } //show\r\n\r\n    public override function hide() {\r\n\r\n        super.hide();\r\n        render_stats_text.visible = false;\r\n        resource_list_text.visible = false;\r\n        Actuate.stop(resource_list_text.pos);\r\n        Actuate.stop(render_stats_text.pos);\r\n\r\n    } //hide\r\n\r\n    function reset_tween() {\r\n\r\n        Actuate.stop(resource_list_text.pos);\r\n        Actuate.stop(render_stats_text.pos);\r\n\r\n        var vh = Luxe.debug.inspector.size.y - margin;\r\n        var start_y = Luxe.debug.padding.y +(margin*1.5);\r\n\r\n        var h = resource_list_text.text_bounds.h;\r\n        var diff = h - vh;\r\n        resource_list_text.pos.y = start_y;\r\n\r\n        if(diff > 0) {\r\n            var end_y = (start_y - (diff+(margin*2)));\r\n            Actuate.tween(resource_list_text.pos, 8, { y:end_y }).repeat().delay(4).reflect().ease(luxe.tween.easing.Linear.easeNone)\r\n            .onUpdate(function(){ resource_list_text.geometry.dirty = true; });\r\n        }\r\n\r\n        h = render_stats_text.text_bounds.h;\r\n        diff = h - vh;\r\n        render_stats_text.pos.y = start_y;\r\n\r\n        if(diff > 0) {\r\n            var end_y = (start_y - (diff+(margin*2)));\r\n            Actuate.tween(render_stats_text.pos, 8, { y:end_y }).repeat().delay(4).reflect().ease(luxe.tween.easing.Linear.easeNone)\r\n            .onUpdate(function(){ render_stats_text.geometry.dirty = true; });\r\n        }\r\n\r\n    }\r\n\r\n   public function refresh_render_stats() {\r\n\r\n        if(!visible) {\r\n            return;\r\n        }\r\n\r\n        render_stats_text.text = get_render_stats_string();\r\n\r\n        render_stats_text.locked = true;\r\n\r\n        if(render_stats_text.geometry != null) {\r\n            render_stats_text.geometry.dirty = true;\r\n        }\r\n\r\n    } //refresh_render_stats\r\n\r\n    public function update_render_stats() {\r\n\r\n        _render_stats.batchers = Luxe.renderer.stats.batchers;\r\n        _render_stats.geometry_count = Luxe.renderer.stats.geometry_count;\r\n        _render_stats.visible_count = Luxe.renderer.stats.visible_count;\r\n        _render_stats.dynamic_batched_count = Luxe.renderer.stats.dynamic_batched_count;\r\n        _render_stats.static_batched_count = Luxe.renderer.stats.static_batched_count;\r\n        _render_stats.draw_calls = Luxe.renderer.stats.draw_calls;\r\n        _render_stats.vert_count = Luxe.renderer.stats.vert_count;\r\n\r\n    } //update_render_stats\r\n\r\n} //StatsDebugView\r\n\r\ntypedef RenderStats = {\r\n    batchers : Int,\r\n    geometry_count : Int,\r\n    dynamic_batched_count : Int,\r\n    static_batched_count : Int,\r\n    visible_count : Int,\r\n    draw_calls : Int,\r\n    vert_count : Int,\r\n}\r\n","package luxe.debug;\r\n\r\nimport luxe.Screen.WindowEvent;\r\n\r\nclass TraceDebugView extends luxe.debug.DebugView {\r\n\r\n        //log console\r\n    public var logged : Array<String>;\r\n    public var lines : luxe.Text;\r\n    public var max_lines : Int = 35;\r\n\r\n    public function new(_debug:luxe.Debug) {\r\n\r\n        super(_debug);\r\n\r\n        name = 'Log';\r\n\r\n        luxe.Debug.trace_callbacks.push(on_trace);\r\n\r\n        logged = [];\r\n\r\n        add_line('luxe version ${debug.app.runtime_info()}');\r\n\r\n\r\n    } //new\r\n\r\n    public function on_trace( v : Dynamic, ?inf : haxe.PosInfos ) {\r\n\r\n        add_line( inf.fileName + ':' + inf.lineNumber + ' ' + v );\r\n\r\n    } //on_trace\r\n\r\n    public override function create() {\r\n\r\n        var text_bounds = new luxe.Rectangle( debug.padding.x+20, debug.padding.y+40, Luxe.screen.w-(debug.padding.x*2)-20, Luxe.screen.h-(debug.padding.y*2)-40 );\r\n\r\n        lines = new luxe.Text({\r\n            name : 'debug.log.text',\r\n            no_scene : true,\r\n            depth : 999.3,\r\n            color : new Color().rgb(0x888888),\r\n            bounds : text_bounds,\r\n            bounds_wrap : true,\r\n            font : Luxe.renderer.font,\r\n            text : '',\r\n            align_vertical : luxe.Text.TextAlign.bottom,\r\n            point_size : 12,\r\n            batcher : debug.batcher,\r\n            visible : false\r\n        });\r\n\r\n        if(lines.geometry != null) {\r\n            lines.geometry.clip_rect = text_bounds;\r\n            lines.geometry.locked = true;\r\n            lines.geometry.id = 'debug.log.text.geometry';\r\n        }\r\n    }\r\n\r\n    override function onwindowsized(e:WindowEvent) {\r\n        var debug = Luxe.debug;\r\n        var text_bounds = new luxe.Rectangle( debug.padding.x+20, debug.padding.y+40, Luxe.screen.w-(debug.padding.x*2)-20, Luxe.screen.h-(debug.padding.y*2)-40 );\r\n        lines.bounds = text_bounds;\r\n        lines.clip_rect = text_bounds;\r\n            //flush the sizes\r\n        if(lines.geometry != null) {\r\n            lines.geometry.locked = true;\r\n            lines.geometry.dirty = true;\r\n        }\r\n    }\r\n\r\n    public function add_line(_t:String) {\r\n\r\n        if(logged == null) {\r\n            return;\r\n        }\r\n\r\n            //store in the list of pushed lines\r\n        logged.push(_t);\r\n\r\n            //update the line geometry\r\n        if(!visible) {\r\n            return;\r\n        }\r\n\r\n        refresh_lines();\r\n\r\n    } //add_line\r\n\r\n    var _last_logged_length : Int = 0;\r\n    function refresh_lines() {\r\n\r\n        if(_last_logged_length == logged.length) {\r\n            return;\r\n        }\r\n\r\n            //we go though each line in the logged list,\r\n            //and create a string from them.\r\n            //then we set the lines text to that\r\n        var _final = '';\r\n\r\n        if(logged.length <= max_lines) {\r\n            for(_line in logged) {\r\n                _final += _line + '\\n';\r\n            }\r\n        } else {\r\n            var _start = logged.length - max_lines;\r\n            var _total = logged.length;\r\n            for(i in _start ... logged.length) {\r\n                var _line = logged[i];\r\n                _final += _line + '\\n';\r\n            }\r\n        }//\r\n\r\n        lines.text = _final;\r\n\r\n        if(lines.geometry != null) {\r\n            lines.geometry.locked = true;\r\n            lines.geometry.dirty = true;\r\n        }\r\n\r\n        _last_logged_length = logged.length;\r\n\r\n    } //refresh_lines\r\n\r\n\r\n    public override function refresh() {\r\n\r\n    }\r\n\r\n    public override function process() {\r\n\r\n    }\r\n\r\n    public override function show() {\r\n        super.show();\r\n        refresh_lines();\r\n        lines.visible = true;\r\n    }\r\n\r\n    public override function hide() {\r\n        super.hide();\r\n        lines.visible = false;\r\n    }\r\n\r\n}\r\n","package luxe.importers.bitmapfont;\r\n\r\nimport luxe.importers.bitmapfont.BitmapFontData;\r\n\r\nclass BitmapFontParser {\r\n\r\n    //public api\r\n\r\n        public static function parse( _font_data:String ) : BitmapFontData {\r\n\r\n            if(_font_data.length == 0) {\r\n                throw \"BitmapFont:Parser: _font_data is 0 length\";\r\n            }\r\n\r\n            var _info : BitmapFontData = {\r\n                face : null,\r\n                chars : new Map(),\r\n                point_size : 0, base_size : 0,\r\n                char_count : 0, line_height : 0,\r\n                pages : [], kernings : new Map()\r\n            };\r\n\r\n            var _lines : Array<String> = _font_data.split(\"\\n\");\r\n\r\n            if(_lines.length == 0) {\r\n                throw \"BitmapFont; invalid font data specified for parser.\";\r\n            }\r\n\r\n            var _first = _lines[0];\r\n            if(StringTools.ltrim(_first).substr(0, 4) != 'info') {\r\n                throw \"BitmapFont; invalid font data specified for parser. Format should be plain ascii text .fnt file only currently.\";\r\n            }\r\n\r\n            for(_line in _lines) {\r\n                var _tokens = _line.split(\" \");\r\n                for(_current in _tokens) {\r\n                    parse_token(_current, _tokens, _info);\r\n                }\r\n                _tokens = null;\r\n            }\r\n\r\n            _lines = null;\r\n\r\n            return _info;\r\n\r\n        } //parse\r\n\r\n    //internal\r\n\r\n        static function parse_token( _token:String, _tokens:Array<String>, _info:BitmapFontData ) {\r\n\r\n                //remove the first token\r\n            _tokens.shift();\r\n                //fetch the items from the line\r\n            var _items = tokenize_line(_tokens);\r\n\r\n            switch (_token) {\r\n\r\n                case 'info': {\r\n                    _info.face = unquote(_items['face']);\r\n                    _info.point_size = Std.parseFloat(_items['size']);\r\n                }\r\n\r\n                case 'common': {\r\n                    _info.line_height = Std.parseFloat(_items['lineHeight']);\r\n                    _info.base_size = Std.parseFloat(_items['base']);\r\n                }\r\n\r\n                case 'page': {\r\n                    _info.pages.push({\r\n                        id : Std.parseInt(_items['id']),\r\n                        file : trim(unquote(_items['file']))\r\n                    });\r\n                }\r\n\r\n                case 'chars': {\r\n                    _info.char_count = Std.parseInt(_items[\"count\"]);\r\n                }\r\n\r\n                case 'char': {\r\n\r\n                    var _char : Character = {\r\n                        id : Std.parseInt(_items[\"id\"]),\r\n                        x : Std.parseFloat(_items[\"x\"]),\r\n                        y : Std.parseFloat(_items[\"y\"]),\r\n                        width : Std.parseFloat(_items[\"width\"]),\r\n                        height : Std.parseFloat(_items[\"height\"]),\r\n                        xoffset : Std.parseFloat(_items[\"xoffset\"]),\r\n                        yoffset : Std.parseFloat(_items[\"yoffset\"]),\r\n                        xadvance : Std.parseFloat(_items[\"xadvance\"]),\r\n                        page : Std.parseInt(_items[\"page\"])\r\n                    }\r\n\r\n                    _info.chars.set(_char.id, _char);\r\n\r\n                }\r\n\r\n                case 'kerning': {\r\n\r\n                    var _first = Std.parseInt(_items[\"first\"]);\r\n                    var _second = Std.parseInt(_items[\"second\"]);\r\n                    var _amount = Std.parseFloat(_items[\"amount\"]);\r\n\r\n                    var _map = _info.kernings.get(_first);\r\n                    if(_map == null) {\r\n                        _map = new Map();\r\n                        _info.kernings.set(_first, _map);\r\n                    }\r\n\r\n                    _map.set(_second, _amount);\r\n\r\n                }\r\n\r\n                default:\r\n            }\r\n\r\n            _items = null;\r\n\r\n        } //parse_token\r\n\r\n        static function tokenize_line( _tokens:Array<String> ) {\r\n\r\n            var _item_map : Map<String, String> = new Map();\r\n\r\n                for(_token in _tokens) {\r\n                    var _items = _token.split(\"=\");\r\n                    _item_map.set( _items[0], _items[1] );\r\n                    _items = null;\r\n                }\r\n\r\n            return _item_map;\r\n\r\n        } //tokenize_line\r\n\r\n        inline static function trim(_s:String) { return StringTools.trim(_s); }\r\n        inline static function unquote(_s:String) {\r\n            if(_s.indexOf('\"') != -1) {\r\n                _s = StringTools.replace(_s,'\"', '');\r\n            } return _s;\r\n        } //unquote\r\n\r\n} //BitmapFontParser\r\n","package luxe.macros;\r\n\r\nimport haxe.macro.Expr;\r\nimport haxe.macro.Context;\r\n\r\nimport haxe.io.Bytes;\r\nimport haxe.io.Path;\r\n\r\n\r\n#if macro\r\nimport sys.io.File;\r\nimport sys.FileSystem;\r\n#end\r\n\r\n@:noCompletion class BuildVersion {\r\n\r\n    public static var _save : Bool = false;\r\n\r\n    macro public static function save() : haxe.macro.Expr {\r\n\r\n        _save = true;\r\n\r\n        return macro null;\r\n\r\n    } //save\r\n\r\n        //This is always called from Luxe.hx in the root folder,\r\n        //which contains the .git repo, and build file directly\r\n    macro public static function latest() {\r\n\r\n        var location : String = Context.getPosInfos(Context.currentPos()).file;\r\n        var root : String = Path.addTrailingSlash(Path.directory(location));\r\n        var out : String = Path.join([root,'build']);\r\n\r\n        var build : String = try_git( root );\r\n\r\n        if(build != '') {\r\n\r\n                //the + is for semantic versioning\r\n            build = '+' + build.substr(0,10);\r\n\r\n            if(_save) {\r\n                File.saveContent(out, build);\r\n            }\r\n\r\n            Context.addResource('build', Bytes.ofString(build));\r\n        }\r\n\r\n        return Context.makeExpr(build, Context.currentPos());\r\n\r\n    } //latest\r\n\r\n    static function try_git(root:String) {\r\n\r\n\r\n        #if macro\r\n            var git_path : String = Path.join([root,'../.git/']);\r\n                git_path = Path.normalize(git_path);\r\n\r\n            if(FileSystem.exists(git_path) && FileSystem.isDirectory(git_path)) {\r\n                var ref_file = Path.normalize(Path.join([git_path,'refs/heads/master']));\r\n                if(FileSystem.exists(ref_file)) {\r\n                    return File.getContent(ref_file);\r\n                } else {\r\n                    return '';\r\n                }\r\n            }\r\n        #end\r\n\r\n        return '';\r\n\r\n    } //try_git\r\n\r\n} //BuildVersion\r\n","package luxe.resource;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.options.ResourceOptions;\r\nimport luxe.Resources;\r\n\r\nimport snow.api.Promise;\r\nimport snow.systems.assets.Asset;\r\nimport snow.systems.audio.AudioSource;\r\n\r\nclass Resource {\r\n\r\n    /**     The unique resource ID.\r\n            If the resource is loaded from disk, this matches the asset id.\r\n            If not from disk, the id can be anything but must be unique to this resource. */\r\n    public var id: String;\r\n        /** The resource system that contains this Resource. */\r\n    public var system: Resources;\r\n        /** The resource type ID. Defaults use ResourceType ids but is typed Int for user id's. */\r\n    public var resource_type: Int;\r\n        /** The state this resource is currently in. */\r\n    public var state (default, set): ResourceState;\r\n\r\n        /** The reference count of this resource. Each time a\r\n            `load_*` call is made on the resource system, it increments\r\n            the count specific to that resource. When a resource calls\r\n            `destroy()` it decreases by one. When the ref count is 0, and the\r\n            resource is destroyed, it's properly destroyed.\r\n            This works via setter, so changing it with ref++ and ref-- is ok. */\r\n    public var ref (default, set): Int = 0;\r\n\r\n    public function new( _options:ResourceOptions ) {\r\n\r\n        assertnull(_options);\r\n        assertnull(_options.id);\r\n\r\n        def(_options.system, Luxe.resources);\r\n        def(_options.resource_type, ResourceType.unknown);\r\n\r\n        id = _options.id;\r\n        system = _options.system;\r\n        resource_type = _options.resource_type;\r\n        state = ResourceState.unknown;\r\n        ref = 1;\r\n\r\n    } //new\r\n\r\n        /** Destroys the resource, unlisting it, cleaning up it's resource usage.\r\n            Once destroyed, it is no longer valid and should not be used in any way.\r\n            To clean up without destroying the resource, use invalidate().\r\n            To force destroying and ignore the ref counting, pass true for `force` flag. */\r\n    public function destroy( ?_force:Bool=false ) : Void {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        if(!_force) {\r\n            assert(ref > 0);\r\n            ref--;\r\n            assert(ref >= 0);\r\n        }\r\n\r\n        _debug('destroy / $id  / ref $ref');\r\n\r\n        if(ref == 0 || _force) {\r\n\r\n            clear();\r\n            state = destroyed;\r\n            system.remove(this);\r\n            system.emit(destroyed, this);\r\n\r\n        } //no refs || force\r\n\r\n    } //destroy\r\n\r\n        /** Invalidates and frees up any resource usage held.\r\n            The resource instance remains valid for use, and remains listed in the resource cache. */\r\n    public function invalidate() : Void {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n        state = invalidated;\r\n        system.emit(invalidated, this);\r\n\r\n    }\r\n\r\n        /** Returns a promise for the reloaded resource.\r\n            Returns null from the base `Resource` type, implemented in subclasses. */\r\n    public function reload() : Promise {\r\n        return null;\r\n    }\r\n\r\n        /** Returns the estimated memory use by this resource, in bytes.\r\n            You can use Luxe.utils.bytes_to_string to display this value easily.\r\n            Some resources return 0, in the case of not being able to give an estimate. */\r\n    public function memory_use() : Float {\r\n        return 0;\r\n    } //memory_use\r\n\r\n //Internal\r\n\r\n    function set_ref( _ref:Int ) {\r\n\r\n        var pre = ref;\r\n        ref = _ref;\r\n\r\n        if(ref > pre) {\r\n            system.emit(ResourceEvent.reference, this);\r\n        } else if(ref < pre) {\r\n            system.emit(ResourceEvent.dereference, this);\r\n        }\r\n\r\n        return ref;\r\n\r\n    } //set_ref\r\n\r\n    function set_state( _state:ResourceState ) {\r\n\r\n        state = _state;\r\n\r\n        switch(state) {\r\n            case ResourceState.loading:\r\n                system.emit(ResourceEvent.loading, this);\r\n            case ResourceState.loaded:\r\n                system.emit(ResourceEvent.loaded, this);\r\n            case ResourceState.failed:\r\n                system.emit(ResourceEvent.failed, this);\r\n            case _:\r\n        }\r\n\r\n        return state;\r\n\r\n    } //set_state\r\n\r\n        /** Clean up any resource usage, freeing memory, removing references etc. */\r\n    function clear() : Void {\r\n\r\n    } //\r\n\r\n\r\n    function state_string() {\r\n        return switch(state) {\r\n            case ResourceState.listed:      'listed';\r\n            case ResourceState.loading:     'loading';\r\n            case ResourceState.loaded:      'loaded';\r\n            case ResourceState.failed:      'failed';\r\n            case ResourceState.invalidated: 'invalidated';\r\n            case ResourceState.destroyed:   'destroyed';\r\n            case _:                         'unknown';\r\n        }\r\n    }\r\n\r\n    function type_string() {\r\n        return switch(resource_type) {\r\n            case ResourceType.bytes:    'bytes';\r\n            case ResourceType.text:     'text';\r\n            case ResourceType.json:     'json';\r\n            case ResourceType.texture:  'texture';\r\n            case ResourceType.shader:   'shader';\r\n            case ResourceType.font:     'font';\r\n            case _: '$resource_type';\r\n        }\r\n    }\r\n\r\n    function toString() {\r\n        return 'Resource(`$id`, ${type_string()}, ${state_string()})';\r\n    }\r\n\r\n\r\n} //Resource\r\n\r\n\r\nclass BytesResource extends Resource {\r\n\r\n    public var asset:AssetBytes;\r\n\r\n    public function new( _options:BytesResourceOptions ) {\r\n\r\n        assertnull(_options);\r\n\r\n        _options.resource_type = ResourceType.bytes;\r\n\r\n        super( _options );\r\n\r\n        asset = _options.asset;\r\n\r\n    } //new\r\n\r\n    override function reload() : Promise {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n            var get = Luxe.snow.assets.bytes(id);\r\n\r\n            get.then(function(_asset:AssetBytes) {\r\n\r\n                asset = _asset;\r\n                state = ResourceState.loaded;\r\n                resolve(this);\r\n\r\n            });\r\n\r\n            get.error(function(_error) {\r\n\r\n                state = ResourceState.failed;\r\n                reject(_error);\r\n\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n    override function clear() {\r\n\r\n        if(asset != null) {\r\n            asset.destroy();\r\n            asset = null;\r\n        }\r\n\r\n    } //clear\r\n\r\n    override function memory_use() {\r\n\r\n        if(asset == null) return 0;\r\n\r\n        return asset.bytes.byteLength;\r\n\r\n    } //memory_use\r\n\r\n} //BytesResource\r\n\r\nclass TextResource extends Resource {\r\n\r\n    public var asset:AssetText;\r\n\r\n    public function new( _options:TextResourceOptions ) {\r\n\r\n        assertnull(_options);\r\n\r\n        _options.resource_type = ResourceType.text;\r\n\r\n        super( _options );\r\n\r\n        asset = _options.asset;\r\n\r\n    } //new\r\n\r\n    override function reload() : Promise {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n            var get = Luxe.snow.assets.text(id);\r\n\r\n            get.then(function(_asset:AssetText) {\r\n\r\n                asset = _asset;\r\n                state = ResourceState.loaded;\r\n                resolve(this);\r\n\r\n            });\r\n\r\n            get.error(function(_error) {\r\n\r\n                state = ResourceState.failed;\r\n                reject(_error);\r\n\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n    override function clear() {\r\n\r\n        if(asset != null) {\r\n            asset.destroy();\r\n            asset = null;\r\n        }\r\n\r\n    } //clear\r\n\r\n    override function memory_use() {\r\n\r\n        if(asset == null) return 0;\r\n\r\n        return asset.text.length;\r\n\r\n    } //memory_use\r\n\r\n} //TextResource\r\n\r\nclass JSONResource extends Resource {\r\n\r\n    public var asset:AssetJSON;\r\n\r\n    public function new( _options:JSONResourceOptions ) {\r\n\r\n        assertnull(_options);\r\n\r\n        _options.resource_type = ResourceType.json;\r\n\r\n        super( _options );\r\n\r\n        asset = _options.asset;\r\n\r\n    } //new\r\n\r\n    override function reload() : Promise {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n            var get = Luxe.snow.assets.json(id);\r\n\r\n            get.then(function(_asset:AssetJSON) {\r\n\r\n                asset = _asset;\r\n                state = ResourceState.loaded;\r\n                resolve(this);\r\n\r\n            });\r\n\r\n            get.error(function(_error) {\r\n\r\n                state = ResourceState.failed;\r\n                reject(_error);\r\n\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n    override function clear() {\r\n\r\n        if(asset != null) {\r\n            asset.destroy();\r\n            asset = null;\r\n        }\r\n\r\n    } //clear\r\n\r\n} //JSONResource\r\n\r\nclass AudioResource extends Resource {\r\n\r\n    public var asset:AssetAudio;\r\n    public var source:AudioSource;\r\n\r\n    var is_stream: Bool = false;\r\n\r\n    public function new(_options:AudioResourceOptions) {\r\n\r\n        assertnull(_options);\r\n\r\n        _options.resource_type = ResourceType.audio;\r\n\r\n        super( _options );\r\n\r\n        asset = _options.asset;\r\n        is_stream = def(_options.is_stream,false);\r\n\r\n        if(asset != null) {\r\n            source = new AudioSource(Luxe.snow, asset.audio);\r\n        }\r\n\r\n    } //new\r\n\r\n    override function reload() : Promise {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n            var get = Luxe.snow.assets.audio(id, is_stream);\r\n\r\n            get.then(function(_asset:AssetAudio) {\r\n\r\n                asset = _asset;\r\n                source = new AudioSource(Luxe.snow, asset.audio);\r\n                state = ResourceState.loaded;\r\n                resolve(this);\r\n\r\n            });\r\n\r\n            get.error(function(_error) {\r\n\r\n                state = ResourceState.failed;\r\n                reject(_error);\r\n\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n    override function clear() {\r\n\r\n        if(asset != null) {\r\n            asset.destroy();\r\n            asset = null;\r\n        }\r\n\r\n        if(source != null) {\r\n            source.destroy();\r\n            source = null;\r\n        }\r\n\r\n    } //clear\r\n\r\n} //AudioResource\r\n","package luxe.structural;\r\n\r\n\r\n/**\r\n    Copyright 2014-2016 Sven Bergström\r\n\r\n    A balanced binary search tree,\r\n    implemented based on various stack overflow answers,\r\n    wikipedia articles and books read over the years.\r\n    some other references : https://github.com/polygonal/ds\r\n\r\n    Part of the structural library for haxe\r\n    http://github.com/underscorediscovery/structural\r\n\r\n    MIT License\r\n*/\r\n\r\n#if !display @:generic #end\r\n@:allow(luxe.structural.BalancedBSTIterator)\r\nclass BalancedBST<K,T> {\r\n\r\n        /** The tree root node */\r\n    public var root : BalancedBSTNode<K,T>;\r\n        /** The current comparison function */\r\n    public var compare : K->K->Int;\r\n        /** Whether or not the tree is empty (i.e root == null) */\r\n    public var empty (get, null) : Bool;\r\n\r\n        /** Create a new balanced BST with the given comparison function */\r\n    public function new( compare_function : K->K->Int ) {\r\n\r\n        compare = compare_function;\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n        /** Return the number of nodes in the tree */\r\n    public inline function size() {\r\n\r\n        return node_count(root);\r\n\r\n    } //size\r\n\r\n        /** Return the depth of the tree */\r\n    public inline function depth() {\r\n\r\n        return node_depth(root);\r\n\r\n    } //depth\r\n\r\n        /** Insert a node into the tree */\r\n    public inline function insert( _key:K, _value:T ) {\r\n\r\n        root = node_insert( root, _key, _value );\r\n        root.color = NodeColor.black;\r\n\r\n    } //insert\r\n\r\n        /** Returns true if the tree contains the key for this node */\r\n    public function contains( _key:K ) : Bool {\r\n\r\n            //if the find functions returns non-null it's here\r\n        return find(_key) != null;\r\n\r\n    } //contains\r\n\r\n        /** Returns a node by key, if found. null otherwise */\r\n    public function find( _key:K ) : T {\r\n\r\n        return node_find( root, _key );\r\n\r\n    } //find\r\n\r\n        /** Return the number of nodes to the left of this node, by key.\r\n            http://en.wikipedia.org/wiki/Order_statistic_tree */\r\n    public function rank( _key:K ) : Int {\r\n\r\n        return node_rank(_key, root);\r\n\r\n    } //rank\r\n\r\n        /** Find a key by rank in the tree, i.e given a number of nodes, the key at this point.\r\n            http://en.wikipedia.org/wiki/Order_statistic_tree */\r\n    public function select( _rank:Int ) : K {\r\n\r\n        var _node = node_select(root,_rank);\r\n\r\n        if(_node != null) {\r\n            return _node.key;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    } //select\r\n\r\n        /** return the smallest node (key) in the tree (most left) */\r\n    public function smallest() : K {\r\n\r\n        var _node = node_smallest(root);\r\n\r\n        if(_node != null) {\r\n            return _node.key;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    } //smallest\r\n\r\n        /** return the largest node (key) in the tree (most right)*/\r\n   public function largest() : K {\r\n\r\n        var _node = node_largest(root);\r\n\r\n        if(_node != null) {\r\n            return _node.key;\r\n        } else {\r\n            return null;\r\n        }\r\n\r\n    } //largest\r\n\r\n        /** remove a node by key. return false if the operation fails (i.e the node is not stored in this tree) */\r\n    public function remove( _key:K ) : Bool {\r\n\r\n        if( !is_red(root.left) && !is_red(root.right) ) {\r\n            root.color = NodeColor.red;\r\n        }\r\n\r\n        if(!contains(_key)) {\r\n            return false;\r\n        }\r\n\r\n        root = node_remove(root, _key);\r\n\r\n        if( root != null  ) {\r\n            root.color = NodeColor.black;\r\n        }\r\n\r\n        return true;\r\n\r\n    } //remove\r\n\r\n        /** remove the smallest node in the tree (most left) */\r\n    public function remove_smallest() {\r\n\r\n        if( !is_red(root.left) && !is_red(root.right) ) {\r\n            root.color = NodeColor.red;\r\n        }\r\n\r\n        root = node_remove_smallest(root);\r\n\r\n        if(root != null) {\r\n            root.color = NodeColor.black;\r\n        }\r\n\r\n        return true;\r\n\r\n    } //remove_smallest\r\n\r\n        /** remove the largest node in the tree (most right) */\r\n    public function remove_largest() {\r\n\r\n            // if both children of root are black, set root to red\r\n        if (!is_red(root.left) && !is_red(root.right)) {\r\n            root.color = NodeColor.red;\r\n        }\r\n\r\n        root = node_remove_largest(root);\r\n\r\n        if(root != null ) {\r\n            root.color = NodeColor.black;\r\n        }\r\n\r\n        return true;\r\n\r\n    } //remove_largest\r\n\r\n        /** tree floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\r\n    public function floor( _key:K ) : Null<K> {\r\n\r\n        var _node = node_floor(root, _key);\r\n\r\n        if(_node == null) {\r\n            return null;\r\n        }\r\n\r\n        return _node.key;\r\n\r\n    } //floor\r\n\r\n        /** tree ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\r\n    public function ceil( _key:K ) : Null<K> {\r\n\r\n        var _node = node_ceil( root, _key );\r\n\r\n        if (_node == null) {\r\n            return null;\r\n        }\r\n\r\n        return _node.key;\r\n\r\n    } //ceil\r\n\r\n        /** return an array of the values in this tree */\r\n    public function toArray() : Array<T> {\r\n\r\n        var a:Array<T> = [];\r\n\r\n        traverse_node( root, order_retain, function( _node : BalancedBSTNode<K,T> ) {\r\n            a.push( _node.value );\r\n        });\r\n\r\n        return a;\r\n\r\n    } //toArray\r\n\r\n        /** Return an array of the keys in this tree */\r\n    public function keys() : Array<K> {\r\n\r\n        var a:Array<K> = [];\r\n\r\n        traverse_node( root, order_retain, function( _node : BalancedBSTNode<K,T> ) {\r\n            a.push( _node.key );\r\n        });\r\n\r\n        return a;\r\n\r\n    } //keys\r\n\r\n        /** returns an iterator from a conversion to array of this tree. Usable as `for(item in tree)` */\r\n    // inline // :todo: inlining breaks things on 3.4, https://github.com/HaxeFoundation/haxe/issues/5855\r\n    public function iterator() {\r\n\r\n        return new BalancedBSTIterator<K,T>(this);\r\n\r\n    } //iterator\r\n\r\n        /** Traverse a node with the given method, and call the given function for each node traversed */\r\n    public function traverse_node( _node:BalancedBSTNode<K,T>, _method:BalancedBSTTraverseMethod, _on_traverse : BalancedBSTNode<K,T> ->Void ) {\r\n\r\n        if (_node != null) {\r\n\r\n            switch(_method) {\r\n\r\n                case order_pre:\r\n                    _on_traverse(_node);\r\n                    traverse_node(_node.left, _method, _on_traverse);\r\n                    traverse_node(_node.right, _method, _on_traverse);\r\n\r\n                case order_retain:\r\n                    traverse_node(_node.left, _method, _on_traverse);\r\n                    _on_traverse(_node);\r\n                    traverse_node(_node.right, _method, _on_traverse);\r\n\r\n                case order_post:\r\n                    traverse_node(_node.left, _method, _on_traverse);\r\n                    traverse_node(_node.right, _method, _on_traverse);\r\n                    _on_traverse(_node);\r\n\r\n            } //_method\r\n\r\n        } //_node\r\n\r\n    } //traverse\r\n\r\n//Internal API\r\n\r\n        //getter\r\n    function get_empty() {\r\n\r\n        return root == null;\r\n\r\n    }\r\n\r\n        /** the depth of a single node */\r\n    function node_depth( _node:BalancedBSTNode<K,T>  ) {\r\n\r\n        if (_node == null) {\r\n            return 0;\r\n        }\r\n\r\n        var _n_depth = Math.max(\r\n                         node_depth(_node.left),\r\n                         node_depth(_node.right)\r\n                       );\r\n\r\n        return 1 + Std.int( _n_depth );\r\n\r\n    } //node_depth\r\n\r\n        /** the node count/children of a single node */\r\n    inline function node_count( _node:BalancedBSTNode<K,T> ) {\r\n\r\n        return _node == null ? 0 : _node.nodecount;\r\n\r\n    } //node_count\r\n\r\n        /** insert a single node */\r\n    function node_insert( _node:BalancedBSTNode<K,T>, _key:K, _value:T ) : BalancedBSTNode<K,T> {\r\n\r\n        if(_node == null) {\r\n\r\n            return new BalancedBSTNode<K,T>(_key, _value, 1, NodeColor.red);\r\n\r\n        } //_node\r\n\r\n            var comparison = compare(_key, _node.key);\r\n\r\n            if(comparison < 0) {\r\n\r\n                _node.left = node_insert(_node.left, _key, _value);\r\n\r\n            } else if(comparison > 0) {\r\n\r\n                _node.right = node_insert(_node.right, _key, _value);\r\n\r\n            } else {\r\n\r\n                _node.value = _value;\r\n\r\n            }\r\n\r\n            if(is_red(_node.right) && !is_red(_node.left)) {\r\n                _node = rotate_left(_node);\r\n            }\r\n\r\n            if(is_red(_node.left) && is_red(_node.left.left)) {\r\n                _node = rotate_right(_node);\r\n            }\r\n\r\n            if(is_red(_node.left) && is_red(_node.right)) {\r\n                swap_color(_node);\r\n            }\r\n\r\n            node_update_count(_node);\r\n\r\n        return _node;\r\n\r\n    } //node_insert\r\n\r\n        /* make sure the node count is up to date on a given node */\r\n    inline function node_update_count( _node:BalancedBSTNode<K,T> ) {\r\n\r\n        _node.nodecount = node_count(_node.left) + node_count(_node.right) + 1;\r\n\r\n        return _node;\r\n\r\n    } //node_update_count\r\n\r\n        /** find a single node */\r\n    function node_find( _node:BalancedBSTNode<K,T>, _key:K ) : T {\r\n\r\n        if(_node == null) {\r\n            return null;\r\n        }\r\n\r\n        var comparison = compare( _key, _node.key );\r\n\r\n        if(comparison < 0) {\r\n            return node_find(_node.left, _key);\r\n        } else if(comparison > 0) {\r\n            return node_find(_node.right, _key);\r\n        } else { //comparison > 0\r\n            return _node.value;\r\n        }\r\n\r\n    } //node_find\r\n\r\n        /** find rank of single node */\r\n    function node_rank( _key:K, _node:BalancedBSTNode<K,T> ) : Int {\r\n\r\n        if(_node == null) {\r\n            return 0;\r\n        }\r\n\r\n        var comparison = compare(_key, _node.key);\r\n\r\n        if(comparison < 0) {\r\n            return node_rank(_key, _node.left);\r\n        } else if(comparison > 0) {\r\n            return 1 + node_count(_node.left) + node_rank( _key, _node.right );\r\n        } else {\r\n            return node_count(_node.left);\r\n        }\r\n\r\n    } //node_rank\r\n\r\n        /** find key of node by rank */\r\n    function node_select( _node:BalancedBSTNode<K,T>, _rank:Int ) : BalancedBSTNode<K,T> {\r\n\r\n        if(_node == null) {\r\n            return null;\r\n        }\r\n\r\n        var _r = node_count(_node.left);\r\n\r\n        if(_r > _rank) {\r\n            return node_select(_node.left, _rank);\r\n        } else if(_r < _rank) {\r\n            return node_select(_node.right, _rank - _r - 1);\r\n        } else {\r\n            return _node;\r\n        }\r\n\r\n    } //node_select\r\n\r\n        /** find smallest of the given node */\r\n    function node_smallest( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        if(_node.left == null) {\r\n            return _node;\r\n        }\r\n\r\n        return node_smallest( _node.left );\r\n\r\n    } //node_smallest\r\n\r\n        /** find largest of the given node */\r\n    function node_largest( _node : BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        if (_node.right == null) {\r\n            return _node;\r\n        } else {\r\n            return node_largest(_node.right);\r\n        }\r\n\r\n    } //node_largest\r\n\r\n        /** node floor http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\r\n    function node_floor(_node:BalancedBSTNode<K,T>, _key:K ) : BalancedBSTNode<K,T> {\r\n\r\n        if(_node == null) {\r\n            return null;\r\n        }\r\n\r\n        var comparison = compare(_key, _node.key);\r\n\r\n        if(comparison == 0) {\r\n            return _node;\r\n        } else if(comparison < 0) {\r\n            return node_floor(_node.left, _key);\r\n        }\r\n\r\n        var _n = node_floor(_node.right, _key);\r\n\r\n        if(_n != null) {\r\n            return _n;\r\n        } else {\r\n            return _node;\r\n        }\r\n\r\n    } //node_floor\r\n\r\n        /** node ceiling http://en.wikipedia.org/wiki/Floor_and_ceiling_functions */\r\n    function node_ceil( _node:BalancedBSTNode<K,T> , _key:K ) : BalancedBSTNode<K,T> {\r\n\r\n        if (_node == null) {\r\n            return null;\r\n        }\r\n\r\n        var comparison = compare(_key, _node.key);\r\n\r\n        if(comparison == 0) {\r\n\r\n            return _node;\r\n\r\n        } else if(comparison < 0) {\r\n\r\n            var _n = node_ceil(_node.left, _key);\r\n\r\n            if (_n != null) {\r\n                return _n;\r\n            } else {\r\n                return _node;\r\n            }\r\n\r\n        } //comparison < 0\r\n\r\n        return node_ceil(_node.right, _key);\r\n\r\n    } //node_ceil\r\n\r\n        /** remove the smallest node in the tree (most left) */\r\n    function node_remove_smallest( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        if(_node.left == null) {\r\n            return null;\r\n        }\r\n\r\n        if( !is_red(_node.left) && !is_red(_node.left.left)) {\r\n            _node = move_red_left( _node );\r\n        }\r\n\r\n        _node.left = node_remove_smallest(_node.left);\r\n        node_update_count(_node);\r\n\r\n        return balance(_node);\r\n\r\n    } //remove_smallest\r\n\r\n        /** remove the largest node in the tree (most right) */\r\n    function node_remove_largest( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        if( is_red(_node.left) ) {\r\n            _node = rotate_right(_node);\r\n        }\r\n\r\n        if (_node.right == null) {\r\n            return null;\r\n        }\r\n\r\n        if( !is_red(_node.right) && !is_red(_node.right.left) ) {\r\n            _node = move_red_right(_node);\r\n        }\r\n\r\n        _node.right = node_remove_largest(_node.right);\r\n        node_update_count(_node);\r\n\r\n        return balance(_node);\r\n\r\n    } //node_remove_largest\r\n\r\n        /** remove a single node by key */\r\n    function node_remove( _node:BalancedBSTNode<K,T>, _key:K ) : BalancedBSTNode<K,T> {\r\n\r\n        var comparison = compare( _key, _node.key );\r\n\r\n        if( comparison < 0 )  {\r\n\r\n            if( !is_red(_node.left) && !is_red(_node.left.left) ) {\r\n                _node = move_red_left(_node);\r\n            }\r\n\r\n            _node.left = node_remove(_node.left, _key);\r\n\r\n        } else {\r\n\r\n            if( is_red(_node.left) ) {\r\n                _node = rotate_right(_node);\r\n            }\r\n\r\n            var comparison = compare( _key, _node.key );\r\n\r\n            if ((comparison == 0) && (_node.right == null)) {\r\n                return null;\r\n            }\r\n\r\n            if (!is_red(_node.right) && !is_red(_node.right.left)) {\r\n                _node = move_red_right(_node);\r\n            }\r\n\r\n            var comparison = compare( _key, _node.key );\r\n            if(comparison == 0) {\r\n\r\n                var _n = node_smallest(_node.right);\r\n                    _node.key = _n.key;\r\n                    _node.value = _n.value;\r\n\r\n                _node.right = node_remove_smallest(_node.right);\r\n\r\n            } else {\r\n                _node.right = node_remove(_node.right, _key);\r\n            }\r\n\r\n        }\r\n\r\n        return balance(_node);\r\n\r\n    } //_delete\r\n\r\n    inline function is_red( _node:BalancedBSTNode<K,T> ) {\r\n\r\n        if(_node == null) {\r\n            return NodeColor.black;\r\n        }\r\n\r\n        return _node.color == NodeColor.red;\r\n\r\n    } //is_red\r\n\r\n    @:noCompletion public function rotate_left( _node:BalancedBSTNode<K,T> ) {\r\n\r\n        var _n = _node.right;\r\n\r\n                //update colors\r\n            _n.color = _node.color;\r\n            _node.color = NodeColor.red;\r\n                //swap the right with left node\r\n            _node.right = _n.left;\r\n            _n.left = _node;\r\n\r\n                //update the node count values\r\n            _n.nodecount = _node.nodecount;\r\n            node_update_count(_node);\r\n\r\n        return _n;\r\n\r\n    } //rotate_left\r\n\r\n    @:noCompletion public function rotate_right( _node:BalancedBSTNode<K,T> ) {\r\n\r\n        var _n = _node.left;\r\n\r\n                //update node colors\r\n            _n.color = _node.color;\r\n            _node.color = NodeColor.red;\r\n                //swap the left and right node\r\n            _node.left = _n.right;\r\n            _n.right = _node;\r\n\r\n                //update the nodecount values\r\n            _n.nodecount = _node.nodecount;\r\n            node_update_count(_node);\r\n\r\n        return _n;\r\n\r\n    } //rotate_left\r\n\r\n    @:noCompletion public function swap_color( _node:BalancedBSTNode<K,T> ) {\r\n\r\n        _node.color = !_node.color;\r\n        _node.left.color = !_node.left.color;\r\n        _node.right.color = !_node.right.color;\r\n\r\n    } //swap_color\r\n\r\n    inline function move_red_left( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        swap_color(_node);\r\n\r\n        if( is_red(_node.right.left) ) {\r\n            _node.right = rotate_right(_node.right);\r\n            _node = rotate_left(_node);\r\n        }\r\n\r\n        return _node;\r\n    }\r\n\r\n    inline function move_red_right( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        swap_color(_node);\r\n\r\n        if (is_red(_node.left.left)) {\r\n            _node = rotate_right(_node);\r\n        }\r\n\r\n        return _node;\r\n    }\r\n\r\n    inline function balance( _node:BalancedBSTNode<K,T> ) : BalancedBSTNode<K,T> {\r\n\r\n        if (is_red(_node.right))    {\r\n            _node = rotate_left(_node);\r\n        }\r\n\r\n        if (is_red(_node.left) && is_red(_node.left.left)) {\r\n            _node = rotate_right(_node);\r\n        }\r\n\r\n        if (is_red(_node.left) && is_red(_node.right)) {\r\n            swap_color(_node);\r\n        }\r\n\r\n        node_update_count(_node);\r\n\r\n        return _node;\r\n\r\n    } //balance\r\n\r\n} //BalancedBST\r\n\r\n\r\n#if !display @:generic #end\r\nclass BalancedBSTIterator<K,T> {\r\n\r\n    var tree : BalancedBST<K,T>;\r\n    var current : BalancedBSTNode<K,T>;\r\n    var rightest : BalancedBSTNode<K,T>;\r\n\r\n    public inline function new(_tree:BalancedBST<K,T>) {\r\n\r\n        if(_tree == null) return;\r\n        if(_tree.root == null) return;\r\n\r\n        tree = _tree;\r\n        current = _min(tree.root);\r\n        rightest = _max(tree.root);\r\n\r\n    } //new\r\n\r\n    public inline function hasNext():Bool {\r\n\r\n        if(current == null || rightest == null) return false;\r\n\r\n        return tree.compare(current.key, rightest.key) <= 0;\r\n\r\n    } //hasNext\r\n\r\n    public inline function next() {\r\n        var _temp = current;\r\n        current = update_next();\r\n        return _temp.value;\r\n    }\r\n\r\n    inline function update_next() {\r\n\r\n        if(!hasNext()) return null;\r\n        if(current.right!=null) return _min(current.right);\r\n\r\n            var _next = null;\r\n            var _temp = tree.root;\r\n            while(_temp != null) {\r\n\r\n                var _comp = tree.compare(current.key, _temp.key);\r\n                if(_comp < 0) {\r\n                    _next = _temp;\r\n                    _temp = _temp.left;\r\n                } else if(_comp > 0){\r\n                    _temp = _temp.right;\r\n                } else {\r\n                    current = _next;\r\n                    break;\r\n                }\r\n\r\n            } //while\r\n\r\n        return _next;\r\n\r\n    } //update_next\r\n\r\n    inline function _min(_node:BalancedBSTNode<K,T>) {\r\n\r\n        while(_node.left != null) _node = _node.left;\r\n\r\n        return _node;\r\n\r\n    } //_min\r\n\r\n    inline function _max(_node:BalancedBSTNode<K,T>) {\r\n\r\n        while(_node.right != null) _node = _node.right;\r\n\r\n        return _node;\r\n\r\n    } //_max\r\n\r\n} //BalancedBSTIterator\r\n\r\n\r\n@:noCompletion\r\nprivate class NodeColor {\r\n    public static inline var red = true;\r\n    public static inline var black = false;\r\n}\r\n\r\n    /** A balanced binary search tree node by `K` key and `T` value (type) */\r\n#if !display @:generic #end\r\nclass BalancedBSTNode<K,T> {\r\n\r\n\r\n        /** The node left of this node (less than) */\r\n    public var left         : BalancedBSTNode<K,T>;\r\n        /** The node right of this node (bigger than) */\r\n    public var right        : BalancedBSTNode<K,T>;\r\n        /** The node count of this node, including itself */\r\n    public var nodecount    : Int;\r\n        /** The node color, red or black, for maintaining balance */\r\n    public var color        : Bool;\r\n\r\n        /** The key used to compare this node */\r\n    public var key          : K;\r\n        /** The value this node holds */\r\n    public var value        : T;\r\n\r\n        /** Create a new node with given key, value, count and color. Use `insert` on the tree instead. */\r\n    public function new( _key:K, _value:T, _node_count:Int, _color:Bool ) {\r\n\r\n        left = null;\r\n        right = null;\r\n\r\n        key = _key;\r\n        value = _value;\r\n\r\n        nodecount = _node_count;\r\n        color = _color;\r\n\r\n    } //new\r\n\r\n\r\n} //BalancedBSTNode\r\n\r\n    /** A traversal method for iterating a node in the tree */\r\nenum BalancedBSTTraverseMethod {\r\n\r\n    order_pre;\r\n    order_retain;\r\n    order_post;\r\n\r\n} //enum\r\n","package luxe.structural;\r\n\r\n/**\r\n    Copyright 2014-2016 Sven Bergström\r\n\r\n    A simple ordered map implementation using a keys array\r\n\r\n    Part of the structural library for haxe\r\n    http://github.com/underscorediscovery/structural\r\n\r\n    MIT License\r\n*/\r\n\r\nimport Map;\r\n\r\n@:generic\r\nclass OrderedMapIterator<K,V> {\r\n\r\n    var map : OrderedMap<K,V>;\r\n    var index : Int = 0;\r\n\r\n    public inline function new(omap:OrderedMap<K,V>)\r\n        map = omap;\r\n    public inline function hasNext() : Bool\r\n        return index < map._keys.length;\r\n    public inline function next() : V\r\n        return map.get( map._keys[index++] );\r\n\r\n} //OrderedMapIterator\r\n\r\n@:generic\r\nclass OrderedMap<K, V> implements IMap<K, V> {\r\n\r\n    @:noCompletion public var map:Map<K, V>;\r\n    var idx = 0;\r\n\r\n    @:allow(luxe.structural.OrderedMapIterator)\r\n    var _keys:Array<K>;\r\n\r\n    public inline function new(_map) {\r\n       _keys = [];\r\n       map = _map;\r\n    }\r\n\r\n    public inline function set(key:K, value:V) {\r\n        if (!map.exists(key)) _keys.push(key);\r\n        map[key] = value;\r\n    }\r\n\r\n    public inline function toString() {\r\n        var _ret = ''; var _cnt = 0; var _len = _keys.length;\r\n        for(k in _keys) _ret += '$k => ${map.get(k)}${(_cnt++<_len-1?\", \":\"\")}';\r\n        return '{$_ret}';\r\n    }\r\n\r\n    public inline function iterator()          return new OrderedMapIterator<K,V>(this);\r\n    public inline function remove(key)         return map.remove(key) && _keys.remove(key);\r\n    public inline function exists(key)         return map.exists(key);\r\n    public inline function get(key)            return map.get(key);\r\n    public inline function keys()              return _keys.iterator();\r\n\r\n} //OrderedMap\r\n","/**\r\n  @author Joshua Granick   \r\n  @version 1.2   \r\n */\r\n\r\n\r\npackage luxe.tween.actuators;\r\n\r\n\r\nimport luxe.tween.easing.IEasing;\r\nimport luxe.tween.Actuate;\r\n\r\n\r\n@:keepSub\r\nclass GenericActuator implements IGenericActuator {\r\n\r\n\r\n    public var duration:Float;\r\n    public var id:String;\r\n    public var properties:Dynamic;\r\n    public var target:Dynamic;\r\n\r\n    var _autoVisible:Bool;\r\n    var _delay:Float;\r\n    var _ease:IEasing;\r\n    var _onComplete:Dynamic;\r\n    var _onCompleteParams:Array <Dynamic>;\r\n    var _onRepeat:Dynamic;\r\n    var _onRepeatParams:Array <Dynamic>;\r\n    var _onUpdate:Dynamic;\r\n    var _onUpdateParams:Array <Dynamic>;\r\n    var _reflect:Bool;\r\n    var _repeat:Int;\r\n    var _reverse:Bool;\r\n    var _smartRotation:Bool;\r\n    var _snapping:Bool;\r\n    var special:Bool;\r\n\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        _autoVisible = true;\r\n        _delay = 0;\r\n        _reflect = false;\r\n        _repeat = 0;\r\n        _reverse = false;\r\n        _smartRotation = false;\r\n        _snapping = false;\r\n        special = false;\r\n\r\n        this.target = target;\r\n        this.properties = properties;\r\n        this.duration = duration;\r\n\r\n        _ease = Actuate.defaultEase;\r\n\r\n    }\r\n\r\n\r\n    public function apply ():Void {\r\n\r\n        for (i in Reflect.fields (properties)) {\r\n\r\n            if (#if flash false && #end Reflect.hasField (target, i)) {\r\n\r\n                Reflect.setField (target, i, Reflect.field (properties, i));\r\n\r\n            } else {\r\n\r\n                Reflect.setProperty (target, i, Reflect.field (properties, i));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Sometimes drawing performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values   \r\n      @param   value       Whether autoVisible should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function autoVisible (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _autoVisible = value;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    inline function callMethod (method:Dynamic, params:Array<Dynamic> = null):Dynamic {\r\n\r\n        if (params == null) {\r\n\r\n            params = [];\r\n\r\n        }\r\n\r\n        #if neko\r\n\r\n        var diff = untyped ($nargs)(method) - params.length;\r\n\r\n        if (diff > 0) {\r\n\r\n            params = params.copy ();\r\n\r\n            for (i in 0...diff) {\r\n\r\n                params.push (null);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        #end\r\n\r\n        return Reflect.callMethod (method, method, params);\r\n\r\n    }\r\n\r\n\r\n    function change ():Void {\r\n\r\n        if (_onUpdate != null) {\r\n\r\n            callMethod (_onUpdate, _onUpdateParams);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function complete (sendEvent:Bool = true):Void {\r\n\r\n        if (sendEvent) {\r\n\r\n            change ();\r\n\r\n            if (_onComplete != null) {\r\n\r\n                callMethod (_onComplete, _onCompleteParams);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        Actuate.unload (this);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Increases the delay before a tween is executed   \r\n      @param   duration        The amount of seconds to delay   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function delay (duration:Float):IGenericActuator {\r\n\r\n        _delay = duration;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Sets the easing which is used when running the tween   \r\n      @param   easing      An easing equation, like Elastic.easeIn or Quad.easeOut   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function ease (easing:IEasing):IGenericActuator {\r\n\r\n        _ease = easing;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function move ():Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Specify whether this should be scaled by the global timescale   \r\n      @param   _value      Whether or not it should be   \r\n      @return      The current actuator instance   \r\n     */\r\n\r\n    public var timescaled : Bool = false;\r\n    public function timescale( _value:Bool = true ):IGenericActuator {\r\n        timescaled = _value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n      Defines a function which will be called when the tween finishes   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onComplete (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onComplete = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onCompleteParams = [];\r\n\r\n        } else {\r\n\r\n            _onCompleteParams = parameters;\r\n\r\n        }\r\n\r\n        if (duration == 0) {\r\n\r\n            complete ();\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Defines a function which will be called when the tween repeats   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onRepeat (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onRepeat = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onRepeatParams = [];\r\n\r\n        } else {\r\n\r\n            _onRepeatParams = parameters;\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Defines a function which will be called when the tween updates   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onUpdate (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onUpdate = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onUpdateParams = [];\r\n\r\n        } else {\r\n\r\n            _onUpdateParams = parameters;\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function pause ():Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect   \r\n      @param   value       Whether reflect should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reflect (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _reflect = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Repeats the tween after it finishes   \r\n      @param   times       The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function repeat (?times:Null<Int>):IGenericActuator {\r\n\r\n        if (times == null) {\r\n\r\n            times = -1;\r\n\r\n        }\r\n\r\n        _repeat = times;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function resume ():Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Sets if the tween should be handled in reverse   \r\n      @param   value       Whether the tween should be reversed (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reverse (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _reverse = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Enabling smartRotation can prevent undesired results when tweening rotation values   \r\n      @param   value       Whether smart rotation should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function smartRotation (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _smartRotation = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Snapping causes tween values to be rounded automatically   \r\n      @param   value       Whether tween values should be rounded (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function snapping (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _snapping = value;\r\n        special = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public function stop (properties:Dynamic, complete:Bool, sendEvent:Bool):Void {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n@:noCompletion interface IGenericActuator {\r\n\r\n    /**\r\n      Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values   \r\n      @param   value       Whether autoVisible should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function autoVisible (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Increases the delay before a tween is executed   \r\n      @param   duration        The amount of seconds to delay   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function delay (duration:Float):IGenericActuator;\r\n\r\n    /**\r\n      Sets the easing which is used when running the tween   \r\n      @param   easing      An easing equation, like Elastic.easeIn or Quad.easeOut   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function ease (easing:IEasing):IGenericActuator;\r\n\r\n    /**\r\n      Defines a function which will be called when the tween finishes   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onComplete (handler:Dynamic, ?parameters:Array <Dynamic>):IGenericActuator;\r\n\r\n    /**\r\n      Defines a function which will be called when the tween repeats   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onRepeat (handler:Dynamic, ?parameters:Array <Dynamic>):IGenericActuator;\r\n\r\n    /**\r\n      Defines a function which will be called when the tween updates   \r\n      @param   handler     The function you would like to be called   \r\n      @param   parameters      Parameters you would like to pass to the handler function when it is called   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function onUpdate (handler:Dynamic, ?parameters:Array <Dynamic>):IGenericActuator;\r\n\r\n    /**\r\n      Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect   \r\n      @param   value       Whether reflect should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reflect (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Repeats the tween after it finishes   \r\n      @param   times       The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function repeat (?times:Null<Int>):IGenericActuator;\r\n\r\n    /**\r\n      Sets if the tween should be handled in reverse   \r\n      @param   value       Whether the tween should be reversed (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function reverse (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Specify whether this should be scaled by the global timescale   \r\n      @param   _value      Whether or not it should be   \r\n      @return      The current actuator instance   \r\n     */\r\n\r\n    public function timescale( _value:Bool = true ):IGenericActuator;\r\n    /**\r\n      Enabling smartRotation can prevent undesired results when tweening rotation values   \r\n      @param   value       Whether smart rotation should be enabled (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function smartRotation (?value:Null<Bool>):IGenericActuator;\r\n\r\n    /**\r\n      Snapping causes tween values to be rounded automatically   \r\n      @param   value       Whether tween values should be rounded (Default is true)   \r\n      @return      The current actuator instance   \r\n     */\r\n    public function snapping (?value:Null<Bool>):IGenericActuator;\r\n\r\n}\r\n","package luxe.tween.actuators;\r\n\r\n\r\nimport luxe.tween.actuators.GenericActuator;\r\n\r\n#if neko\r\nimport haxe.Log;\r\nimport haxe.PosInfos;\r\n#end\r\nimport haxe.Timer;\r\n\r\n\r\n\r\n/**\r\n  @author Joshua Granick   \r\n  @version 1.2   \r\n */\r\nclass SimpleActuator extends GenericActuator {\r\n\r\n\r\n    var timeOffset:Float;\r\n\r\n    static var actuators:Array <SimpleActuator> = new Array <SimpleActuator> ();\r\n    static var actuatorsLength:Int = 0;\r\n    static var addedEvent:Bool = false;\r\n\r\n    static var timer:Timer;\r\n\r\n    var active:Bool;\r\n    var cacheVisible:Bool;\r\n    var detailsLength:Int;\r\n    var initialized:Bool;\r\n    var paused:Bool;\r\n    var pauseTime:Float;\r\n    var propertyDetails:Array <PropertyDetails>;\r\n    var sendChange:Bool;\r\n    var setVisible:Bool;\r\n    var startTime:Float;\r\n    var toggleVisible:Bool;\r\n\r\n    var has_timescaled_starttime : Bool = false;\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        active = true;\r\n        propertyDetails = new Array <PropertyDetails> ();\r\n        sendChange = false;\r\n        paused = false;\r\n        cacheVisible = false;\r\n        initialized = false;\r\n        setVisible = false;\r\n        toggleVisible = false;\r\n\r\n        startTime = Luxe.time;\r\n\r\n        super (target, duration, properties);\r\n\r\n        if (!addedEvent) {\r\n\r\n            addedEvent = true;\r\n            Luxe.on(luxe.Ev.tickstart, on_internal_update);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      @inheritDoc   \r\n     */\r\n    public override function autoVisible (?value:Null<Bool>):IGenericActuator {\r\n\r\n        if (value == null) {\r\n\r\n            value = true;\r\n\r\n        }\r\n\r\n        _autoVisible = value;\r\n\r\n        if (!value) {\r\n\r\n            toggleVisible = false;\r\n\r\n            if (setVisible) {\r\n\r\n                setField (target, \"visible\", cacheVisible);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      @inheritDoc   \r\n     */\r\n    public override function delay (duration:Float):IGenericActuator {\r\n\r\n        _delay = duration;\r\n        timeOffset = startTime + duration;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    inline function getField (target:Dynamic, propertyName:String):Dynamic {\r\n\r\n\r\n        var value = null;\r\n\r\n        if (Reflect.hasField (target, propertyName)) {\r\n\r\n            value = Reflect.field (target, propertyName);\r\n\r\n        } else {\r\n\r\n            value = Reflect.getProperty (target, propertyName);\r\n\r\n        }\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n\r\n    function initialize ():Void {\r\n\r\n        var details:PropertyDetails;\r\n        var start:Float;\r\n\r\n        for (i in Reflect.fields (properties)) {\r\n\r\n            var isField = true;\r\n\r\n            if ( Reflect.hasField (target, i)\r\n                    #if web && (!target.__properties__ || untyped !target.__properties__[\"set_\" + i]) #end\r\n               ) {\r\n\r\n                start = Reflect.field (target, i);\r\n\r\n            } else {\r\n\r\n                isField = false;\r\n                start = Reflect.getProperty (target, i);\r\n\r\n            }\r\n\r\n\r\n            if (Std.is (start, Float)) {\r\n\r\n                details = new PropertyDetails (target, i, start, getField (properties, i) - start, isField);\r\n            propertyDetails.push (details);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        detailsLength = propertyDetails.length;\r\n        initialized = true;\r\n\r\n    }\r\n\r\n\r\n    public override function move ():Void {\r\n\r\n        toggleVisible = (Reflect.hasField (properties, \"alpha\") && Reflect.hasField (properties, \"visible\"));\r\n\r\n        if (toggleVisible && properties.alpha != 0 && !getField (target, \"visible\")) {\r\n\r\n            setVisible = true;\r\n            cacheVisible = getField (target, \"visible\");\r\n            setField (target, \"visible\", true);\r\n\r\n        }\r\n\r\n        timeOffset = startTime;\r\n        actuators.push (this);\r\n        ++actuatorsLength;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      @inheritDoc   \r\n     */\r\n    public override function onUpdate (handler:Dynamic, parameters:Array <Dynamic> = null):IGenericActuator {\r\n\r\n        _onUpdate = handler;\r\n\r\n        if (parameters == null) {\r\n\r\n            _onUpdateParams = [];\r\n\r\n        } else {\r\n\r\n        _onUpdateParams = parameters;\r\n\r\n        }\r\n\r\n        sendChange = true;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    public override function pause ():Void {\r\n\r\n        paused = true;\r\n\r\n        pauseTime = timescaled ? update_timer : current_time;//haxe.Timer.stamp ();\r\n\r\n    }\r\n\r\n\r\n    public override function resume ():Void {\r\n\r\n        if (paused) {\r\n\r\n            paused = false;\r\n\r\n            timeOffset += ( (timescaled ? update_timer : current_time) - pauseTime);\r\n            // timeOffset += (haxe.Timer.stamp () - pauseTime) / 1000;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    inline function setField (target:Dynamic, propertyName:String, value:Dynamic):Void {\r\n\r\n        if (Reflect.hasField (target, propertyName)) {\r\n\r\n            Reflect.setField (target, propertyName, value);\r\n\r\n        } else {\r\n\r\n            Reflect.setProperty (target, propertyName, value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    inline function setProperty (details:PropertyDetails, value:Dynamic):Void {\r\n\r\n        if (details.isField) {\r\n\r\n            Reflect.setProperty (details.target, details.propertyName, value);\r\n\r\n        } else {\r\n\r\n            Reflect.setProperty (details.target, details.propertyName, value);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public override function stop (properties:Dynamic, complete:Bool, sendEvent:Bool):Void {\r\n\r\n        if (active) {\r\n\r\n            if (properties == null) {\r\n\r\n                active = false;\r\n\r\n                if (complete) {\r\n\r\n                    apply ();\r\n\r\n                }\r\n\r\n                this.complete (sendEvent);\r\n                return;\r\n\r\n            }\r\n\r\n            for (i in Reflect.fields (properties)) {\r\n\r\n                if (Reflect.hasField (this.properties, i)) {\r\n\r\n                    active = false;\r\n\r\n                    if (complete) {\r\n\r\n                        apply ();\r\n\r\n                    }\r\n\r\n                    this.complete (sendEvent);\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    function update( currentTime:Float ):Void {\r\n\r\n\r\n        if (!paused) {\r\n\r\n            var details:PropertyDetails;\r\n            var easing:Float;\r\n            var i:Int;\r\n\r\n            var tweenPosition:Float = (currentTime - timeOffset) / duration;\r\n\r\n            if (tweenPosition > 1) {\r\n\r\n                tweenPosition = 1;\r\n\r\n            }\r\n\r\n            if (!initialized) {\r\n\r\n                initialize ();\r\n\r\n            }\r\n\r\n            if (!special) {\r\n\r\n                easing = _ease.calculate (tweenPosition);\r\n\r\n                for (i in 0...detailsLength) {\r\n\r\n                    details = propertyDetails[i];\r\n                    setProperty (details, details.start + (details.change * easing));\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (!_reverse) {\r\n\r\n                    easing = _ease.calculate (tweenPosition);\r\n\r\n                } else {\r\n\r\n                    easing = _ease.calculate (1 - tweenPosition);\r\n\r\n                }\r\n\r\n                var endValue:Float;\r\n\r\n                for (i in 0...detailsLength) {\r\n\r\n                    details = propertyDetails[i];\r\n\r\n                    if (_smartRotation && (details.propertyName == \"rotation\" || details.propertyName == \"rotationX\" || details.propertyName == \"rotationY\" || details.propertyName == \"rotationZ\")) {\r\n\r\n                        var rotation:Float = details.change % 360;\r\n\r\n                        if (rotation > 180) {\r\n\r\n                            rotation -= 360;\r\n\r\n                        } else if (rotation < -180) {\r\n\r\n                            rotation += 360;\r\n\r\n                        }\r\n\r\n                        endValue = details.start + rotation * easing;\r\n\r\n                    } else {\r\n\r\n                        endValue = details.start + (details.change * easing);\r\n\r\n                    }\r\n\r\n                    if (!_snapping) {\r\n\r\n                        setProperty (details, endValue);\r\n\r\n                    } else {\r\n\r\n                        setProperty (details, Math.round (endValue));\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (tweenPosition == 1) {\r\n\r\n                if (_repeat == 0) {\r\n\r\n                    active = false;\r\n\r\n                    if (toggleVisible && getField (target, \"alpha\") == 0) {\r\n\r\n                        setField (target, \"visible\", false);\r\n\r\n                    }\r\n\r\n                    complete (true);\r\n                    return;\r\n\r\n                } else {\r\n\r\n                    if (_onRepeat != null) {\r\n\r\n                        callMethod (_onRepeat, _onRepeatParams);\r\n\r\n                    }\r\n\r\n                    if (_reflect) {\r\n\r\n                        _reverse = !_reverse;\r\n\r\n                    }\r\n\r\n                    startTime = currentTime;\r\n                    timeOffset = startTime + _delay;\r\n\r\n                    if (_repeat > 0) {\r\n\r\n                        _repeat --;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (sendChange) {\r\n\r\n                change ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Event Handlers\r\n\r\n    static var update_timer : Float = 0;\r\n    static var current_time : Float = 0;\r\n    static function on_internal_update(_) : Void {\r\n\r\n        update_timer += Luxe.dt;\r\n        current_time = Luxe.time;\r\n\r\n        var currentTime = current_time;\r\n\r\n        var actuator:SimpleActuator;\r\n\r\n        var j:Int = 0;\r\n        var cleanup = false;\r\n\r\n        for (i in 0...actuatorsLength) {\r\n\r\n            actuator = actuators[j];\r\n\r\n            if (actuator != null && actuator.active) {\r\n\r\n                currentTime = actuator.timescaled ? update_timer : current_time;\r\n\r\n                if(actuator.timescaled && !actuator.has_timescaled_starttime) {\r\n                    actuator.has_timescaled_starttime = true;\r\n                    actuator.startTime = update_timer;\r\n                    actuator.timeOffset = actuator.startTime;\r\n                }\r\n\r\n                if(currentTime > actuator.timeOffset) {\r\n                    actuator.update( currentTime );\r\n                }\r\n\r\n                j++;\r\n\r\n            } else {\r\n\r\n                actuators.splice (j, 1);\r\n                --actuatorsLength;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n * @author Joshua Granick\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\n\r\nclass Quad {\r\n\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new QuadEaseIn ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new QuadEaseInOut ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new QuadEaseOut ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass QuadEaseIn implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k * k;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * (t /= d) * t + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass QuadEaseInOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if ((k *= 2) < 1) {\r\n            return 1 / 2 * k * k;\r\n        }\r\n        return -1 / 2 * ((k - 1) * (k - 3) - 1);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if ((t /= d / 2) < 1) {\r\n            return c / 2 * t * t + b;\r\n        }\r\n        return -c / 2 * ((t - 1) * (t - 3) - 1) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass QuadEaseOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return -k * (k - 2);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return -c * (t /= d) * (t - 2) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n","/**\r\n  @author Joshua Granick   \r\n */\r\npackage luxe.tween;\r\n\r\n\r\nimport luxe.tween.actuators.GenericActuator;\r\nimport luxe.tween.actuators.MethodActuator;\r\nimport luxe.tween.actuators.MotionPathActuator;\r\nimport luxe.tween.actuators.SimpleActuator;\r\nimport luxe.tween.easing.IEasing;\r\nimport luxe.tween.easing.Quad;\r\n\r\nclass Actuate {\r\n\r\n\r\n    public static var defaultActuator:Class <GenericActuator> = SimpleActuator;\r\n    public static var defaultEase:IEasing = Quad.easeOut;\r\n    static var targetLibraries:ObjectHash <Array <GenericActuator>> = new ObjectHash <Array <GenericActuator>> ();\r\n\r\n\r\n    /**\r\n      Copies properties from one object to another. Conflicting tweens are stopped automatically   \r\n      @example     <code>Actuate.apply (MyClip, { alpha: 1 } );</code>   \r\n      @param   target      The object to copy to   \r\n      @param   properties      The object to copy from   \r\n      @param   customActuator      A custom actuator to use instead of the default (Optional)   \r\n      @return      The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers   \r\n     */\r\n    public static function apply (target:Dynamic, properties:Dynamic, customActuator:Class <GenericActuator> = null):IGenericActuator {\r\n\r\n        stop (target, properties);\r\n\r\n        if (customActuator == null) {\r\n\r\n            customActuator = defaultActuator;\r\n\r\n        }\r\n\r\n        var actuator = Type.createInstance (customActuator, [ target, 0, properties ]);\r\n        actuator.apply ();\r\n\r\n        return actuator;\r\n\r\n    }\r\n\r\n\r\n    static function getLibrary (target:Dynamic, allowCreation:Bool = true):Array <GenericActuator> {\r\n\r\n        if (!targetLibraries.exists (target) && allowCreation) {\r\n\r\n            targetLibraries.set (target, new Array <GenericActuator> ());\r\n\r\n        }\r\n\r\n        return targetLibraries.get (target);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Creates a new MotionPath tween   \r\n      @param   target      The object to tween   \r\n      @param   duration        The length of the tween in seconds   \r\n      @param   properties      An object containing a motion path for each property you wish to tween   \r\n      @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   \r\n      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate   \r\n     */\r\n    public static function motionPath (target:Dynamic, duration:Float, properties:Dynamic, overwrite:Bool = true):IGenericActuator {\r\n\r\n        return tween (target, duration, properties, overwrite, MotionPathActuator);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Pauses tweens for the specified target objects   \r\n      @param   ... targets     The target objects which will have their tweens paused. Passing no value pauses tweens for all objects   \r\n     */\r\n    //public static function pause (... targets:Array):void {\r\n    public static function pause (target:Dynamic):Void {\r\n\r\n        if (Std.is (target, GenericActuator)) {\r\n\r\n            cast (target, GenericActuator).pause ();\r\n\r\n        } else {\r\n\r\n            var library:Array <GenericActuator> = getLibrary (target, false);\r\n\r\n            if (library != null) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.pause ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    }\r\n\r\n\r\n    public static function pauseAll ():Void {\r\n\r\n        for (library in targetLibraries) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.pause ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Resets Actuate by stopping and removing tweens for all objects   \r\n     */\r\n    public static function reset ():Void {\r\n\r\n        for (library in targetLibraries) {\r\n\r\n            var i = library.length - 1;\r\n            while (i >= 0) {\r\n                library[i].stop (null, false, false);\r\n                i--;\r\n            }\r\n\r\n        }\r\n\r\n        targetLibraries = new ObjectHash <Array <GenericActuator>> ();\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Resumes paused tweens for the specified target objects   \r\n      @param   ... targets     The target objects which will have their tweens resumed. Passing no value resumes tweens for all objects   \r\n     */\r\n    public static function resume (target:Dynamic):Void {\r\n\r\n        if (Std.is (target, GenericActuator)) {\r\n\r\n            cast (target, GenericActuator).resume ();\r\n\r\n        } else {\r\n\r\n            var library:Array <GenericActuator> = getLibrary (target, false);\r\n\r\n            if (library != null) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.resume ();\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public static function resumeAll ():Void {\r\n\r\n        for (library in targetLibraries) {\r\n\r\n            for (actuator in library) {\r\n\r\n                actuator.resume ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Stops all tweens for an individual object   \r\n      @param   target      The target object which will have its tweens stopped, or a generic actuator instance   \r\n      @param   properties      A string, array or object which contains the properties you wish to stop, like \"alpha\", [ \"x\", \"y\" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)   \r\n      @param   complete        If tweens should apply their final target values before stopping. Default is false (Optional)   \r\n      @param   sendEvent   If a complete() event should be dispatched for the specified target. Default is true (Optional)   \r\n     */\r\n    public static function stop (target:Dynamic, properties:Dynamic = null, complete:Bool = false, sendEvent:Bool = true):Void {\r\n\r\n        if (target != null) {\r\n\r\n            if (Std.is (target, GenericActuator)) {\r\n\r\n                cast (target, GenericActuator).stop (null, complete, sendEvent);\r\n\r\n            } else {\r\n\r\n                var library:Array <GenericActuator> = getLibrary (target, false);\r\n\r\n                if (library != null) {\r\n\r\n                if (Std.is (properties, String)) {\r\n\r\n                    var temp = { };\r\n                    Reflect.setField (temp, properties, null);\r\n                    properties = temp;\r\n\r\n                } else if (Std.is (properties, Array)) {\r\n\r\n                    var temp = {};\r\n\r\n                    for (property in cast (properties, Array <Dynamic>)) {\r\n\r\n                        Reflect.setField (temp, property, null);\r\n\r\n                    }\r\n\r\n                    properties = temp;\r\n\r\n                }\r\n\r\n                var i = library.length - 1;\r\n                while (i >= 0) {\r\n                    library[i].stop (properties, complete, sendEvent);\r\n                    i--;\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Creates a tween-based timer, which is useful for synchronizing function calls with other animations   \r\n      @example     <code>Actuate.timer (1).onComplete (trace, [ \"Timer is now complete\" ]);</code>   \r\n      @param   duration        The length of the timer in seconds   \r\n      @param   customActuator      A custom actuator to use instead of the default (Optional)   \r\n      @return      The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object   \r\n     */\r\n    public static function timer (duration:Float, customActuator:Class <GenericActuator> = null):IGenericActuator {\r\n\r\n        return tween (new TweenTimer (0), duration, new TweenTimer (1), false, customActuator);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n      Creates a new tween   \r\n      @example     <code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ \"MyClip is now visible\" ]);</code>   \r\n      @param   target      The object to tween   \r\n      @param   duration        The length of the tween in seconds   \r\n      @param   properties      The end values to tween the target to   \r\n      @param   overwrite           Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   \r\n      @param   customActuator      A custom actuator to use instead of the default (Optional)   \r\n      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate   \r\n     */\r\n    public static function tween (target:Dynamic, duration:Float, properties:Dynamic, overwrite:Bool = true, customActuator:Class <GenericActuator> = null):IGenericActuator {\r\n\r\n        if (target != null) {\r\n\r\n            if (duration > 0) {\r\n\r\n                if (customActuator == null) {\r\n\r\n                    customActuator = defaultActuator;\r\n\r\n                }\r\n\r\n                var actuator = Type.createInstance (customActuator, [ target, duration, properties ]);\r\n                var library = getLibrary (actuator.target);\r\n\r\n                if (overwrite) {\r\n\r\n                    var i = library.length - 1;\r\n\r\n                    while (i >= 0) {\r\n                        library[i].stop (actuator.properties, false, false);\r\n                        i--;\r\n                    }\r\n\r\n                    library = getLibrary (actuator.target);\r\n\r\n                }\r\n\r\n                library.push (actuator);\r\n                actuator.move ();\r\n\r\n                /*var actuator:GenericActuator = createInstance (customActuator, target, duration, properties);\r\n\r\n                if (overwrite) {\r\n\r\n                    stop (target, properties, false, false);\r\n\r\n                }\r\n\r\n                var library:Array <GenericActuator> = getLibrary (target);\r\n                library.push (actuator);\r\n\r\n                actuator.move ();*/\r\n\r\n                return actuator;\r\n\r\n            } else {\r\n\r\n                return apply (target, properties, customActuator);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return null;\r\n\r\n    }\r\n\r\n\r\n    public static function unload (actuator:GenericActuator):Void {\r\n\r\n        var target = actuator.target;\r\n\r\n        if (targetLibraries.exists (target)) {\r\n\r\n            targetLibraries.get (target).remove (actuator);\r\n\r\n            if (targetLibraries.get (target).length == 0) {\r\n\r\n                targetLibraries.remove (target);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Creates a new tween that updates a method rather than setting the properties of an object   \r\n      @example     <code>Actuate.update (trace, 1, [\"Value: \", 0], [\"\", 1]).onComplete (trace, [ \"Finished tracing values between 0 and 1\" ]);</code>   \r\n      @param   target      The method to update   \r\n      @param   duration        The length of the tween in seconds   \r\n      @param   start       The starting parameters of the method call. You may use both numeric and non-numeric values   \r\n      @param   end     The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters   \r\n      @param   overwrite       Sets whether previous tweens for the same target and properties will be overwritten (Default is true)   \r\n      @return      The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate   \r\n     */\r\n    public static function update (target:Dynamic, duration:Float, start:Array <Dynamic> = null, end:Array <Dynamic> = null, overwrite:Bool = true):IGenericActuator {\r\n\r\n        var properties:Dynamic = { start: start, end: end };\r\n\r\n        return tween (target, duration, properties, overwrite, MethodActuator);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n@:noCompletion private class TweenTimer {\r\n\r\n\r\n    public var progress:Float;\r\n\r\n\r\n    public function new (progress:Float):Void {\r\n\r\n        this.progress = progress;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ntypedef ObjectHash<T> = haxe.ds.ObjectMap<Dynamic, T>;\r\n","package luxe.tween;\r\n\r\n\r\n/**\r\n  @author Joshua Granick   \r\n  @author Aleš Tomeček (for RotationPath)   \r\n */\r\nclass MotionPath {\r\n\r\n\r\n    public var rotation (get_rotation, null):RotationPath;\r\n    public var x (get_x, null):IComponentPath;\r\n    public var y (get_y, null):IComponentPath;\r\n\r\n    var _rotation:RotationPath;\r\n    var _x:ComponentPath;\r\n    var _y:ComponentPath;\r\n\r\n\r\n    public function new () {\r\n\r\n        _x = new ComponentPath ();\r\n        _y = new ComponentPath ();\r\n\r\n        _rotation = null;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Adds a bezier curve to the current motion path   \r\n      @param   x       The x position of the end point for the curve   \r\n      @param   y       The y position of the end point for the curve   \r\n      @param   controlX        The x position of the control point for the curve, which affects the angle and midpoint   \r\n      @param   controlX        The x position of the control point for the curve, which affects the angle and midpoint   \r\n      @param   strength        The degree of emphasis that should be placed on this segment. If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)   \r\n      @return      The current motion path instance   \r\n     */\r\n    public function bezier (x:Float, y:Float, controlX:Float, controlY:Float, strength:Float = 1):MotionPath {\r\n\r\n        _x.addPath (new BezierPath (x, controlX, strength));\r\n        _y.addPath (new BezierPath (y, controlY, strength));\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n      Adds a line to the current motion path   \r\n      @param   x       The x position of the end point for the line   \r\n      @param   x       The y position of the end point for the line   \r\n      @param   strength        The degree of emphasis that should be placed on this segment . If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)   \r\n      @return      The current motion path instance   \r\n     */\r\n    public function line (x:Float, y:Float, strength:Float = 1):MotionPath {\r\n\r\n        _x.addPath (new LinearPath (x, strength));\r\n        _y.addPath (new LinearPath (y, strength));\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Get & Set Methods\r\n\r\n\r\n\r\n\r\n    function get_rotation ():RotationPath {\r\n\r\n        if (_rotation == null) {\r\n\r\n            _rotation = new RotationPath (_x, _y);\r\n\r\n        }\r\n\r\n        return _rotation;\r\n\r\n    }\r\n\r\n\r\n    function get_x ():IComponentPath {\r\n\r\n        return _x;\r\n\r\n    }\r\n\r\n\r\n    function get_y ():IComponentPath {\r\n\r\n        return _y;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ComponentPath implements IComponentPath {\r\n\r\n\r\n    public var start:Float;\r\n    public var end (get_end, null):Float;\r\n\r\n    var paths:Array <BezierPath>;\r\n    var totalStrength:Float;\r\n\r\n\r\n    public function new () {\r\n\r\n        paths = new Array <BezierPath> ();\r\n        start = 0;\r\n        totalStrength = 0;\r\n\r\n    }\r\n\r\n\r\n    public function addPath (path:BezierPath):Void {\r\n\r\n        paths.push (path);\r\n        totalStrength += path.strength;\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (paths.length == 1) {\r\n\r\n            return paths[0].calculate (start, k);\r\n\r\n        } else {\r\n\r\n            var ratio = k * totalStrength;\r\n            var lastEnd = start;\r\n\r\n            for (path in paths) {\r\n\r\n                if (ratio > path.strength) {\r\n\r\n                    ratio -= path.strength;\r\n                    lastEnd = path.end;\r\n\r\n                } else {\r\n\r\n                    return path.calculate (lastEnd, ratio / path.strength);\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 0;\r\n\r\n    }\r\n\r\n\r\n\r\n    // Get & Set Methods\r\n\r\n\r\n\r\n\r\n    function get_end ():Float {\r\n\r\n        if (paths.length > 0) {\r\n\r\n            var path = paths[paths.length - 1];\r\n            return path.end;\r\n\r\n        } else {\r\n\r\n            return start;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n@:noCompletion interface IComponentPath {\r\n\r\n\r\n    var end (get_end, null):Float;\r\n    var start:Float;\r\n\r\n    function calculate (k:Float):Float;\r\n\r\n\r\n}\r\n\r\n\r\nclass BezierPath {\r\n\r\n\r\n    public var control:Float;\r\n    public var end:Float;\r\n    public var strength:Float;\r\n\r\n\r\n    public function new (end:Float, control:Float, strength:Float) {\r\n\r\n        this.end = end;\r\n        this.control = control;\r\n        this.strength = strength;\r\n\r\n    }\r\n\r\n\r\n    public function calculate (start:Float, k:Float):Float {\r\n\r\n        return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * control + k * k * end;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass LinearPath extends BezierPath {\r\n\r\n\r\n    public function new (end:Float, strength:Float) {\r\n\r\n        super (end, 0, strength);\r\n\r\n    }\r\n\r\n\r\n    public override function calculate (start:Float, k:Float):Float {\r\n\r\n        return start + k * (end - start);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass RotationPath implements IComponentPath {\r\n\r\n\r\n    public var end (get_end, null):Float;\r\n    public var offset:Float;\r\n    public var start:Float;\r\n\r\n    var step = 0.01;\r\n    var _x:ComponentPath;\r\n    var _y:ComponentPath;\r\n\r\n\r\n    public function new (x:ComponentPath, y:ComponentPath) {\r\n\r\n        _x = x;\r\n        _y = y;\r\n\r\n        offset = 0;\r\n\r\n        start = calculate (0.0);\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        var dX = _x.calculate (k) - _x.calculate (k + step);\r\n        var dY = _y.calculate (k) - _y.calculate (k + step);\r\n\r\n        var angle = Math.atan2(dY, dX) * (180 / Math.PI);\r\n        angle = (angle + offset) % 360;\r\n\r\n        return angle;\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    // Get & Set Methods\r\n\r\n\r\n\r\n\r\n    public function get_end ():Float {\r\n\r\n        return calculate (1.0);\r\n\r\n    }\r\n\r\n\r\n}\r\n","package luxe.tween.actuators;\r\n\r\n\r\n/**\r\n * @author Joshua Granick\r\n * @version 1.2\r\n */\r\nclass MethodActuator extends SimpleActuator {\r\n\r\n\r\n    var currentParameters:Array <Dynamic>;\r\n    var tweenProperties:Dynamic;\r\n\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        currentParameters = new Array <Dynamic> ();\r\n        tweenProperties = { };\r\n\r\n        super (target, duration, properties);\r\n\r\n        if (!Reflect.hasField (properties, \"start\")) {\r\n\r\n            this.properties.start = new Array <Dynamic> ();\r\n\r\n        }\r\n\r\n        if (!Reflect.hasField (properties, \"end\")) {\r\n\r\n            this.properties.end = this.properties.start;\r\n\r\n        }\r\n\r\n        for (i in 0...this.properties.start.length) {\r\n\r\n            currentParameters.push (null);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public override function apply ():Void {\r\n\r\n        callMethod (target, properties.end);\r\n\r\n    }\r\n\r\n\r\n    override function complete (sendEvent:Bool = true):Void {\r\n\r\n        for (i in 0...properties.start.length) {\r\n\r\n            currentParameters[i] = Reflect.field (tweenProperties, \"param\" + i);\r\n\r\n        }\r\n\r\n        callMethod (target, currentParameters);\r\n\r\n        super.complete (sendEvent);\r\n\r\n    }\r\n\r\n\r\n    override function initialize ():Void {\r\n\r\n        var details:PropertyDetails;\r\n        var propertyName:String;\r\n        var start:Dynamic;\r\n\r\n        for (i in 0...properties.start.length) {\r\n\r\n            propertyName = \"param\" + i;\r\n            start = properties.start[i];\r\n\r\n            Reflect.setField (tweenProperties, propertyName, start);\r\n\r\n            if (Std.is (start, Float) || Std.is (start, Int)) {\r\n\r\n                details = new PropertyDetails (tweenProperties, propertyName, start, properties.end[i] - start);\r\n                propertyDetails.push (details);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        detailsLength = propertyDetails.length;\r\n        initialized = true;\r\n\r\n    }\r\n\r\n\r\n    override function update (currentTime:Float):Void {\r\n\r\n        super.update (currentTime);\r\n\r\n        if (active) {\r\n\r\n            for (i in 0...properties.start.length) {\r\n\r\n                currentParameters[i] = Reflect.field (tweenProperties, \"param\" + i);\r\n\r\n            }\r\n\r\n            callMethod (target, currentParameters);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n","package luxe.tween.actuators;\r\n\r\n\r\nimport luxe.tween.MotionPath;\r\n\r\n\r\n/**\r\n * @author Joshua Granick\r\n */\r\nclass MotionPathActuator extends SimpleActuator {\r\n\r\n\r\n    public function new (target:Dynamic, duration:Float, properties:Dynamic) {\r\n\r\n        super (target, duration, properties);\r\n\r\n    }\r\n\r\n\r\n    public override function apply ():Void {\r\n\r\n        for (propertyName in Reflect.fields (properties)) {\r\n\r\n            if (#if flash false && #end Reflect.hasField (target, propertyName)) {\r\n\r\n                Reflect.setField (target, propertyName, cast (Reflect.field (properties, propertyName), IComponentPath).end);\r\n\r\n            } else {\r\n\r\n                Reflect.setProperty (target, propertyName, cast (Reflect.field (properties, propertyName), IComponentPath).end);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    override function initialize ():Void {\r\n\r\n        var details:PropertyPathDetails;\r\n        var path:IComponentPath;\r\n\r\n        for (propertyName in Reflect.fields (properties)) {\r\n\r\n            path = cast (Reflect.field (properties, propertyName), IComponentPath);\r\n\r\n            if (path != null) {\r\n\r\n                var isField = true;\r\n\r\n                if (#if flash false && #end Reflect.hasField (target, propertyName)) {\r\n\r\n                    path.start = Reflect.field (target, propertyName);\r\n\r\n                } else {\r\n\r\n                    isField = false;\r\n                    path.start = Reflect.getProperty (target, propertyName);\r\n\r\n                }\r\n\r\n\r\n                details = new PropertyPathDetails (target, propertyName, path, isField);\r\n                propertyDetails.push (details);\r\n\r\n            }\r\n\r\n        }\r\n\r\n        detailsLength = propertyDetails.length;\r\n        initialized = true;\r\n\r\n    }\r\n\r\n\r\n    override function update (currentTime:Float):Void {\r\n\r\n        if (!paused) {\r\n\r\n            var details:PropertyPathDetails;\r\n            var easing:Float;\r\n\r\n            var tweenPosition = (currentTime - timeOffset) / duration;\r\n\r\n            if (tweenPosition > 1) {\r\n\r\n                tweenPosition = 1;\r\n\r\n            }\r\n\r\n            if (!initialized) {\r\n\r\n                initialize ();\r\n\r\n            }\r\n\r\n            if (!special) {\r\n\r\n                easing = _ease.calculate (tweenPosition);\r\n\r\n                for (details in propertyDetails) {\r\n\r\n                    if (details.isField) {\r\n\r\n                        Reflect.setField (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                    } else {\r\n\r\n                        Reflect.setProperty (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (!_reverse) {\r\n\r\n                    easing = _ease.calculate (tweenPosition);\r\n\r\n                } else {\r\n\r\n                    easing = _ease.calculate (1 - tweenPosition);\r\n\r\n                }\r\n\r\n                var endValue:Float;\r\n\r\n                for (details in propertyDetails) {\r\n\r\n                    if (!_snapping) {\r\n\r\n                        if (details.isField) {\r\n\r\n                            Reflect.setField (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                        } else {\r\n\r\n                            Reflect.setProperty (details.target, details.propertyName, cast (details, PropertyPathDetails).path.calculate (easing));\r\n\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        if (details.isField) {\r\n\r\n                            Reflect.setField (details.target, details.propertyName, Math.round (cast (details, PropertyPathDetails).path.calculate (easing)));\r\n\r\n                        } else {\r\n\r\n                            Reflect.setProperty (details.target, details.propertyName, Math.round (cast (details, PropertyPathDetails).path.calculate (easing)));\r\n\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (tweenPosition == 1) {\r\n\r\n                if (_repeat == 0) {\r\n\r\n                    active = false;\r\n\r\n                    if (toggleVisible && getField (target, \"alpha\") == 0) {\r\n\r\n                        setField (target, \"visible\", false);\r\n\r\n                    }\r\n\r\n                    complete (true);\r\n                    return;\r\n\r\n                } else {\r\n\r\n                    if (_reflect) {\r\n\r\n                        _reverse = !_reverse;\r\n\r\n                    }\r\n\r\n                    startTime = currentTime;\r\n                    timeOffset = startTime + _delay;\r\n\r\n                    if (_repeat > 0) {\r\n\r\n                        _repeat --;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (sendChange) {\r\n\r\n                change ();\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n#if !haxe3\r\nimport com.eclecticdesignstudio.motion.MotionPath;\r\n#end\r\n\r\n\r\nclass PropertyPathDetails extends PropertyDetails {\r\n\r\n\r\n    public var path:IComponentPath;\r\n\r\n\r\n    public function new (target:Dynamic, propertyName:String, path:IComponentPath, isField:Bool = true) {\r\n\r\n        super (target, propertyName, 0, 0, isField);\r\n\r\n        this.path = path;\r\n\r\n    }\r\n\r\n\r\n}\r\n","﻿/**\r\n * @author Joshua Granick\r\n */\r\n\r\n\r\npackage luxe.tween.actuators;\r\n\r\n\r\nclass PropertyDetails {\r\n    \r\n    \r\n    public var change:Float;\r\n    public var isField:Bool;\r\n    public var propertyName:String;\r\n    public var start:Float;\r\n    public var target:Dynamic;\r\n    \r\n    \r\n    public function new (target:Dynamic, propertyName:String, start:Float, change:Float, isField:Bool = true):Void {\r\n        \r\n        this.target = target;\r\n        this.propertyName = propertyName;\r\n        this.start = start;\r\n        this.change = change;\r\n        this.isField = isField;\r\n        \r\n    }\r\n    \r\n    \r\n}","\r\n/**\r\n * @author Erik Escoffier\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\nclass Bounce {\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new BounceEaseIn ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new BounceEaseInOut ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new BounceEaseOut ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass BounceEaseIn implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n        return BounceEaseIn._ease(k,0,1,1);\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n        return BounceEaseIn._ease(t,b,c,d);\r\n    }\r\n\r\n    public static inline function _ease  (t:Float, b:Float, c:Float, d:Float):Float {\r\n        return c - BounceEaseOut._ease (d-t, 0, c, d) + b;\r\n    }\r\n}\r\n\r\n\r\n\r\nclass BounceEaseInOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (k < .5) {\r\n            return BounceEaseIn._ease(k*2, 0, 1, 1) * .5;\r\n        } else {\r\n            return BounceEaseOut._ease(k*2-1, 0, 1, 1) * .5 + 1*.5;\r\n        }\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if (t < d/2) {\r\n            return BounceEaseIn._ease(t*2, 0, c, d) * .5 + b;\r\n        } else {\r\n            return BounceEaseOut._ease(t*2-d, 0, c, d) * .5 + c*.5 + b;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass BounceEaseOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return BounceEaseOut._ease(k,0,1,1);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return BounceEaseOut._ease(t,b,c,d);\r\n\r\n    }\r\n\r\n    public static inline function _ease(t:Float, b:Float, c:Float, d:Float):Float   {\r\n        if ((t/=d) < (1/2.75)) {\r\n            return c*(7.5625*t*t) + b;\r\n        } else if (t < (2/2.75)) {\r\n            return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;\r\n        } else if (t < (2.5/2.75)) {\r\n            return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;\r\n        } else {\r\n            return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n","/**\r\n * @author Joshua Granick\r\n * @author Philippe / http://philippe.elsass.me\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\nclass Cubic {\r\n\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new CubicEaseIn ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new CubicEaseInOut ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new CubicEaseOut ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass CubicEaseIn implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k * k * k;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * (t /= d) * t * t + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass CubicEaseInOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return ((k /= 1 / 2) < 1) ? 0.5 * k * k * k : 0.5 * ((k -= 2) * k * k + 2);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return ((t /= d / 2) < 1) ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass CubicEaseOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return --k * k * k + 1;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * ((t = t / d - 1) * t * t + 1) + b;\r\n\r\n    }\r\n\r\n\r\n}","/**\r\n * @author Joshua Granick\r\n * @author Philippe / http://philippe.elsass.me\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\n\r\nclass Elastic {\r\n\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new ElasticEaseIn (0.1, 0.4);\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new ElasticEaseInOut (0.1, 0.4);\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new ElasticEaseOut (0.1, 0.4);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ElasticEaseIn implements IEasing {\r\n\r\n\r\n    public var a:Float;\r\n    public var p:Float;\r\n\r\n\r\n    public function new (a:Float, p:Float) {\r\n\r\n        this.a = a;\r\n        this.p = p;\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (k == 0) return 0; if (k == 1) return 1;\r\n        var s:Float;\r\n        if (a < 1) { a = 1; s = p / 4; }\r\n        else s = p / (2 * Math.PI) * Math.asin (1 / a);\r\n        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin( (k - s) * (2 * Math.PI) / p ));\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if (t == 0) {\r\n            return b;\r\n        }\r\n        if ((t /= d) == 1) {\r\n            return b + c;\r\n        }\r\n        var s:Float;\r\n        if (a < Math.abs(c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else {\r\n            s = p / (2 * Math.PI) * Math.asin(c / a);\r\n        }\r\n        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ElasticEaseInOut implements IEasing {\r\n\r\n\r\n    public var a:Float;\r\n    public var p:Float;\r\n\r\n\r\n    public function new (a:Float, p:Float) {\r\n\r\n        this.a = a;\r\n        this.p = p;\r\n\r\n    }\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (k == 0) {\r\n            return 0;\r\n        }\r\n        if ((k /= 1 / 2) == 2) {\r\n            return 1;\r\n        }\r\n\r\n        var p:Float = (0.3 * 1.5);\r\n        var a:Float = 1;\r\n        var s:Float = p / 4;\r\n\r\n        if (k < 1) {\r\n            return -0.5 * (Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));\r\n        }\r\n        return Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if (t == 0) {\r\n            return b;\r\n        }\r\n        if ((t /= d / 2) == 2) {\r\n            return b + c;\r\n        }\r\n        var s:Float;\r\n        if (a < Math.abs(c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else {\r\n            s = p / (2 * Math.PI) * Math.asin(c / a);\r\n        }\r\n        if (t < 1) {\r\n            return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;\r\n        }\r\n        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * 0.5 + c + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ElasticEaseOut implements IEasing {\r\n\r\n\r\n    public var a:Float;\r\n    public var p:Float;\r\n\r\n\r\n    public function new (a:Float, p:Float) {\r\n\r\n        this.a = a;\r\n        this.p = p;\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (k == 0) return 0; if (k == 1) return 1;\r\n        var s:Float;\r\n        if (a < 1) { a = 1; s = p / 4; }\r\n        else s = p / (2 * Math.PI) * Math.asin (1 / a);\r\n        return (a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p ) + 1);\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if (t == 0) {\r\n            return b;\r\n        }\r\n        if ((t /= d) == 1) {\r\n            return b + c;\r\n        }\r\n        var s:Float;\r\n        if (a < Math.abs(c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else {\r\n            s = p / (2 * Math.PI) * Math.asin(c / a);\r\n        }\r\n        return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;\r\n\r\n    }\r\n\r\n\r\n}","﻿/**\r\n * @author Joshua Granick\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\n\r\nclass Expo {\r\n\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new ExpoEaseIn ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new ExpoEaseInOut ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new ExpoEaseOut ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ExpoEaseIn implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k == 0 ? 0 : Math.pow(2, 10 * (k - 1));\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return t == 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ExpoEaseInOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        if (k == 0) { return 0; }\r\n        if (k == 1) { return 1; }\r\n        if ((k /= 1 / 2.0) < 1.0) {\r\n            return 0.5 * Math.pow(2, 10 * (k - 1));\r\n        }\r\n        return 0.5 * (2 - Math.pow(2, -10 * --k));\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        if (t == 0) {\r\n            return b;\r\n        }\r\n        if (t == d) {\r\n            return b + c;\r\n        }\r\n        if ((t /= d / 2.0) < 1.0) {\r\n            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\r\n        }\r\n        return c / 2 * (2 - Math.pow(2, -10 * --t)) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass ExpoEaseOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k == 1 ? 1 : (1 - Math.pow(2, -10 * k));\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return t == d ? b + c : c * (1 - Math.pow(2, -10 * t / d)) + b;\r\n\r\n    }\r\n\r\n\r\n}","/**\r\n * @author Joshua Granick\r\n * @author Philippe / http://philippe.elsass.me\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\nclass Linear {\r\n\r\n\r\n    static public var easeNone (get_easeNone, never):IEasing;\r\n\r\n\r\n    static function get_easeNone ():IEasing {\r\n\r\n        return new LinearEaseNone ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass LinearEaseNone implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return k;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * t / d + b;\r\n\r\n    }\r\n\r\n\r\n}","﻿/**\r\n * @author Joshua Granick\r\n * @author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html\r\n */\r\n\r\n\r\npackage luxe.tween.easing;\r\n\r\n\r\nclass Sine {\r\n\r\n\r\n    static public var easeIn (get_easeIn, never):IEasing;\r\n    static public var easeInOut (get_easeInOut, never):IEasing;\r\n    static public var easeOut (get_easeOut, never):IEasing;\r\n\r\n\r\n    static function get_easeIn ():IEasing {\r\n\r\n        return new SineEaseIn ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeInOut ():IEasing {\r\n\r\n        return new SineEaseInOut ();\r\n\r\n    }\r\n\r\n\r\n    static function get_easeOut ():IEasing {\r\n\r\n        return new SineEaseOut ();\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass SineEaseIn implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return 1 - Math.cos(k * (Math.PI / 2));\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass SineEaseInOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return - (Math.cos(Math.PI * k) - 1) / 2;\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nclass SineEaseOut implements IEasing {\r\n\r\n\r\n    public function new () {\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    public function calculate (k:Float):Float {\r\n\r\n        return Math.sin(k * (Math.PI / 2));\r\n\r\n    }\r\n\r\n\r\n    public function ease (t:Float, b:Float, c:Float, d:Float):Float {\r\n\r\n        return c * Math.sin(t / d * (Math.PI / 2)) + b;\r\n\r\n    }\r\n\r\n\r\n}","package luxe.utils;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Vector;\r\nimport phoenix.geometry.Geometry;\r\n\r\n\r\nclass GeometryUtils {\r\n\r\n    static inline var two_pi : Float = 6.283185307179586;\r\n\r\n    @:allow(luxe.utils.Utils)\r\n    function new() {\r\n        _v_cache = new Vector();\r\n    }\r\n\r\n    public function segments_for_smooth_circle( _radius:Float, _smooth:Float = 5 ) : Int {\r\n\r\n        return Std.int(_smooth * Math.sqrt( _radius ));\r\n\r\n    } //segments_for_smooth_circle\r\n\r\n    public function random_point_in_unit_circle() : Vector {\r\n\r\n            //first get a smoothly distributed point in the radius\r\n        var _r:Float = Math.sqrt( Math.random() );\r\n            //then rotate that point randomly around 360 degrees,\r\n            //the -1 + 2 * means that it shifts from -1 + [0..2] = -1,1 range\r\n            //this centers it around the origin\r\n        var _t:Float = (-1 + (2 * Math.random())) * two_pi;\r\n\r\n            //finally, work out the x and y\r\n        return new Vector( _r*Math.cos(_t), _r*Math.sin(_t) );\r\n\r\n    } //random_point_in_unit_circle\r\n\r\n    public function point_in_polygon(_point:Vector, _offset:Vector, _verts:Array<Vector> ) : Bool {\r\n\r\n        def(_offset, new Vector());\r\n\r\n        var c : Bool = false;\r\n        var nvert : Int = _verts.length;\r\n        var j : Int = nvert - 1;\r\n\r\n        for(i in 0 ... nvert) {\r\n\r\n            if ((( (_verts[i].y+_offset.y) > _point.y) != ((_verts[j].y+_offset.y) > _point.y)) &&\r\n               (_point.x < ( (_verts[j].x+_offset.x) - (_verts[i].x+_offset.x)) * (_point.y - (_verts[i].y+_offset.y))\r\n                 / ( (_verts[j].y+_offset.y) - (_verts[i].y+_offset.y)) + (_verts[i].x+_offset.x)) ) {\r\n                c = !c;\r\n            }\r\n\r\n            j = i;\r\n        }\r\n\r\n        return c;\r\n\r\n    } //point_in_polygon\r\n\r\n        //:todo : Note this function assumes _geometry is a 2D polygon,\r\n        //and is currently slightly less efficient due to geometry not keeping\r\n        //a transformed vert cache in it, which will be needed later\r\n    var _v_cache : Vector;\r\n    public function point_in_geometry( _point:Vector, _geometry:Geometry ) : Bool {\r\n\r\n        var c = false;\r\n        var nvert = _geometry.vertices.length;\r\n        var j = nvert - 1;\r\n\r\n        var _px = _point.x;\r\n        var _py = _point.y;\r\n\r\n        for(i in 0 ... nvert) {\r\n\r\n            var _vert_i = _geometry.vertices[i].pos;\r\n            var _vert_j = _geometry.vertices[j].pos;\r\n\r\n            _v_cache.set_xy(_vert_i.x, _vert_i.y);\r\n            _v_cache.transform(_geometry.transform.world.matrix);\r\n\r\n            var _vert_i_x = _v_cache.x;\r\n            var _vert_i_y = _v_cache.y;\r\n\r\n            _v_cache.set_xy(_vert_j.x, _vert_j.y);\r\n            _v_cache.transform(_geometry.transform.world.matrix);\r\n\r\n            var _vert_j_x = _v_cache.x;\r\n            var _vert_j_y = _v_cache.y;\r\n\r\n            if ((( (_vert_i_y) > _point.y) != ((_vert_j_y) > _point.y)) &&\r\n               (_point.x < ( (_vert_j_x) - (_vert_i_x)) * (_point.y - (_vert_i_y))\r\n                 / ( (_vert_j_y) - (_vert_i_y)) + (_vert_i_x)) ) {\r\n                c = !c;\r\n            }\r\n\r\n            j = i;\r\n\r\n        }\r\n\r\n        return c;\r\n\r\n    } //point_in_geometry\r\n\r\n\r\n        //plane_point is a point on the plane (anywhere) , can be 0,0,0 for infinite plane.\r\n    public function intersect_ray_plane( _ray_start:Vector, _ray_dir:Vector, _plane_normal:Vector, _plane_point:Vector ) : Vector {\r\n\r\n            //T = [planeNormal•(pointOnPlane - rayOrigin)]/planeNormal•rayDirection;\r\n            //pointInPlane = rayOrigin + (rayDirection * T);\r\n\r\n            //for [ ]\r\n        var part1 = _plane_normal.dot( Vector.Subtract(_plane_point, _ray_start) );\r\n        var part2 = _plane_normal.dot( _ray_dir );\r\n\r\n        var T = part1 / part2;\r\n\r\n        return Vector.Add(_ray_start, Vector.Multiply(_ray_dir, T));\r\n\r\n    } //intersect_ray_plane\r\n\r\n\r\n } //GeometryUtils\r\n","package luxe.utils;\r\n\r\n//Portions ported from Three.js http://github.com/mrdoob/three.js\r\n\r\nclass Maths {\r\n\r\n    function new() {}\r\n\r\n    static inline public function fixed( value:Float, precision:Int ) {\r\n\r\n        var n = Math.pow( 10, precision );\r\n        return ( Std.int(value * n) / n );\r\n\r\n    } //fixed'\r\n\r\n    static inline public function lerp( value:Float, target:Float, t:Float ) {\r\n\r\n        t = clamp(t, 0, 1);\r\n\r\n        return (value + t * (target - value));\r\n\r\n    } //lerp\r\n\r\n    static inline public function weighted_avg( value:Float, target:Float, slowness:Float ) {\r\n\r\n            //:todo: use an epsilon\r\n        if( slowness == 0 ) { slowness = 0.00000001; }\r\n\r\n        return ((value * (slowness - 1)) + target) / slowness;\r\n\r\n    } //weighted_avg\r\n\r\n    static inline public function clamp( value:Float, a:Float, b:Float ) : Float {\r\n        return ( value < a ) ? a : ( ( value > b ) ? b : value );\r\n    } //clamp\r\n\r\n    static inline public function clampi( value:Int, a:Int, b:Int ) : Int {\r\n        return ( value < a ) ? a : ( ( value > b ) ? b : value );\r\n    } //clamp\r\n\r\n    static inline public function clamp_bottom(value:Float, a:Float) : Float {\r\n        return value < a ? a : value;\r\n    } //clamp_bottom\r\n\r\n    static inline public function within_range(value:Float, start_range:Float, end_range:Float ) {\r\n        return value >= start_range && value <= end_range;\r\n    } //within_range\r\n\r\n    public static inline function wrap_angle( degrees:Float, lower:Float, upper:Float ) {\r\n\r\n        var _radians:Float = radians(degrees);\r\n        var _distance:Float = upper - lower;\r\n        var _times:Float = Math.floor((degrees - lower) / _distance);\r\n\r\n        return degrees - (_times * _distance);\r\n\r\n    } //wrap_angle\r\n\r\n    public static inline function nearest_power_of_two(_value:Int) {\r\n\r\n        _value--;\r\n        _value |= _value >> 1;\r\n        _value |= _value >> 2;\r\n        _value |= _value >> 4;\r\n        _value |= _value >> 8;\r\n        _value |= _value >> 16;\r\n        _value++;\r\n\r\n        return _value;\r\n\r\n    } //nearest_power_of_two\r\n\r\n    static inline public function map_linear( value:Float, a1:Float, a2:Float, b1:Float, b2:Float ) : Float {\r\n        return b1 + ( value - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n    } //map_linear\r\n\r\n    static inline public function smoothstep( x:Float, min:Float, max:Float ) : Float {\r\n\r\n        if (x <= min) {\r\n            return 0;\r\n        }\r\n\r\n        if (x >= max) {\r\n            return 1;\r\n        }\r\n\r\n        x = ( x - min ) / ( max - min );\r\n\r\n        return x * x * ( 3 - 2 * x );\r\n\r\n    } //smoothstep\r\n\r\n    static inline public function smootherstep( x:Float, min:Float, max:Float ) : Float {\r\n\r\n        if (x <= min) {\r\n            return 0;\r\n        }\r\n\r\n        if (x >= max) {\r\n            return 1;\r\n        }\r\n\r\n        x = ( x - min ) / ( max - min );\r\n\r\n        return x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n    } //smootherstep\r\n\r\n        /** Return the sign of a number, `1` if >= 0 and `-1` if < 0 */\r\n    static inline public function sign( x:Float ) : Int {\r\n        return (x >= 0) ? 1 : -1;\r\n    } //sign\r\n\r\n        /** Return the sign of a number, `0` is returned as `0`, `1` if > `0` and `-1` if < `0` */\r\n    static inline public function sign0( x:Float ) : Int {\r\n        return (x < 0) ? -1 : ((x > 0) ? 1 : 0);\r\n    } //sign\r\n\r\n        /** Convert a number from degrees to radians */\r\n    static inline public function radians( degrees:Float ) : Float {\r\n        return degrees * _PI_OVER_180;\r\n    } //radians\r\n\r\n        /** Convert a number from radians to degrees */\r\n    static inline public function degrees( radians:Float ) : Float {\r\n        return radians * _180_OVER_PI;\r\n    } //degrees\r\n\r\n        /** Get the length squared of a vector by components */\r\n    static inline public function vec_lengthsq(x:Float, y:Float) : Float {\r\n        return x * x + y * y;\r\n    }\r\n\r\n        /** Get the length of a vector by components */\r\n    static inline public function vec_length(x:Float, y:Float) : Float {\r\n        return Math.sqrt(vec_lengthsq(x,y));\r\n    }\r\n\r\n        /** Normalize the component of a vector based on it's length */\r\n    static inline public function vec_normalize(length:Float, component:Float) : Float {\r\n        if(length == 0) return 0;\r\n        return component /= length;\r\n    }\r\n\r\n        /** Returns the dot product between two vectors by components */\r\n    static inline public function vec_dot(x:Float, y:Float, otherx:Float, othery:Float) : Float {\r\n        return x * otherx + y * othery;\r\n    }\r\n\r\n//Internal constants\r\n\r\n        /** Used by `degrees()` and `radians()`, use those to convert, unless needed */\r\n    static inline public var _PI_OVER_180:Float = 3.14159265358979 / 180;\r\n        /** Used by `degrees()` and `radians()`, use those to convert, unless needed */\r\n    static inline public var _180_OVER_PI:Float = 180 / 3.14159265358979;\r\n\r\n} //Maths\r\n","package luxe.utils;\r\n\r\nimport luxe.Log.*;\r\n\r\n//Adapted from code by Grant Skinner,\r\n//see bottom of file for license information and sources.\r\n\r\n/**\r\n Given an `initial` value for the seed, subsequent generated numbers will be predictable,\r\n and the `seed` value updated to reflect the current seed which can be used to resume predictability\r\n from an ongoing set. Uses a Park–Miller pseudo random number generator.\r\n\r\n Accessible through Luxe.utils.random.get(), or used as a class in your own code.\r\n*/\r\nclass Random {\r\n\r\n    public function new( _initial_seed:Float ) {\r\n\r\n        #if !luxe_random_allow_negative_seed\r\n            assert(\r\n                _initial_seed > 0,\r\n                'initial negative seed will return negative random results, if this was intentional, define luxe_random_allow_negative_seed'\r\n            );\r\n        #end\r\n\r\n        seed = initial = _initial_seed;\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n        /** Returns a float number between [0,1) */\r\n    public inline function get() : Float {\r\n        return (seed = (seed * 16807) % 0x7FFFFFFF)/0x7FFFFFFF+0.000000000233;\r\n    }\r\n\r\n        /** Returns a number between [min,max).\r\n            max is optional, returning a number between [0,min) */\r\n    public inline function float( min:Float, ?max:Null<Float>=null ) : Float {\r\n        if(max == null) { max = min; min = 0; }\r\n        return get() * ( max - min ) + min;\r\n    }\r\n\r\n        /** Return a number between [min, max).\r\n            max is optional, returning a number between [0,min) */\r\n    public inline function int( min:Float, ?max:Null<Float>=null ) : Int {\r\n        if(max == null) { max = min; min=0; }\r\n        return Math.floor( float(min,max) );\r\n    }\r\n\r\n        /** Returns true or false based on a chance of [0..1] percent.\r\n            Given 0.5, 50% chance of true, with 0.9, 90% chance of true and so on. */\r\n    public inline function bool( chance:Float = 0.5 ) : Bool {\r\n        return (get() < chance);\r\n    }\r\n\r\n        /** Returns 1 or -1 based on a chance of [0..1] percent.\r\n            Given 0.5, 50% chance of 1, with 0.9, 90% chance of 1 and so on. */\r\n    public inline function sign( chance:Float = 0.5) : Int {\r\n        return (get() < chance) ? 1 : -1;\r\n    }\r\n\r\n        /** Returns 1 or 0 based on a chance of [0..1] percent.\r\n            Given 0.5, 50% chance of 1, with 0.9, 90% chance of 1 and so on. */\r\n    public inline function bit( chance:Float = 0.5) : Int {\r\n        return (get() < chance) ? 1 : 0;\r\n    }\r\n\r\n        /** Reset the initial value to that of the current seed. */\r\n    public inline function reset() {\r\n        var s = seed;\r\n        initial = s;\r\n    }\r\n\r\n        /** get the current seed (read only, change via `initial`)*/\r\n    @:isVar public var seed (default,null): Float;\r\n        /** get/set the initial base seed */\r\n    @:isVar public var initial (default,set): Float;\r\n\r\n        inline function set_initial( _initial : Float ) {\r\n            initial = seed = _initial;\r\n            return initial;\r\n        }\r\n\r\n} //Random\r\n\r\n\r\n//Based on code from http://blog.gskinner.com/archives/2008/01/source_code_see.html\r\n//With license:\r\n\r\n/**\r\n* Rndm by Grant Skinner. Jan 15, 2008\r\n* Visit www.gskinner.com/blog for documentation, updates and more free code.\r\n*\r\n* Incorporates implementation of the Park Miller (1988) \"minimal standard\" linear\r\n* congruential pseudo-random number generator by Michael Baczynski, www.polygonal.de.\r\n* (seed * 16807) % 2147483647\r\n*\r\n*\r\n*\r\n* Copyright (c) 2008 Grant Skinner\r\n*\r\n* Permission is hereby granted, free of charge, to any person\r\n* obtaining a copy of this software and associated documentation\r\n* files (the \"Software\"), to deal in the Software without\r\n* restriction, including without limitation the rights to use,\r\n* copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the\r\n* Software is furnished to do so, subject to the following\r\n* conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be\r\n* included in all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\n* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\n* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n* OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n","package luxe.utils;\r\n\r\nimport luxe.Engine;\r\n\r\nimport haxe.CallStack;\r\nimport snow.api.buffers.Uint8Array;\r\n\r\nclass Utils {\r\n\r\n    public var geometry : luxe.utils.GeometryUtils;\r\n    public var random : luxe.utils.Random;\r\n\r\n    @:noCompletion public var core:Engine;\r\n\r\n    var _byte_levels : Array<String>;\r\n\r\n    @:allow(luxe.Engine)\r\n    function new( _luxe:Engine ) {\r\n\r\n            //store the reference\r\n        core = _luxe;\r\n            //initialise the helpers\r\n        geometry = new luxe.utils.GeometryUtils();\r\n        random = new luxe.utils.Random(Math.random()*0x7FFFFFFF);\r\n            //initialize the byte text helpers\r\n        _byte_levels = ['bytes', 'Kb', 'MB', 'GB', 'TB'];\r\n\r\n    }  //new\r\n\r\n        /** Return a formatted string from a PosInfos */\r\n    public function pos_info( pos:haxe.PosInfos ) {\r\n        return '${pos.fileName}:${pos.lineNumber}:(${pos.className}:${pos.methodName})';\r\n    }\r\n\r\n        /** Generate a short, unique string ID for use (\"base62\"). */\r\n    #if release inline #end\r\n    public function uniqueid(?val:Null<Int>) : String {\r\n\r\n        // http://www.anotherchris.net/csharp/friendly-unique-id-generation-part-2/#base62\r\n\r\n        if(val == null) {\r\n            val = Std.random(0x7fffffff);\r\n        }\r\n\r\n        function to_char(value:Int) : String {\r\n            if (value > 9) {\r\n                var ascii = (65 + (value - 10));\r\n                if (ascii > 90) { ascii += 6; }\r\n                return String.fromCharCode(ascii);\r\n            } else return Std.string(value).charAt(0);\r\n        } //to_char\r\n\r\n        var r = Std.int(val % 62);\r\n        var q = Std.int(val / 62);\r\n        if (q > 0) return uniqueid(q) + to_char(r);\r\n        else return Std.string(to_char(r));\r\n\r\n    } //uniqueid\r\n\r\n        /** Generates and returns a uniqueid converted to a hashed integer for convenience.\r\n            Uses the default `uniqueid` and `hash` implementation detail. */\r\n    #if release inline #end\r\n    public function uniquehash() : UInt {\r\n        return hash( uniqueid() );\r\n    } //uniquehash\r\n\r\n        /** Generates a integer hash from a string using the default algorithm (murmur3) */\r\n    #if release inline #end\r\n    public function hash( string:String ) : UInt {\r\n        return hashdjb2( string );\r\n    } //hash\r\n\r\n        /** Generates an integer hash of a string using the djb2 algorithm */\r\n    #if release inline #end\r\n    public function hashdjb2(string:String) : UInt {\r\n\r\n            //http://www.cse.yorku.ca/~oz/hash.html\r\n        var _hash : Int = 5381;\r\n        for(i in 0...string.length) {\r\n            _hash = ((_hash << 5) + _hash) + string.charCodeAt(i);\r\n        }\r\n\r\n        return _hash;\r\n\r\n    } //hashdjb2\r\n\r\n    #if release inline #end\r\n    public function uniqueid2() : String {\r\n\r\n        return haxe.crypto.Md5.encode(Std.string(Luxe.time*Math.random()));\r\n\r\n    } //uniqueid2\r\n\r\n    #if release inline #end\r\n    public function stacktrace( ?_depth:Int = 100 ) : String {\r\n\r\n        var result = '\\n';\r\n\r\n            var stack = haxe.CallStack.callStack();\r\n\r\n            stack.shift();\r\n            stack.reverse();\r\n\r\n            var total : Int = Std.int(Math.min(stack.length, _depth));\r\n\r\n            for(i in 0 ... total) {\r\n                var stackitem : haxe.CallStack.StackItem = stack[i];\r\n\r\n                switch(stack[i]) {\r\n                    case FilePos(s, file, line):\r\n                        switch(s) {\r\n                            case Method(classname, method):\r\n                                result += '   at $file:$line: $classname.$method';\r\n                            case _:\r\n                        }\r\n                    case _:{}\r\n                }\r\n\r\n                if(i != total - 1) {\r\n                    result += '\\n';\r\n                }\r\n            } //total\r\n\r\n        return result;\r\n\r\n    } //stacktrace\r\n\r\n    #if release inline #end\r\n    public function path_is_relative(_path:String) {\r\n\r\n        return _path.charAt(0) != \"#\"\r\n            && _path.charAt(0) != \"/\"\r\n            && _path.indexOf(\":\\\\\") == -1\r\n            && _path.indexOf(\":/\") == -1\r\n\r\n          && ( _path.indexOf(\"//\") == -1\r\n            || _path.indexOf(\"//\") > _path.indexOf(\"#\")\r\n            || _path.indexOf(\"//\") > _path.indexOf(\"?\"));\r\n\r\n    } //path_is_relative\r\n\r\n    public function find_assets_sequence( _name:String, _ext:String='.png', _start:String='1' ) : Array<String> {\r\n\r\n        var _final : Array<String> = [];\r\n\r\n            var _sequence_type = '';\r\n            var _pattern_regex : EReg = null;\r\n\r\n                //these are not using string interpolation to prevent confusing the regex\r\n            var _type0 = _name + _start + _ext;\r\n            var _type0_re : EReg = new EReg('('+_name+')(\\\\d+\\\\b)', 'gi');\r\n            var _type1 = _name + '_' + _start + _ext;\r\n            var _type1_re : EReg  = new EReg('('+_name+'_)(\\\\d+\\\\b)', 'gi');\r\n            var _type2 = _name + '-' + _start + _ext;\r\n            var _type2_re : EReg  = new EReg('('+_name+'-)(\\\\d+\\\\b)', 'gi');\r\n\r\n                //check name0 ->\r\n            if(Luxe.resources.has(_type0)) {\r\n                _sequence_type = _type0;\r\n                _pattern_regex = _type0_re;\r\n            } else if(Luxe.resources.has(_type1)) {\r\n                _sequence_type = _type1;\r\n                _pattern_regex = _type1_re;\r\n            } else if(Luxe.resources.has(_type2)) {\r\n                _sequence_type = _type2;\r\n                _pattern_regex = _type2_re;\r\n            } else {\r\n                trace(\"Sequence requested from \" + _name + \" but no assets found like `\" + _type0 + \"` or `\" + _type1 + \"` or `\" + _type2 + \"`\" );\r\n            }\r\n\r\n        if(_sequence_type != '') {\r\n            for(_asset in core.resources.cache) {\r\n                    //check for continuations of the sequence, \r\n                    //matching by pattern rather than just brute force, \r\n                    //so we can catch gaps/missing frames etc\r\n                if(_pattern_regex.match(_asset.id)) {\r\n                    _final.push( _asset.id );\r\n                }\r\n            }\r\n\r\n            _final.sort(function(a:String, b:String):Int { \r\n                \r\n                if(a == b) return 0;\r\n                \r\n                _pattern_regex.match(a);\r\n                var _a_index = Std.parseInt(_pattern_regex.matched(2));\r\n                \r\n                _pattern_regex.match(b);\r\n                var _b_index = Std.parseInt(_pattern_regex.matched(2));\r\n                \r\n                if(_a_index < _b_index) return -1;\r\n\r\n                return 1;\r\n\r\n            }); //sort\r\n\r\n        }\r\n\r\n        return _final;\r\n\r\n    } //find_assets_sequence\r\n\r\n        /** :WIP: Wrap text using a knuth plass algorithm for column breaking. */\r\n    #if release inline #end\r\n    public function text_wrap_column_knuth_plass( _string:String, _column:Int=80) {\r\n\r\n        var result = [];\r\n\r\n        inline function splitwords(_str:String, _into:Array<String>) {\r\n            var s = _str;\r\n            var rgx = new EReg('(\\\\b[^\\\\s]+\\\\b)', 'gm');\r\n            while (rgx.match(s)) {\r\n                _into.push(rgx.matched(1));\r\n                s = rgx.matchedRight();\r\n            }\r\n                //no matches?\r\n            if(_into.length == 0) _into.push(_str);\r\n            return _into;\r\n        } //splitwords\r\n\r\n        inline function findlen(_lens:Array<Int>, _start:Int, _end:Int) {\r\n            var total = 0;\r\n            for(i in (_start-1) ... _end) total += _lens[i];\r\n            return total + (_end - _start + 1);\r\n        } //findlen\r\n\r\n        inline function getmin(_from:Map<Int,Int>):Int {\r\n            var min = 0x3FFFFFFF;\r\n            for(item in _from.keys()) if(item < min) min = item;\r\n            return min;\r\n        } //getmin\r\n\r\n        var words = [];\r\n        var lengths = [];\r\n        var badness = [ 0 => 0 ];\r\n        var extra = new Map<Int,Int>();\r\n\r\n        splitwords(_string, words);\r\n        words.map(function(w){ lengths.push(w.length); });\r\n\r\n        var n = words.length;\r\n\r\n        for( i in 1 ... n+1 ) {\r\n\r\n            var sums = new Map<Int,Int>();\r\n            var k = i;\r\n\r\n            while( findlen(lengths, k, i) <= _column && k > 0) {\r\n                var a = (_column - findlen(lengths, k, i));\r\n                sums[ Std.int(Math.pow(a,3) + badness[k - 1]) ] = k;\r\n                k -= 1;\r\n            }\r\n\r\n            var mn = getmin(sums);\r\n            badness[i] = mn;\r\n            extra[i] = sums[mn];\r\n\r\n        } //each word\r\n\r\n        var line = 1;\r\n        while(n > 1) {\r\n            result.unshift( words.slice(extra[n]-1, n).join(' ') );\r\n            n = extra[n] - 1;\r\n            line += 1;\r\n        }\r\n\r\n        if(result.length == 0) result.push(_string);\r\n        return result;\r\n\r\n    } //text_wrap_column_knuth\r\n\r\n        /** Soft wrap a string by maximum character count. brk default:'\\n', col default:80 */\r\n    #if release inline #end\r\n    public function text_wrap_column( _text:String, _brk:String='\\n', _column:Int=80) {\r\n\r\n            //based on http://blog.macromates.com/2006/wrapping-text-with-regular-expressions/\r\n            //take note that the ${_column} is string interpolation, not part of the regex.\r\n            //i.e (.{1,80})( +|$)\\n?|(.{80})\r\n\r\n        var result = new EReg('(.{1,${_column}})(?: +|$)\\n?|(.{${_column}})','gimu').replace(_text, '$1$2${_brk}');\r\n\r\n        return StringTools.rtrim(result);\r\n\r\n    } //text_wrap_column\r\n\r\n    #if release inline #end\r\n    public function bytes_to_string( bytes:Int, ?precision:Int=3 ) : String {\r\n\r\n        var index = bytes == 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\r\n        var _byte_value = bytes / Math.pow(1024, index);\r\n            _byte_value = luxe.utils.Maths.fixed(_byte_value, precision);\r\n\r\n        return _byte_value + ' ' + _byte_levels[index];\r\n\r\n    } //bytes_to_string\r\n\r\n    #if release inline #end\r\n    public function array_to_bytes(array:Array<Int>):haxe.io.Bytes {\r\n\r\n        if (array == null) return null;\r\n        var bytes:haxe.io.Bytes = haxe.io.Bytes.alloc(array.length);\r\n        for (n in 0 ... bytes.length) bytes.set(n, array[n]);\r\n\r\n        return bytes;\r\n\r\n    } //array_to_bytes\r\n\r\n        /** Multiply the pixels in the array by their alpha value.\r\n            This means the format of the pixels is RGBA, with values  [0...255].\r\n            Modifies the given array and returns it.  */\r\n    public function premultiply_alpha( _pixels:Uint8Array ) : Uint8Array {\r\n\r\n        var count = _pixels.length;\r\n        var read = _pixels[0];\r\n        var index = 0;\r\n\r\n        while(index < count) {\r\n\r\n            var r = _pixels[index+0];\r\n            var g = _pixels[index+1];\r\n            var b = _pixels[index+2];\r\n            var a = _pixels[index+3] / 255.0;\r\n\r\n            _pixels[index+0] = Std.int(r*a);\r\n            _pixels[index+1] = Std.int(g*a);\r\n            _pixels[index+2] = Std.int(b*a);\r\n\r\n            index += 4;\r\n\r\n        } // while\r\n\r\n        return _pixels;\r\n\r\n    } //premultiply_alpha\r\n\r\n        /** Multiply the pixels in the array by their alpha value.\r\n            This means the format of the pixels is RGBA with values  [0...1].\r\n            Modifies the given array and returns it.  */\r\n    public function premultiply_alpha_normalized( _pixels:Uint8Array ) : Uint8Array {\r\n\r\n        var count = _pixels.length;\r\n        var read = _pixels[0];\r\n        var index = 0;\r\n\r\n        while(index < count) {\r\n\r\n            var r = _pixels[index+0];\r\n            var g = _pixels[index+1];\r\n            var b = _pixels[index+2];\r\n            var a = _pixels[index+3];\r\n\r\n            _pixels[index+0] = r * a;\r\n            _pixels[index+1] = g * a;\r\n            _pixels[index+2] = b * a;\r\n\r\n            index += 4;\r\n\r\n        } // while\r\n\r\n        return _pixels;\r\n\r\n    } //premultiply_alpha_normalized\r\n\r\n\r\n} //Utils\r\n","package luxe.utils.unifill;\r\n\r\nabstract CodePoint(Int) {\r\n\r\n    @:op(A + B)\r\n    public static inline function cons(a : CodePoint, b : String) : String\r\n        return a.toString() + b;\r\n\r\n    @:op(A + B)\r\n    public static inline function snoc(a : String, b : CodePoint) : String\r\n        return a + b.toString();\r\n\r\n    @:op(A + B)\r\n    public static inline function addInt(a : CodePoint, b : Int) : CodePoint\r\n        return cast (a.toInt() + b);\r\n\r\n    @:op(A - B)\r\n    public static inline function sub(a : CodePoint, b : CodePoint) : Int\r\n        return (a.toInt()) - (b.toInt());\r\n\r\n    @:op(A - B)\r\n    public static inline function subInt(a : CodePoint, b : Int) : CodePoint\r\n        return cast (a.toInt() - b);\r\n\r\n    @:op(A == B) public static function eq(a : CodePoint, b : CodePoint) : Bool;\r\n    @:op(A != B) public static function ne(a : CodePoint, b : CodePoint) : Bool;\r\n    @:op(A < B) public static function lt(a : CodePoint, b : CodePoint) : Bool;\r\n    @:op(A <= B) public static function lte(a : CodePoint, b : CodePoint) : Bool;\r\n    @:op(A > B) public static function gt(a : CodePoint, b : CodePoint) : Bool;\r\n    @:op(A >= B) public static function gte(a : CodePoint, b : CodePoint) : Bool;\r\n\r\n    public inline function new(code : Int) : Void {\r\n        if (!Unicode.isScalar(code)) {\r\n            throw Exception.InvalidCodePoint(code);\r\n        }\r\n        this = code;\r\n    }\r\n\r\n    public inline function toString() : String\r\n        return InternalEncoding.fromCodePoint(this);\r\n\r\n    public inline function toInt() : Int\r\n        return this;\r\n}\r\n","package luxe.utils.unifill;\r\n\r\nclass CodePointIter {\r\n\r\n\tvar string : String;\r\n\tvar index : Int;\r\n\tvar endIndex : Int;\r\n\r\n    public inline function new(s : String) {\r\n\t\tstring = s;\r\n\t\tindex = 0;\r\n\t\tendIndex = s.length;\r\n    }\r\n\r\n    public inline function hasNext() : Bool {\r\n\t\treturn index < endIndex;\r\n    }\r\n\r\n\tvar i = 0; // FIXME: blocked by HaxeFoundation/haxe#4353\r\n    public inline function next() : CodePoint {\r\n\t\ti = index;\r\n\t\tindex += InternalEncoding.codePointWidthAt(string, index);\r\n\t\treturn cast InternalEncoding.codePointAt(string, i);\r\n    }\r\n\r\n}\r\n","package luxe.utils.unifill;\r\n\r\n#if (neko || php || cpp || macro)\r\n    private typedef UtfX = Utf8;\r\n#elseif python\r\n    private typedef UtfX = Utf32;\r\n#else\r\n    private typedef UtfX = Utf16;\r\n#end\r\n\r\n/**\r\n   InternalEncoding provides primitive API to deal with strings across\r\n   all platforms. You should consider adopting Unifill before this.\r\n **/\r\nclass InternalEncoding {\r\n\r\n    /**\r\n       Returns Encoding strings on the platform are encoded in.\r\n     **/\r\n    public static var internalEncoding(get, never) : String;\r\n\r\n    static inline function get_internalEncoding() : String\r\n    #if (neko || php || cpp || macro)\r\n        return \"UTF-8\";\r\n    #elseif python\r\n        return \"UTF-32\";\r\n    #else\r\n        return \"UTF-16\";\r\n    #end\r\n\r\n    /**\r\n       Returns the UTF-8/16/32 code unit at position `index` of\r\n       String `s`.\r\n     **/\r\n    public static inline function codeUnitAt(s : String, index : Int) : Int {\r\n\t\treturn UtfX.fromString(s).codeUnitAt(index);\r\n    }\r\n\r\n    /**\r\n       Returns the Unicode code point at position `index` of\r\n       String `s`.\r\n     **/\r\n    public static inline function codePointAt(s : String, index : Int) : Int {\r\n\t\treturn UtfX.fromString(s).codePointAt(index);\r\n    }\r\n\r\n    /**\r\n       Returns the character as a String at position `index` of\r\n       String `s`.\r\n     **/\r\n    public static inline function charAt(s : String, index : Int) : String {\r\n\t\treturn UtfX.fromString(s).charAt(index).toString();\r\n    }\r\n\r\n    /**\r\n       Returns the number of Unicode code points from `beginIndex`\r\n       to `endIndex` in String `s`.\r\n     **/\r\n    public static inline function codePointCount(s : String, beginIndex : Int, endIndex : Int) : Int {\r\n\t\treturn UtfX.fromString(s).codePointCount(beginIndex, endIndex);\r\n    }\r\n\r\n    /**\r\n       Returns the number of units of the code point at position\r\n       `index` of String `s`.\r\n     **/\r\n    public static inline function codePointWidthAt(s : String, index : Int) : Int {\r\n\t\treturn UtfX.fromString(s).codePointWidthAt(index);\r\n    }\r\n\r\n    /**\r\n       Returns the number of units of the code point before\r\n       position `index` of String `s`.\r\n     **/\r\n    public static inline function codePointWidthBefore(s : String, index : Int) : Int {\r\n\t\treturn UtfX.fromString(s).codePointWidthBefore(index);\r\n    }\r\n\r\n    /**\r\n       Returns the index within String `s` that is offset from\r\n       position `index` by `codePointOffset` code points.\r\n     **/\r\n    public static inline function offsetByCodePoints(s : String, index : Int, codePointOffset : Int) : Int {\r\n\t\treturn UtfX.fromString(s).offsetByCodePoints(index, codePointOffset);\r\n    }\r\n\r\n    /**\r\n       Returns the index within String `s` that is offset from\r\n       position `index` by `codePointOffset` code points counting\r\n       backward.\r\n     **/\r\n    public static inline function backwardOffsetByCodePoints(s : String, index : Int, codePointOffset : Int) : Int {\r\n\t\treturn UtfX.fromString(s).offsetByCodePoints(index, -codePointOffset);\r\n    }\r\n\r\n    /**\r\n       Converts the code point `code` to a character as String.\r\n     **/\r\n    public static inline function fromCodePoint(codePoint : Int) : String {\r\n        return UtfX.fromCodePoint(codePoint).toString();\r\n    }\r\n\r\n    /**\r\n       Converts `codePoints` to a String.\r\n     **/\r\n    public static inline function fromCodePoints(codePoints : Iterable<Int>) : String {\r\n        return UtfX.fromCodePoints(codePoints).toString();\r\n    }\r\n\r\n    /**\r\n       Validates String `s`.\r\n\r\n       If the code unit sequence of `s` is invalid,\r\n       `Exception.InvalidCodeUnitSequence` is throwed.\r\n     **/\r\n    public static inline function validate(s : String) : Void {\r\n\t\tUtfX.fromString(s).validate();\r\n    }\r\n\r\n    /**\r\n       Returns if String `s` is valid.\r\n     **/\r\n    public static function isValidString(s : String) : Bool {\r\n        try {\r\n            validate(s);\r\n            return true;\r\n        } catch (e : Exception) {\r\n            switch (e) {\r\n            case InvalidCodeUnitSequence(index):\r\n                return false;\r\n            default:\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","package luxe.utils.unifill;\r\n\r\nabstract Utf16 (StringU16) {\r\n\r\n    /**\r\n       Converts the code point `code` to a character as a Utf16 string.\r\n    **/\r\n    public static inline function fromCodePoint(codePoint : Int) : Utf16 {\r\n\t\tif (codePoint <= 0xFFFF) {\r\n\t\t\treturn new Utf16(StringU16.fromCodeUnit(codePoint));\r\n\t\t} else {\r\n\t\t\treturn new Utf16(StringU16.fromTwoCodeUnits(\r\n\t\t\t\tUnicode.encodeHighSurrogate(codePoint),\r\n\t\t\t\tUnicode.encodeLowSurrogate(codePoint)));\r\n\t\t}\r\n    }\r\n\r\n    /**\r\n       Converts `codePoints` to a Utf16 string.\r\n    **/\r\n    public static inline function fromCodePoints(codePoints : Iterable<Int>) : Utf16 {\r\n        var buf = new StringU16Buffer();\r\n        for (c in codePoints) {\r\n            Utf16Impl.encode_code_point(function (x) buf.addUnit(x), c);\r\n        }\r\n        return new Utf16(buf.getStringU16());\r\n    }\r\n\r\n    public static inline function fromString(s : String) : Utf16 {\r\n        return new Utf16(StringU16.fromString(s));\r\n    }\r\n\r\n    public static inline function fromArray(a : Array<Int>) : Utf16 {\r\n        return new Utf16(StringU16.fromArray(a));\r\n    }\r\n\r\n    public var length(get, never) : Int;\r\n\r\n    /**\r\n       Returns the UTF-16 code unit at position `index` of `this`.\r\n    **/\r\n    public inline function codeUnitAt(index : Int) : Int {\r\n\t\treturn this.codeUnitAt(index);\r\n    }\r\n\r\n    /**\r\n       Returns the Unicode code point at position `index` of\r\n       `this`.\r\n    **/\r\n    public function codePointAt(index : Int) : Int {\r\n\t\treturn Utf16Impl.decode_code_point(length, function(i) return codeUnitAt(i), index);\r\n    }\r\n\r\n    /**\r\n       Returns the character as a String at position `index` of\r\n       `this`.\r\n    **/\r\n    public inline function charAt(index : Int) : Utf16 {\r\n\t\treturn new Utf16(this.substr(index, codePointWidthAt(index)));\r\n    }\r\n\r\n    /**\r\n       Returns the number of Unicode code points from `beginIndex`\r\n       to `endIndex` in `this`.\r\n    **/\r\n    public function codePointCount(beginIndex : Int, endIndex : Int) : Int {\r\n        var index = beginIndex;\r\n        var i = 0;\r\n        while (index < endIndex) {\r\n            index += codePointWidthAt(index);\r\n            ++i;\r\n        }\r\n        return i;\r\n    }\r\n\r\n    /**\r\n       Returns the number of units of the code point at position\r\n       `index` of `this`.\r\n    **/\r\n    public inline function codePointWidthAt(index : Int) : Int {\r\n        var c = codeUnitAt(index);\r\n        return Utf16Impl.code_point_width(c);\r\n    }\r\n\r\n    /**\r\n       Returns the number of units of the code point before\r\n       position `index` of `this`.\r\n    **/\r\n    public inline function codePointWidthBefore(index : Int) : Int {\r\n\t\treturn Utf16Impl.find_prev_code_point(function(i) return codeUnitAt(i), index);\r\n    }\r\n\r\n    /**\r\n       Returns the index within `this` that is offset from\r\n       position `index` by `codePointOffset` code points.\r\n    **/\r\n    public inline function offsetByCodePoints(index : Int, codePointOffset : Int) : Int {\r\n        return if (codePointOffset >= 0) {\r\n            forward_offset_by_code_points(index, codePointOffset);\r\n        } else {\r\n            backward_offset_by_code_points(index, -codePointOffset);\r\n        }\r\n    }\r\n\r\n    /**\r\n       Returns `len` code units of `this`, starting at position pos.\r\n    **/\r\n    public inline function substr(index : Int, ?len : Int) : Utf16 {\r\n\t\treturn new Utf16(this.substr(index, len));\r\n    }\r\n\r\n    /**\r\n       Validates `this` Utf16 string.\r\n\r\n       If the code unit sequence of `this` is invalid,\r\n       `Exception.InvalidCodeUnitSequence` is throwed.\r\n    **/\r\n    public function validate() : Void {\r\n\t\tvar len = this.length;\r\n\t\tvar accessor = function(i) return codeUnitAt(i);\r\n        var i = 0;\r\n        while  (i < len) {\r\n            Utf16Impl.decode_code_point(len, accessor, i);\r\n            i += codePointWidthAt(i);\r\n        }\r\n    }\r\n\r\n    public inline function toString() : String {\r\n\t\treturn this.toString();\r\n    }\r\n\r\n    public inline function toArray() : Array<Int> {\r\n\t\treturn this.toArray();\r\n    }\r\n\r\n    inline function new(s : StringU16) {\r\n\t\tthis = s;\r\n    }\r\n\r\n    inline function get_length() : Int {\r\n\t\treturn this.length;\r\n    }\r\n\r\n    inline function forward_offset_by_code_points(index : Int, codePointOffset : Int) : Int {\r\n\t\tvar len = this.length;\r\n        var i = 0;\r\n        while (i < codePointOffset && index < len) {\r\n            index += codePointWidthAt(index);\r\n            ++i;\r\n        }\r\n        return index;\r\n    }\r\n\r\n    inline function backward_offset_by_code_points(index : Int, codePointOffset : Int) : Int {\r\n        var count = 0;\r\n        while (count < codePointOffset && 0 < index) {\r\n            index -= codePointWidthBefore(index);\r\n            ++count;\r\n        }\r\n        return index;\r\n    }\r\n\r\n}\r\n\r\nprivate class Utf16Impl {\r\n\r\n    public static inline function code_point_width(c : Int) : Int {\r\n        return (!Unicode.isHighSurrogate(c)) ? 1 : 2;\r\n    }\r\n\r\n    public static inline function find_prev_code_point(accessor : Int -> Int, index : Int) : Int {\r\n        var c = accessor(index - 1);\r\n        return (!Unicode.isLowSurrogate(c)) ? 1 : 2;\r\n    }\r\n\r\n    public static function encode_code_point(addUnit : Int -> Void, codePoint : Int) : Void {\r\n        if (codePoint <= 0xFFFF) {\r\n            addUnit(codePoint);\r\n        } else {\r\n            addUnit(Unicode.encodeHighSurrogate(codePoint));\r\n            addUnit(Unicode.encodeLowSurrogate(codePoint));\r\n        }\r\n    }\r\n\r\n    public static function decode_code_point(len : Int, accessor : Int -> Int, index : Int) : Int {\r\n        if (index < 0 || len <= index)\r\n            throw Exception.InvalidCodeUnitSequence(index);\r\n        var hi = accessor(index);\r\n        if (Unicode.isHighSurrogate(hi)) {\r\n            if (index + 1 < 0 || len <= index + 1) {\r\n                throw Exception.InvalidCodeUnitSequence(index);\r\n            }\r\n            var lo = accessor(index + 1);\r\n            if (Unicode.isLowSurrogate(lo)) {\r\n                return Unicode.decodeSurrogate(hi, lo);\r\n            } else {\r\n                throw Exception.InvalidCodeUnitSequence(index);\r\n            }\r\n        } else if (Unicode.isLowSurrogate(hi)) {\r\n            throw Exception.InvalidCodeUnitSequence(index);\r\n        } else {\r\n            return hi;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n#if !(neko || php || cpp || macro || python)\r\n\r\nprivate abstract StringU16Buffer(StringBuf) {\r\n\r\n    public inline function new() {\r\n        this = new StringBuf();\r\n    }\r\n\r\n    public inline function addUnit(unit : Int) : Void {\r\n        this.addChar(unit);\r\n    }\r\n\r\n    public inline function getStringU16() : StringU16 {\r\n        return StringU16.fromString(this.toString());\r\n    }\r\n\r\n}\r\n\r\nprivate abstract StringU16(String) {\r\n\r\n    public static inline function fromString(s : String) : StringU16 {\r\n        return new StringU16(s);\r\n\t}\r\n\r\n\tpublic static inline function fromCodeUnit(u : Int) : StringU16 {\r\n\t\treturn new StringU16(String.fromCharCode(u));\r\n    }\r\n\r\n\tpublic static inline function fromTwoCodeUnits(u0 : Int, u1 : Int) : StringU16 {\r\n\t\treturn new StringU16(String.fromCharCode(u0) + String.fromCharCode(u1));\r\n\t}\r\n\r\n    public static inline function ofArray(a : Array<Int>) : StringU16 {\r\n        return fromArray(a);\r\n    }\r\n\r\n    public static inline function fromArray(a : Array<Int>) : StringU16 {\r\n        var buf = new StringBuf();\r\n        for (x in a) {\r\n            buf.addChar(x);\r\n        }\r\n        return new StringU16(buf.toString());\r\n    }\r\n\r\n    public var length(get, never) : Int;\r\n\r\n    public #if !flash inline #end function codeUnitAt(index : Int) : Int {\r\n        return StringTools.fastCodeAt(this, index);\r\n    }\r\n\r\n    public inline function substr(index : Int, ?len : Int) : StringU16 {\r\n        return new StringU16(this.substr(index, len));\r\n    }\r\n\r\n    public inline function toString() : String {\r\n        return this;\r\n    }\r\n\r\n    public inline function toArray() : Array<Int> {\r\n        var i = 0;\r\n        var len = this.length;\r\n        return [while (i < len) StringTools.fastCodeAt(this, i++)];\r\n    }\r\n\r\n    inline function new(s : String) {\r\n        this = s;\r\n    }\r\n\r\n    inline function get_length() : Int {\r\n        return this.length;\r\n    }\r\n\r\n}\r\n\r\n#else\r\n\r\nprivate abstract StringU16Buffer(Array<Int>) {\r\n\r\n    public inline function new() {\r\n        this = [];\r\n    }\r\n\r\n    public inline function addUnit(unit : Int) : Void {\r\n        this.push(unit);\r\n    }\r\n\r\n    public inline function getStringU16() : StringU16 {\r\n        return StringU16.ofArray(this);\r\n    }\r\n\r\n}\r\n\r\nprivate abstract StringU16(Array<Int>) {\r\n\r\n    public static function fromString(s : String) : StringU16 {\r\n        var buf = new StringU16Buffer();\r\n        var addUnit = function (x) buf.addUnit(x);\r\n        for (i in new InternalEncodingIter(s, 0, s.length)) {\r\n            var c = InternalEncoding.codePointAt(s, i);\r\n            Utf16Impl.encode_code_point(addUnit, c);\r\n        }\r\n        return buf.getStringU16();\r\n\t}\r\n\r\n\tpublic static inline function fromCodeUnit(u : Int) : StringU16 {\r\n\t\treturn new StringU16([u]);\r\n\t}\r\n\r\n\tpublic static inline function fromTwoCodeUnits(u0 : Int, u1 : Int) : StringU16 {\r\n\t\treturn new StringU16([u0, u1]);\r\n    }\r\n\r\n    public static inline function ofArray(a : Array<Int>) : StringU16 {\r\n        return new StringU16(a);\r\n    }\r\n\r\n    public static inline function fromArray(a : Array<Int>) : StringU16 {\r\n        return new StringU16(a.copy());\r\n    }\r\n\r\n    public var length(get, never) : Int;\r\n\r\n    public inline function codeUnitAt(index : Int) : Int {\r\n        return this[index];\r\n    }\r\n\r\n    public inline function substr(index : Int, ?len : Int) : StringU16 {\r\n        if (index < 0) {\r\n            index += this.length;\r\n            if (index < 0) index = 0;\r\n        }\r\n        var j = (len != null) ? index + len : this.length;\r\n        var a = this.slice(index, j);\r\n        return new StringU16(a);\r\n    }\r\n\r\n    public function toString() : String {\r\n        var buf = new StringBuf();\r\n        var i = 0;\r\n        var len = this.length;\r\n        var cua = function (i) return this[i];\r\n        while (i < len) {\r\n            var u = Utf16Impl.decode_code_point(len, cua, i);\r\n            buf.add(InternalEncoding.fromCodePoint(u));\r\n            i += Utf16Impl.code_point_width(codeUnitAt(i));\r\n        }\r\n        return buf.toString();\r\n    }\r\n\r\n    public inline function toArray() : Array<Int> {\r\n        return this.copy();\r\n    }\r\n\r\n    inline function new(a : Array<Int>) {\r\n        this = a;\r\n    }\r\n\r\n    inline function get_length() : Int {\r\n        return this.length;\r\n    }\r\n\r\n}\r\n\r\n#end\r\n","package luxe.utils.unifill;\r\n\r\nclass InternalEncodingIter {\r\n\r\n    public var string : String;\r\n    public var index : Int;\r\n    public var endIndex : Int;\r\n\r\n    public inline function new(s : String, beginIndex : Int, endIndex : Int) {\r\n        string = s;\r\n        this.index = beginIndex;\r\n        this.endIndex = endIndex;\r\n    }\r\n\r\n    public inline function hasNext() : Bool {\r\n        return index < endIndex;\r\n    }\r\n\r\n\tvar i = 0; // FIXME: blocked by HaxeFoundation/haxe#4353\r\n    public inline function next() : Int {\r\n\t\ti = index;\r\n        index += InternalEncoding.codePointWidthAt(string, index);\r\n        return i;\r\n    }\r\n\r\n}\r\n","package luxe.utils.unifill;\r\n\r\nclass Unicode {\r\n\r\n    public static inline var minCodePoint : Int = 0x0000;\r\n    public static inline var maxCodePoint : Int = 0x10FFFF;\r\n    public static inline var minHighSurrogate : Int = 0xD800;\r\n    public static inline var maxHighSurrogate : Int = 0xDBFF;\r\n    public static inline var minLowSurrogate : Int = 0xDC00;\r\n    public static inline var maxLowSurrogate : Int = 0xDFFF;\r\n\r\n    public static inline function decodeSurrogate(hi : Int, lo : Int) : Int\r\n        return (hi - 0xD7C0 << 10) | (lo & 0x3FF);\r\n\r\n    public static inline function encodeHighSurrogate(c : Int) : Int\r\n        return (c >> 10) + 0xD7C0;\r\n\r\n    public static inline function encodeLowSurrogate(c : Int) : Int\r\n        return (c & 0x3FF) | 0xDC00;\r\n\r\n    public static inline function isScalar(code : Int) : Bool {\r\n        return minCodePoint <= code && code <= maxCodePoint && !isHighSurrogate(code) && !isLowSurrogate(code);\r\n    }\r\n\r\n    public static inline function isHighSurrogate(code : Int) : Bool {\r\n        return minHighSurrogate <= code && code <= maxHighSurrogate;\r\n    }\r\n\r\n    public static inline function isLowSurrogate(code : Int) : Bool {\r\n        return minLowSurrogate <= code && code <= maxLowSurrogate;\r\n    }\r\n\r\n}\r\n","package luxe.utils.unifill;\r\n\r\n/**\r\n   Unifill provides Unicode-code-point-wise methods on Strings. It is\r\n   ideally used with 'using Unifill' and then acts as an extension to\r\n   the String class.\r\n **/\r\nclass Unifill {\r\n\r\n    /**\r\n       Returns the number of Unicode code points of String `s`.\r\n     **/\r\n    public static inline function uLength(s : String) : Int\r\n        return InternalEncoding.codePointCount(s, 0, s.length);\r\n\r\n    /**\r\n       Returns the character at position `index` by code points of String `s`.\r\n     **/\r\n    public static inline function uCharAt(s : String, index : Int) : String {\r\n    #if (neko || php || cpp)\r\n        return InternalEncoding.fromCodePoint(haxe.Utf8.charCodeAt(s, index));\r\n    #else\r\n        var i = InternalEncoding.offsetByCodePoints(s, 0, index);\r\n        return InternalEncoding.charAt(s, i);\r\n    #end\r\n    }\r\n\r\n    /**\r\n       Returns the code point as Int at position `index` by code points of String `s`.\r\n     **/\r\n    public static inline function uCharCodeAt(s : String, index : Int) : Int {\r\n    #if (neko || php || cpp || macro)\r\n        return cast haxe.Utf8.charCodeAt(s, index);\r\n    #else\r\n        var i = InternalEncoding.offsetByCodePoints(s, 0, index);\r\n        return InternalEncoding.codePointAt(s, i);\r\n    #end\r\n    }\r\n\r\n    /**\r\n       Returns the code point at position `index` by code points of String `s`.\r\n     **/\r\n    public static inline function uCodePointAt(s : String, index : Int) : CodePoint {\r\n        return cast uCharCodeAt(s, index);\r\n    }\r\n\r\n    /**\r\n       Returns the position of the leftmost occurence of the str within String `s`.\r\n\r\n       `startIndex` is counted by code points.\r\n     **/\r\n    public static inline function uIndexOf(s : String, value : String, startIndex : Int = 0) : Int {\r\n        var index = s.indexOf(value, InternalEncoding.offsetByCodePoints(s, 0, startIndex));\r\n        return if (index >= 0) InternalEncoding.codePointCount(s, 0, index) else -1;\r\n    }\r\n\r\n    /**\r\n       Returns the position of the rightmost occurence of the str within String `s`.\r\n\r\n       `startIndex` is counted by code points.\r\n     **/\r\n    public static inline function uLastIndexOf(s : String, value : String, ?startIndex) : Int {\r\n        if (startIndex == null)\r\n            startIndex = s.length - 1;\r\n        var index = s.lastIndexOf(value, InternalEncoding.offsetByCodePoints(s, 0, startIndex));\r\n        return if (index >= 0) InternalEncoding.codePointCount(s, 0, index) else -1;\r\n    }\r\n\r\n    /**\r\n       Splits String `s` at each occurence of `delimiter`.\r\n     **/\r\n    public static function uSplit(s : String, delimiter : String) : Array<String> {\r\n        return if (delimiter.length == 0) {\r\n            [for (i in new InternalEncodingIter(s, 0, s.length)) InternalEncoding.charAt(s, i)];\r\n        } else {\r\n            s.split(delimiter);\r\n        }\r\n    }\r\n\r\n    /**\r\n       Returns `length` characters of String `s`, starting at position `startIndex`.\r\n\r\n       `startIndex` and `length` are counted by code points.\r\n     **/\r\n    public static inline function uSubstr(s : String, startIndex : Int, ?length : Int) : String {\r\n        var si = InternalEncoding.offsetByCodePoints(s,\r\n            if (startIndex >= 0) 0 else s.length,\r\n            startIndex);\r\n        var ei = if (length == null) s.length\r\n            else if (length < 0) si\r\n            else InternalEncoding.offsetByCodePoints(s, si, length);\r\n        return s.substring(si, ei);\r\n    }\r\n\r\n    /**\r\n       Returns the part of String `s` from `startIndex` to `endIndex`.\r\n\r\n       `startIndex` and `endIndex` are counted by code points.\r\n     **/\r\n    public static inline function uSubstring(s : String, startIndex : Int, ?endIndex : Int) : String {\r\n        var si = if (startIndex < 0) 0\r\n            else InternalEncoding.offsetByCodePoints(s, 0, startIndex);\r\n        var ei = if (endIndex == null) s.length\r\n            else if (endIndex < 0) 0\r\n            else InternalEncoding.offsetByCodePoints(s, 0, endIndex);\r\n        return s.substring(si, ei);\r\n    }\r\n\r\n    /**\r\n       Returns an iterator of the code points of String `s`.\r\n     **/\r\n\tpublic static inline function uIterator(s : String) : CodePointIter {\r\n        return new CodePointIter(s);\r\n    }\r\n\r\n    /**\r\n       Compares String `a` and `b`.\r\n     **/\r\n    public static function uCompare(a : String, b : String) : Int {\r\n        var aiter = new InternalEncodingIter(a, 0, a.length);\r\n        var biter = new InternalEncodingIter(b, 0, b.length);\r\n        while (aiter.hasNext() && biter.hasNext()) {\r\n            var acode = InternalEncoding.codePointAt(a, aiter.next());\r\n            var bcode = InternalEncoding.codePointAt(b, biter.next());\r\n            if (acode < bcode)\r\n                return -1;\r\n            if (acode > bcode)\r\n                return 1;\r\n        }\r\n        if (biter.hasNext())\r\n            return -1;\r\n        if (aiter.hasNext())\r\n            return 1;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n       Converts `codePoints` to string.\r\n     **/\r\n    public static inline function uToString(codePoints : Iterable<CodePoint>) : String\r\n        return InternalEncoding.fromCodePoints(cast codePoints);\r\n\r\n}\r\n","package phoenix;\r\n\r\nimport phoenix.Rectangle;\r\nimport phoenix.Texture;\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.geometry.GeometryState;\r\n\r\nimport snow.modules.opengl.GL;\r\n\r\nclass BatchState {\r\n\r\n    public var batcher : Batcher;\r\n    public var geom_state :  GeometryState;\r\n    public var last_geom_state : GeometryState;\r\n\r\n    public var last_texture_id : Dynamic;\r\n    public var last_shader_id : Dynamic;\r\n    public var is_clipping : Bool;\r\n    public var clip_rect : Rectangle;\r\n    public var last_clip_rect : Rectangle;\r\n    public var last_blend_disabled : Bool;\r\n    public var last_blend_src_alpha : Int;\r\n    public var last_blend_src_rgb : Int;\r\n    public var last_blend_dest_alpha : Int;\r\n    public var last_blend_dest_rgb : Int;\r\n\r\n    public var log : Bool = false;\r\n\r\n    public function new(_r:Batcher){\r\n        batcher = _r;\r\n        geom_state = new GeometryState();\r\n        last_geom_state = new GeometryState();\r\n    }\r\n\r\n    public inline function active_shader() : phoenix.Shader {\r\n        if(geom_state.shader != null) {\r\n            return geom_state.shader;\r\n        } else {\r\n            if(geom_state.texture != null) {\r\n                return batcher.renderer.shaders.textured.shader;\r\n            } else {\r\n                return batcher.renderer.shaders.plain.shader;\r\n            }\r\n        }\r\n    }\r\n\r\n    public inline function activate(batcher:Batcher) {\r\n\r\n            // Handle texture state changes\r\n        if(geom_state.dirty) {\r\n\r\n            if(geom_state.texture != null) {\r\n\r\n                if(last_texture_id != geom_state.texture.id){\r\n\r\n                    last_texture_id = geom_state.texture.id;\r\n                    if(geom_state.texture.texture != null) {\r\n                        geom_state.texture.bind();\r\n                    }\r\n\r\n                } //texture id change\r\n\r\n            } else {\r\n\r\n                Luxe.renderer.state.bindTexture2D(null);\r\n                last_texture_id = null;\r\n\r\n            } //geom_state.texture !=null\r\n\r\n            var _shader = batcher.shader == null ? geom_state.shader : batcher.shader;\r\n\r\n            if(_shader == null) {\r\n\r\n                    //fallback onto the default shaders\r\n                if(geom_state.texture != null) {\r\n                    _shader = batcher.renderer.shaders.textured.shader;\r\n                } else {\r\n                    _shader = batcher.renderer.shaders.plain.shader;\r\n                }\r\n\r\n            } //_shader\r\n\r\n            if(last_shader_id != _shader.program) {\r\n                batcher.apply_default_uniforms(_shader);\r\n                _shader.activate();\r\n                last_shader_id = _shader.program;\r\n            }\r\n\r\n            var blend_dirty = last_blend_src_rgb != geom_state.blend_src_rgb;\r\n                blend_dirty = blend_dirty || (last_blend_disabled != geom_state.blend_disabled);\r\n                blend_dirty = blend_dirty || (last_blend_src_alpha != geom_state.blend_src_alpha); \r\n                blend_dirty = blend_dirty || (last_blend_dest_rgb != geom_state.blend_dest_rgb); \r\n                blend_dirty = blend_dirty || (last_blend_dest_alpha != geom_state.blend_dest_alpha); \r\n            \r\n            if(blend_dirty && !geom_state.ignore_blend) {\r\n\r\n                last_blend_disabled = geom_state.blend_disabled;\r\n                last_blend_disabled ?\r\n                    batcher.renderer.state.disable(GL.BLEND) :\r\n                    batcher.renderer.state.enable(GL.BLEND);\r\n\r\n                last_blend_src_rgb = geom_state.blend_src_rgb;\r\n                last_blend_src_alpha = geom_state.blend_src_alpha;\r\n                last_blend_dest_rgb = geom_state.blend_dest_rgb;\r\n                last_blend_dest_alpha = geom_state.blend_dest_alpha;\r\n                GL.blendFuncSeparate(\r\n                    last_blend_src_rgb,\r\n                    last_blend_dest_rgb,\r\n                    last_blend_src_alpha,\r\n                    last_blend_dest_alpha\r\n                );\r\n            }\r\n\r\n        } //state.dirty\r\n\r\n            // excluded from isDirty because rect can change every time without the state being dirty */\r\n            // Handle clipping state changes\r\n\r\n            if(geom_state.clip){\r\n\r\n                if( !is_clipping ){\r\n                    GL.enable( GL.SCISSOR_TEST );\r\n                    is_clipping = true;\r\n                }\r\n\r\n                    // update scissor region if needed.\r\n                if(clip_rect != null) {\r\n\r\n                    if(!clip_rect.equal(last_clip_rect)) {\r\n\r\n                            // set the scissor rect\r\n                        batcher.renderer.state.scissor(clip_rect.x, clip_rect.y, clip_rect.w, clip_rect.h);\r\n\r\n                    } //last clip_rect\r\n\r\n                } //clip_rect\r\n\r\n            } else { //clip is false\r\n\r\n                if( is_clipping ){\r\n                    GL.disable( GL.SCISSOR_TEST );\r\n                    is_clipping = false;\r\n                }\r\n\r\n            } //clip is off\r\n\r\n            // finally, mark the state as clean.\r\n        geom_state.clean();\r\n\r\n    } //activate\r\n\r\n    public function deactivate(batcher:Batcher) {\r\n\r\n            //undo any textures we bound last\r\n        if(last_texture_id != null) {\r\n            batcher.renderer.state.bindTexture2D(null);\r\n        }\r\n\r\n            //for now we just disable any shader because other\r\n            //batchers are not aware of us yet.\r\n        batcher.renderer.state.useProgram(null);\r\n\r\n            //remove clipping\r\n        if(is_clipping) GL.disable(GL.SCISSOR_TEST);\r\n\r\n            //default blend mode\r\n        batcher.renderer.state.enable(GL.BLEND);\r\n        GL.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\r\n        GL.blendEquation(GL.FUNC_ADD);\r\n\r\n    } //deactivate\r\n\r\n    public function update( geom:Geometry ) : Bool {\r\n\r\n        geom_state.clone_onto(last_geom_state);\r\n        geom_state.update(geom.state);\r\n\r\n        if(geom_state.clip){\r\n            last_clip_rect = clip_rect;\r\n            clip_rect = geom.clip_rect;\r\n        }\r\n\r\n        return geom_state.dirty || (last_clip_rect != clip_rect);\r\n\r\n    } //update\r\n\r\n\r\n//noisy debug stuff\r\n    public function str() {\r\n\r\n        if(!log) return;\r\n\r\n        trace('\\t+ BATCHSTATE LAST ');\r\n            trace(\"\\t\\tdepth - \"+last_geom_state.depth);\r\n            trace(\"\\t\\ttexture - \" + (( last_geom_state.texture == null) ? 'null' :  last_geom_state.texture.id ));\r\n            if(last_geom_state.texture != null) {\r\n                trace(\"\\t\\t\\t \" + last_geom_state.texture.texture);\r\n            }\r\n            trace(\"\\t\\tshader - \" + (( last_geom_state.shader == null) ? 'null' :  last_geom_state.shader.id ));\r\n            trace(\"\\t\\tprimitive_type - \"+last_geom_state.primitive_type);\r\n            trace(\"\\t\\tclip - \"+last_geom_state.clip);\r\n        trace('\\t- BATCHSTATE LAST');\r\n\r\n        trace('\\t+ BATCHSTATE STATE');\r\n            trace(\"\\t\\tdepth - \"+geom_state.depth);\r\n            trace(\"\\t\\ttexture - \" + (( geom_state.texture == null) ? 'null' :  geom_state.texture.id ));\r\n            if(geom_state.texture != null) {\r\n                trace(\"\\t\\t\\t \" + geom_state.texture.texture);\r\n            }\r\n            trace(\"\\t\\tshader - \" + (( geom_state.shader == null) ? 'null' :  geom_state.shader.id ));\r\n            trace(\"\\t\\tprimitive_type - \"+geom_state.primitive_type);\r\n            trace(\"\\t\\tclip - \"+geom_state.clip);\r\n        trace('\\t- BATCHSTATE STATE');\r\n    }\r\n\r\n}","package phoenix;\r\n\r\nimport luxe.options.ResourceOptions;\r\nimport luxe.resource.Resource;\r\nimport luxe.Resources;\r\n\r\nimport luxe.Log.*;\r\n\r\nimport phoenix.Vector;\r\nimport phoenix.Texture;\r\nimport phoenix.Matrix;\r\nimport phoenix.Batcher;\r\n\r\nimport snow.api.Promise;\r\nimport snow.api.buffers.Float32Array;\r\nimport snow.modules.opengl.GL;\r\nimport snow.types.Types.Error;\r\nimport snow.systems.assets.Asset;\r\n\r\n\r\n@:allow(phoenix.Shader)\r\n@:allow(phoenix.geometry.Geometry)\r\nclass Uniforms {\r\n\r\n    var ints        : Map<String, Uniform<Int>>;\r\n    var floats      : Map<String, Uniform<Float>>;\r\n    var vector2s    : Map<String, Uniform<Vector>>;\r\n    var vector2arrs : Map<String, Uniform<Float32Array>>;\r\n    var vector3s    : Map<String, Uniform<Vector>>;\r\n    var vector3arrs : Map<String, Uniform<Float32Array>>;\r\n    var vector4s    : Map<String, Uniform<Vector>>;\r\n    var vector4arrs : Map<String, Uniform<Float32Array>>;\r\n    var matrix4s    : Map<String, Uniform<Matrix>>;\r\n    var matrix4arrs : Map<String, Uniform<Float32Array>>;\r\n    var colors      : Map<String, Uniform<Color>>;\r\n    var textures    : Map<String, Uniform<Texture>>;\r\n\r\n    var dirty_ints          : Array<Uniform<Int>>;\r\n    var dirty_floats        : Array<Uniform<Float>>;\r\n    var dirty_vector2s      : Array<Uniform<Vector>>;\r\n    var dirty_vector2arrs   : Array<Uniform<Float32Array>>;\r\n    var dirty_vector3s      : Array<Uniform<Vector>>;\r\n    var dirty_vector3arrs   : Array<Uniform<Float32Array>>;\r\n    var dirty_vector4s      : Array<Uniform<Vector>>;\r\n    var dirty_vector4arrs   : Array<Uniform<Float32Array>>;\r\n    var dirty_matrix4s      : Array<Uniform<Matrix>>;\r\n    var dirty_matrix4arrs   : Array<Uniform<Float32Array>>;\r\n    var dirty_colors        : Array<Uniform<Color>>;\r\n    var dirty_textures      : Array<Uniform<Texture>>;\r\n\r\n    public function new() {\r\n        clear();\r\n    } //new\r\n\r\n    function destroy() {\r\n        ints = null;\r\n        floats = null;\r\n        vector2s = null;\r\n        vector2arrs = null;\r\n        vector3s = null;\r\n        vector3arrs = null;\r\n        vector4s = null;\r\n        vector4arrs = null;\r\n        matrix4s = null;\r\n        matrix4arrs = null;\r\n        colors = null;\r\n        textures = null;\r\n        dirty_ints = null;\r\n        dirty_floats = null;\r\n        dirty_vector2s = null;\r\n        dirty_vector2arrs = null;\r\n        dirty_vector3s = null;\r\n        dirty_vector3arrs = null;\r\n        dirty_vector4s = null;\r\n        dirty_vector4arrs = null;\r\n        dirty_matrix4s = null;\r\n        dirty_matrix4arrs = null;\r\n        dirty_colors = null;\r\n        dirty_textures = null;\r\n    }\r\n\r\n    function clear() {\r\n\r\n        destroy();\r\n\r\n        ints        = new Map();\r\n        floats      = new Map();\r\n        vector2s    = new Map();\r\n        vector2arrs = new Map();\r\n        vector3s    = new Map();\r\n        vector3arrs = new Map();\r\n        vector4s    = new Map();\r\n        vector4arrs = new Map();\r\n        matrix4s    = new Map();\r\n        matrix4arrs = new Map();\r\n        colors      = new Map();\r\n        textures    = new Map();\r\n\r\n        dirty_ints          = [];\r\n        dirty_floats        = [];\r\n        dirty_vector2s      = [];\r\n        dirty_vector2arrs   = [];\r\n        dirty_vector3s      = [];\r\n        dirty_vector3arrs   = [];\r\n        dirty_vector4s      = [];\r\n        dirty_vector4arrs   = [];\r\n        dirty_matrix4s      = [];\r\n        dirty_matrix4arrs   = [];\r\n        dirty_colors        = [];\r\n        dirty_textures      = [];\r\n\r\n    } //clear\r\n\r\n    public inline function set_int( _name:String, _value:Int, _location:Location ) : Void {\r\n\r\n        var _int = ints.get(_name);\r\n\r\n        if(_int != null) {\r\n            _int.value = _value;\r\n        } else {\r\n            _int = new Uniform<Int>(_name, _value, _location);\r\n            ints.set(_name, _int);\r\n        }\r\n\r\n        dirty_ints.push(_int);\r\n\r\n    } //set_int\r\n\r\n    public inline function set_float( _name:String, _value:Float, _location:Location ) : Void {\r\n\r\n        var _float = floats.get(_name);\r\n\r\n        if(_float != null) {\r\n            _float.value = _value;\r\n        } else {\r\n            _float = new Uniform<Float>(_name, _value, _location);\r\n            floats.set(_name, _float);\r\n        }\r\n\r\n        dirty_floats.push(_float);\r\n\r\n    } //set_float\r\n\r\n    public inline function set_vector2( _name:String, _value:Vector, _location:Location ) : Void {\r\n\r\n        var _vector2 = vector2s.get(_name);\r\n\r\n        if(_vector2 != null) {\r\n            _vector2.value = _value;\r\n        } else {\r\n            _vector2 = new Uniform<Vector>(_name, _value, _location);\r\n            vector2s.set(_name, _vector2);\r\n        }\r\n\r\n        dirty_vector2s.push(_vector2);\r\n\r\n    } //set_vector2\r\n\r\n    public inline function set_vector2_arr( _name:String, _value:Float32Array, _location:Location ) : Void {\r\n\r\n        var _vector2 = vector2arrs.get(_name);\r\n\r\n        if(_vector2 != null) {\r\n            _vector2.value = _value;\r\n        } else {\r\n            _vector2 = new Uniform<Float32Array>(_name, _value, _location);\r\n            vector2arrs.set(_name, _vector2);\r\n        }\r\n\r\n        dirty_vector2arrs.push(_vector2);\r\n\r\n    } //set_vector2_arr\r\n\r\n    public inline function set_vector3( _name:String, _value:Vector, _location:Location ) : Void {\r\n\r\n        var _vector3 = vector3s.get(_name);\r\n\r\n        if(_vector3 != null) {\r\n            _vector3.value = _value;\r\n        } else {\r\n            _vector3 = new Uniform<Vector>(_name, _value, _location);\r\n            vector3s.set(_name, _vector3);\r\n        }\r\n\r\n        dirty_vector3s.push(_vector3);\r\n\r\n    } //set_vector3\r\n\r\n    public inline function set_vector3_arr( _name:String, _value:Float32Array, _location:Location ) : Void {\r\n\r\n        var _vector3 = vector3arrs.get(_name);\r\n\r\n        if(_vector3 != null) {\r\n            _vector3.value = _value;\r\n        } else {\r\n            _vector3 = new Uniform<Float32Array>(_name, _value, _location);\r\n            vector3arrs.set(_name, _vector3);\r\n        }\r\n\r\n        dirty_vector3arrs.push(_vector3);\r\n\r\n    } //set_vector3_arr\r\n\r\n    public inline function set_vector4( _name:String, _value:Vector, _location:Location ) : Void {\r\n\r\n        var _vector4 = vector4s.get(_name);\r\n\r\n        if(_vector4 != null) {\r\n            _vector4.value = _value;\r\n        } else {\r\n            _vector4 = new Uniform<Vector>(_name, _value, _location);\r\n            vector4s.set(_name, _vector4);\r\n        }\r\n\r\n        dirty_vector4s.push(_vector4);\r\n\r\n    } //set_vector4\r\n\r\n    public inline function set_vector4_arr( _name:String, _value:Float32Array, _location:Location ) : Void {\r\n\r\n        var _vector4 = vector4arrs.get(_name);\r\n\r\n        if(_vector4 != null) {\r\n            _vector4.value = _value;\r\n        } else {\r\n            _vector4 = new Uniform<Float32Array>(_name, _value, _location);\r\n            vector4arrs.set(_name, _vector4);\r\n        }\r\n\r\n        dirty_vector4arrs.push(_vector4);\r\n\r\n    } //set_vector4_arr\r\n\r\n    public inline function set_matrix4( _name:String, _value:Matrix, _location:Location ) : Void {\r\n\r\n        var _matrix4 = matrix4s.get(_name);\r\n\r\n        if(_matrix4 != null) {\r\n            _matrix4.value = _value;\r\n        } else {\r\n            _matrix4 = new Uniform<Matrix>(_name, _value, _location);\r\n            matrix4s.set(_name, _matrix4);\r\n        }\r\n\r\n        dirty_matrix4s.push(_matrix4);\r\n\r\n    } //set_matrix4\r\n\r\n    public inline function set_matrix4_arr( _name:String, _value:Float32Array, _location:Location ) : Void {\r\n\r\n        var _matrix4 = matrix4arrs.get(_name);\r\n\r\n        if(_matrix4 != null) {\r\n            _matrix4.value = _value;\r\n        } else {\r\n            _matrix4 = new Uniform<Float32Array>(_name, _value, _location);\r\n            matrix4arrs.set(_name, _matrix4);\r\n        }\r\n\r\n        dirty_matrix4arrs.push(_matrix4);\r\n\r\n    } //set_matrix4_arr\r\n\r\n    public inline function set_color( _name:String, _value:Color, _location:Location ) : Void {\r\n\r\n        var _color = colors.get(_name);\r\n\r\n        if(_color != null) {\r\n            _color.value = _value;\r\n        } else {\r\n            _color = new Uniform<Color>(_name, _value, _location);\r\n            colors.set(_name, _color);\r\n        }\r\n\r\n        dirty_colors.push(_color);\r\n\r\n    } //set_color\r\n\r\n    public inline function set_texture( _name:String, _value:Texture, _location:Location ) : Void {\r\n\r\n        var _texture = textures.get(_name);\r\n\r\n        if(_texture != null) {\r\n            _texture.value = _value;\r\n        } else {\r\n            _texture = new Uniform<Texture>(_name, _value, _location);\r\n            textures.set(_name, _texture);\r\n        }\r\n\r\n        dirty_textures.push(_texture);\r\n\r\n    } //set_texture\r\n\r\n    //inline\r\n    public function apply() {\r\n\r\n        while(dirty_ints.length > 0) {\r\n            var uf = dirty_ints.pop();\r\n            GL.uniform1i(uf.location, uf.value);\r\n        }\r\n\r\n        while(dirty_floats.length > 0) {\r\n            var uf = dirty_floats.pop();\r\n            GL.uniform1f(uf.location, uf.value);\r\n        }\r\n\r\n        while(dirty_vector2s.length > 0) {\r\n            var uf = dirty_vector2s.pop();\r\n            GL.uniform2f(uf.location, uf.value.x, uf.value.y);\r\n        }\r\n\r\n        while(dirty_vector2arrs.length > 0) {\r\n            var uf = dirty_vector2arrs.pop();\r\n            GL.uniform2fv(uf.location, uf.value);\r\n        }\r\n\r\n        while(dirty_vector3s.length > 0) {\r\n            var uf = dirty_vector3s.pop();\r\n            GL.uniform3f(uf.location, uf.value.x, uf.value.y, uf.value.z);\r\n        }\r\n\r\n        while(dirty_vector3arrs.length > 0) {\r\n            var uf = dirty_vector3arrs.pop();\r\n            GL.uniform3fv(uf.location, uf.value);\r\n        }\r\n\r\n        while(dirty_vector4s.length > 0) {\r\n            var uf = dirty_vector4s.pop();\r\n            GL.uniform4f(uf.location, uf.value.x, uf.value.y, uf.value.z, uf.value.w);\r\n        }\r\n\r\n        while(dirty_vector4arrs.length > 0) {\r\n            var uf = dirty_vector4arrs.pop();\r\n            GL.uniform4fv(uf.location, uf.value);\r\n        }\r\n\r\n        while(dirty_colors.length > 0) {\r\n            var uf = dirty_colors.pop();\r\n            GL.uniform4f(uf.location, uf.value.r, uf.value.g, uf.value.b, uf.value.a);\r\n        }\r\n\r\n        while(dirty_textures.length > 0) {\r\n            var uf = dirty_textures.pop();\r\n            GL.uniform1i(uf.location, uf.value.slot); uf.value.bind();\r\n        }\r\n\r\n        while(dirty_matrix4s.length > 0) {\r\n            var uf = dirty_matrix4s.pop();\r\n            GL.uniformMatrix4fv(uf.location, false, uf.value.float32array());\r\n        }\r\n\r\n        while(dirty_matrix4arrs.length > 0) {\r\n            var uf = dirty_matrix4arrs.pop();\r\n            GL.uniformMatrix4fv(uf.location, false, uf.value);\r\n        }\r\n\r\n    } //apply\r\n\r\n} //Uniforms\r\n\r\nclass Shader extends Resource {\r\n\r\n    public var log : String = '';\r\n\r\n    public var vert_source : String;\r\n    public var frag_source : String;\r\n    public var vert_id : String = '';\r\n    public var frag_id : String = '';\r\n\r\n    public var vert_shader : GLShader;\r\n    public var frag_shader : GLShader;\r\n    public var program : GLProgram;\r\n    public var shader : GLShader;\r\n\r\n    public var no_default_uniforms : Bool = false;\r\n    public var proj_attribute : Location;\r\n    public var view_attribute : Location;\r\n\r\n    public var uniforms:Uniforms;\r\n\r\n    public function new( _options:ShaderOptions ) {\r\n\r\n        assertnull(_options);\r\n\r\n        _options.resource_type = ResourceType.shader;\r\n\r\n        super( _options );\r\n\r\n        frag_id = _options.frag_id;\r\n        vert_id = _options.vert_id;\r\n        no_default_uniforms = def(_options.no_default_uniforms, false);\r\n\r\n        uniforms = new Uniforms();\r\n\r\n    } //new\r\n\r\n    public inline function activate() {\r\n\r\n        use();\r\n\r\n        uniforms.apply();\r\n\r\n            //I dont remember what this was doing here exactly\r\n        Luxe.renderer.state.activeTexture(GL.TEXTURE0);\r\n\r\n    } //activate\r\n\r\n    public function use() {\r\n\r\n        if(program != null) {\r\n            Luxe.renderer.state.useProgram( program );\r\n        }\r\n\r\n    } //use\r\n\r\n    public inline function deactivate() {\r\n\r\n        Luxe.renderer.state.useProgram( null );\r\n\r\n    } //deactivate\r\n\r\n        /** Create a new shader based on the source of this shader. */\r\n    public function clone( _id:String ) {\r\n\r\n        var _clone = new Shader({\r\n            id: _id,\r\n            frag_id: frag_id,\r\n            vert_id: vert_id\r\n        });\r\n\r\n        _clone.from_string( vert_source, frag_source );\r\n\r\n        return _clone;\r\n\r\n    } //clone\r\n\r\n    public inline function set_int( _name:String, _value:Int ) : Void {\r\n        uniforms.set_int(_name, _value, location(_name));\r\n    } //set_int\r\n\r\n    public inline function set_float( _name:String, _value:Float ) : Void {\r\n        uniforms.set_float(_name, _value, location(_name));\r\n    } //set_float\r\n\r\n    public inline function set_vector2( _name:String, _value:Vector ) : Void {\r\n        uniforms.set_vector2(_name, _value, location(_name));\r\n    } //set_vector2\r\n\r\n    public inline function set_vector2_arr( _name:String, _value:Float32Array ) : Void {\r\n        uniforms.set_vector2_arr(_name, _value, location(_name));\r\n    } //set_vector2_arr\r\n\r\n    public inline function set_vector3( _name:String, _value:Vector ) : Void {\r\n        uniforms.set_vector3(_name, _value, location(_name));\r\n    } //set_vector3\r\n\r\n    public inline function set_vector3_arr( _name:String, _value:Float32Array ) : Void {\r\n        uniforms.set_vector3_arr(_name, _value, location(_name));\r\n    } //set_vector3_arr\r\n\r\n    public inline function set_vector4( _name:String, _value:Vector ) : Void {\r\n        uniforms.set_vector4(_name, _value, location(_name));\r\n    } //set_vector4\r\n\r\n    public inline function set_vector4_arr( _name:String, _value:Float32Array ) : Void {\r\n        uniforms.set_vector4_arr(_name, _value, location(_name));\r\n    } //set_vector4_arr\r\n\r\n    public inline function set_matrix4( _name:String, _value:Matrix ) : Void {\r\n        uniforms.set_matrix4(_name, _value, location(_name));\r\n    } //set_matrix4\r\n\r\n    public inline function set_matrix4_arr( _name:String, _value:Float32Array ) : Void {\r\n        uniforms.set_matrix4_arr(_name, _value, location(_name));\r\n    } //set_matrix4_arr\r\n\r\n    public inline function set_color( _name:String, _value:Color ) : Void {\r\n        uniforms.set_color(_name, _value, location(_name));\r\n    } //set_color\r\n\r\n    public inline function set_texture( _name:String, _value:Texture ) : Void {\r\n        uniforms.set_texture(_name, _value, location(_name));\r\n    } //set_texture\r\n\r\n\r\n    public function compile( _type : Int, _source:String ) : GLShader {\r\n\r\n        var _shader = GL.createShader( _type );\r\n\r\n            GL.shaderSource( _shader,  _source);\r\n            GL.compileShader(_shader);\r\n\r\n        var _compile_log = GL.getShaderInfoLog(_shader);\r\n        var _log = '';\r\n\r\n        if(_compile_log.length > 0) {\r\n\r\n            var _is_frag = (_type == GL.FRAGMENT_SHADER);\r\n            var _type_name = (_is_frag) ? 'frag' : 'vert';\r\n            var _type_id = (_is_frag) ? frag_id : vert_id;\r\n\r\n            _log += '\\n\\t// start -- ($_type_name / $_type_id) compile log --\\n';\r\n            _log +=  format_log(_compile_log);\r\n            _log += '\\n\\t// end --\\n';\r\n\r\n        } //_log.length\r\n\r\n        if(GL.getShaderParameter(_shader, GL.COMPILE_STATUS) == 0) {\r\n\r\n            add_log('\\tFailed to compile shader `$id`:\\n');\r\n            add_log( _log.length == 0 ? format_log(GL.getShaderInfoLog(_shader)) : _log );\r\n\r\n            GL.deleteShader(_shader);\r\n            _shader = null;\r\n\r\n            return null;\r\n\r\n        } //compile_status\r\n\r\n        return _shader;\r\n    }\r\n\r\n    public function link() : Bool {\r\n\r\n        program = GL.createProgram();\r\n\r\n        GL.attachShader(program, vert_shader);\r\n        GL.attachShader(program, frag_shader);\r\n\r\n            //Now we want to ensure that our locations are static\r\n        GL.bindAttribLocation( program, Batcher.vert_attribute,    'vertexPosition');\r\n        GL.bindAttribLocation( program, Batcher.tcoord_attribute,  'vertexTCoord');\r\n        GL.bindAttribLocation( program, Batcher.color_attribute,   'vertexColor');\r\n        GL.bindAttribLocation( program, Batcher.normal_attribute,  'vertexNormal');\r\n\r\n        GL.linkProgram(program);\r\n\r\n        if( GL.getProgramParameter(program, GL.LINK_STATUS) == 0) {\r\n            add_log(\"\\tFailed to link shader program:\");\r\n            add_log( format_log(GL.getProgramInfoLog(program)) );\r\n            GL.deleteProgram(program);\r\n            program = null;\r\n            return false;\r\n        }\r\n\r\n            //first bind it\r\n        use();\r\n\r\n            //:todo: this is being refactored for the new\r\n            //way more flexible shaders and rendering :}\r\n\r\n                //Matrices\r\n            if(!no_default_uniforms) {\r\n\r\n                proj_attribute = location('projectionMatrix');\r\n                view_attribute = location('modelViewMatrix');\r\n\r\n                var _tex0_attribute = location( 'tex0' );\r\n                var _tex1_attribute = location( 'tex1' );\r\n                var _tex2_attribute = location( 'tex2' );\r\n                var _tex3_attribute = location( 'tex3' );\r\n                var _tex4_attribute = location( 'tex4' );\r\n                var _tex5_attribute = location( 'tex5' );\r\n                var _tex6_attribute = location( 'tex6' );\r\n                var _tex7_attribute = location( 'tex7' );\r\n\r\n                if(_tex0_attribute != null) GL.uniform1i( _tex0_attribute, 0 );\r\n                if(_tex1_attribute != null) GL.uniform1i( _tex1_attribute, 1 );\r\n                if(_tex2_attribute != null) GL.uniform1i( _tex2_attribute, 2 );\r\n                if(_tex3_attribute != null) GL.uniform1i( _tex3_attribute, 3 );\r\n                if(_tex4_attribute != null) GL.uniform1i( _tex4_attribute, 4 );\r\n                if(_tex5_attribute != null) GL.uniform1i( _tex5_attribute, 5 );\r\n                if(_tex6_attribute != null) GL.uniform1i( _tex6_attribute, 6 );\r\n                if(_tex7_attribute != null) GL.uniform1i( _tex7_attribute, 7 );\r\n\r\n            }\r\n\r\n        return true;\r\n\r\n    } //link\r\n\r\n    public inline function location( _name : String ) : Location {\r\n        return GL.getUniformLocation( program, _name );\r\n    }\r\n\r\n//Resource\r\n\r\n    override function clear() {\r\n\r\n        if( vert_shader != null ) GL.deleteShader( vert_shader );\r\n        if( frag_shader != null ) GL.deleteShader( frag_shader );\r\n        if( program != null )     GL.deleteProgram( program );\r\n\r\n        vert_source = null;\r\n        frag_source = null;\r\n\r\n        uniforms.clear();\r\n\r\n    } //clear\r\n\r\n    override public function reload() {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n            switch(frag_id) {\r\n                case 'default':  frag_source = Luxe.renderer.shaders.plain.source.frag;\r\n                case 'textured': frag_source = Luxe.renderer.shaders.textured.source.frag;\r\n            }\r\n\r\n            switch(vert_id) {\r\n                case 'default': vert_source = Luxe.renderer.shaders.plain.source.vert;\r\n            }\r\n\r\n            function _onfail(_err:Dynamic) {\r\n                state = ResourceState.failed;\r\n                reject(_err);\r\n            }\r\n\r\n                //one for the default shaders, already resolved\r\n            var _wait = [ Promise.resolve() ];\r\n\r\n            if(frag_source == null) {\r\n\r\n                var _frag = Luxe.snow.assets.text(frag_id);\r\n\r\n                _frag.then(function(_asset:AssetText) {\r\n                    frag_source = _asset.text;\r\n                });\r\n\r\n                _wait.push(_frag);\r\n\r\n            } //frag_source == null\r\n\r\n            if(vert_source == null) {\r\n\r\n                var _vert = Luxe.snow.assets.text(vert_id);\r\n\r\n                _vert.then(function(_asset:AssetText) {\r\n                    vert_source = _asset.text;\r\n                });\r\n\r\n                _wait.push(_vert);\r\n\r\n            } //vert_source\r\n\r\n            Promise.all(_wait).then(function(){\r\n\r\n                #if luxe_no_shader_prefix\r\n                        //:todo:hxsw: this must go\r\n                    var prefixes = #if luxe_web \"precision mediump float;\\n\" #else '' #end;\r\n                    frag_source = prefixes + frag_source;\r\n                #end //luxe_no_shader_prefix\r\n\r\n                if(from_string(vert_source, frag_source)) {\r\n                    state = ResourceState.loaded;\r\n                    resolve(this);\r\n                } else {\r\n                    _onfail(Error.error('`$id` failed to create :\\n\\n$log'));\r\n                }\r\n\r\n            }).error(function(err) {\r\n                _onfail(Error.error('`$id` failed to create :\\n\\t\\t$err\\n'));\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n        /** Loads shaders from a string, compiles, and links them */\r\n    public function from_string( _vert_source:String, _fragment_source:String ) {\r\n\r\n        inline function dump_log() {\r\n            if(log.length > 0) {\r\n                luxe.Log.log(log);\r\n            }\r\n        }\r\n\r\n        clear();\r\n\r\n        frag_source = _fragment_source;\r\n        vert_source = _vert_source;\r\n\r\n            //compile the sources\r\n        vert_shader = compile( GL.VERTEX_SHADER, vert_source );\r\n        frag_shader = compile( GL.FRAGMENT_SHADER, frag_source );\r\n\r\n        if( vert_shader == null || frag_shader == null ) {\r\n            dump_log();\r\n            return false;\r\n        }\r\n\r\n            //Link shader\r\n        if(!link()) {\r\n            dump_log();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n\r\n    } //\r\n\r\n    inline function add_log( _log:String ) {\r\n        log += _log;\r\n    }\r\n\r\n    override function toString() {\r\n        return 'Shader($id) vert:$vert_id / frag: $frag_id';\r\n    }\r\n\r\n//Internal\r\n\r\n    inline function format_log(_log:String) {\r\n        var _items = _log.split('\\n');\r\n        _items = _items.filter(function(s) { return StringTools.trim(s) != ''; });\r\n        _items = _items.map(function(s) { return '\\t\\t' + StringTools.trim(s); });\r\n        return _items.join('\\n');\r\n    }\r\n\r\n} //Shader\r\n\r\n@:generic\r\nprivate class Uniform<T> {\r\n\r\n    public var name : String;\r\n    public var value : T;\r\n    public var location : Location;\r\n\r\n    inline public function new(_name:String, _value:T, _location:Location) {\r\n        name = _name;\r\n        value = _value;\r\n        location = _location;\r\n    }\r\n\r\n} //Uniform\r\n\r\nprivate typedef Location = GLUniformLocation;\r\n\r\n\r\n","package phoenix;\r\n\r\nimport phoenix.Renderer;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Matrix;\r\nimport phoenix.Shader;\r\n\r\nimport snow.modules.opengl.GL;\r\nimport snow.api.buffers.Float32Array;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Emitter;\r\nimport luxe.structural.BalancedBST;\r\n\r\n@:allow(phoenix.Renderer)\r\nclass Batcher {\r\n\r\n    public var id : String;\r\n    public var enabled : Bool = true;\r\n    @:isVar public var layer (default, set) : Int = 0;\r\n\r\n    public var geometry : BalancedBST< GeometryKey, Geometry >;\r\n    public var emitter : Emitter<BatcherEventType>;\r\n    public var tree_changed : Bool = false;\r\n\r\n    public var pos_list    : Float32Array;\r\n    public var tcoord_list : Float32Array;\r\n    public var color_list  : Float32Array;\r\n    public var normal_list : Float32Array;\r\n\r\n    public var max_verts : Int = 0;\r\n    public var max_floats : Int = 0;\r\n    public var vert_count : Int = 0;\r\n\r\n    public var renderer : Renderer;\r\n    public var view : Camera;\r\n        // An explicit shader override (instead of per geometry).\r\n        // Useful for things like wireframe/depth/normal/debug/shadow rendering passes.\r\n    public var shader : Shader;\r\n\r\n    public var draw_calls : Int = 0;\r\n    public var dynamic_batched_count : Int = 0;\r\n    public var static_batched_count : Int = 0;\r\n    public var visible_count : Int = 0;\r\n\r\n    public var log : Bool = false;\r\n    public var name : String = '';\r\n        //Set this to 0 to hide the batcher in renderer stats\r\n    public var show_stats (default, set): Int = 1;\r\n\r\n        //This is a failsafe against identical layer values\r\n        //being sorted differently by target etc. Not reset intentionally.\r\n    static var _sequence_key : Int = -1;\r\n    var sequence : Int = -1;\r\n\r\n    var pos_floats    : Int = 0;\r\n    var tcoord_floats  : Int = 0;\r\n    var color_floats   : Int = 0;\r\n    var normal_floats  : Int = 0;\r\n\r\n    @:allow(luxe)\r\n    static var all: Array<Batcher> = [];\r\n\r\n    public function new( _r : Renderer, ?_name:String = '', ?_max_verts:Int=16384 ) {\r\n\r\n        id = Luxe.utils.uniqueid();\r\n        renderer = _r;\r\n        sequence = ++_sequence_key;\r\n\r\n        geometry = new BalancedBST<GeometryKey,Geometry>( geometry_compare );\r\n        emitter = new Emitter();\r\n\r\n        max_verts = _max_verts;\r\n            //4 floats per vert, i.e x y z w\r\n        max_floats = max_verts * 4;\r\n\r\n            //these are expecting elements in floats, so each vert etc has 4 floats\r\n        pos_list = new Float32Array( max_floats );\r\n        tcoord_list = new Float32Array( max_floats );\r\n        color_list = new Float32Array( max_floats );\r\n\r\n        #if phoenix_use_normals\r\n            normal_list = new Float32Array( max_floats );\r\n        #end\r\n\r\n            //The default view so we see stuff\r\n        view = renderer.camera;\r\n\r\n        GL.enableVertexAttribArray( vert_attribute );\r\n        GL.enableVertexAttribArray( tcoord_attribute );\r\n        GL.enableVertexAttribArray( color_attribute );\r\n\r\n        #if phoenix_use_normals\r\n            GL.enableVertexAttribArray( normal_attribute );\r\n        #end\r\n\r\n            //A default name\r\n        if(_name.length == 0) {\r\n            name = Luxe.utils.uniqueid();\r\n        } else {\r\n            name = _name;\r\n        }\r\n\r\n        _dropped = [];\r\n\r\n        renderer.stats.batchers++;\r\n        all.push(this);\r\n\r\n    } //new\r\n\r\n//Public function\r\n    inline\r\n    public function on(event:BatcherEventType, handler:Batcher->Void) {\r\n        emitter.on(event, handler);\r\n    }\r\n\r\n    inline\r\n    public function off(event:BatcherEventType, handler:Batcher->Void) {\r\n        return emitter.off(event, handler);\r\n    }\r\n\r\n    public function add( _geom:Geometry, _force_add:Bool = false ) {\r\n\r\n        // _debug(\"adding geom to batcher \" + _geom.id + \" at \" + _geom.depth);\r\n        // _debug(\"\\t list before: \");\r\n            // list_geometry();\r\n\r\n        if( geometry.find(_geom.key) == null || _force_add ) {\r\n\r\n                //Only add if not already there\r\n            if( !Lambda.has(_geom.batchers, this) ) {\r\n                _geom.batchers.push(this);\r\n            }\r\n\r\n                //Insert into our list\r\n            geometry.insert( _geom.key, _geom );\r\n\r\n                //Make sure it is flagged\r\n            _geom.added = true;\r\n\r\n                //and this local test flag\r\n            tree_changed = true;\r\n\r\n            // _debug(\"\\t list after: \");\r\n            //     list_geometry();\r\n\r\n        } else {\r\n            // trace(\"Warning : Attempting to add geometry to the same batcher twice. \" + _geom);\r\n        }\r\n\r\n    } //add\r\n\r\n        /** Drop all the geometry within this batcher, emptying it out. */\r\n    public function empty( _drop:Bool=true ) {\r\n\r\n        if(_drop) {\r\n            for(geom in geometry) {\r\n                geom.drop(true);\r\n                geom = null;\r\n            }\r\n        } else {\r\n            for(geom in geometry) {\r\n                geometry.remove(geom.key);\r\n            }\r\n        }\r\n\r\n    } //empty\r\n\r\n        /** Destroy this batcher.\r\n            Drops all the geometry within it (empty).\r\n            Removes itself from the renderer.\r\n            Does not change the `view`.\r\n            Do not use the batcher instance after calling this. */\r\n    public function destroy( _drop:Bool=true ) {\r\n\r\n        empty(_drop);\r\n\r\n        renderer.remove_batch(this);\r\n        renderer.stats.batchers--;\r\n\r\n        emitter = null;\r\n        geometry = null;\r\n        pos_list = null;\r\n        tcoord_list = null;\r\n        color_list = null;\r\n        normal_list = null;\r\n\r\n        max_verts = 0;\r\n        max_floats = 0;\r\n        vert_count = 0;\r\n\r\n        renderer = null;\r\n        view = null;\r\n\r\n        all.remove(this);\r\n\r\n    } //destroy\r\n\r\n    public function remove( _geom:Geometry, ?_remove_batcher_from_geometry:Bool = true ) {\r\n\r\n        if(_remove_batcher_from_geometry) {\r\n            _geom.batchers.remove(this);\r\n            if(_geom.batchers.length == 0) {\r\n                _geom.added = false;\r\n            }\r\n        } //_remove_batcher_from_geometry\r\n\r\n        var countbefore = geometry.size();\r\n\r\n        geometry.remove( _geom.key );\r\n\r\n        var countafter = geometry.size();\r\n\r\n        if(countbefore == countafter) {\r\n            //:todo: this fail state should never happen but it comes up on web rarely\r\n            // throw(\"GEOMETRY NOT REMOVED \" + _geom.key);\r\n        }\r\n\r\n        tree_changed = true;\r\n\r\n    } //remove\r\n\r\n        //Run the batcher over the current list of geometry\r\n        //and submit it to the graphics card for drawing\r\n    var state : phoenix.BatchState;\r\n    var _dropped:Array<Geometry>;\r\n\r\n    public function batch( persist_immediate : Bool = false ) {\r\n\r\n        //reset render stats before we start\r\n        dynamic_batched_count = 0;\r\n        static_batched_count = 0;\r\n        visible_count = 0;\r\n\r\n        pos_floats = 0;\r\n        tcoord_floats = 0;\r\n        color_floats = 0;\r\n        normal_floats = 0;\r\n\r\n            //The current batch state values\r\n        state = new phoenix.BatchState(this);\r\n            //The current geometry in the set\r\n        var geom : Geometry = null;\r\n\r\n            //For each in the list\r\n        for(_geom in geometry) {\r\n\r\n                //grab the next geometry\r\n            geom = _geom;\r\n\r\n                //If it's valid to be drawn\r\n            if( geom != null && !geom.dropped ) {\r\n\r\n                    //If the update will cause a state change, submit the vertices accumulated\r\n                if( state.update(geom) ) {\r\n\r\n                        //if there are verts in the last batch, it needs to be submitted\r\n                        //The function returns early if there are none\r\n                    submit_current_vertex_list( state.last_geom_state.primitive_type );\r\n\r\n                } // state.update(geom)\r\n\r\n                    // Now activate state changes (if any)\r\n                state.activate(this);\r\n\r\n                if(geom.visible) {\r\n\r\n                    //try\r\n                    visible_count++;\r\n\r\n                        //Buffer based geometry doesn't get submitted here yet\r\n                    if(geom.buffer_based) {\r\n                        visible_count--;\r\n                        continue;\r\n                    }\r\n\r\n                        //Static batched geometry gets sent on it's own\r\n                    if(geom.locked) {\r\n\r\n                            //static submissions split the batch for sorting reasons\r\n                        submit_current_vertex_list( state.last_geom_state.primitive_type );\r\n\r\n                        submit_static_geometry( geom );\r\n                        vert_count += geom.vertices.length;\r\n                    }\r\n\r\n                        // Do not accumulate for tri strips, line strips, line loops, triangle fans, quad strips, or polygons\r\n                    else if( geom.primitive_type == PrimitiveType.line_strip ||\r\n                             geom.primitive_type == PrimitiveType.line_loop ||\r\n                             geom.primitive_type == PrimitiveType.triangle_strip ||\r\n                             geom.primitive_type == PrimitiveType.triangle_fan ) {\r\n\r\n                                // doing this with the same list is fine because the primitive type causes a batch break anyways.\r\n                                // Send it on, this will also clear the list for the next geom so it doesn't acccumlate as usual.\r\n                            geometry_batch(geom);\r\n                                //submit the geometry\r\n                            submit_current_vertex_list( geom.primitive_type );\r\n                                //increase counts\r\n                            vert_count += geom.vertices.length;\r\n\r\n                    } //if it's unbatchable\r\n\r\n                        // Accumulate, this is standard geometry\r\n                    else {\r\n\r\n                        geometry_batch( geom );\r\n\r\n                            //increase counts\r\n                        dynamic_batched_count++;\r\n                        vert_count += geom.vertices.length;\r\n\r\n                    } //standard geometry\r\n\r\n\r\n                        // If the geometry is immediate get rid of it (unless the flag to keep immediate geometry)\r\n                        // in the list was specified...i.e for drawing multiple passes etc\r\n                    if( !persist_immediate && geom.immediate ) {\r\n                        //set the flag to avoid redrawing at all\r\n                        geom.dropped = true;\r\n                        //store to be dropped after iteration\r\n                        _dropped.push(geom);\r\n                    } //!persist_immediate && geom.immediate\r\n\r\n                } //geom.visible\r\n\r\n            }\r\n\r\n        } //geom list\r\n\r\n            //If there is anything left in the vertex buffer, submit it.\r\n        if(pos_floats > 0 && geom != null) {\r\n\r\n                //Make sure the state matches this geometry\r\n            state.update(geom);\r\n                //And the state is active for renderering\r\n            state.activate( this );\r\n                //submit the list for rendering\r\n            submit_current_vertex_list( state.last_geom_state.primitive_type );\r\n\r\n        }\r\n\r\n            //disable any states set by the batches\r\n        state.deactivate(this);\r\n            //cleanup\r\n        state = null;\r\n\r\n        prune();\r\n\r\n    } //batch\r\n\r\n    inline function prune() {\r\n\r\n        //clean up dropped geometry\r\n        if(_dropped.length > 0) {\r\n            for(geom in _dropped) {\r\n                geom.drop();\r\n                geom = null;\r\n            }\r\n            _dropped = null;\r\n            _dropped = [];\r\n        }\r\n\r\n    } //prune\r\n\r\n    inline\r\n    public function draw( ?persist_immediate:Bool = false ) {\r\n\r\n        #if !luxe_noprofile if(name != '') Luxe.debug.start(name); #end\r\n\r\n        //Reset the draw count\r\n        draw_calls = 0;\r\n        vert_count = 0;\r\n\r\n        emitter.emit(BatcherEventType.prerender, this);\r\n\r\n        update_view();\r\n\r\n        batch( persist_immediate );\r\n\r\n        emitter.emit(BatcherEventType.postrender, this);\r\n\r\n        var _stats = renderer.stats;\r\n            _stats.geometry_count += geometry.size() * show_stats;\r\n            _stats.dynamic_batched_count += dynamic_batched_count * show_stats;\r\n            _stats.static_batched_count += static_batched_count * show_stats;\r\n            _stats.visible_count += visible_count * show_stats;\r\n            _stats.draw_calls += draw_calls * show_stats;\r\n            _stats.vert_count += vert_count * show_stats;\r\n\r\n        #if !luxe_noprofile if(name != '') Luxe.debug.end(name); #end\r\n\r\n    } //draw\r\n\r\n    @:noCompletion\r\n    inline\r\n    function update_view() {\r\n\r\n            //update camera if it changes anything\r\n        view.process();\r\n\r\n        // trace('batcher $name / view ${view.name} / viewport:${view.viewport}');\r\n\r\n            //Set the viewport to the view\r\n        renderer.state.viewport(view.viewport.x, view.viewport.y, view.viewport.w, view.viewport.h);\r\n\r\n    } //update_view\r\n\r\n    @:noCompletion\r\n    inline\r\n    public function apply_default_uniforms(_shader:Shader) {\r\n        if(!_shader.no_default_uniforms) {\r\n            _shader.set_matrix4_arr('projectionMatrix', view.proj_arr);\r\n            _shader.set_matrix4_arr('modelViewMatrix', view.view_inverse_arr);\r\n        }\r\n    }\r\n\r\n    //:todo: this is not part of the api\r\n    //       and should be considered volatile/WIP\r\n    @:noCompletion\r\n    inline\r\n    public function submit_geometry( _geom:Geometry, ?_shader:Shader ) {\r\n\r\n        assert(_geom.buffer_based, 'Only buffer based geometry can be submitted directly');\r\n\r\n        if(!_geom.visible) return;\r\n        if(_shader == null) _shader = _geom.shader;\r\n        if(shader != null) _shader = shader;\r\n\r\n        _shader.activate();\r\n        apply_default_uniforms(_shader);\r\n        _geom.uniforms.apply();\r\n\r\n        var _length = _geom.vertices.length;\r\n        var _length4 = _length * 4;\r\n        var _updated = _geom.update_buffers();\r\n\r\n        if(_updated) {\r\n            _geom.bind_and_upload();\r\n        } else {\r\n            _geom.bind();\r\n        }\r\n\r\n        _geom.draw();\r\n\r\n        var _stats = renderer.stats;\r\n        _stats.geometry_count++;\r\n        _stats.visible_count++;\r\n        _stats.draw_calls++;\r\n        _stats.vert_count += _length;\r\n\r\n    } //submit_geometry\r\n\r\n    // inline\r\n    @:noCompletion\r\n    public function submit_buffers(type:PrimitiveType, _pos:Float32Array, _tcoords:Float32Array, _colors:Float32Array, _normals:Float32Array) {\r\n\r\n        var pb = GL.createBuffer();\r\n        var cb = GL.createBuffer();\r\n        var tb = GL.createBuffer();\r\n        #if phoenix_use_normals\r\n        var nb = GL.createBuffer();\r\n        #end\r\n\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, pb );\r\n        GL.vertexAttribPointer( vert_attribute, 4, GL.FLOAT, false, 0, 0 );\r\n        GL.bufferData( GL.ARRAY_BUFFER , _pos, GL.STREAM_DRAW);\r\n\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, tb );\r\n        GL.vertexAttribPointer( tcoord_attribute, 4, GL.FLOAT, false, 0, 0 );\r\n        GL.bufferData( GL.ARRAY_BUFFER , _tcoords, GL.STREAM_DRAW);\r\n\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, cb );\r\n        GL.vertexAttribPointer( color_attribute, 4, GL.FLOAT, false, 0, 0 );\r\n        GL.bufferData( GL.ARRAY_BUFFER , _colors, GL.STREAM_DRAW);\r\n\r\n        #if phoenix_use_normals\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, nb );\r\n        GL.bufferData( GL.ARRAY_BUFFER , _normals, GL.STREAM_DRAW);\r\n        GL.vertexAttribPointer( normal_attribute, 4, GL.FLOAT, false, 0, 0 );\r\n        #end\r\n\r\n            //Draw\r\n        GL.drawArrays( type, 0, Std.int(_pos.length/4) );\r\n\r\n        GL.deleteBuffer(pb);\r\n        GL.deleteBuffer(cb);\r\n        GL.deleteBuffer(tb);\r\n        #if phoenix_use_normals\r\n        GL.deleteBuffer(nb);\r\n        #end\r\n\r\n        draw_calls++;\r\n\r\n    } //submit_buffers\r\n\r\n    @:noCompletion\r\n    inline\r\n    public function submit_static_geometry( geom:Geometry ) : Bool {\r\n\r\n        var _length = geom.vertices.length;\r\n\r\n        if( _length == 0 ) {\r\n            return false;\r\n        }\r\n\r\n        var _updated = geom.update_buffers();\r\n\r\n        if(_updated) {\r\n            geom.bind_and_upload();\r\n        } else {\r\n            geom.bind();\r\n        }\r\n\r\n        geom.draw();\r\n\r\n            //Disable attributes\r\n        static_batched_count++;\r\n        draw_calls++;\r\n\r\n            //clear the geometry flags\r\n        geom.dirty = false;\r\n\r\n        return true;\r\n\r\n    } //submit_static_geometry\r\n\r\n    @:noCompletion\r\n    inline\r\n    public function submit_current_vertex_list( type : PrimitiveType ) : Bool {\r\n\r\n        if( pos_floats == 0 ) {\r\n            return false;\r\n        }\r\n\r\n        if( pos_floats > max_floats ) {\r\n            throw \"uh oh, somehow too many floats are being submitted (max:$max_floats, attempt:$pos_floats).\";\r\n        }\r\n\r\n            //fromBuffer takes byte length, so floats * 4\r\n        var _pos = Float32Array.fromBuffer(pos_list.buffer, 0, pos_floats*4);\r\n        var _tcoords = Float32Array.fromBuffer(tcoord_list.buffer, 0, tcoord_floats*4);\r\n        var _colors = Float32Array.fromBuffer(color_list.buffer, 0, color_floats*4);\r\n        var _normals:Float32Array = null;\r\n\r\n        #if phoenix_use_normals\r\n            _normals = Float32Array.fromBuffer(normal_list.buffer, 0, normal_floats*4);\r\n        #end\r\n\r\n        submit_buffers(type, _pos, _tcoords, _colors, _normals);\r\n\r\n        _pos = null;\r\n        _tcoords = null;\r\n        _colors = null;\r\n        _normals = null;\r\n\r\n        pos_floats = 0;\r\n        tcoord_floats = 0;\r\n        color_floats = 0;\r\n        normal_floats = 0;\r\n\r\n        return true;\r\n\r\n    } //submit_current_vertex_list\r\n\r\n//Batch related helper functions\r\n\r\n    inline\r\n    function geometry_batch( geom:Geometry ) {\r\n\r\n        if(geom.vertices.length > max_verts) {\r\n            geom.locked = true;\r\n            geom.dirty_based = false;\r\n            luxe.Log.log('WARNING batcher `$name` trying to batch a geometry `${geom.id}` that has more verts than the batcher has preallocated, (${geom.vertices.length} vs max of $max_verts)');\r\n            luxe.Log.log('WARNING geometry has been marked as direct submit, and will be submitted independently!');\r\n            return;\r\n        }\r\n\r\n            //pos_floats is in element count (so/4)\r\n        var _count_after = geom.vertices.length+(pos_floats/4);\r\n\r\n            //submit the current batch if we exceed the max buffer size\r\n        if(_count_after > max_verts) {\r\n            submit_current_vertex_list( geom.primitive_type );\r\n        }\r\n\r\n        geom.batch(\r\n            pos_floats,     tcoord_floats,  color_floats,   normal_floats,\r\n            pos_list,       tcoord_list,    color_list,     normal_list\r\n        );\r\n\r\n        var _length = geom.vertices.length * 4;\r\n\r\n        pos_floats       += _length;\r\n        tcoord_floats    += _length;\r\n        color_floats     += _length;\r\n        normal_floats    += _length;\r\n\r\n    } //geometry_batch\r\n\r\n\r\n//Internal\r\n\r\n    inline function set_layer( _layer:Int ) : Int {\r\n\r\n            //set the value\r\n        layer = _layer;\r\n            //re-sort the list\r\n        renderer.batchers.sort( renderer.sort_batchers );\r\n\r\n            //return value\r\n        return layer;\r\n\r\n    } //set_layer\r\n\r\n    inline\r\n    function toString() {\r\n        return \"Batcher(\" + name + \")\";\r\n    }\r\n\r\n        //this sorts the batchers in a list by layer\r\n    inline\r\n    function compare(other:Batcher) {\r\n\r\n        if(layer == other.layer) return 0;\r\n        if(layer < other.layer) return -1;\r\n\r\n        return 1;\r\n\r\n    } //compare\r\n\r\n    function compare_rule_to_string(r:Int) : String {\r\n        return switch(r) {\r\n\r\n            case 0: \"same\";\r\n            case 1: \"depth <\";\r\n            case 2: \"depth >\";\r\n\r\n            case 3: \"shader <\";\r\n            case 4: \"shader >\";\r\n            case 5: \"shader s._ >\";\r\n            case 6: \"shader _.s <\";\r\n\r\n            case 7: \"texture <\";\r\n            case 8: \"texture >\";\r\n            case 9: \"texture t._ >\";\r\n            case 10: \"texture _.t <\";\r\n\r\n            case 11: \"primitive <\";\r\n            case 12: \"primitive >\";\r\n            case 13: \"unclipped\";\r\n            case 14: \"clipped\";\r\n            case 15: \"timestamp <\";\r\n            case 16: \"timestamp >\";\r\n            case 17: \"timestamp ==\";\r\n            case 18: \"sequence <\";\r\n            case 19: \"sequence >\";\r\n            case 20: \"fallback\";\r\n            default: \"unknown\";\r\n\r\n        }\r\n\r\n    } //compare_rule_to_string\r\n\r\n    function compare_rule( a:GeometryKey, b:GeometryKey ) : Int {\r\n\r\n        if(a.uuid == b.uuid)\r\n            { return 0; }\r\n\r\n            //sort by depth first\r\n        if( a.depth < b.depth )\r\n            { return 1; }\r\n        if( a.depth > b.depth )\r\n            { return 2; }\r\n\r\n            //by this point, depth are equal\r\n            //so sort by shader, then texture, then primitive type\r\n\r\n        if(a.shader != null && b.shader != null) {\r\n\r\n                //sort shaders id's by gl id\r\n            if(a.shader.id < b.shader.id)\r\n                { return 3; }\r\n            if(a.shader.id > b.shader.id)\r\n                { return 4; }\r\n\r\n        } else {\r\n            if(a.shader != null && b.shader == null) {\r\n                return 5;\r\n            } else\r\n            if(a.shader == null && b.shader != null) {\r\n                return 6;\r\n            }\r\n        }\r\n\r\n        if(a.texture != null && b.texture != null) {\r\n\r\n                //sort textures id's by gl id\r\n            if(a.texture.id < b.texture.id)\r\n                { return 7; }\r\n            if(a.texture.id > b.texture.id)\r\n                { return 8; }\r\n\r\n        } else {\r\n            if(a.texture != null && b.texture == null) {\r\n                return 9;\r\n            } else\r\n            if(a.texture == null && b.texture != null) {\r\n                return 10;\r\n            }\r\n\r\n        }\r\n\r\n            //same texture and shader, so primitive type\r\n        var a_primitive_index : Int = a.primitive_type;\r\n        var b_primitive_index : Int = b.primitive_type;\r\n\r\n        if( a_primitive_index < b_primitive_index )\r\n            { return 11; }\r\n        if( a_primitive_index > b_primitive_index )\r\n            { return 12; }\r\n\r\n            //if not the same clipping, we want clipped geometry after, and not clipped before\r\n        if(a.clip != b.clip) {\r\n\r\n            if(a.clip == false && b.clip == true) {\r\n                return 13;\r\n            } else\r\n\r\n            if(a.clip == true && b.clip == false) {\r\n                return 14;\r\n            }\r\n\r\n        } //clippin\r\n\r\n            //if all else is indistinguishable,\r\n            //make sure older geometry is before\r\n\r\n        if( a.timestamp < b.timestamp )\r\n            { return 15; }\r\n        if( a.timestamp > b.timestamp )\r\n            { return 16; }\r\n        if( a.timestamp == b.timestamp )\r\n            { return 17; }\r\n\r\n        if( a.sequence < b.sequence )\r\n            { return 18; }\r\n        if( a.sequence > b.sequence )\r\n            { return 19; }\r\n\r\n            //otherwise push down the list because wtf\r\n        return 20;\r\n\r\n    } //compare_rule\r\n\r\n    function geometry_compare( a:GeometryKey, b:GeometryKey ) : Int {\r\n\r\n            //rules :\r\n                //depth\r\n                //shader\r\n                //texture\r\n                //primitive type\r\n                //clipping\r\n                //age\r\n                //sequence/fallback\r\n\r\n            //check equality\r\n        if(a.uuid == b.uuid)\r\n            { return 0; }\r\n\r\n            //sort by depth first\r\n        if( a.depth < b.depth )\r\n            { return -1; }\r\n        if( a.depth > b.depth )\r\n            { return 1; }\r\n\r\n            //by this point, depth are equal\r\n            //so sort by shader, then texture, then primitive type\r\n        if(a.shader != null && b.shader != null) {\r\n\r\n                //sort shaders id's by gl id\r\n            if(a.shader.id < b.shader.id)\r\n                { return -1; }\r\n            if(a.shader.id > b.shader.id)\r\n                { return 1; }\r\n\r\n        } else {\r\n            if(a.shader != null && b.shader == null) {\r\n                return 1;\r\n            } else\r\n            if(a.shader == null && b.shader != null) {\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        if(a.texture != null && b.texture != null) {\r\n\r\n                //sort textures id's by gl id\r\n            if(a.texture.id < b.texture.id)\r\n                { return -1; }\r\n            if(a.texture.id > b.texture.id)\r\n                { return 1; }\r\n\r\n        } else {\r\n            if(a.texture != null && b.texture == null) {\r\n                return 1;\r\n            } else\r\n            if(a.texture == null && b.texture != null) {\r\n                return -1;\r\n            }\r\n        }\r\n\r\n            //same texture and shader, so primitive type\r\n        var a_primitive_index : Int = a.primitive_type;\r\n        var b_primitive_index : Int = b.primitive_type;\r\n\r\n        if( a_primitive_index < b_primitive_index )\r\n            { return -1; }\r\n        if( a_primitive_index > b_primitive_index )\r\n            { return 1; }\r\n\r\n            //if not the same clipping, we want clipped geometry after, and not clipped before\r\n        if(a.clip != b.clip) {\r\n\r\n            if(a.clip == false && b.clip == true) {\r\n                return 1;\r\n            } else\r\n\r\n            if(a.clip == true && b.clip == false) {\r\n                return -1;\r\n            }\r\n\r\n        } //clippin\r\n\r\n            //if all else is indistinguishable,\r\n            //make sure older geometry is before\r\n\r\n        if( a.timestamp < b.timestamp )\r\n            { return -1; }\r\n        if( a.timestamp > b.timestamp )\r\n            { return 1; }\r\n        if( a.sequence < b.sequence )\r\n            { return -1; }\r\n        if( a.sequence > b.sequence )\r\n            { return 1; }\r\n\r\n            //otherwise push down the list because wtf\r\n        return 1;\r\n\r\n    } //geometry_compare\r\n\r\n    function list_geometry() {\r\n        for(geom in geometry) {\r\n            _debug('\\t   geometry: ' + geom.id  + ' / ' + geom.depth + ' / ' + geom.uuid );\r\n            _debug('\\t\\t' + geom.key);\r\n        }\r\n    }\r\n\r\n    function set_show_stats(_value:Int) {\r\n        if(_value == 0) {\r\n            renderer.stats.batchers--;\r\n        } else {\r\n            renderer.stats.batchers++;\r\n        }\r\n        return show_stats = _value;\r\n    }\r\n\r\n    public static inline var vert_attribute   : Int = 0;\r\n    public static inline var tcoord_attribute : Int = 1;\r\n    public static inline var color_attribute  : Int = 2;\r\n    public static inline var normal_attribute : Int = 3;\r\n\r\n} //Batcher\r\n\r\n\r\n@:enum abstract PrimitiveType(Int) from Int to Int {\r\n\r\n    var unknown         = -1;\r\n    var line_strip      = GL.LINE_STRIP;\r\n    var line_loop       = GL.LINE_LOOP;\r\n    var lines           = GL.LINES;\r\n    var triangle_strip  = GL.TRIANGLE_STRIP;\r\n    var triangles       = GL.TRIANGLES;\r\n    var triangle_fan    = GL.TRIANGLE_FAN;\r\n    var points          = GL.POINTS;\r\n\r\n} //PrimitiveType\r\n\r\n@:enum abstract BlendMode(Int) from Int to Int {\r\n\r\n    var zero                    = GL.ZERO;\r\n    var one                     = GL.ONE;\r\n    var src_color               = GL.SRC_COLOR;\r\n    var one_minus_src_color     = GL.ONE_MINUS_SRC_COLOR;\r\n    var src_alpha               = GL.SRC_ALPHA;\r\n    var one_minus_src_alpha     = GL.ONE_MINUS_SRC_ALPHA;\r\n    var dst_alpha               = GL.DST_ALPHA;\r\n    var one_minus_dst_alpha     = GL.ONE_MINUS_DST_ALPHA;\r\n    var dst_color               = GL.DST_COLOR;\r\n    var one_minus_dst_color     = GL.ONE_MINUS_DST_COLOR;\r\n    var src_alpha_saturate      = GL.SRC_ALPHA_SATURATE;\r\n\r\n} //BlendMode\r\n\r\n@:enum abstract BlendEquation(Int) from Int to Int {\r\n\r\n    var add                    = GL.FUNC_ADD;\r\n    var subtract               = GL.FUNC_SUBTRACT;\r\n    var reverse_subtract       = GL.FUNC_REVERSE_SUBTRACT;\r\n\r\n} //BlendEquation\r\n\r\n@:enum abstract BatcherEventType(Int) from Int to Int {\r\n\r\n    var unknown     = 0;\r\n    var prerender   = 1;\r\n    var postrender  = 2;\r\n\r\n} //BatcherEventType\r\n\r\n","package phoenix.geometry;\r\n\r\n\r\nimport phoenix.geometry.Vertex;\r\nimport phoenix.Quaternion;\r\nimport phoenix.Rectangle;\r\nimport phoenix.Transform;\r\nimport phoenix.Vector;\r\nimport phoenix.Shader;\r\nimport phoenix.Texture;\r\nimport phoenix.Batcher;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.options.GeometryOptions;\r\n\r\nimport snow.api.buffers.Float32Array;\r\n\r\nimport snow.modules.opengl.GL;\r\n\r\n#if cpp\r\nusing cpp.NativeArray;\r\n#end\r\n\r\n@:allow(phoenix.Batcher)\r\nclass Geometry {\r\n\r\n        //the positional transform information\r\n    public var transform : Transform;\r\n\r\n        //The list of vertices\r\n    public var vertices : Array<Vertex>;\r\n\r\n//:todo: This section is largely WIP\r\n//and not considered API, should be treated as volatile\r\n\r\n    var object_space : Bool = false;\r\n\r\n    var buffer_based : Bool = false;\r\n    var buffer_type : Int = GL.DYNAMIC_DRAW;\r\n    var buffer_pos : Float32Array;\r\n    var buffer_tcoords : Float32Array;\r\n    var buffer_colors : Float32Array;\r\n    var buffer_normals : Float32Array;\r\n\r\n    var vb_pos : GLBuffer;\r\n    var vb_tcoords : GLBuffer;\r\n    var vb_colors : GLBuffer;\r\n    var vb_normals : GLBuffer;\r\n\r\n    var uniforms : Uniforms;\r\n\r\n//End section\r\n\r\n        //Batcher information\r\n    public var added : Bool = false;\r\n    public var batchers : Array<Batcher>;\r\n\r\n        //state\r\n    public var state : GeometryState;\r\n    public var dropped : Bool = false;\r\n    public var uuid : String = '';\r\n    public var id : String = '';\r\n\r\n        //State properties\r\n    @:isVar public var primitive_type (get, set) : PrimitiveType;\r\n    @:isVar public var texture (get, set) : Texture;\r\n    @:isVar public var shader (get, set) : Shader;\r\n    @:isVar public var depth (get, set) : Float;\r\n    @:isVar public var clip_rect (get, set) : Rectangle;\r\n    @:isVar public var blend_disabled(get, set) : Bool = false;\r\n    @:isVar public var blend_src_alpha(get, set) : Int = BlendMode.src_alpha;\r\n    @:isVar public var blend_src_rgb(get, set) : Int = BlendMode.src_alpha;\r\n    @:isVar public var blend_dest_alpha(get, set) : Int = BlendMode.one_minus_src_alpha;\r\n    @:isVar public var blend_dest_rgb(get, set) : Int = BlendMode.one_minus_src_alpha;\r\n\r\n    var shadow_primitive_type : PrimitiveType;\r\n    var shadow_texture : Texture;\r\n    var shadow_shader : Shader;\r\n    var shadow_depth : Float = 0.0;\r\n    var shadow_clip : Bool = false;\r\n    var shadow_blend_disabled : Bool = false;\r\n    var shadow_blend_src_alpha : Int = BlendMode.src_alpha;\r\n    var shadow_blend_src_rgb : Int = BlendMode.src_alpha;\r\n    var shadow_blend_dest_alpha : Int = BlendMode.one_minus_src_alpha;\r\n    var shadow_blend_dest_rgb : Int = BlendMode.one_minus_src_alpha;\r\n\r\n    var dirty_primitive_type : Bool = false;\r\n    var dirty_texture : Bool = false;\r\n    var dirty_shader : Bool = false;\r\n    var dirty_depth : Bool = false;\r\n    var dirty_clip : Bool = false;\r\n    var dirty_blend : Bool = false;\r\n\r\n        //Geometry properties\r\n    @:isVar public var visible      (default, set) : Bool = true;\r\n    @:isVar public var immediate    (default, default) : Bool = false;\r\n    @:isVar public var locked       (get, set) : Bool = false;\r\n    @:isVar public var dirty        (get, set) : Bool = false;\r\n    @:isVar public var color        (default, set) : Color;\r\n\r\n        //:voltile:wip: whether or not the dirty flag is used or not\r\n        //if this is false, the geometry will submit even when not dirty\r\n    public var dirty_based = true;\r\n\r\n        //internal bool flag for clip sorting and clipping state\r\n    @:noCompletion @:isVar public var clip (get, set) : Bool;\r\n\r\n        //internal reuse cache value\r\n    var _final_vert_position : Vector;\r\n\r\n    public var key : GeometryKey;\r\n\r\n        //This is a failsafe against all other geometry key values being identical\r\n        //causing comparisons in a binary tree to fail. This value is never reset intentionally.\r\n    static var _sequence_key : Int = -1;\r\n\r\n    public function new(_options:GeometryOptions) {\r\n\r\n        uuid = Luxe.utils.uniqueid();\r\n        id = uuid;\r\n\r\n        state = new GeometryState();\r\n        vertices = [];\r\n        batchers = [];\r\n\r\n            //init transforms\r\n        transform = new Transform();\r\n\r\n            //init the empty vertex reuse\r\n        _final_vert_position = new Vector();\r\n\r\n            //geometry clipping\r\n        clip_rect = null;\r\n        clip = false;\r\n\r\n            //this only applies if batcher is supplied, but is overriden with no_batcher_add\r\n        var _do_add = true;\r\n\r\n\r\n        id                   = def(_options.id,              uuid);\r\n        color                = def(_options.color,           new Color());\r\n        visible              = def(_options.visible,         true);\r\n        immediate            = def(_options.immediate,       false);\r\n\r\n        //:todo: This section is WIP and considered volatile/not api\r\n        buffer_based         = def(_options.buffer_based,    false);\r\n        object_space         = def(_options.object_space,    false);\r\n        //end section\r\n\r\n        state.depth          = def(_options.depth,           state.depth);\r\n        state.texture        = def(_options.texture,         state.texture);\r\n        state.primitive_type = def(_options.primitive_type,  state.primitive_type);\r\n        state.shader         = def(_options.shader,          state.shader);\r\n\r\n        if(_options.clip_rect != null) {\r\n            var _r = _options.clip_rect;\r\n            state.clip_x = _r.x;\r\n            state.clip_y = _r.y;\r\n            state.clip_w = _r.w;\r\n            state.clip_h = _r.h;\r\n        }\r\n\r\n        transform.pos        = def(_options.pos,             transform.pos);\r\n        transform.rotation   = def(_options.rotation,        transform.rotation);\r\n        transform.scale      = def(_options.scale,           transform.scale);\r\n        transform.origin     = def(_options.origin,          transform.origin);\r\n\r\n        if(_options.no_batcher_add != null && _options.no_batcher_add == true) {\r\n            _do_add = false;\r\n        }\r\n\r\n        _sequence_key++;\r\n\r\n        key = new GeometryKey();\r\n\r\n            key.uuid = uuid;\r\n            key.timestamp = Luxe.time;\r\n            key.sequence = _sequence_key;\r\n            key.primitive_type = state.primitive_type;\r\n            key.texture = state.texture;\r\n            key.shader = state.shader;\r\n            key.depth = state.depth;\r\n            key.clip = state.clip;\r\n            key.blend_disabled = state.blend_disabled;\r\n            key.blend_src_alpha = state.blend_src_alpha;\r\n            key.blend_src_rgb = state.blend_src_rgb;\r\n            key.blend_dest_alpha = state.blend_dest_alpha;\r\n            key.blend_dest_rgb = state.blend_dest_rgb;\r\n\r\n        transform.id = uuid;\r\n        transform.name = id;\r\n\r\n            //only add it to a batcher if explicitly requested,\r\n            //otherwise do not add to a batcher at all\r\n        if(_options.batcher != null && _do_add) {\r\n            _options.batcher.add( this );\r\n        }\r\n\r\n            //:todo: This is WIP/volatile and not considered api\r\n        if(buffer_based) create_vbos();\r\n        uniforms = new Uniforms();\r\n\r\n    } //new\r\n\r\n    public function key_string() {\r\n\r\n        return\r\n            'ts: '+ key.timestamp + '\\n' +\r\n            'sequence: '+ key.sequence + '\\n' +\r\n            'primitive_type: '+ key.primitive_type + '\\n' +\r\n            'texture: '+ (key.texture == null ? 'null' : key.texture.id) + '\\n' +\r\n            'shader: '+ (key.shader == null ? 'null' : key.shader.id) + '\\n' +\r\n            'depth: '+ key.depth + '\\n' +\r\n            'clip: '+ key.clip;\r\n\r\n    } //key_string\r\n\r\n    public function refresh_key() {\r\n\r\n        // _sequence_key++;\r\n\r\n        key.uuid = uuid;\r\n        key.timestamp = Luxe.time;\r\n        // key.sequence = _sequence_key;\r\n        key.primitive_type = state.primitive_type;\r\n        key.texture = state.texture;\r\n        key.shader = state.shader;\r\n        key.depth = state.depth;\r\n        key.clip = state.clip;\r\n        key.blend_disabled = state.blend_disabled;\r\n        key.blend_src_alpha = state.blend_src_alpha;\r\n        key.blend_src_rgb = state.blend_src_rgb;\r\n        key.blend_dest_alpha = state.blend_dest_alpha;\r\n        key.blend_dest_rgb = state.blend_dest_rgb;\r\n\r\n    } //refresh_key\r\n\r\n    public function str() {\r\n        if(!state.log) return;\r\n        trace('\\t\\tgeometry ; ' + id);\r\n        state.log = true;\r\n        state.str();\r\n        state.log = false;\r\n    }\r\n\r\n    public function drop( ?remove:Bool = true ) {\r\n\r\n        if( remove && added ) {\r\n\r\n            for(b in batchers) {\r\n                b.remove( this, true );\r\n            } //for each batcher\r\n\r\n        }\r\n\r\n        key = null;\r\n        color = null;\r\n        state = null;\r\n        _final_vert_position = null;\r\n        batchers = null;\r\n        uuid = null;\r\n        id = null;\r\n        shadow_texture = null;\r\n        shadow_shader = null;\r\n        vertices = null;\r\n\r\n        if(transform != null) {\r\n            transform.destroy();\r\n            transform = null;\r\n        }\r\n\r\n        if(uniforms != null) {\r\n            uniforms.destroy();\r\n            uniforms = null;\r\n        }\r\n\r\n        destroy_vbos();\r\n        if(buffer_pos != null) {\r\n            buffer_pos = null;\r\n            buffer_tcoords = null;\r\n            buffer_colors = null;\r\n            buffer_normals = null;\r\n        }\r\n\r\n        dropped = true;\r\n\r\n    } //drop\r\n\r\n    public function add( v : Vertex ) {\r\n\r\n        vertices.push( v );\r\n\r\n    } //add\r\n\r\n    public function remove( v : Vertex ) {\r\n\r\n        vertices.remove(v);\r\n\r\n    } //remove\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    public function batch( vert_index : Int, tcoord_index:Int, color_index:Int, normal_index:Int,\r\n                           vertlist : Float32Array, tcoordlist : Float32Array, colorlist : Float32Array, normallist : Float32Array\r\n        ) {\r\n\r\n        var _mat = transform.world.matrix;\r\n        var _el = _mat.elements;\r\n\r\n        #if cpp\r\n            inline function tx(_x:Float,_y:Float,_z:Float) : Float return _el.unsafeGet(0) * _x + _el.unsafeGet(4) * _y + _el.unsafeGet(8)  * _z + _el.unsafeGet(12);\r\n            inline function ty(_x:Float,_y:Float,_z:Float) : Float return _el.unsafeGet(1) * _x + _el.unsafeGet(5) * _y + _el.unsafeGet(9)  * _z + _el.unsafeGet(13);\r\n            inline function tz(_x:Float,_y:Float,_z:Float) : Float return _el.unsafeGet(2) * _x + _el.unsafeGet(6) * _y + _el.unsafeGet(10) * _z + _el.unsafeGet(14);\r\n        #else\r\n            inline function tx(_x:Float,_y:Float,_z:Float) : Float return _el[0] * _x + _el[4] * _y + _el[8]  * _z + _el[12];\r\n            inline function ty(_x:Float,_y:Float,_z:Float) : Float return _el[1] * _x + _el[5] * _y + _el[9]  * _z + _el[13];\r\n            inline function tz(_x:Float,_y:Float,_z:Float) : Float return _el[2] * _x + _el[6] * _y + _el[10] * _z + _el[14];\r\n        #end\r\n\r\n        var _count = vertices.length;\r\n        var _idx = 0;\r\n\r\n        while(_idx < _count) {\r\n            var v = vertices[_idx];\r\n\r\n            var _vx = v.pos.x;\r\n            var _vy = v.pos.y;\r\n            var _vz = v.pos.z;\r\n\r\n                //the old positions must be used to\r\n                // transform correctly, for each of the components\r\n            var _tvx = tx(_vx, _vy, _vz);\r\n            var _tvy = ty(_vx, _vy, _vz);\r\n            var _tvz = tz(_vx, _vy, _vz);\r\n\r\n                vertlist[(vert_index+0)] = _tvx;\r\n                vertlist[(vert_index+1)] = _tvy;\r\n                vertlist[(vert_index+2)] = _tvz;\r\n                vertlist[(vert_index+3)] = v.pos.w;\r\n\r\n            vert_index += 4;\r\n\r\n            var _vuv = v.uv.uv0;\r\n\r\n                tcoordlist[(tcoord_index+0)] = _vuv.u;\r\n                tcoordlist[(tcoord_index+1)] = _vuv.v;\r\n                tcoordlist[(tcoord_index+2)] = _vuv.w;\r\n                tcoordlist[(tcoord_index+3)] = _vuv.t;\r\n\r\n            tcoord_index += 4;\r\n\r\n                colorlist[(color_index+0)] = v.color.r;\r\n                colorlist[(color_index+1)] = v.color.g;\r\n                colorlist[(color_index+2)] = v.color.b;\r\n                colorlist[(color_index+3)] = v.color.a;\r\n\r\n            color_index += 4;\r\n\r\n            #if phoenix_use_normals\r\n                var _vn = v.normal;\r\n                normallist[(normal_index+0)] = _vn.x;\r\n                normallist[(normal_index+1)] = _vn.y;\r\n                normallist[(normal_index+2)] = _vn.z;\r\n                normallist[(normal_index+3)] = _vn.w;\r\n            #end\r\n\r\n            normal_index += 4;\r\n\r\n\r\n            _idx++;\r\n\r\n        } //each vertex\r\n\r\n    } //batch\r\n\r\n    @:noCompletion\r\n    inline\r\n    public function batch_object_space( vert_index : Int, tcoord_index:Int, color_index:Int, normal_index:Int,\r\n                                        vertlist : Float32Array, tcoordlist : Float32Array, colorlist : Float32Array, normallist : Float32Array\r\n        ) {\r\n\r\n        for(v in vertices) {\r\n\r\n            var _vpos = v.pos;\r\n            var _vuv = v.uv.uv0;\r\n            var _vcol = v.color;\r\n\r\n                vertlist[(vert_index+0)] = _vpos.x;\r\n                vertlist[(vert_index+1)] = _vpos.y;\r\n                vertlist[(vert_index+2)] = _vpos.z;\r\n                vertlist[(vert_index+3)] = _vpos.w;\r\n\r\n            vert_index += 4;\r\n\r\n                tcoordlist[(tcoord_index+0)] = _vuv.u;\r\n                tcoordlist[(tcoord_index+1)] = _vuv.v;\r\n                tcoordlist[(tcoord_index+2)] = _vuv.w;\r\n                tcoordlist[(tcoord_index+3)] = _vuv.t;\r\n\r\n            tcoord_index += 4;\r\n\r\n                colorlist[(color_index+0)] = _vcol.r;\r\n                colorlist[(color_index+1)] = _vcol.g;\r\n                colorlist[(color_index+2)] = _vcol.b;\r\n                colorlist[(color_index+3)] = _vcol.a;\r\n\r\n            color_index += 4;\r\n\r\n            #if phoenix_use_normals\r\n                var _vnorm = v.normal;\r\n                normallist[(normal_index+0)] = _vnorm.x;\r\n                normallist[(normal_index+1)] = _vnorm.y;\r\n                normallist[(normal_index+2)] = _vnorm.z;\r\n                normallist[(normal_index+3)] = _vnorm.w;\r\n            #end\r\n\r\n            normal_index += 4;\r\n\r\n        } //each vertex\r\n\r\n    } //batch_object_space\r\n\r\n    public function batch_into_arrays( vertlist : Array<Float>, tcoordlist : Array<Float>,\r\n                           colorlist : Array<Float>, normallist : Array<Float> ) {\r\n\r\n        for(v in vertices) {\r\n\r\n                // the base position of the vert\r\n            _final_vert_position.set( v.pos.x, v.pos.y, v.pos.z, v.pos.w );\r\n                // apply the transform to the vert\r\n            _final_vert_position.transform( transform.world.matrix );\r\n\r\n                //submit vert positions\r\n            vertlist.push( _final_vert_position.x );\r\n            vertlist.push( _final_vert_position.y );\r\n            vertlist.push( _final_vert_position.z );\r\n            vertlist.push( _final_vert_position.w );\r\n\r\n                //texture coordinates :todo: multiple uv sets\r\n            tcoordlist.push( v.uv.uv0.u );\r\n            tcoordlist.push( v.uv.uv0.v );\r\n            tcoordlist.push( v.uv.uv0.w );\r\n            tcoordlist.push( v.uv.uv0.t );\r\n\r\n                //color values per vertex\r\n            colorlist.push( v.color.r );\r\n            colorlist.push( v.color.g );\r\n            colorlist.push( v.color.b );\r\n            colorlist.push( v.color.a );\r\n\r\n            #if phoenix_use_normals\r\n                normallist.push( v.normal.x );\r\n                normallist.push( v.normal.y );\r\n                normallist.push( v.normal.z );\r\n                normallist.push( v.normal.w );\r\n            #end\r\n\r\n        } //each vertex\r\n\r\n    } //batch_into_arrays\r\n\r\n//Explicit vb\r\n\r\n    function destroy_vbos() {\r\n        if(vb_pos==null) return;\r\n        GL.deleteBuffer(vb_pos);\r\n        GL.deleteBuffer(vb_tcoords);\r\n        GL.deleteBuffer(vb_colors);\r\n        #if phoenix_use_normals\r\n        GL.deleteBuffer(vb_normals);\r\n        #end\r\n    } //destroy_vbos\r\n\r\n    inline\r\n    function create_vbos() {\r\n        if(vb_pos!=null) return;\r\n        vb_pos = GL.createBuffer();\r\n        vb_tcoords = GL.createBuffer();\r\n        vb_colors = GL.createBuffer();\r\n        #if phoenix_use_normals\r\n        vb_normals = GL.createBuffer();\r\n        #end\r\n        dirty = true;\r\n    }\r\n\r\n    inline\r\n    function bind() {\r\n        bind_pos();\r\n        bind_tcoords();\r\n        bind_colors();\r\n        #if phoenix_use_normals\r\n        bind_normals();\r\n        #end\r\n    }\r\n\r\n\r\n    inline\r\n    function bind_pos() {\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_pos);\r\n        GL.vertexAttribPointer(Batcher.vert_attribute, 4, GL.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    inline\r\n    function bind_tcoords() {\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_tcoords);\r\n        GL.vertexAttribPointer(Batcher.tcoord_attribute, 4, GL.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    inline\r\n    function bind_colors() {\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_colors);\r\n        GL.vertexAttribPointer(Batcher.color_attribute, 4, GL.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    #if phoenix_use_normals\r\n    inline\r\n    function bind_normals() {\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, vb_normals);\r\n        GL.vertexAttribPointer(Batcher.normal_attribute, 4, GL.FLOAT, false, 0, 0);\r\n    }\r\n    #end\r\n\r\n    inline\r\n    function unbind() {\r\n        GL.bindBuffer(GL.ARRAY_BUFFER, null);\r\n    }\r\n\r\n    inline\r\n    function bind_and_upload() {\r\n\r\n        bind_pos();\r\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_pos, buffer_type);\r\n\r\n        bind_tcoords();\r\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_tcoords, buffer_type);\r\n\r\n        bind_colors();\r\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_colors, buffer_type);\r\n\r\n        #if phoenix_use_normals\r\n        bind_normals();\r\n        GL.bufferData(GL.ARRAY_BUFFER, buffer_normals, buffer_type);\r\n        #end\r\n\r\n    } //_bind_and_upload\r\n\r\n    var _prev_count = 0;\r\n    function update_buffers() : Bool {\r\n\r\n        if(!dirty && dirty_based) return false;\r\n\r\n        var _verts = vertices.length;\r\n\r\n        //since vertices might change we recreate the buffers\r\n        if((_verts != _prev_count) || buffer_pos == null) {\r\n            var _length:Int = (vertices.length * 4);\r\n            buffer_pos = null;\r\n            buffer_normals = null;\r\n            buffer_colors = null;\r\n            buffer_tcoords = null;\r\n            buffer_pos = new Float32Array(_length);\r\n            buffer_tcoords = new Float32Array(_length);\r\n            buffer_colors = new Float32Array(_length);\r\n            #if phoenix_use_normals\r\n            buffer_normals = new Float32Array(_length);\r\n            #end\r\n        }\r\n\r\n        if(object_space) {\r\n            batch_object_space(0,0,0,0,buffer_pos,buffer_tcoords,buffer_colors,buffer_normals);\r\n        } else {\r\n            batch(0,0,0,0,buffer_pos,buffer_tcoords,buffer_colors,buffer_normals);\r\n        }\r\n\r\n        dirty = false;\r\n\r\n        return true;\r\n\r\n    } //update_vb\r\n\r\n    inline\r\n    function draw() {\r\n        //the buffer pos length is favoured because if dirty is not flagged,\r\n        //and the vertices change, then the size of the buffers becomes inconsistent\r\n        //with the draw call and Bad Things happen like memory corruption\r\n        GL.drawArrays( primitive_type, 0, Std.int(buffer_pos.length/4) );\r\n    }\r\n\r\n//Transform\r\n\r\n    public function translate( _offset:Vector ) {\r\n\r\n        transform.pos.set_xyz( transform.pos.x+_offset.x, transform.pos.y+_offset.y, transform.pos.x+_offset.z );\r\n\r\n    } // translate\r\n\r\n    function set_locked( _locked:Bool ) : Bool {\r\n\r\n        buffer_type = _locked ? GL.STATIC_DRAW : GL.DYNAMIC_DRAW;\r\n\r\n        if(_locked && vb_pos == null) create_vbos();\r\n        if(!_locked && vb_pos != null) destroy_vbos();\r\n\r\n        return locked = _locked;\r\n\r\n    } //set_locked\r\n\r\n    inline function get_locked() : Bool {\r\n\r\n        return locked;\r\n\r\n    } //get_locked\r\n\r\n    function set_dirty( _dirty:Bool ) : Bool {\r\n\r\n        return dirty = _dirty;\r\n\r\n    } //set_dirty\r\n\r\n    inline function get_dirty() : Bool {\r\n\r\n        return dirty;\r\n\r\n    } //get_dirty\r\n\r\n//Invariants that cause a shift in the geometry tree\r\n\r\n    function refresh() {\r\n\r\n            //remove from all batchers\r\n        for(b in batchers) {\r\n            b.remove( this, false );\r\n        } //for each batcher\r\n\r\n                //update the values from the shadow values, if needed\r\n            if(dirty_primitive_type) {\r\n                dirty_primitive_type = false;\r\n                state.primitive_type = shadow_primitive_type;\r\n            } //dirty_primitive_type\r\n\r\n            if(dirty_texture) {\r\n                dirty_texture = false;\r\n                state.texture = shadow_texture;\r\n            } //dirty_texture\r\n\r\n            if(dirty_shader) {\r\n                dirty_shader = false;\r\n                state.shader = shadow_shader;\r\n            } //dirty_shader\r\n\r\n            if(dirty_depth) {\r\n                dirty_depth = false;\r\n                state.depth = shadow_depth;\r\n            } //dirty_depth\r\n\r\n            if(dirty_clip) {\r\n                dirty_clip = false;\r\n                state.clip = shadow_clip;\r\n            } //dirty_clip\r\n\r\n            if(dirty_blend) {\r\n                dirty_blend = false;\r\n                state.blend_disabled = shadow_blend_disabled;\r\n                state.blend_src_alpha = shadow_blend_src_alpha;\r\n                state.blend_src_rgb = shadow_blend_src_rgb;\r\n                state.blend_dest_alpha = shadow_blend_dest_alpha;\r\n                state.blend_dest_rgb = shadow_blend_dest_rgb;\r\n            } //dirty_clip\r\n\r\n                //make sure the key is updated\r\n           refresh_key();\r\n\r\n        for(b in batchers) {\r\n            b.add( this, false );\r\n        } //for each batcher\r\n\r\n    } //refresh\r\n\r\n//Primitive Type\r\n\r\n    inline function get_primitive_type() : PrimitiveType {\r\n\r\n        return state.primitive_type;\r\n\r\n    } //get_primitive_type\r\n\r\n    function set_primitive_type( val : PrimitiveType ) : PrimitiveType {\r\n\r\n        if(state.primitive_type != val) {\r\n            shadow_primitive_type = val;\r\n            dirty_primitive_type = true;\r\n            refresh();\r\n        }\r\n\r\n        return primitive_type = val;\r\n\r\n    } //set_primitive_type\r\n\r\n//Texture\r\n\r\n    inline function get_texture() : Texture {\r\n\r\n        return state.texture;\r\n\r\n    } //get_texture\r\n\r\n    function set_texture(val : Texture) : Texture {\r\n\r\n        if(state.texture != val) {\r\n            shadow_texture = val;\r\n            dirty_texture = true;\r\n            refresh();\r\n        }\r\n\r\n        return texture = val;\r\n\r\n    } //set_texture\r\n\r\n//Visibility\r\n\r\n    function set_visible(val : Bool) : Bool {\r\n\r\n        return visible = val;\r\n\r\n    } //set_visible\r\n\r\n//Color\r\n\r\n    function set_color(val : Color) : Color {\r\n\r\n        if(vertices != null && vertices.length > 0) {\r\n            for(v in vertices) {\r\n                v.color = val;\r\n            } //for each vertex\r\n        }\r\n\r\n        return color = val;\r\n\r\n    } //set_color\r\n\r\n//Shader\r\n\r\n    inline function get_shader() : Shader {\r\n\r\n        return state.shader;\r\n\r\n    } //get_shader\r\n\r\n    function set_shader(val : Shader) : Shader {\r\n\r\n        if(state.shader != val) {\r\n            shadow_shader = val;\r\n            dirty_shader = true;\r\n            refresh();\r\n        }\r\n\r\n        return shader = val;\r\n\r\n    } //set_shader\r\n\r\n//Depth\r\n\r\n    inline function get_depth() : Float {\r\n\r\n        return state.depth;\r\n\r\n    } //get_depth\r\n\r\n\r\n    function set_depth(val : Float) : Float {\r\n\r\n        if(state.depth != val) {\r\n            shadow_depth = val;\r\n            dirty_depth = true;\r\n            refresh();\r\n        }\r\n\r\n        return depth = val;\r\n\r\n    } //set_depth\r\n\r\n//Blends\r\n\r\n    inline function get_blend_disabled() : Bool {\r\n        return state.blend_disabled;\r\n    }\r\n\r\n    inline function get_blend_src_alpha() : Int {\r\n        return state.blend_src_alpha;\r\n    }\r\n\r\n    inline function get_blend_src_rgb() : Int {\r\n        return state.blend_src_rgb;\r\n    }\r\n\r\n    inline function get_blend_dest_alpha() : Int {\r\n        return state.blend_dest_alpha;\r\n    }\r\n\r\n    inline function get_blend_dest_rgb() : Int {\r\n        return state.blend_dest_rgb;\r\n    }\r\n\r\n    function set_blend_disabled(val:Bool) : Bool {\r\n        state.ignore_blend = false;\r\n        if(state.blend_disabled != val) {\r\n            shadow_blend_disabled = val;\r\n            dirty_blend = true;\r\n            refresh();\r\n        }\r\n        return blend_disabled = val;\r\n    }\r\n\r\n    function set_blend_src_alpha(val:Int) : Int {\r\n        state.ignore_blend = false;\r\n        if(state.blend_src_alpha != val) {\r\n            shadow_blend_src_alpha = val;\r\n            dirty_blend = true;\r\n            refresh();\r\n        }\r\n        return blend_src_alpha = val;\r\n    }\r\n\r\n    function set_blend_src_rgb(val:Int) : Int {\r\n        state.ignore_blend = false;\r\n        if(state.blend_src_rgb != val) {\r\n            shadow_blend_src_rgb = val;\r\n            dirty_blend = true;\r\n            refresh();\r\n        }\r\n        return blend_src_rgb = val;\r\n    }\r\n\r\n    function set_blend_dest_alpha(val:Int) : Int {\r\n        state.ignore_blend = false;\r\n        if(state.blend_dest_alpha != val) {\r\n            shadow_blend_dest_alpha = val;\r\n            dirty_blend = true;\r\n            refresh();\r\n        }\r\n        return blend_dest_alpha = val;\r\n    }\r\n\r\n    function set_blend_dest_rgb(val:Int) : Int {\r\n        state.ignore_blend = false;\r\n        if(state.blend_dest_rgb != val) {\r\n            shadow_blend_dest_rgb = val;\r\n            dirty_blend = true;\r\n            refresh();\r\n        }\r\n        return blend_dest_rgb = val;\r\n    }\r\n\r\n\r\n\r\n\r\n//Clip\r\n\r\n    inline function get_clip() : Bool {\r\n\r\n        return state.clip;\r\n\r\n    } //get_clip\r\n\r\n    function set_clip(val : Bool) : Bool {\r\n\r\n        if(state.clip != val) {\r\n            shadow_clip = val;\r\n            dirty_clip = true;\r\n            refresh();\r\n        }\r\n\r\n        return clip = val;\r\n\r\n    } //set_clip\r\n\r\n//Clip rect\r\n\r\n    inline function get_clip_rect() : Rectangle {\r\n\r\n        return clip_rect;\r\n\r\n    } //get_clip_rect\r\n\r\n    function set_clip_rect(val : Rectangle) : Rectangle {\r\n\r\n        if(val == null) {\r\n            clip = false;\r\n        } else {\r\n            clip = true;\r\n            state.clip_x = val.x;\r\n            state.clip_y = val.y;\r\n            state.clip_w = val.w;\r\n            state.clip_h = val.h;\r\n        }\r\n\r\n        return clip_rect = val;\r\n\r\n    } //set_clip_rect\r\n\r\n\r\n} //Geometry\r\n\r\n\r\nclass GeometryKey {\r\n\r\n    public inline function new() {}\r\n\r\n    public var timestamp : Float = 0;\r\n    public var sequence : Int = 0;\r\n    public var uuid : String = '';\r\n    public var primitive_type : PrimitiveType;\r\n    public var texture : Texture;\r\n    public var shader : Shader;\r\n    public var depth : Float = 0;\r\n    public var clip : Bool = false;\r\n    public var blend_disabled : Bool = false;\r\n    public var blend_src_alpha : Int = 0;\r\n    public var blend_src_rgb : Int = 0;\r\n    public var blend_dest_alpha : Int = 0;\r\n    public var blend_dest_rgb : Int = 0;\r\n\r\n} //GeometryKey\r\n","package phoenix;\r\n\r\nimport luxe.resource.Resource;\r\nimport luxe.Resources;\r\n\r\n// import luxe.options.FontOptions;\r\nimport luxe.options.ResourceOptions;\r\nimport luxe.options.TextOptions;\r\nimport luxe.importers.bitmapfont.BitmapFontData;\r\nimport luxe.importers.bitmapfont.BitmapFontParser;\r\n\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.TextGeometry;\r\nimport phoenix.Rectangle;\r\nimport phoenix.Vector;\r\nimport phoenix.Texture;\r\nimport snow.api.Promise;\r\nimport snow.types.Types.Error;\r\nimport snow.systems.assets.Asset;\r\n\r\nimport luxe.Log.*;\r\n\r\nusing luxe.utils.unifill.Unifill;\r\n\r\n@:enum abstract TextAlign(Int) from Int to Int {\r\n    var left = 0;\r\n    var right = 1;\r\n    var center = 2;\r\n    var top = 3;\r\n    var bottom = 4;\r\n} //TextAlign\r\n\r\n\r\nclass BitmapFont extends Resource {\r\n\r\n        /** The map of font texture pages to their id. */\r\n    public var pages: Map<Int, Texture>;\r\n        /** The bitmap font data */\r\n    public var info (default, set): BitmapFontData;\r\n        /** Cached reference of the ' '(32) character, for sizing on tabs/spaces */\r\n    public var space_char: Character;\r\n\r\n        /** Optional texture path. */\r\n    var texture_path: String;\r\n\r\n    public function new( _options:BitmapFontOptions ) {\r\n\r\n        assertnull(_options);\r\n\r\n        _options.resource_type = ResourceType.font;\r\n\r\n        super( _options );\r\n\r\n        if(_options.texture_path != null) {\r\n            texture_path = _options.texture_path;\r\n        } else {\r\n            texture_path = haxe.io.Path.directory(id);\r\n        }\r\n\r\n        pages = new Map();\r\n\r\n        if(_options.pages != null) assertnull(_options.font_data, 'BitmapFont create from pages + font_data requires both of those options');\r\n        if(_options.font_data != null) {\r\n\r\n            assertnull(_options.pages, 'BitmapFont create from pages + font_data requires both of those options');\r\n\r\n            info = BitmapFontParser.parse(_options.font_data);\r\n            apply_pages(_options.pages);\r\n\r\n        } //font_data\r\n\r\n    } //new\r\n\r\n//Public api\r\n    //\r\n\r\n        /** Returns the kerning between two glyphs, or 0 if none.\r\n            A glyph int id is the value from 'c'.charCodeAt(0) */\r\n    public inline function kerning(_first:Int, _second:Int) {\r\n\r\n        var _map = info.kernings.get(_first);\r\n\r\n        if(_map != null && _map.exists(_second)) {\r\n            return _map.get(_second);\r\n        }\r\n\r\n        return 0;\r\n\r\n    } //kerning\r\n\r\n        /** Wrap the given string to the given rectangle, using the given metrics.\r\n            Returns a new array, with each line of the string split across the bounds. */\r\n    public function wrap_string_to_bounds( _string:String, _bounds:Rectangle, _point_size:Float=1.0, _letter_spc:Float=0.0 ) : String {\r\n\r\n        if(_bounds == null) {\r\n            return _string;\r\n        }\r\n\r\n        var _cur_x = 0.0; var _idx = 0;\r\n        var _final_str = '';\r\n\r\n        inline function _wordw(_str:String) {\r\n            return width_of(_str, _point_size, _letter_spc);\r\n        }\r\n\r\n        var _spacew = _wordw(' ');\r\n\r\n        inline function _dowrap(_w:Float, _str:String) {\r\n            if(_cur_x + _w > _bounds.w) {\r\n                _cur_x = 0;\r\n                _final_str += '\\n';\r\n            }\r\n\r\n            _cur_x += _w;\r\n            _final_str += _str;\r\n        } //_dowrap\r\n\r\n            var _strings = _string.split(' ');\r\n            var _count = _strings.length;\r\n\r\n            for(_str in _strings) {\r\n                if(_str.uIndexOf('\\n') == -1) {\r\n                    if(_str == '') _str = ' ';\r\n                    _dowrap( _wordw(_str), _str );\r\n                } else {\r\n                    var _widx = 0;\r\n                    var _words = _str.split('\\n');\r\n                    for(_word in _words) {\r\n\r\n                        if(_word != '') {\r\n                            _dowrap( _wordw(_word), _word );\r\n                        } else {\r\n                            _cur_x = 0;\r\n                        }\r\n\r\n                        if(_widx < _words.length-1) {\r\n                            _final_str += '\\n';\r\n                            _cur_x = 0;\r\n                        }\r\n\r\n                        _widx++;\r\n\r\n                    } //each word\r\n                } //no spaces\r\n\r\n                if(_idx < _count-1) {\r\n                    _final_str += ' ';\r\n                    _cur_x += _spacew + _letter_spc;\r\n                }\r\n\r\n                _idx++;\r\n\r\n            } //each word\r\n\r\n        return _final_str;\r\n\r\n    } //wrap_string_to_bounds\r\n\r\n        /** Returns the width of the given line, which assumes the line is already split up (does not split the string), using the given metrics. */\r\n    public function width_of_line( _string:String, _point_size:Float=1.0, _letter_spc:Float=0.0 ) {\r\n        //\r\n            //current x pos\r\n        var _cur_x = 0.0;\r\n            //current w pos\r\n        var _cur_w = 0.0;\r\n            //the size ratio between font and given size\r\n        var _ratio = _point_size / info.point_size;\r\n\r\n        var i = 0;\r\n        var _len = _string.uLength();\r\n\r\n        for( _uglyph in _string.uIterator() ) {\r\n\r\n            var _index = _uglyph.toInt();\r\n            var _char = info.chars.get(_index);\r\n            if(_char == null) _char = space_char;\r\n\r\n                //some characters (like spaces) have no width but an advance\r\n                //which is relevant/needed\r\n            var _cw = (_char.xoffset + Math.max(_char.width, _char.xadvance)) * _ratio;\r\n            var _cx = _cur_x + (_char.xoffset * _ratio);\r\n\r\n            var _spacing = _char.xadvance;\r\n            if( i < _len-1 ) {\r\n                var _next_index = _string.uCharCodeAt(i+1);\r\n                _spacing += kerning( _index, _next_index );\r\n                if(_next_index >= 32) { _spacing += _letter_spc; }\r\n            }\r\n\r\n            _cur_x += _spacing * _ratio;\r\n            _cur_w = Math.max(_cur_w, _cx+_cw);\r\n\r\n            ++i;\r\n        } //each char\r\n\r\n        return _cur_w;\r\n\r\n    } //width_of_line\r\n\r\n        /** Returns the width of the given string, using the given metrics.\r\n            This will split the string and populate the optional _line_widths array with each line width of the string */\r\n    public inline function width_of( _string:String, _point_size:Float = 1.0, _letter_spc:Float = 0.0, ?_line_widths:Array<Float> ) : Float {\r\n        //\r\n            //if given an array to cache line widths into\r\n        var _max_w = 0.0;\r\n        var _push_widths = (_line_widths != null);\r\n        var _lines = _string.uSplit('\\n');\r\n\r\n        for(_line in _lines) {\r\n\r\n            var _cur_w = width_of_line(_line, _point_size, _letter_spc);\r\n\r\n            _max_w = Math.max( _max_w, _cur_w );\r\n\r\n            if(_push_widths) {\r\n                _line_widths.push(_cur_w);\r\n            }\r\n\r\n        } //each line\r\n\r\n            //return the max width found\r\n        return _max_w;\r\n\r\n    } //width_of\r\n\r\n        /** Returns the height of a string, using the given metrics. */\r\n    public inline function height_of( _string:String, _point_size:Float, _line_spc:Float=0.0 ) : Float {\r\n\r\n        return height_of_lines(_string.split('\\n'), _point_size, _line_spc);\r\n\r\n    } //height_of\r\n\r\n        /** Return the dimensions of a given string, at the specified point size.\r\n            You can also use width_of or height_of, this is a convenience for those */\r\n    public inline function dimensions_of( _string:String, _point_size:Float, _into:Vector, _letter_spc:Float=0.0, _line_spc:Float=0.0 ) : Vector {\r\n\r\n        var _width = width_of(_string, _point_size, _letter_spc);\r\n        var _height = height_of(_string, _point_size, _line_spc);\r\n\r\n        return _into.set_xy( _width, _height );\r\n\r\n    } //dimensions\r\n\r\n        /** Get the height of the given lines with the given metrics. */\r\n    public inline function height_of_lines( _lines:Array<String>, _point_size:Float, _line_spc:Float=0.0 ) : Float {\r\n\r\n        var _ratio = _point_size / info.point_size;\r\n\r\n        return _lines.length * ((info.line_height + _line_spc) * _ratio);\r\n\r\n    } //height_of\r\n\r\n        /** Return the point size at which a line of text will occupy a given pixel height. */\r\n        //:todo: Implement test/usage case\r\n    public inline function line_height_to_point_size( _pixel_height:Float, _line_spc:Float=0.0 ) : Float {\r\n\r\n        return _pixel_height * ( info.point_size / ( info.line_height + _line_spc ) );\r\n\r\n    } //line_height_to_point_size\r\n\r\n//Resource api\r\n\r\n    override function clear() {\r\n\r\n        info = null;\r\n        var _i = 0;\r\n        for(_pageid in pages.keys()) {\r\n            var _page = pages.get(_pageid);\r\n            _page.destroy();\r\n            pages.remove(_pageid);\r\n            _page = null;\r\n        }\r\n\r\n    } //clear\r\n\r\n    override public function reload() {\r\n\r\n        assert(state != ResourceState.destroyed);\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n                //fetch the bitmap font data\r\n            var _font_get = Luxe.snow.assets.text(id);\r\n\r\n            _font_get.then(function(_asset:AssetText) {\r\n\r\n                    //parse the data\r\n                info = BitmapFontParser.parse( _asset.text );\r\n                _asset.destroy();\r\n                _asset = null;\r\n\r\n                assertnull(info);\r\n\r\n                var _tex_get = [];\r\n\r\n                for(_page in info.pages) {\r\n\r\n                    var _path = haxe.io.Path.join([ texture_path, _page.file ]);\r\n                    var _prior = system.texture(_path);\r\n\r\n                    if(_prior != null) {\r\n                        _tex_get.push( _prior.reload() );\r\n                    } else {\r\n                        _tex_get.push( system.load_texture(_path) );\r\n                    }\r\n\r\n                }  //each page\r\n\r\n                Promise.all(_tex_get).then(function(_pages:Array<Texture>){\r\n\r\n                    apply_pages(_pages);\r\n\r\n                    state = ResourceState.loaded;\r\n                    resolve(this);\r\n\r\n                }).error(function(_error){\r\n\r\n                    state = ResourceState.failed;\r\n                    reject(_error);\r\n\r\n                });\r\n\r\n            }).error(function(_error){\r\n\r\n                state = ResourceState.failed;\r\n                reject(_error);\r\n\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n//Internal\r\n\r\n    function apply_pages(_pages:Array<Texture>) {\r\n\r\n        var _pageid : Int = 0;\r\n\r\n        for(_page in _pages) {\r\n            _page.slot = _pageid;\r\n            pages.set(_pageid, _page);\r\n            ++_pageid;\r\n        } //each page\r\n\r\n    } //apply_pages\r\n\r\n    function set_info(_info:BitmapFontData) {\r\n\r\n        info = _info;\r\n\r\n        if(info != null) {\r\n            space_char = info.chars.get(32);\r\n        }\r\n\r\n        return info;\r\n\r\n    } //_info\r\n\r\n    override function toString() {\r\n        return \"BitmapFont(\" + id + \")\";\r\n    }\r\n\r\n} //BitmapFont\r\n\r\n\r\n","package phoenix;\r\n\r\n\r\nimport phoenix.utils.Rendering;\r\nimport snow.modules.opengl.GL;\r\nimport snow.api.buffers.Float32Array;\r\n\r\nimport phoenix.Matrix;\r\n\r\nimport phoenix.Quaternion;\r\nimport phoenix.Rectangle;\r\nimport phoenix.Transform;\r\nimport phoenix.Vector;\r\nimport phoenix.Ray;\r\n\r\nimport luxe.options.CameraOptions;\r\nimport luxe.Log.*;\r\n\r\nenum ProjectionType {\r\n    ortho;\r\n    perspective;\r\n    custom;\r\n}\r\n\r\n\r\nclass Camera {\r\n\r\n    public var name : String = 'camera';\r\n\r\n    @:isVar public var viewport (get,set) : Rectangle;\r\n    @:isVar public var center   (get,set) : Vector;\r\n    @:isVar public var zoom     (default,set) : Float = 1.0;\r\n\r\n    @:isVar public var near     (default,set) : Float = 1000;\r\n    @:isVar public var far      (default,set) : Float = -1000;\r\n        //specific to perspective\r\n    @:isVar public var fov      (default,set) : Float = 60;\r\n    @:isVar public var fov_type (default,set) : FOVType = FOVType.horizontal;\r\n    @:isVar public var aspect   (default,set) : Float = 1.5;\r\n    @:isVar public var target   (default,set) : Vector;\r\n\r\n        //we keep a local pos variable as an unaltered position\r\n        //to keep the center relative to the viewport, and allow setting position as 0,0 not center\r\n    @:isVar public var pos (get,set) : Vector;\r\n        //the other transforms defer directly to the transform so aren't variables\r\n    public var scale (get,set) : Vector;\r\n    public var rotation (get,set) : Quaternion;\r\n    public var transform : Transform;\r\n\r\n    public var cull_backfaces: Bool = false;\r\n    public var depth_test: Bool = false;\r\n\r\n    public var minimum_zoom: Float = 0.01;\r\n    public var projection_matrix: Matrix;\r\n    public var view_matrix: Matrix;\r\n    public var view_matrix_inverse: Matrix;\r\n        //if any, a rotation matrix for the look at rotation\r\n    public var look_at_matrix: Matrix;\r\n\r\n    public var projection: ProjectionType;\r\n\r\n        //:todo: Camera; Exposing wip ortho options\r\n    public var ortho_left   (default, set): Null<Float>;\r\n    public var ortho_right  (default, set): Null<Float>;\r\n    public var ortho_top    (default, set): Null<Float>;\r\n    public var ortho_bottom (default, set): Null<Float>;\r\n\r\n    @:noCompletion public var proj_arr : Float32Array;\r\n    @:noCompletion public var view_inverse_arr : Float32Array;\r\n\r\n        //Internal rendering fov, always vertical\r\n    var fov_y:Float;\r\n        //when the transform changes, the camera needs to refresh the view matrix\r\n    var transform_dirty : Bool = true;\r\n        //when the projection changes we need to update refresh the matrix\r\n    var projection_dirty : Bool = true;\r\n        //when the target changes we can update the look at matrix\r\n    var look_at_dirty : Bool = true;\r\n        //when we are still busy setting up\r\n    var setup_ : Bool = true;\r\n\r\n        //A phoenix camera will default to ortho set to screen size\r\n    public function new( ?_options:CameraOptions ) {\r\n\r\n        transform = new Transform();\r\n        projection_matrix = new Matrix();\r\n        view_matrix = new Matrix();\r\n        view_matrix_inverse = new Matrix();\r\n        look_at_matrix = new Matrix();\r\n\r\n            //order matters here\r\n        def(_options, default_camera_options());\r\n        projection = def(_options.projection, ProjectionType.ortho);\r\n        center = new Vector(Luxe.screen.w/2, Luxe.screen.h/2);\r\n        pos = new Vector();\r\n\r\n        viewport = def(_options.viewport, new Rectangle(0, 0, Luxe.screen.w, Luxe.screen.h));\r\n\r\n        if(_options.camera_name != null) {\r\n            name = _options.camera_name;\r\n        }\r\n\r\n        transform.listen(on_transform_cleaned);\r\n\r\n        switch (projection) {\r\n\r\n            case ProjectionType.ortho:\r\n                set_ortho( _options );\r\n            case ProjectionType.perspective:\r\n                set_perspective( _options );\r\n            case ProjectionType.custom:\r\n\r\n        }\r\n\r\n        process();\r\n\r\n        setup_ = false;\r\n\r\n    } //new\r\n\r\n\r\n//Public API\r\n\r\n\r\n    public function set_ortho( _options:CameraOptions ) {\r\n\r\n        projection = ProjectionType.ortho;\r\n\r\n        _merge_options( _options );\r\n\r\n    } //set_ortho\r\n\r\n    public function set_perspective( _options:CameraOptions ) {\r\n\r\n        projection = ProjectionType.perspective;\r\n\r\n        _merge_options( _options );\r\n\r\n        transform.origin.set_xyz(0,0,0);\r\n\r\n    } //set_perspective\r\n\r\n    public function project( _vector:Vector ) {\r\n\r\n        update_matrices();\r\n\r\n        var _transform = new Matrix().multiplyMatrices( projection_matrix, view_matrix_inverse );\r\n        return _vector.clone().applyProjection( _transform );\r\n\r\n    } //project\r\n\r\n    public function unproject( _vector:Vector ) {\r\n\r\n        update_matrices();\r\n\r\n        var _inverted = new Matrix().multiplyMatrices( projection_matrix, view_matrix_inverse );\r\n        return _vector.clone().applyProjection( _inverted.getInverse(_inverted) );\r\n\r\n    } //unproject\r\n\r\n    public function screen_point_to_ray( _vector:Vector ) : Ray {\r\n\r\n        return new Ray( _vector, this );\r\n\r\n    } //screen_point_as_ray\r\n\r\n    public function screen_point_to_world( _vector:Vector ) : Vector {\r\n\r\n        if( projection == ProjectionType.ortho ) {\r\n            return ortho_screen_to_world(_vector);\r\n        } else if( projection == ProjectionType.perspective ){\r\n            return screen_point_to_ray( _vector ).end;\r\n        }\r\n\r\n            //given the default is ortho, for now\r\n        return ortho_screen_to_world(_vector);\r\n\r\n    } //screen_point_to_world\r\n\r\n    public function world_point_to_screen( _vector:Vector, ?_viewport:Rectangle=null ) : Vector {\r\n\r\n        if( projection == ProjectionType.ortho ) {\r\n            return ortho_world_to_screen( _vector );\r\n        } else if( projection == ProjectionType.perspective ) {\r\n            return persepective_world_to_screen(_vector, _viewport);\r\n        }\r\n\r\n            //given the default is ortho, for now\r\n        return ortho_world_to_screen( _vector );\r\n\r\n    } //world_point_to_screen\r\n\r\n\r\n//Internal API\r\n\r\n    @:noCompletion\r\n    public function process() {\r\n\r\n        update_matrices();\r\n\r\n            //apply states\r\n        apply_state(GL.CULL_FACE, cull_backfaces);\r\n        apply_state(GL.DEPTH_TEST, depth_test);\r\n\r\n    } //process\r\n\r\n//Transforms\r\n\r\n    inline function update_matrices() {\r\n            \r\n            //If we have a target, override the rotation\r\n            //before we update the matrix, so it can be applied immediately if changing\r\n        if(target != null) update_look_at();\r\n        \r\n            //update transforms and projection\r\n        update_projection_matrix();\r\n        update_view_matrix();\r\n\r\n    } //update_matrices\r\n\r\n\r\n    inline function on_transform_cleaned( t:Transform ) {\r\n\r\n        transform_dirty = true;\r\n\r\n    } //on_transform_cleaned\r\n\r\n    var up_: Vector = new Vector(0,1,0);\r\n    function update_look_at() {\r\n\r\n        if(look_at_dirty && target != null) {\r\n\r\n            look_at_matrix.lookAt( target, pos, up_ );\r\n\r\n            rotation.setFromRotationMatrix( look_at_matrix );\r\n\r\n        } //dirty & !null\r\n\r\n    } //update_look_at\r\n\r\n    function update_view_matrix() {\r\n\r\n        view_matrix = transform.world.matrix;\r\n\r\n        if(!transform_dirty) {\r\n            return;\r\n        }\r\n\r\n        view_matrix_inverse = view_matrix.inverse();\r\n        view_inverse_arr = view_matrix_inverse.float32array();\r\n\r\n        transform_dirty = false;\r\n\r\n    } //update_view_matrix\r\n\r\n    function update_projection_matrix() {\r\n\r\n        if(!projection_dirty) {\r\n            return;\r\n        }\r\n\r\n        switch(projection) {\r\n\r\n            case ProjectionType.custom:\r\n                //\r\n\r\n            case ProjectionType.perspective:\r\n                projection_matrix.makePerspective( fov_y, aspect, near, far );\r\n\r\n            case ProjectionType.ortho:\r\n\r\n                var _l = 0.0;\r\n                var _t = 0.0;\r\n                var _r = viewport.w;\r\n                var _b = viewport.h;\r\n\r\n                if(ortho_left   != null) _l = ortho_left;\r\n                if(ortho_right  != null) _r = ortho_right;\r\n                if(ortho_top    != null) _t = ortho_top;\r\n                if(ortho_bottom != null) _b = ortho_bottom;\r\n\r\n                projection_matrix.makeOrthographic(_l, _r, _t, _b, near, far);\r\n\r\n        } //switch\r\n\r\n        proj_arr = projection_matrix.float32array();\r\n\r\n        projection_dirty = false;\r\n\r\n    } //update_projection_matrix\r\n\r\n\r\n//Helpers\r\n\r\n\r\n    inline function apply_state(state:Int, value:Bool) {\r\n\r\n        if(value) {\r\n            Luxe.renderer.state.enable(state);\r\n        } else {\r\n            Luxe.renderer.state.disable(state);\r\n        }\r\n\r\n    } //apply_state\r\n\r\n    inline function apply_default_camera_options() {\r\n\r\n        switch (projection) {\r\n\r\n            case ProjectionType.ortho: {\r\n\r\n                cull_backfaces = false;\r\n                depth_test = false;\r\n\r\n            } //ortho\r\n\r\n            case ProjectionType.perspective: {\r\n\r\n                cull_backfaces = true;\r\n                depth_test = true;\r\n\r\n            } //perspective\r\n\r\n            case ProjectionType.custom: {}\r\n\r\n        } //switch\r\n\r\n    } //apply_default_camera_options\r\n\r\n    inline function default_camera_options() : CameraOptions {\r\n\r\n        return {\r\n            projection : ProjectionType.ortho,\r\n            depth_test : false,\r\n            cull_backfaces : false,\r\n            near : 1000,\r\n            far: -1000\r\n        };\r\n\r\n    } //default_camera_options\r\n\r\n\r\n//Conversions\r\n\r\n    inline function ortho_screen_to_world( _vector:Vector ) : Vector {\r\n\r\n        update_matrices();\r\n\r\n        return _vector.clone().transform(view_matrix);\r\n\r\n    } //ortho_screen_to_world\r\n\r\n    inline function ortho_world_to_screen( _vector:Vector ) : Vector {\r\n\r\n        update_matrices();\r\n\r\n        return _vector.clone().transform( view_matrix_inverse );\r\n\r\n    } //ortho_world_to_screen\r\n\r\n    inline function persepective_world_to_screen( _vector:Vector, ?_viewport:Rectangle=null ) {\r\n\r\n        def(_viewport, viewport);\r\n\r\n        var _projected = project( _vector );\r\n\r\n        var width_half = _viewport.w/2;\r\n        var height_half = _viewport.h/2;\r\n\r\n        return new Vector(\r\n             ( _projected.x * width_half ) + width_half,\r\n            -( _projected.y * height_half ) + height_half\r\n        );\r\n\r\n    } //persepective_world_point_to_screen\r\n\r\n\r\n//Properties\r\n\r\n    inline function set_target( _target:Vector ) : Vector {\r\n\r\n        if(_target != null) {\r\n            look_at_dirty = true;\r\n        }\r\n\r\n        return target = _target;\r\n\r\n    } //set_target\r\n\r\n    inline function set_fov( _fov:Float ) : Float {\r\n\r\n        projection_dirty = true;\r\n\r\n        if (fov_type == FOVType.horizontal) {\r\n            fov_y = Rendering.fovx_to_y(_fov, aspect);\r\n        } else {\r\n            fov_y = _fov;\r\n        }\r\n\r\n        return fov = _fov;\r\n\r\n    } //set_fov\r\n\r\n    inline function set_fov_type(_fov_type:FOVType) : FOVType {\r\n\r\n        fov_type = _fov_type;\r\n            //trigger fov_y update\r\n        set_fov(fov);\r\n\r\n        return fov_type;\r\n\r\n    } //set_fov_type\r\n\r\n    inline function set_aspect( _aspect:Float ) : Float {\r\n\r\n        projection_dirty = true;\r\n\r\n        aspect = _aspect;\r\n\r\n            //trigger fov_y update,\r\n            //since if using horizontal fov, \r\n            //the aspect ratio factors in\r\n        set_fov(fov);\r\n\r\n        return aspect;\r\n\r\n    } //set_aspect\r\n\r\n    inline function set_near( _near:Float ) : Float {\r\n\r\n        projection_dirty = true;\r\n\r\n        return near = _near;\r\n\r\n    } //set_near\r\n\r\n    inline function set_far( _far:Float ) : Float {\r\n\r\n        projection_dirty = true;\r\n\r\n        return far = _far;\r\n\r\n    } //set_far\r\n\r\n    inline function set_ortho_left( _val:Null<Float> ) : Null<Float> {\r\n\r\n        projection_dirty = true;\r\n\r\n        return ortho_left = _val;\r\n\r\n    } //set_ortho_left\r\n\r\n    inline function set_ortho_right( _val:Null<Float> ) : Null<Float> {\r\n\r\n        projection_dirty = true;\r\n\r\n        return ortho_right = _val;\r\n\r\n    } //set_ortho_right\r\n\r\n    inline function set_ortho_top( _val:Null<Float> ) : Null<Float> {\r\n\r\n        projection_dirty = true;\r\n\r\n        return ortho_top = _val;\r\n\r\n    } //set_ortho_top\r\n\r\n    inline function set_ortho_bottom( _val:Null<Float> ) : Null<Float> {\r\n\r\n        projection_dirty = true;\r\n\r\n        return ortho_bottom = _val;\r\n\r\n    } //set_ortho_bottom\r\n\r\n        //0.5 = smaller , 2 = bigger\r\n    function set_zoom( _z:Float ) : Float {\r\n\r\n        var _new_zoom = _z;\r\n\r\n            //new zoom value shouldn't be allowed beyond a minimum\r\n            //but maybe this should be optional if you want negative zoom?\r\n        if(_new_zoom < minimum_zoom) {\r\n            _new_zoom = minimum_zoom;\r\n        }\r\n\r\n        switch(projection) {\r\n\r\n            case ProjectionType.ortho:\r\n\r\n                    //scale the visual view based on the value\r\n                transform.scale.x = 1/_new_zoom;\r\n                transform.scale.y = 1/_new_zoom;\r\n                transform.scale.z = 1/_new_zoom;\r\n\r\n            case ProjectionType.perspective: {\r\n\r\n                // :todo: Camera; nothing happens when zooming perspective\r\n\r\n            }\r\n\r\n            case ProjectionType.custom: {\r\n\r\n            }\r\n\r\n        } //switch projection\r\n\r\n            //return the real value\r\n        return zoom = _new_zoom;\r\n\r\n    } //set_zoom\r\n\r\n    var refresh_pos_ : Bool = false;\r\n    function set_center( _p:Vector ) : Vector {\r\n\r\n        center = _p;\r\n\r\n        switch(projection) {\r\n\r\n            case ProjectionType.ortho:\r\n\r\n                if(!refresh_pos_ && !setup_) {\r\n                        //setting the center is the same as setting\r\n                        //the position relative to the viewport\r\n                    pos.ignore_listeners = true;\r\n                        pos.x = _p.x - (viewport.w/2);\r\n                        pos.y = _p.y - (viewport.h/2);\r\n                    pos.ignore_listeners = false;\r\n\r\n                    transform.pos.copy_from(_p);\r\n\r\n                } //!refresh_pos_ && !setup_\r\n\r\n            case ProjectionType.perspective: {}\r\n\r\n            case ProjectionType.custom: {}\r\n\r\n        } //switch projection\r\n\r\n        Vector.Listen(center, _center_changed);\r\n\r\n        return center;\r\n\r\n    } //set_center\r\n\r\n    inline function get_center() : Vector {\r\n\r\n        return center;\r\n\r\n    } //get_center\r\n\r\n    inline function get_pos() : Vector {\r\n\r\n        return pos;\r\n\r\n    } //get_pos\r\n\r\n    inline function get_rotation() : Quaternion {\r\n\r\n        return transform.rotation;\r\n\r\n    } //get_rotation\r\n\r\n    inline function get_scale() : Vector {\r\n\r\n        return transform.scale;\r\n\r\n    } //get_scale\r\n\r\n    inline function get_viewport() : Rectangle {\r\n\r\n        return viewport;\r\n\r\n    } //get_viewport\r\n\r\n    function set_viewport(_r:Rectangle) : Rectangle {\r\n\r\n        projection_dirty = true;\r\n\r\n        viewport = _r;\r\n\r\n        switch(projection) {\r\n\r\n            case ProjectionType.ortho:\r\n\r\n                    //update the actual origin center of transform\r\n                transform.origin = new Vector( _r.w/2, _r.h/2 );\r\n                    //refresh the position and center etc\r\n                set_pos(pos);\r\n\r\n            case ProjectionType.perspective: {}\r\n\r\n            case ProjectionType.custom: {}\r\n\r\n        } //switch projection\r\n\r\n\r\n        return viewport;\r\n\r\n    } //set_viewport\r\n\r\n    inline function set_rotation( _q:Quaternion ) : Quaternion {\r\n\r\n        return transform.rotation = _q;\r\n\r\n    } //set_rotation\r\n\r\n    inline function set_scale( _s:Vector ) : Vector {\r\n\r\n        return transform.scale = _s;\r\n\r\n    } //set_scale\r\n\r\n    function set_pos( _p:Vector ) : Vector {\r\n\r\n        pos = _p;\r\n\r\n        switch(projection) {\r\n\r\n            case ProjectionType.ortho:\r\n\r\n            var _cx = center.x;\r\n            var _cy = center.y;\r\n\r\n            if(viewport != null) {\r\n                _cx = _p.x + (viewport.w/2);\r\n                _cy = _p.y + (viewport.h/2);\r\n            }\r\n\r\n                refresh_pos_ = true;\r\n                    center.ignore_listeners = true;\r\n                        center.x = _cx;\r\n                        center.y = _cy;\r\n                    center.ignore_listeners = false;\r\n                refresh_pos_ = false;\r\n\r\n                transform.pos.x = _cx;\r\n                transform.pos.y = _cy;\r\n\r\n            case ProjectionType.perspective:\r\n\r\n                transform.pos = pos;\r\n\r\n            case ProjectionType.custom: {}\r\n\r\n        } //switch projection\r\n\r\n        Vector.Listen(pos, _pos_changed);\r\n\r\n        return pos;\r\n\r\n    } //set_pos\r\n\r\n    inline function _merge_options( _o:CameraOptions ) {\r\n\r\n            //start at defaults for the type\r\n        apply_default_camera_options();\r\n\r\n        if(_o.aspect != null) aspect = _o.aspect;\r\n        if(_o.far    != null) far    = _o.far;\r\n        if(_o.fov    != null) fov    = _o.fov;\r\n        if(_o.near   != null) near   = _o.near;\r\n\r\n        if(_o.viewport       != null) viewport       = _o.viewport;\r\n        if(_o.cull_backfaces != null) cull_backfaces = _o.cull_backfaces;\r\n        if(_o.depth_test     != null) depth_test     = _o.depth_test;\r\n\r\n            //for type, re-apply default, makes sure fov_y is correct\r\n        if (_o.fov_type != null) {\r\n            fov_type = _o.fov_type;\r\n        } else {\r\n            fov_type = FOVType.horizontal;\r\n        }\r\n\r\n    } //_merge_options\r\n\r\n    inline function _pos_changed(v:Float) {\r\n\r\n        set_pos(pos);\r\n\r\n    } //_pos_changed\r\n\r\n    inline function _center_changed(v:Float) {\r\n\r\n        set_center(center);\r\n\r\n    } //_center_changed\r\n\r\n} //Camera\r\n\r\nenum FOVType {\r\n    vertical;\r\n    horizontal;\r\n} //FOVType\r\n","package phoenix;\r\n\r\nimport phoenix.Vector;\r\nimport phoenix.Quaternion;\r\nimport luxe.utils.Maths;\r\nimport snow.api.buffers.Float32Array;\r\n\r\n    //Ported from Three.js https://github.com/mrdoob/three.js\r\n\r\nclass MatrixTransform {\r\n\r\n    public var pos : Vector;\r\n    public var rotation : Quaternion;\r\n    public var scale : Vector;\r\n\r\n    public inline function new(p, r, s) {\r\n        pos = p;\r\n        rotation = r;\r\n        scale = s;\r\n    }\r\n\r\n    inline function destroy() {\r\n        pos = null; rotation = null; scale = null;\r\n    }\r\n\r\n} //MatrixTransform\r\n\r\nclass Matrix {\r\n\r\n    public var elements:Array<Float>;\r\n    var _float32array : snow.api.buffers.Float32Array;\r\n\r\n    public var M11 (get,set) : Float;\r\n    public var M21 (get,set) : Float;\r\n    public var M31 (get,set) : Float;\r\n    public var M41 (get,set) : Float;\r\n\r\n    public var M12 (get,set) : Float;\r\n    public var M22 (get,set) : Float;\r\n    public var M32 (get,set) : Float;\r\n    public var M42 (get,set) : Float;\r\n\r\n    public var M13 (get,set) : Float;\r\n    public var M23 (get,set) : Float;\r\n    public var M33 (get,set) : Float;\r\n    public var M43 (get,set) : Float;\r\n\r\n    public var M14 (get,set) : Float;\r\n    public var M24 (get,set) : Float;\r\n    public var M34 (get,set) : Float;\r\n    public var M44 (get,set) : Float;\r\n\r\n    public inline function new(\r\n        n11:Float = 1, n12:Float = 0, n13:Float = 0, n14:Float = 0,\r\n        n21:Float = 0, n22:Float = 1, n23:Float = 0, n24:Float = 0,\r\n        n31:Float = 0, n32:Float = 0, n33:Float = 1, n34:Float = 0,\r\n        n41:Float = 0, n42:Float = 0, n43:Float = 0, n44:Float = 1)\r\n    {\r\n        elements = [];\r\n\r\n        var i = 0;\r\n        while (i++ < 16) {\r\n            elements.push(0.0);\r\n        }\r\n\r\n        set(\r\n            n11, n12, n13, n14,\r\n            n21, n22, n23, n24,\r\n            n31, n32, n33, n34,\r\n            n41, n42, n43, n44\r\n        );\r\n\r\n        _float32array = Float32Array.fromArray( elements );\r\n\r\n    }\r\n\r\n\r\n    public inline function set(\r\n        n11:Float, n12:Float, n13:Float, n14:Float,\r\n        n21:Float, n22:Float, n23:Float, n24:Float,\r\n        n31:Float, n32:Float, n33:Float, n34:Float,\r\n        n41:Float, n42:Float, n43:Float, n44:Float) : Matrix\r\n    {\r\n\r\n        var e = elements;\r\n\r\n            e[0] = n11; e[4] = n12; e[8]  = n13; e[12] = n14;\r\n            e[1] = n21; e[5] = n22; e[9]  = n23; e[13] = n24;\r\n            e[2] = n31; e[6] = n32; e[10] = n33; e[14] = n34;\r\n            e[3] = n41; e[7] = n42; e[11] = n43; e[15] = n44;\r\n\r\n        return this;\r\n    }\r\n\r\n    inline function toString() {\r\n        var e = elements;\r\n        var str = '{ 11:' + Maths.fixed(e[0], 3) + ', 12:' + Maths.fixed(e[4], 3)  + ', 13:' + Maths.fixed(e[ 8], 3)  + ', 14:' + Maths.fixed(e[12], 3) + ' }, ' +\r\n                  '{ 21:' + Maths.fixed(e[1], 3) + ', 22:' + Maths.fixed(e[5], 3)  + ', 23:' + Maths.fixed(e[ 9], 3)  + ', 24:' + Maths.fixed(e[13], 3) + ' }, ' +\r\n                  '{ 31:' + Maths.fixed(e[2], 3) + ', 32:' + Maths.fixed(e[6], 3)  + ', 33:' + Maths.fixed(e[10], 3)  + ', 34:' + Maths.fixed(e[14], 3) + ' }, ' +\r\n                  '{ 41:' + Maths.fixed(e[3], 3) + ', 42:' + Maths.fixed(e[7], 3)  + ', 43:' + Maths.fixed(e[11], 3)  + ', 44:' + Maths.fixed(e[15], 3) + ' }';\r\n        return str;\r\n    }\r\n    \r\n    inline function get_M11() : Float { return elements[0]; }\r\n    inline function get_M21() : Float { return elements[1]; }\r\n    inline function get_M31() : Float { return elements[2]; }\r\n    inline function get_M41() : Float { return elements[3]; }\r\n\r\n    inline function get_M12() : Float { return elements[4]; }\r\n    inline function get_M22() : Float { return elements[5]; }\r\n    inline function get_M32() : Float { return elements[6]; }\r\n    inline function get_M42() : Float { return elements[7]; }\r\n    \r\n    inline function get_M13() : Float { return elements[8]; }\r\n    inline function get_M23() : Float { return elements[9]; }\r\n    inline function get_M33() : Float { return elements[10]; }\r\n    inline function get_M43() : Float { return elements[11]; }\r\n\r\n    inline function get_M14() : Float { return elements[12]; }\r\n    inline function get_M24() : Float { return elements[13]; }\r\n    inline function get_M34() : Float { return elements[14]; }\r\n    inline function get_M44() : Float { return elements[15]; }\r\n\r\n    inline function set_M11(_v:Float) : Float { elements[0] = _v; return _v; }\r\n    inline function set_M21(_v:Float) : Float { elements[1] = _v; return _v; }\r\n    inline function set_M31(_v:Float) : Float { elements[2] = _v; return _v; }\r\n    inline function set_M41(_v:Float) : Float { elements[3] = _v; return _v; }\r\n\r\n    inline function set_M12(_v:Float) : Float { elements[4] = _v; return _v; }\r\n    inline function set_M22(_v:Float) : Float { elements[5] = _v; return _v; }\r\n    inline function set_M32(_v:Float) : Float { elements[6] = _v; return _v; }\r\n    inline function set_M42(_v:Float) : Float { elements[7] = _v; return _v; }\r\n\r\n    inline function set_M13(_v:Float) : Float { elements[8] = _v; return _v; }\r\n    inline function set_M23(_v:Float) : Float { elements[9] = _v; return _v; }\r\n    inline function set_M33(_v:Float) : Float { elements[10] = _v; return _v; }\r\n    inline function set_M43(_v:Float) : Float { elements[11] = _v; return _v; }\r\n\r\n    inline function set_M14(_v:Float) : Float { elements[12] = _v; return _v; }\r\n    inline function set_M24(_v:Float) : Float { elements[13] = _v; return _v; }\r\n    inline function set_M34(_v:Float) : Float { elements[14] = _v; return _v; }\r\n    inline function set_M44(_v:Float) : Float { elements[15] = _v; return _v; }\r\n\r\n    public inline function float32array() : snow.api.buffers.Float32Array {\r\n\r\n        var i = 0;\r\n\r\n        while(i < 16) {\r\n            _float32array[i] = elements[i];\r\n            ++i;\r\n        }\r\n\r\n        return _float32array;\r\n\r\n    } //float32array\r\n\r\n    public inline function identity () : Matrix {\r\n\r\n            set(\r\n                1, 0, 0, 0,\r\n                0, 1, 0, 0,\r\n                0, 0, 1, 0,\r\n                0, 0, 0, 1\r\n            );\r\n\r\n        return this;\r\n\r\n    } //identity\r\n\r\n\r\n    public inline function copy( m:Matrix ) : Matrix {\r\n\r\n        var me = m.elements;\r\n\r\n            set(\r\n                me[0], me[4], me[8],  me[12],\r\n                me[1], me[5], me[9],  me[13],\r\n                me[2], me[6], me[10], me[14],\r\n                me[3], me[7], me[11], me[15]\r\n            );\r\n\r\n        return this;\r\n    }\r\n\r\n    public inline function make2D( _x:Float, _y:Float, _scale:Float = 1, _rotation:Float = 0 ) {\r\n\r\n        var theta = Maths.radians(_rotation);\r\n        var c = Math.cos(theta);\r\n        var s = Math.sin(theta);\r\n\r\n        set(\r\n             c * _scale,  s *_scale,  0,  _x,\r\n            -s * _scale,  c *_scale,  0,  _y,\r\n                      0,          0,  1,   0,\r\n                      0,          0,  0,   1\r\n        );\r\n\r\n        return this;\r\n   }\r\n\r\n\r\n    public inline function copyPosition( m:Matrix ) : Matrix {\r\n\r\n        elements[12] = m.elements[12];\r\n        elements[13] = m.elements[13];\r\n        elements[14] = m.elements[14];\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    public inline function getPosition() : Vector {\r\n        return new Vector(elements[12], elements[13], elements[14],1);\r\n    }\r\n\r\n    public inline function extractRotation( m:Matrix ) : Matrix {\r\n\r\n        var _temp = new Vector();\r\n        var me = m.elements;\r\n\r\n        var _scale_x = 1 / _temp.set_xyz( me[0], me[1], me[2]  ).length;\r\n        var _scale_y = 1 / _temp.set_xyz( me[4], me[5], me[6]  ).length;\r\n        var _scale_z = 1 / _temp.set_xyz( me[8], me[9], me[10] ).length;\r\n\r\n        elements[0] =  me[0]  * _scale_x;\r\n        elements[1] =  me[1]  * _scale_x;\r\n        elements[2] =  me[2]  * _scale_x;\r\n\r\n        elements[4] =  me[4]  * _scale_y;\r\n        elements[5] =  me[5]  * _scale_y;\r\n        elements[6] =  me[6]  * _scale_y;\r\n\r\n        elements[8] =  me[8]  * _scale_z;\r\n        elements[9] =  me[9]  * _scale_z;\r\n        elements[10] = me[10] * _scale_z;\r\n\r\n        return this;\r\n    }\r\n\r\n    public inline function makeRotationFromEuler( _v:Vector, _order:ComponentOrder = XYZ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n        var x = _v.x;\r\n        var y = _v.y;\r\n        var z = _v.z;\r\n\r\n        var a = Math.cos( x ), b = Math.sin( x );\r\n        var c = Math.cos( y ), d = Math.sin( y );\r\n        var e = Math.cos( z ), f = Math.sin( z );\r\n\r\n        if ( _order == XYZ ) {\r\n\r\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n            te[0] = c * e;\r\n            te[4] = - c * f;\r\n            te[8] = d;\r\n\r\n            te[1] = af + be * d;\r\n            te[5] = ae - bf * d;\r\n            te[9] = - b * c;\r\n\r\n            te[2] = bf - ae * d;\r\n            te[6] = be + af * d;\r\n            te[10] = a * c;\r\n\r\n        } else if ( _order == YXZ ) {\r\n\r\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n            te[0] = ce + df * b;\r\n            te[4] = de * b - cf;\r\n            te[8] = a * d;\r\n\r\n            te[1] = a * f;\r\n            te[5] = a * e;\r\n            te[9] = - b;\r\n\r\n            te[2] = cf * b - de;\r\n            te[6] = df + ce * b;\r\n            te[10] = a * c;\r\n\r\n        } else if ( _order == ZXY ) {\r\n\r\n            var ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n            te[0] = ce - df * b;\r\n            te[4] = - a * f;\r\n            te[8] = de + cf * b;\r\n\r\n            te[1] = cf + de * b;\r\n            te[5] = a * e;\r\n            te[9] = df - ce * b;\r\n\r\n            te[2] = - a * d;\r\n            te[6] = b;\r\n            te[10] = a * c;\r\n\r\n        } else if ( _order == ZYX ) {\r\n\r\n            var ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n            te[0] = c * e;\r\n            te[4] = be * d - af;\r\n            te[8] = ae * d + bf;\r\n\r\n            te[1] = c * f;\r\n            te[5] = bf * d + ae;\r\n            te[9] = af * d - be;\r\n\r\n            te[2] = - d;\r\n            te[6] = b * c;\r\n            te[10] = a * c;\r\n\r\n        } else if ( _order == YZX ) {\r\n\r\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n            te[0] = c * e;\r\n            te[4] = bd - ac * f;\r\n            te[8] = bc * f + ad;\r\n\r\n            te[1] = f;\r\n            te[5] = a * e;\r\n            te[9] = - b * e;\r\n\r\n            te[2] = - d * e;\r\n            te[6] = ad * f + bc;\r\n            te[10] = ac - bd * f;\r\n\r\n        } else if ( _order == XZY ) {\r\n\r\n            var ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n            te[0] = c * e;\r\n            te[4] = - f;\r\n            te[8] = d * e;\r\n\r\n            te[1] = ac * f + bd;\r\n            te[5] = a * e;\r\n            te[9] = ad * f - bc;\r\n\r\n            te[2] = bc * f - ad;\r\n            te[6] = b * e;\r\n            te[10] = bd * f + ac;\r\n\r\n        }\r\n\r\n        // last column\r\n        te[3] = 0;\r\n        te[7] = 0;\r\n        te[11] = 0;\r\n\r\n        // bottom row\r\n        te[12] = 0;\r\n        te[13] = 0;\r\n        te[14] = 0;\r\n        te[15] = 1;\r\n\r\n        return this;\r\n\r\n    } //makeRotationFromEuler\r\n\r\n    public inline function makeRotationFromQuaternion( q:Quaternion ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n        var x2 = q.x + q.x, y2 = q.y + q.y, z2 = q.z + q.z;\r\n        var xx = q.x * x2,  xy = q.x * y2,  xz = q.x * z2;\r\n        var yy = q.y * y2,  yz = q.y * z2,  zz = q.z * z2;\r\n        var wx = q.w * x2,  wy = q.w * y2,  wz = q.w * z2;\r\n\r\n        te[0] = 1 - ( yy + zz );\r\n        te[4] = xy - wz;\r\n        te[8] = xz + wy;\r\n\r\n        te[1] = xy + wz;\r\n        te[5] = 1 - ( xx + zz );\r\n        te[9] = yz - wx;\r\n\r\n        te[2] = xz - wy;\r\n        te[6] = yz + wx;\r\n        te[10] = 1 - ( xx + yy );\r\n\r\n            // last column\r\n        te[3] = 0;\r\n        te[7] = 0;\r\n        te[11] = 0;\r\n\r\n            // bottom row\r\n        te[12] = 0;\r\n        te[13] = 0;\r\n        te[14] = 0;\r\n        te[15] = 1;\r\n\r\n        return this;\r\n\r\n    } //makeRotationFromQuaternion\r\n\r\n\r\n    public inline function lookAt( _eye:Vector, _target:Vector, _up:Vector ) : Matrix {\r\n\r\n        var _x = new Vector();\r\n        var _y = new Vector();\r\n        var _z = new Vector();\r\n\r\n        var te = elements;\r\n\r\n        _z = Vector.Subtract( _target, _eye ).normalized;\r\n\r\n            if ( _z.length == 0 ) {\r\n                _z.z = 1;\r\n            }\r\n\r\n        _x = Vector.Cross( _up, _z ).normalized;\r\n\r\n            if ( _x.length == 0 ) {\r\n                _z.x += 0.0001;\r\n                _x = Vector.Cross( _up, _z ).normalized;\r\n            }\r\n\r\n        _y = Vector.Cross( _z, _x );\r\n\r\n        te[0] = _x.x; te[4] = _y.x; te[8]  = _z.x;\r\n        te[1] = _x.y; te[5] = _y.y; te[9]  = _z.y;\r\n        te[2] = _x.z; te[6] = _y.z; te[10] = _z.z;\r\n\r\n        return this;\r\n\r\n    } //lookAt\r\n\r\n\r\n    public inline function multiply( _m:Matrix ) : Matrix {\r\n\r\n        return multiplyMatrices(this, _m);\r\n\r\n    } //multiply\r\n\r\n\r\n    public inline function multiplyMatrices( _a:Matrix, _b:Matrix ) : Matrix {\r\n\r\n        var ae = _a.elements;\r\n        var be = _b.elements;\r\n        var te = elements;\r\n\r\n        var a11 = ae[0], a12 = ae[4], a13 = ae[8],  a14 = ae[12];\r\n        var a21 = ae[1], a22 = ae[5], a23 = ae[9],  a24 = ae[13];\r\n        var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];\r\n        var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];\r\n\r\n        var b11 = be[0], b12 = be[4], b13 = be[8],  b14 = be[12];\r\n        var b21 = be[1], b22 = be[5], b23 = be[9],  b24 = be[13];\r\n        var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];\r\n        var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];\r\n\r\n            te[0] =  a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n            te[4] =  a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n            te[8] =  a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n            te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n            te[1] =  a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n            te[5] =  a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n            te[9] =  a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n            te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n            te[2] =  a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n            te[6] =  a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n            te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n            te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n            te[3] =  a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n            te[7] =  a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n            te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n            te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n        return this;\r\n\r\n    } //multiplyMatrices\r\n\r\n\r\n    public inline function multiplyToArray( _a:Matrix, _b:Matrix, _r:Array<Float> ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n            multiplyMatrices(_a, _b);\r\n\r\n            _r[0]  = te[0];   _r[1]  = te[1];   _r[2]  = te[2];  _r[3]  = te[3];\r\n            _r[4]  = te[4];   _r[5]  = te[5];   _r[6]  = te[6];  _r[7]  = te[7];\r\n            _r[8]  = te[8];   _r[9]  = te[9];   _r[10] = te[10]; _r[11] = te[11];\r\n            _r[12] = te[12];  _r[13] = te[13];  _r[14] = te[14]; _r[15] = te[15];\r\n\r\n        return this;\r\n\r\n    } //multiplyToArray\r\n\r\n\r\n    public inline function multiplyScalar( _s:Float ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n            te[0] *= _s; te[4] *= _s; te[8]  *= _s; te[12] *= _s;\r\n            te[1] *= _s; te[5] *= _s; te[9]  *= _s; te[13] *= _s;\r\n            te[2] *= _s; te[6] *= _s; te[10] *= _s; te[14] *= _s;\r\n            te[3] *= _s; te[7] *= _s; te[11] *= _s; te[15] *= _s;\r\n\r\n        return this;\r\n\r\n    } //multiplyScalar\r\n\r\n\r\n    public inline function multiplyVector3Array( _a:Array<Float> ) : Array<Float> {\r\n\r\n        var v1 = new Vector();\r\n        var i = 0;\r\n        var il = _a.length;\r\n\r\n        while (i < il) {\r\n\r\n            v1.x = _a[i + 0];\r\n            v1.y = _a[i + 1];\r\n            v1.z = _a[i + 2];\r\n\r\n            v1.applyProjection( this );\r\n\r\n            _a[i + 0] = v1.x;\r\n            _a[i + 1] = v1.y;\r\n            _a[i + 2] = v1.z;\r\n\r\n            i += 3;\r\n\r\n        }\r\n\r\n        return _a;\r\n\r\n    } //multiplyVector3Array\r\n\r\n    public inline function determinant() : Float {\r\n\r\n        var te = elements;\r\n\r\n        var n11 = te[0], n12 = te[4], n13 = te[8],  n14 = te[12];\r\n        var n21 = te[1], n22 = te[5], n23 = te[9],  n24 = te[13];\r\n        var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];\r\n        var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];\r\n\r\n        return (\r\n            n41 * (\r\n                 n14 * n23 * n32\r\n                -n13 * n24 * n32\r\n                -n14 * n22 * n33\r\n                +n12 * n24 * n33\r\n                +n13 * n22 * n34\r\n                -n12 * n23 * n34\r\n            ) +\r\n            n42 * (\r\n                 n11 * n23 * n34\r\n                -n11 * n24 * n33\r\n                +n14 * n21 * n33\r\n                -n13 * n21 * n34\r\n                +n13 * n24 * n31\r\n                -n14 * n23 * n31\r\n            ) +\r\n            n43 * (\r\n                 n11 * n24 * n32\r\n                -n11 * n22 * n34\r\n                -n14 * n21 * n32\r\n                +n12 * n21 * n34\r\n                +n14 * n22 * n31\r\n                -n12 * n24 * n31\r\n            ) +\r\n            n44 * (\r\n                -n13 * n22 * n31\r\n                -n11 * n23 * n32\r\n                +n11 * n22 * n33\r\n                +n13 * n21 * n32\r\n                -n12 * n21 * n33\r\n                +n12 * n23 * n31\r\n            )\r\n        );\r\n    } //determinant\r\n\r\n    public inline function transpose() : Matrix {\r\n\r\n        var te = elements;\r\n        var tmp:Float;\r\n\r\n        tmp = te[1]; te[1] = te[4]; te[4] = tmp;\r\n        tmp = te[2]; te[2] = te[8]; te[8] = tmp;\r\n        tmp = te[6]; te[6] = te[9]; te[9] = tmp;\r\n\r\n        tmp = te[3];  te[3]  = te[12]; te[12] = tmp;\r\n        tmp = te[7];  te[7]  = te[13]; te[13] = tmp;\r\n        tmp = te[11]; te[11] = te[14]; te[14] = tmp;\r\n\r\n        return this;\r\n\r\n    } //transpose\r\n\r\n    public inline function flattenToArray( _flat:Array<Float> = null ) : Array<Float> {\r\n\r\n        if (_flat == null) {\r\n            _flat = [];\r\n            for(i in 0 ... 16) _flat.push( 0.0 );\r\n        }\r\n\r\n        var te = elements;\r\n\r\n            _flat[ 0 ]  = te[0];  _flat[ 1 ]  = te[1];  _flat[ 2 ]  = te[2];  _flat[ 3 ]  = te[3];\r\n            _flat[ 4 ]  = te[4];  _flat[ 5 ]  = te[5];  _flat[ 6 ]  = te[6];  _flat[ 7 ]  = te[7];\r\n            _flat[ 8 ]  = te[8];  _flat[ 9 ]  = te[9];  _flat[ 10 ] = te[10]; _flat[ 11 ] = te[11];\r\n            _flat[ 12 ] = te[12]; _flat[ 13 ] = te[13]; _flat[ 14 ] = te[14]; _flat[ 15 ] = te[15];\r\n\r\n        return _flat;\r\n\r\n    } //flattenToArray\r\n\r\n\r\n    public inline function flattenToArrayOffset( _flat:Array<Float>, _offset:Int ) : Array<Float> {\r\n\r\n        var te = elements;\r\n\r\n            _flat[ _offset + 0 ]  = te[0];\r\n            _flat[ _offset + 1 ]  = te[1];\r\n            _flat[ _offset + 2 ]  = te[2];\r\n            _flat[ _offset + 3 ]  = te[3];\r\n\r\n            _flat[ _offset + 4 ]  = te[4];\r\n            _flat[ _offset + 5 ]  = te[5];\r\n            _flat[ _offset + 6 ]  = te[6];\r\n            _flat[ _offset + 7 ]  = te[7];\r\n\r\n            _flat[ _offset + 8 ]  = te[8];\r\n            _flat[ _offset + 9 ]  = te[9];\r\n            _flat[ _offset + 10 ] = te[10];\r\n            _flat[ _offset + 11 ] = te[11];\r\n\r\n            _flat[ _offset + 12 ] = te[12];\r\n            _flat[ _offset + 13 ] = te[13];\r\n            _flat[ _offset + 14 ] = te[14];\r\n            _flat[ _offset + 15 ] = te[15];\r\n\r\n        return _flat;\r\n\r\n    } //flattenToArrayOffset\r\n\r\n\r\n    public inline function setPosition( _v:Vector ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n            te[12] = _v.x;\r\n            te[13] = _v.y;\r\n            te[14] = _v.z;\r\n\r\n        return this;\r\n\r\n    } //setPosition\r\n\r\n    public inline function inverse() : Matrix {\r\n        return clone().getInverse(this);\r\n    }\r\n\r\n    public inline function getInverse( _m:Matrix ) : Matrix {\r\n\r\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\r\n        var te = elements;\r\n        var me = _m.elements;\r\n\r\n        var n11 = me[0], n12 = me[4], n13 = me[8],  n14 = me[12];\r\n        var n21 = me[1], n22 = me[5], n23 = me[9],  n24 = me[13];\r\n        var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];\r\n        var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];\r\n\r\n            te[0]  = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;\r\n            te[4]  = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;\r\n            te[8]  = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;\r\n            te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;\r\n            te[1]  = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;\r\n            te[5]  = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;\r\n            te[9]  = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;\r\n            te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;\r\n            te[2]  = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;\r\n            te[6]  = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;\r\n            te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;\r\n            te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;\r\n            te[3]  = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;\r\n            te[7]  = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;\r\n            te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;\r\n            te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;\r\n\r\n        var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 4 ] + me[ 2 ] * te[ 8 ] + me[ 3 ] * te[ 12 ];\r\n\r\n        if (det == 0) {\r\n\r\n            trace('Matrix.getInverse: cant invert matrix, determinant is 0');\r\n\r\n            identity();\r\n\r\n            return this;\r\n\r\n        } //det == 0\r\n\r\n        multiplyScalar( 1 / det );\r\n\r\n        return this;\r\n\r\n    } //getInverse\r\n\r\n\r\n    public inline function scale( _v:Vector ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n            var _x = _v.x;\r\n            var _y = _v.y;\r\n            var _z = _v.z;\r\n\r\n            te[0] *= _x; te[4] *= _y; te[8]  *= _z;\r\n            te[1] *= _x; te[5] *= _y; te[9]  *= _z;\r\n            te[2] *= _x; te[6] *= _y; te[10] *= _z;\r\n            te[3] *= _x; te[7] *= _y; te[11] *= _z;\r\n\r\n        return this;\r\n\r\n    } //scale\r\n\r\n\r\n    public inline function getMaxScaleOnAxis() : Float {\r\n\r\n        var te = elements;\r\n\r\n            var _scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2]  * te[2];\r\n            var _scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6]  * te[6];\r\n            var _scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\r\n\r\n        return Math.sqrt( Math.max( _scaleXSq, Math.max( _scaleYSq, _scaleZSq ) ) );\r\n\r\n    } //getMaxScaleOnAxis\r\n\r\n\r\n    public inline function makeTranslation( _x:Float, _y:Float, _z:Float ) : Matrix {\r\n\r\n        set(\r\n            1, 0, 0, _x,\r\n            0, 1, 0, _y,\r\n            0, 0, 1, _z,\r\n            0, 0, 0, 1\r\n        );\r\n\r\n        return this;\r\n\r\n    } //makeTranslation\r\n\r\n\r\n    public inline function makeRotationX( _theta:Float ) : Matrix {\r\n\r\n        var _c = Math.cos(_theta);\r\n        var _s = Math.sin(_theta);\r\n\r\n            set(\r\n                1,  0,   0,  0,\r\n                0, _c, -_s,  0,\r\n                0, _s,  _c,  0,\r\n                0,  0,   0,  1\r\n            );\r\n\r\n        return this;\r\n\r\n    } //makeRotationX\r\n\r\n\r\n    public inline function makeRotationY(_theta:Float) : Matrix {\r\n\r\n        var _c = Math.cos(_theta);\r\n        var _s = Math.sin(_theta);\r\n\r\n            set(\r\n                 _c,  0, _s,  0,\r\n                  0,  1,  0,  0,\r\n                -_s,  0, _c,  0,\r\n                  0,  0,  0,  1\r\n            );\r\n\r\n        return this;\r\n\r\n    } //makeRotationY\r\n\r\n\r\n    public inline function makeRotationZ(_theta:Float) : Matrix {\r\n\r\n        var _c = Math.cos(_theta);\r\n        var _s = Math.sin(_theta);\r\n\r\n            set(\r\n                _c, -_s,  0,  0,\r\n                _s,  _c,  0,  0,\r\n                 0,   0,  1,  0,\r\n                 0,   0,  0,  1\r\n            );\r\n\r\n        return this;\r\n\r\n    } //makeRotationZ\r\n\r\n\r\n    public inline function makeRotationAxis( _axis:Vector, _angle:Float ) : Matrix {\r\n\r\n        var _c = Math.cos( _angle );\r\n        var _s = Math.sin( _angle );\r\n        var _t = 1 - _c;\r\n\r\n        var _ax = _axis.x;\r\n        var _ay = _axis.y;\r\n        var _az = _axis.z;\r\n\r\n        var _tx = _t * _ax;\r\n        var _ty = _t * _ay;\r\n\r\n            set(\r\n                _tx * _ax + _c,         _tx * _ay - _s * _az,   _tx * _az + _s  * _ay,  0,\r\n                _tx * _ay + _s * _az,   _ty * _ay + _c,         _ty * _az - _s  * _ax,  0,\r\n                _tx * _az - _s * _ay,   _ty * _az + _s * _ax,   _t  * _az * _az + _c,   0,\r\n                0, 0, 0, 1\r\n            );\r\n\r\n        return this;\r\n\r\n    } //makeRotationAxis\r\n\r\n\r\n    public inline function makeScale( _x:Float, _y:Float, _z:Float) : Matrix {\r\n\r\n            set(\r\n                _x,  0,  0,  0,\r\n                 0, _y,  0,  0,\r\n                 0,  0, _z,  0,\r\n                 0,  0,  0,  1\r\n            );\r\n\r\n        return this;\r\n\r\n    } //makeScale\r\n\r\n\r\n    public inline function compose_with_origin( _position:Vector, _origin:Vector, _quaternion:Quaternion, _scale:Vector ) : Matrix {\r\n\r\n        //this isn't very optimized\r\n        //translate to origin -> scale -> rotate -> translate -origin -> apply position\r\n\r\n            //origin ->\r\n        makeTranslation(_origin.x, _origin.y, _origin.z);\r\n            //scale ->\r\n        scale(_scale);\r\n            //rotation\r\n        multiply( new Matrix().makeRotationFromQuaternion(_quaternion) );\r\n            //translate -origin\r\n        multiply( new Matrix().makeTranslation(-_origin.x, -_origin.y, -_origin.z) );\r\n            //apply position\r\n        multiply( new Matrix().makeTranslation(_position.x, _position.y, _position.z) );\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    public inline function compose( _position:Vector, _quaternion:Quaternion, _scale:Vector ) : Matrix {\r\n\r\n            makeRotationFromQuaternion( _quaternion );\r\n            scale( _scale );\r\n            setPosition( _position );\r\n\r\n        return this;\r\n\r\n    } //compose\r\n\r\n    var _transform : MatrixTransform;\r\n\r\n    public inline function decompose( _position:Vector = null, _quaternion:Quaternion = null, _scale:Vector = null ) : MatrixTransform {\r\n\r\n        var te = elements;\r\n        var matrix = new Matrix();\r\n\r\n        var _ax_x = te[0]; var _ax_y = te[1]; var _ax_z = te[2];\r\n        var _ay_x = te[4]; var _ay_y = te[5]; var _ay_z = te[6];\r\n        var _az_x = te[8]; var _az_y = te[9]; var _az_z = te[10];\r\n\r\n        var _ax_length = Math.sqrt( _ax_x * _ax_x + _ax_y * _ax_y + _ax_z * _ax_z );\r\n        var _ay_length = Math.sqrt( _ay_x * _ay_x + _ay_y * _ay_y + _ay_z * _ay_z );\r\n        var _az_length = Math.sqrt( _az_x * _az_x + _az_y * _az_y + _az_z * _az_z );\r\n\r\n\r\n        if (_quaternion == null) {\r\n            _quaternion = new Quaternion();\r\n        }\r\n\r\n        if (_position == null) {\r\n            _position = new Vector(te[12], te[13], te[14]);\r\n        } else {\r\n            _position.x = te[12];\r\n            _position.y = te[13];\r\n            _position.z = te[14];\r\n        }\r\n\r\n        if (_scale == null) {\r\n            _scale = new Vector(_ax_length,_ay_length,_az_length);\r\n        } else {\r\n            _scale.x = _ax_length;\r\n            _scale.y = _ay_length;\r\n            _scale.z = _az_length;\r\n        }\r\n\r\n                //copy them without .copy()\r\n            matrix.elements = elements.concat([]);\r\n\r\n            var me = matrix.elements;\r\n\r\n                me[0]  /= _ax_length;\r\n                me[1]  /= _ax_length;\r\n                me[2]  /= _ax_length;\r\n\r\n                me[4]  /= _ay_length;\r\n                me[5]  /= _ay_length;\r\n                me[6]  /= _ay_length;\r\n\r\n                me[8]  /= _az_length;\r\n                me[9]  /= _az_length;\r\n                me[10] /= _az_length;\r\n\r\n            _quaternion.setFromRotationMatrix( matrix );\r\n\r\n\r\n        if(_transform == null) {\r\n            _transform = new MatrixTransform(_position, _quaternion, _scale);\r\n        } else {\r\n            _transform.pos = _position;\r\n            _transform.rotation = _quaternion;\r\n            _transform.scale = _scale;\r\n        }\r\n\r\n        return _transform;\r\n\r\n    } //decompose\r\n\r\n\r\n    public inline function makeFrustum( _left:Float, _right:Float, _bottom:Float, _top:Float, _near:Float, _far:Float ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n        var tx = 2 * _near / (_right - _left);\r\n        var ty = 2 * _near / (_top - _bottom);\r\n\r\n        var a =  (_right + _left) / (_right - _left);\r\n        var b =  (_top + _bottom) / (_top - _bottom);\r\n        var c = -(_far + _near)   / (_far - _near);\r\n        var d = -2 * _far * _near / (_far - _near);\r\n\r\n            te[0] = tx;     te[4] = 0;      te[8]  = a;     te[12] = 0;\r\n            te[1] = 0;      te[5] = ty;     te[9]  = b;     te[13] = 0;\r\n            te[2] = 0;      te[6] = 0;      te[10] = c;     te[14] = d;\r\n            te[3] = 0;      te[7] = 0;      te[11] = -1;    te[15] = 0;\r\n\r\n        return this;\r\n\r\n    } //makeFrustum\r\n\r\n\r\n    public inline function makePerspective( _fov:Float, _aspect:Float, _near:Float, _far:Float ) : Matrix {\r\n\r\n        var ymax = _near * Math.tan( Maths.radians(_fov * 0.5) );\r\n        var ymin = -ymax;\r\n        var xmin = ymin * _aspect;\r\n        var xmax = ymax * _aspect;\r\n\r\n        return makeFrustum( xmin, xmax, ymin, ymax, _near, _far );\r\n\r\n    } //makePerspective\r\n\r\n\r\n    public inline function makeOrthographic( _left:Float, _right:Float, _top:Float, _bottom:Float, _near:Float, _far:Float ) : Matrix {\r\n\r\n        var te = elements;\r\n\r\n        var w = _right - _left;\r\n        var h = _top - _bottom;\r\n        var p = _far - _near;\r\n\r\n        var tx = ( _right + _left )   / w;\r\n        var ty = ( _top   + _bottom ) / h;\r\n        var tz = ( _far   + _near )   / p;\r\n\r\n            te[0] = 2 / w;  te[4] = 0;      te[8] = 0;       te[12] = -tx;\r\n            te[1] = 0;      te[5] = 2 / h;  te[9] = 0;       te[13] = -ty;\r\n            te[2] = 0;      te[6] = 0;      te[10] = -2 / p; te[14] = -tz;\r\n            te[3] = 0;      te[7] = 0;      te[11] = 0;      te[15] = 1;\r\n\r\n        return this;\r\n\r\n    } //makeOrthographic\r\n\r\n    public inline function fromArray(_from:Array<Float>) {\r\n\r\n        elements = _from.concat([]);\r\n\r\n    } //fromArray\r\n\r\n    public inline function toArray() : Array<Float> {\r\n\r\n        var te = elements;\r\n\r\n            return [\r\n                te[ 0 ],  te[ 1 ],  te[ 2 ],  te[ 3 ],\r\n                te[ 4 ],  te[ 5 ],  te[ 6 ],  te[ 7 ],\r\n                te[ 8 ],  te[ 9 ],  te[ 10 ], te[ 11 ],\r\n                te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\r\n            ];\r\n\r\n    } //toArray\r\n\r\n    public inline function clone() : Matrix {\r\n\r\n        var te = elements;\r\n\r\n            return new Matrix(\r\n                te[0], te[4], te[8],  te[12],\r\n                te[1], te[5], te[9],  te[13],\r\n                te[2], te[6], te[10], te[14],\r\n                te[3], te[7], te[11], te[15]\r\n            );\r\n\r\n    } //clone\r\n\r\n    public inline function up() {\r\n        return new Vector( elements[4], elements[5], elements[6] );\r\n    } //up\r\n\r\n    public inline function down() : Vector {\r\n        return up().inverted;\r\n    } //down\r\n\r\n    public inline function left() : Vector {\r\n        return right().inverted;\r\n    } //left\r\n\r\n    public inline function right() : Vector {\r\n        return new Vector( elements[0], elements[1], elements[2] );\r\n    } //right\r\n\r\n    public inline function backward() {\r\n        return new Vector( elements[8], elements[9], elements[10] );\r\n    } //backward\r\n\r\n    public inline function forward() : Vector {\r\n        return backward().inverted;\r\n    } //forward\r\n\r\n\r\n} //Matrix\r\n\r\n","package phoenix;\r\n\r\nimport phoenix.Vector;\r\n\r\n    //Ported from Three.js https://github.com/mrdoob/three.js\r\n\r\nclass Quaternion {\r\n\r\n    @:isVar public var x(default,set) : Float = 0.0;\r\n    @:isVar public var y(default,set) : Float = 0.0;\r\n    @:isVar public var z(default,set) : Float = 0.0;\r\n    @:isVar public var w(default,set) : Float = 0.0;\r\n\r\n    var euler : Vector;\r\n\r\n    public var ignore_listeners : Bool = false;\r\n\r\n    @:isVar public var listen_x(default,default) : Float -> Void;\r\n    @:isVar public var listen_y(default,default) : Float -> Void;\r\n    @:isVar public var listen_z(default,default) : Float -> Void;\r\n    @:isVar public var listen_w(default,default) : Float -> Void;\r\n\r\n    var _construct = false;\r\n\r\n    public function new(_x:Float = 0, _y:Float = 0, _z:Float = 0, _w:Float = 1) {\r\n\r\n        _construct = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n            z = _z;\r\n            w = _w;\r\n\r\n        euler = new Vector();\r\n\r\n        _construct = false;\r\n\r\n    } //new\r\n\r\n    function toString() {\r\n\r\n        return \"{ x:\"+x + \", y:\" + y + \", z:\" + z  + \", w:\" + w  +  \" }\" ;\r\n\r\n    } //toString\r\n\r\n    public function set( _x:Float, _y:Float, _z:Float, _w:Float ) : Quaternion {\r\n\r\n        set_xyzw(_x, _y, _z, _w);\r\n\r\n        return this;\r\n\r\n    } //set\r\n\r\n\r\n    public function copy( _quaternion :Quaternion ) : Quaternion {\r\n\r\n            set_xyzw( _quaternion.x,\r\n                      _quaternion.y,\r\n                      _quaternion.z,\r\n                      _quaternion.w );\r\n\r\n        return this;\r\n\r\n    } //copy\r\n\r\n    public function dot( _other:Quaternion ) {\r\n        return x * _other.x + y * _other.y + z * _other.z + w * _other.w;\r\n    }\r\n\r\n\r\n    public function setFromEuler( _euler:Vector, _order:ComponentOrder = XYZ ) : Quaternion {\r\n\r\n            // http://www.mathworks.com/matlabcentral/fileexchange/\r\n            //  20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n            //  content/SpinCalc.m\r\n\r\n        var _x = x;\r\n        var _y = y;\r\n        var _z = z;\r\n        var _w = w;\r\n\r\n        var c1 = Math.cos( _euler.x / 2 );\r\n        var c2 = Math.cos( _euler.y / 2 );\r\n        var c3 = Math.cos( _euler.z / 2 );\r\n\r\n        var s1 = Math.sin( _euler.x / 2 );\r\n        var s2 = Math.sin( _euler.y / 2 );\r\n        var s3 = Math.sin( _euler.z / 2 );\r\n\r\n            if ( _order == XYZ ) {\r\n\r\n                _x = s1 * c2 * c3 + c1 * s2 * s3;\r\n                _y = c1 * s2 * c3 - s1 * c2 * s3;\r\n                _z = c1 * c2 * s3 + s1 * s2 * c3;\r\n                _w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n            } else if ( _order == YXZ ) {\r\n\r\n                _x = s1 * c2 * c3 + c1 * s2 * s3;\r\n                _y = c1 * s2 * c3 - s1 * c2 * s3;\r\n                _z = c1 * c2 * s3 - s1 * s2 * c3;\r\n                _w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n            } else if ( _order == ZXY ) {\r\n\r\n                _x = s1 * c2 * c3 - c1 * s2 * s3;\r\n                _y = c1 * s2 * c3 + s1 * c2 * s3;\r\n                _z = c1 * c2 * s3 + s1 * s2 * c3;\r\n                _w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n            } else if ( _order == ZYX ) {\r\n\r\n                _x = s1 * c2 * c3 - c1 * s2 * s3;\r\n                _y = c1 * s2 * c3 + s1 * c2 * s3;\r\n                _z = c1 * c2 * s3 - s1 * s2 * c3;\r\n                _w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n            } else if ( _order == YZX ) {\r\n\r\n                _x = s1 * c2 * c3 + c1 * s2 * s3;\r\n                _y = c1 * s2 * c3 + s1 * c2 * s3;\r\n                _z = c1 * c2 * s3 - s1 * s2 * c3;\r\n                _w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n            } else if ( _order == XZY ) {\r\n\r\n                _x = s1 * c2 * c3 - c1 * s2 * s3;\r\n                _y = c1 * s2 * c3 - s1 * c2 * s3;\r\n                _z = c1 * c2 * s3 + s1 * s2 * c3;\r\n                _w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n            }\r\n\r\n        set_xyzw(_x, _y, _z, _w);\r\n\r\n        return this;\r\n\r\n    } //setFromEuler\r\n\r\n\r\n    public function setFromAxisAngle( _axis:Vector, _angle:Float ) : Quaternion {\r\n\r\n        // from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n        // axis have to be normalized\r\n\r\n        var _halfAngle = _angle / 2;\r\n        var _s = Math.sin( _halfAngle );\r\n\r\n            set_xyzw( _axis.x * _s,\r\n                      _axis.y * _s,\r\n                      _axis.z * _s,\r\n                      Math.cos( _halfAngle ) );\r\n\r\n        return this;\r\n\r\n    } //setFromAxisAngle\r\n\r\n\r\n    public function setFromRotationMatrix( _m:Matrix ) : Quaternion {\r\n\r\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n        var te = _m.elements;\r\n\r\n        var m11 = te[0], m12 = te[4], m13 = te[8];\r\n        var m21 = te[1], m22 = te[5], m23 = te[9];\r\n        var m31 = te[2], m32 = te[6], m33 = te[10];\r\n\r\n        var _x = x;\r\n        var _y = y;\r\n        var _z = z;\r\n        var _w = w;\r\n\r\n        var tr = m11 + m22 + m33;\r\n\r\n        var s : Float;\r\n\r\n            if (tr > 0) {\r\n\r\n                s = 0.5 / Math.sqrt( tr + 1.0 );\r\n\r\n                _w = 0.25 / s;\r\n                _x = (m32 - m23) * s;\r\n                _y = (m13 - m31) * s;\r\n                _z = (m21 - m12) * s;\r\n\r\n            } else if (m11 > m22 && m11 > m33) {\r\n\r\n                s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\r\n\r\n                _w = (m32 - m23) / s;\r\n                _x = 0.25 * s;\r\n                _y = (m12 + m21) / s;\r\n                _z = (m13 + m31) / s;\r\n\r\n            } else if (m22 > m33) {\r\n\r\n                s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\r\n\r\n                _w = (m13 - m31) / s;\r\n                _x = (m12 + m21) / s;\r\n                _y = 0.25 * s;\r\n                _z = (m23 + m32) / s;\r\n\r\n            } else {\r\n\r\n                s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\r\n\r\n                _w = (m21 - m12) / s;\r\n                _x = (m13 + m31) / s;\r\n                _y = (m23 + m32) / s;\r\n                _z = 0.25 * s;\r\n\r\n            }\r\n\r\n        set_xyzw(_x, _y, _z, _w);\r\n\r\n        return this;\r\n\r\n    } //setFromRotationMatrix\r\n\r\n\r\n    public function inverse() : Quaternion {\r\n\r\n        return conjugate().normalize();\r\n\r\n    } //inverse\r\n\r\n\r\n    public function conjugate() : Quaternion {\r\n\r\n        set_xyz( x * -1, y * -1, z * -1);\r\n\r\n        return this;\r\n\r\n    } //conjugate\r\n\r\n\r\n    public function lengthSq() : Float {\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n\r\n    } //lengthSq\r\n\r\n\r\n    public function length() : Float {\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n\r\n    } //length\r\n\r\n\r\n    public function normalize() : Quaternion {\r\n\r\n        var l = length();\r\n\r\n            if (l == 0) {\r\n\r\n                set_xyzw(0,0,0,1);\r\n\r\n            } else {\r\n\r\n                l = 1 / l;\r\n\r\n                set_xyzw( x*l, y*l, z*l, w*l );\r\n\r\n            }\r\n\r\n        return this;\r\n\r\n    } //normalize\r\n\r\n    public static function Add( _a:Quaternion, _b:Quaternion ):Quaternion {\r\n        return _a.clone().add(_b);\r\n    }\r\n\r\n    public static function Multiply( _a:Quaternion, _b:Quaternion ):Quaternion {\r\n        return _a.clone().multiply(_b);\r\n    }\r\n\r\n    public static function MultiplyScalar(_quaternion:Quaternion, _scalar:Float):Quaternion {\r\n        return _quaternion.clone().multiplyScalar(_scalar);\r\n    }\r\n\r\n    public function multiply( _quaternion:Quaternion ) : Quaternion {\r\n\r\n        return multiplyQuaternions( this, _quaternion );\r\n\r\n    } //multiply\r\n\r\n    public function add( _quaternion:Quaternion ) : Quaternion {\r\n\r\n        return addQuaternions( this, _quaternion );\r\n\r\n    } //add\r\n\r\n    public function addQuaternions( _a:Quaternion, _b:Quaternion ) {\r\n\r\n            x = _a.x + _b.x;\r\n            y = _a.y + _b.y;\r\n            z = _a.z + _b.z;\r\n            w = _a.w + _b.w;\r\n\r\n        return this;\r\n\r\n    } //addQuaternions\r\n\r\n    public function multiplyScalar( _scalar:Float ) : Quaternion {\r\n\r\n            x *= _scalar;\r\n            y *= _scalar;\r\n            z *= _scalar;\r\n            w *= _scalar;\r\n\r\n        return this;\r\n\r\n    } //multiply\r\n\r\n    public function multiplyQuaternions( _a:Quaternion, _b:Quaternion ) : Quaternion {\r\n\r\n        var qax = _a.x, qay = _a.y, qaz = _a.z, qaw = _a.w;\r\n        var qbx = _b.x, qby = _b.y, qbz = _b.z, qbw = _b.w;\r\n\r\n            set_xyzw( qax * qbw + qaw * qbx + qay * qbz - qaz * qby,\r\n                      qay * qbw + qaw * qby + qaz * qbx - qax * qbz,\r\n                      qaz * qbw + qaw * qbz + qax * qby - qay * qbx,\r\n                      qaw * qbw - qax * qbx - qay * qby - qaz * qbz );\r\n\r\n        return this;\r\n\r\n    } //multiplyQuaternions\r\n\r\n\r\n    public function slerp( _qb:Quaternion, _t:Float ) : Quaternion {\r\n\r\n        var _x = x;\r\n        var _y = y;\r\n        var _z = z;\r\n        var _w = w;\r\n\r\n        // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n        var cosHalfTheta = _w * _qb.w + _x * _qb.x + _y * _qb.y + _z * _qb.z;\r\n\r\n        if ( cosHalfTheta < 0 ) {\r\n\r\n                x = -_qb.x;\r\n                y = -_qb.y;\r\n                z = -_qb.z;\r\n                w = -_qb.w;\r\n\r\n                cosHalfTheta = -cosHalfTheta;\r\n\r\n        } else {\r\n\r\n            this.copy( _qb );\r\n\r\n        }\r\n\r\n        if ( cosHalfTheta >= 1.0 ) {\r\n\r\n            set_xyzw(_x, _y, _z, _w);\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n        var halfTheta = Math.acos( cosHalfTheta );\r\n        var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n        if ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n            set_xyzw( 0.5 * ( _x + x ),\r\n                      0.5 * ( _y + y ),\r\n                      0.5 * ( _z + z ),\r\n                      0.5 * ( _w + w ) );\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n        var ratioA = Math.sin( ( 1 - _t ) * halfTheta ) / sinHalfTheta,\r\n        ratioB = Math.sin( _t * halfTheta ) / sinHalfTheta;\r\n\r\n            set_xyzw( _x * ratioA + x * ratioB,\r\n                      _y * ratioA + y * ratioB,\r\n                      _z * ratioA + z * ratioB,\r\n                      _w * ratioA + w * ratioB );\r\n\r\n        return this;\r\n\r\n    } //slerp\r\n\r\n\r\n    public function equals( _q:Quaternion ) : Bool {\r\n\r\n        return ( (_q.x == x) && (_q.y == y) && (_q.z == z) && (_q.w == w) );\r\n\r\n    } //equals\r\n\r\n\r\n    public function fromArray( _a:Array<Float> ) : Quaternion {\r\n\r\n        set_xyzw(_a[0], _a[1], _a[2], _a[3]);\r\n\r\n        return this;\r\n\r\n    } //fromArray\r\n\r\n\r\n    public function toArray() : Array<Float> {\r\n\r\n        return [ x,y,z,w ];\r\n\r\n    } //toArray\r\n\r\n    public function clone() : Quaternion {\r\n\r\n        return new Quaternion( x, y, z, w );\r\n\r\n    } //clone\r\n\r\n    public function toeuler() {\r\n        return new Vector().setEulerFromQuaternion(this).degrees();\r\n    }\r\n\r\n    public static function Slerp( _qa:Quaternion , _qb:Quaternion, _qm:Quaternion , _t:Float ) : Quaternion {\r\n\r\n        return _qm.copy( _qa ).slerp( _qb, _t );\r\n\r\n    } //Slerp\r\n\r\n    public static function Dot( _a:Quaternion,  _b:Quaternion ) {\r\n        return new Quaternion(_a.x,_a.y,_a.z,_a.w).dot(_b);\r\n    }\r\n\r\n    inline function update_euler() {\r\n\r\n        if( euler == null || ignore_euler || _construct) {\r\n            return;\r\n        }\r\n\r\n        euler.setEulerFromQuaternion( this );\r\n\r\n    } //update_euler\r\n\r\n    var ignore_euler = false;\r\n\r\n    public inline function set_xyzw(_x:Float, _y:Float, _z:Float, _w:Float) {\r\n\r\n        ignore_euler = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n            z = _z;\r\n            w = _w;\r\n\r\n        ignore_euler = false;\r\n\r\n        update_euler();\r\n\r\n        if(listen_x != null && !ignore_listeners) listen_x(x);\r\n        if(listen_y != null && !ignore_listeners) listen_y(y);\r\n        if(listen_z != null && !ignore_listeners) listen_z(z);\r\n        if(listen_w != null && !ignore_listeners) listen_w(w);\r\n\r\n    } //set_xyzw\r\n\r\n    public inline function set_xyz(_x:Float, _y:Float, _z:Float) {\r\n\r\n        ignore_euler = true;\r\n\r\n            x = _x;\r\n            y = _y;\r\n            z = _z;\r\n\r\n        ignore_euler = false;\r\n\r\n        update_euler();\r\n\r\n        if(listen_x != null && !ignore_listeners) listen_x(x);\r\n        if(listen_y != null && !ignore_listeners) listen_y(y);\r\n        if(listen_z != null && !ignore_listeners) listen_z(z);\r\n\r\n    } //set_xyzw\r\n\r\n    inline function set_x( _v:Float ) {\r\n\r\n        x = _v;\r\n\r\n        if(_construct) return x;\r\n\r\n        update_euler();\r\n\r\n        if(listen_x != null && !ignore_listeners) listen_x(x);\r\n\r\n        return x;\r\n\r\n    } //set_x\r\n\r\n    inline function set_y( _v:Float ) {\r\n\r\n        y = _v;\r\n\r\n        if(_construct) return y;\r\n\r\n        update_euler();\r\n\r\n        if(listen_y != null && !ignore_listeners) listen_y(y);\r\n\r\n        return y;\r\n\r\n    } //set_y\r\n\r\n    inline function set_z( _v:Float ) {\r\n\r\n        z = _v;\r\n\r\n        if(_construct) return z;\r\n\r\n        update_euler();\r\n\r\n        if(listen_z != null && !ignore_listeners) listen_z(z);\r\n\r\n        return z;\r\n\r\n    } //set_z\r\n\r\n    inline function set_w( _v:Float ) {\r\n\r\n        w = _v;\r\n\r\n        if(_construct) return w;\r\n\r\n        update_euler();\r\n\r\n        if(listen_w != null && !ignore_listeners) listen_w(w);\r\n\r\n        return w;\r\n\r\n    } //set_w\r\n\r\n    public static inline function Listen( _q : Quaternion, listener ) {\r\n\r\n        _q.listen_x = listener;\r\n        _q.listen_y = listener;\r\n        _q.listen_z = listener;\r\n        _q.listen_w = listener;\r\n\r\n    } //listen\r\n\r\n} //Quaternion\r\n\r\n","package phoenix;\r\n\r\nimport phoenix.Rectangle;\r\nimport phoenix.Vector;\r\nimport phoenix.Camera;\r\n\r\nclass Ray {\r\n\r\n    public var origin : Vector;\r\n    public var end : Vector;\r\n    public var dir : Vector;\r\n\r\n    var camera : Camera;\r\n    var viewport : Rectangle;\r\n\r\n        //optional viewport size\r\n    public function new( _screen_pos:Vector, _camera:Camera, ?_viewport:Rectangle=null ) {\r\n\r\n        if(_viewport == null) {\r\n            _viewport = new Rectangle(0,0,Luxe.screen.w, Luxe.screen.h);\r\n        }\r\n\r\n        if(_camera == null) throw \"Camera required for a ray!\";\r\n\r\n        camera = _camera;\r\n        viewport = _viewport;\r\n\r\n       refresh(_screen_pos);\r\n\r\n    } //new\r\n\r\n    public function refresh( _screen_pos:Vector ) {\r\n\r\n            //calculate the x and y in normalized device coordinates first [-1, 1] on both axis\r\n        var ndc_x : Float = (_screen_pos.x/viewport.w  - 0.5) * 2.0;\r\n        var ndc_y : Float = ((viewport.h - _screen_pos.y)/viewport.h - 0.5) * 2.0;\r\n\r\n            //To calculate a ray we use [0,1] for the depth so we can get a direction\r\n        var start_ndc : Vector = new Vector( ndc_x, ndc_y, 0.0, 1.0 );\r\n        var end_ndc : Vector = new Vector( ndc_x, ndc_y, 1.0, 1.0 );\r\n            //So we have a near and a far clipping space coords for the mouse, now unproject it using the camera\r\n        origin = camera.unproject(start_ndc);\r\n        end = camera.unproject(end_ndc);\r\n        dir = Vector.Subtract(end, origin);\r\n\r\n    } //refresh\r\n\r\n} //Ray","package phoenix;\r\n\r\n\r\nclass Rectangle {\r\n\r\n    @:isVar public var x (default, set) : Float = 0;\r\n    @:isVar public var y (default, set) : Float = 0;\r\n    @:isVar public var w (default, set) : Float = 0;\r\n    @:isVar public var h (default, set) : Float = 0;\r\n\r\n    public var ignore_listeners : Bool = false;\r\n\r\n    @:isVar public var listen_x (default,default) : Float -> Void;\r\n    @:isVar public var listen_y (default,default) : Float -> Void;\r\n    @:isVar public var listen_w (default,default) : Float -> Void;\r\n    @:isVar public var listen_h (default,default) : Float -> Void;\r\n\r\n    public function new(?_x:Float = 0,?_y:Float = 0,?_w:Float = 0,?_h : Float = 0) {\r\n\r\n        x = _x;\r\n        y = _y;\r\n        w = _w;\r\n        h = _h;\r\n\r\n    } //new\r\n\r\n    function toString() {\r\n\r\n        return \"{ x:\"+x + \", y:\" + y + \", w:\" + w  + \", h:\" + h  + \" }\" ;\r\n\r\n    } //toString\r\n\r\n    public static function listen( _r:Rectangle, listener ) {\r\n        _r.listen_x = listener;\r\n        _r.listen_y = listener;\r\n        _r.listen_w = listener;\r\n        _r.listen_h = listener;\r\n    } //listen\r\n\r\n    public function point_inside( _p:Vector ) {\r\n\r\n        if(_p.x < x) return false;\r\n        if(_p.y < y) return false;\r\n        if(_p.x > x+w) return false;\r\n        if(_p.y > y+h) return false;\r\n\r\n        return true;\r\n\r\n    } //point_inside\r\n\r\n    public function overlaps( _other:Rectangle ) {\r\n\r\n        if(_other == null) {\r\n            return false;\r\n        }\r\n\r\n            //only need to test extremes\r\n        if( x < (_other.x + _other.w) &&\r\n            y < (_other.y + _other.h) &&\r\n            (x + w) > _other.x        &&\r\n            (y + h) > _other.y ) {\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public function clone() {\r\n\r\n        return new Rectangle(x,y,w,h);\r\n\r\n    } //clone\r\n\r\n        //:todo:, epsilon fp check version\r\n    public function equal( _other:Rectangle ) {\r\n\r\n        if(_other == null) {\r\n            return false;\r\n        }\r\n\r\n        return x == _other.x && y == _other.y && w == _other.w && h == _other.h;\r\n\r\n    } //equal\r\n\r\n    public function copy_from( _rect:Rectangle ) {\r\n\r\n        x = _rect.x;\r\n        y = _rect.y;\r\n        w = _rect.w;\r\n        h = _rect.h;\r\n\r\n    } //copy_from\r\n\r\n    public function set(?_x:Float, ?_y:Float, ?_w:Float, ?_h:Float) {\r\n\r\n        var _setx = x;\r\n        var _sety = y;\r\n        var _setw = w;\r\n        var _seth = h;\r\n\r\n                    //assign new values\r\n                if(_x != null) _setx = _x;\r\n                if(_y != null) _sety = _y;\r\n                if(_w != null) _setw = _w;\r\n                if(_h != null) _seth = _h;\r\n\r\n            x = _setx;\r\n            y = _sety;\r\n            w = _setw;\r\n            h = _seth;\r\n\r\n        return this;\r\n\r\n    } //set\r\n\r\n    function set_x(_x:Float) : Float {\r\n\r\n        x = _x;\r\n\r\n            if(listen_x != null && !ignore_listeners) {\r\n                listen_x(_x);\r\n            }\r\n\r\n        return x;\r\n\r\n    } //set_x\r\n\r\n    function set_y(_y:Float) : Float {\r\n\r\n        y = _y;\r\n\r\n            if(listen_y != null && !ignore_listeners) {\r\n                listen_y(_y);\r\n            }\r\n\r\n        return y;\r\n\r\n    } //set_y\r\n\r\n    function set_w(_w:Float) : Float {\r\n\r\n        w = _w;\r\n\r\n            if(listen_w != null && !ignore_listeners) {\r\n                listen_w(_w);\r\n            }\r\n\r\n        return w;\r\n\r\n    } //set_w\r\n\r\n    function set_h(_h:Float) : Float {\r\n\r\n        h = _h;\r\n\r\n            if(listen_h != null && !ignore_listeners) {\r\n                listen_h(_h);\r\n            }\r\n\r\n        return h;\r\n\r\n    } //set_h\r\n\r\n}","package phoenix;\r\n\r\nimport snow.modules.opengl.GL;\r\nimport phoenix.Renderer;\r\nimport phoenix.Batcher;\r\n\r\n//Default base class will do forward rendering\r\n\r\nclass RenderPath {\r\n\r\n    public var renderer : Renderer;\r\n    public function new( _renderer:Renderer ) {\r\n        renderer = _renderer;\r\n    }\r\n\r\n    public function render( _batchers: Array<Batcher>, _stats:RendererStats ) {\r\n\r\n        var c = _batchers.length;\r\n        var i = 0;\r\n        while(i < c) {\r\n            var batch = _batchers[i];\r\n            if(batch.enabled) {\r\n\r\n                    //Tell the batcher to draw\r\n                batch.draw();\r\n\r\n            } //batcher enabled\r\n            batch = null;\r\n            ++i;\r\n\r\n        } //each batcher\r\n\r\n    } //render\r\n\r\n} //RenderPath\r\n\r\n","package phoenix;\r\n\r\nimport luxe.Log.*;\r\nimport snow.modules.opengl.GL;\r\nimport phoenix.Texture;\r\n\r\nclass RenderState {\r\n\r\n    var blending : Bool = true;\r\n    var cull_face : Bool = false;\r\n    var depth_test : Bool = false;\r\n    var depth_mask : Bool = true;\r\n    var renderer : Renderer;\r\n    var _viewport : Rectangle;\r\n    var _view_target_h : Float = 0.0;\r\n\r\n\r\n    public function new( _renderer:Renderer ) {\r\n        renderer = _renderer;\r\n        _viewport = new Rectangle( 0, 0, 0, 0 );\r\n    }\r\n\r\n    public function enable( what:Int ) {\r\n        switch(what) {\r\n            case GL.BLEND:\r\n                if(!blending) {\r\n                    blending = true;\r\n                    GL.enable(GL.BLEND);\r\n                }\r\n            case GL.CULL_FACE:\r\n                if(!cull_face) {\r\n                    cull_face = true;\r\n                    GL.enable(GL.CULL_FACE);\r\n                } //!cull_face\r\n            case GL.DEPTH_TEST:\r\n                if(Luxe.core.app.config.render.depth > 0) {\r\n                    if(!depth_test) {\r\n                        depth_test = true;\r\n                        GL.enable(GL.DEPTH_TEST);\r\n                    }\r\n                } //!depth_test\r\n        } //switch\r\n    } //enable_if_not\r\n\r\n    public function disable( what:Int ) {\r\n        switch(what) {\r\n            case GL.BLEND:\r\n                if(blending) {\r\n                    blending = false;\r\n                    GL.disable(GL.BLEND);\r\n                }\r\n            case GL.CULL_FACE:\r\n                if(cull_face) {\r\n                    cull_face = false;\r\n                    GL.disable(GL.CULL_FACE);\r\n                } //cull_face\r\n            case GL.DEPTH_TEST:\r\n                if(Luxe.core.app.config.render.depth > 0) {\r\n                    if(depth_test) {\r\n                        depth_test = false;\r\n                        GL.disable(GL.DEPTH_TEST);\r\n                    }\r\n                } //depth_test\r\n        } //switch\r\n    } //disable_if_not\r\n\r\n    var depth_func : Int = -1;\r\n    public function depth_function( what:Int ) {\r\n        if(depth_func != what) {\r\n            GL.depthFunc( what );\r\n            depth_func = what;\r\n        }\r\n    } //depth_function\r\n\r\n    public function scissor(x:Float, y:Float, w:Float, h:Float) {\r\n\r\n            //the target may have render scaling awareness,\r\n            //so we take the input coordinates into the viewport scaled space\r\n        var _target_scale = renderer.target.viewport_scale;\r\n\r\n        x *= _target_scale;\r\n        y *= _target_scale;\r\n        w *= _target_scale;\r\n        h *= _target_scale;\r\n\r\n            //the target height is in renderable pixels, so no scaling\r\n        var _target_h = renderer.target.height;\r\n            //In OpenGL the coords are bottom left origin, so we flip the y\r\n        var _y : Float = _target_h - (y + h);\r\n\r\n        GL.scissor(Std.int(x), Std.int(_y), Std.int(w), Std.int(h));\r\n\r\n    } //scissor\r\n\r\n    public function viewport(x:Float, y:Float, w:Float, h:Float) {\r\n\r\n            //the target may have render scaling awareness,\r\n            //so we take the input coordinates into the viewport scaled space\r\n        var _target_scale = renderer.target.viewport_scale;\r\n\r\n        x *= _target_scale;\r\n        y *= _target_scale;\r\n        w *= _target_scale;\r\n        h *= _target_scale;\r\n\r\n            //the target height is in renderable pixels, so no scaling\r\n        var _target_h = renderer.target.height;\r\n\r\n            //In OpenGL the viewport is bottom left origin, so we flip the y\r\n            //when submitting our top left based coordinates.\r\n            //We use the target size property of the renderer, which\r\n            //when rendering to the screen matches the window and when\r\n            //rendering to a texture/render target, matches the target.\r\n        var _y : Float = _target_h - (y + h);\r\n\r\n        GL.viewport(Std.int(x), Std.int(_y), Std.int(w), Std.int(h));\r\n\r\n    } //viewport\r\n\r\n    @:noCompletion public var current_framebuffer : GLFramebuffer = null;\r\n    public function bindFramebuffer( ?buffer:GLFramebuffer=null ) {\r\n\r\n        if(current_framebuffer != buffer) {\r\n\r\n            def(buffer, renderer.default_framebuffer);\r\n\r\n            GL.bindFramebuffer( GL.FRAMEBUFFER, buffer );\r\n            current_framebuffer = buffer;\r\n        }\r\n\r\n    } //bindFrameBuffer\r\n\r\n    @:noCompletion public var current_renderbuffer : GLRenderbuffer = null;\r\n    public function bindRenderbuffer( ?buffer:GLRenderbuffer=null ) {\r\n\r\n        if(current_renderbuffer != buffer) {\r\n\r\n            def(buffer, renderer.default_renderbuffer);\r\n\r\n            GL.bindRenderbuffer( GL.RENDERBUFFER, buffer );\r\n            current_renderbuffer = buffer;\r\n        }\r\n\r\n    } //bindRenderbuffer\r\n\r\n    var _used_program : GLProgram = null;\r\n    public function useProgram( program:GLProgram ) {\r\n        if(_used_program != program) {\r\n            _used_program = program;\r\n            GL.useProgram( program );\r\n        }\r\n    } //useProgram\r\n\r\n    var _active_texture = -1;\r\n    public function activeTexture( val:Int ) {\r\n        if(_active_texture != val) {\r\n            GL.activeTexture(val);\r\n            _active_texture = val;\r\n        }\r\n    } //activeTexture\r\n\r\n    public inline function bindTexture( type:TextureType, tex:TextureID ) {\r\n        switch(type) {\r\n            case TextureType.tex_2D:\r\n                bindTexture2D(tex);\r\n            case TextureType.tex_cube:\r\n                bindTextureCube(tex);\r\n        }\r\n    }\r\n\r\n    public static var bound_texture_2D : TextureID = null;\r\n    public function bindTexture2D( tex:TextureID ) {\r\n        if(bound_texture_2D != tex) {\r\n            bound_texture_2D = tex;\r\n            GL.bindTexture(GL.TEXTURE_2D, tex);\r\n        }\r\n    }\r\n\r\n    public static var bound_texture_cube : TextureID = null;\r\n    public function bindTextureCube( tex:TextureID ) {\r\n        if(bound_texture_cube != tex) {\r\n            bound_texture_cube = tex;\r\n            GL.bindTexture(GL.TEXTURE_CUBE_MAP, tex);\r\n        }\r\n    }\r\n\r\n    var _last_line_width:Float = 1;\r\n    public function lineWidth( _width:Float ) {\r\n        if(_last_line_width != _width) {\r\n            _last_line_width = _width;\r\n            GL.lineWidth( _width );\r\n        }\r\n    }\r\n\r\n    var _last_depth_mask:Bool = true;\r\n    public function depthMask( _enable:Bool ) {\r\n        if(_last_depth_mask != _enable) {\r\n            _last_depth_mask = _enable;\r\n            GL.depthMask( _enable );\r\n        }\r\n    }\r\n\r\n} //RenderState\r\n","package phoenix;\r\n\r\nimport snow.api.Promise;\r\nimport snow.systems.assets.Asset;\r\nimport snow.modules.opengl.GL;\r\n\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.buffers.ArrayBufferView;\r\nimport snow.api.buffers.ArrayBuffer;\r\n\r\nimport phoenix.Color;\r\nimport phoenix.Vector;\r\n\r\nimport luxe.Resources;\r\nimport luxe.resource.Resource;\r\nimport luxe.options.ResourceOptions;\r\nimport snow.types.Types.Error;\r\n\r\nimport luxe.Log.*;\r\n\r\nclass Texture extends Resource {\r\n\r\n//Static flags\r\n\r\n    public static var default_filter: FilterType = FilterType.linear;\r\n    public static var default_clamp: ClampType = ClampType.edge;\r\n\r\n//Members\r\n\r\n        /** Which texture slot this texture would be assigned to when bound. */\r\n    public var slot : Int = 0;\r\n        /** Only used when submitting to the GPU, where supported. */\r\n    public var border : Int = 0;\r\n        /** The GPU texture ID */\r\n    public var texture : TextureID;\r\n        /** The GPU texture format, i.e `GL.RGBA` or similar. */\r\n    public var format : TextureFormat;\r\n        /** The GPU texture type, i.e `GL.TEXTURE_2D` or similar. */\r\n    public var type : TextureType;\r\n        /** The GPU data type, i.e `GL.UNSIGNED_BYTE` or similar. */\r\n    public var data_type : TextureDataType;\r\n        /** If true, the pixels buffer should store compressed image format data that the GPU understands. */\r\n    public var compressed : Bool = false;\r\n\r\n        /** The width of the actual texture, used for example when the texture may be padded to POT sizes. */\r\n    public var width_actual : Int = -1;\r\n        /** The height of the actual texture, used for example when the texture may be padded to POT sizes. */\r\n    public var height_actual : Int = -1;\r\n        /** The width of the texture */\r\n    public var width : Int = -1;\r\n        /** The height of the texture */\r\n    public var height : Int = -1;\r\n\r\n        /** Set the minification filter type */\r\n    @:isVar public var filter_min   (default,set) : FilterType;\r\n        /** Set the magnification filter type */\r\n    @:isVar public var filter_mag   (default,set) : FilterType;\r\n        /** Sets the S (horizontal) clamp type */\r\n    @:isVar public var clamp_s      (default,set) : ClampType;\r\n        /** Sets the T (vertical) clamp type */\r\n    @:isVar public var clamp_t      (default,set) : ClampType;\r\n\r\n        /** If true, only when (re)loading from an asset id,\r\n            the pixels will be premultiplied by their alpha before\r\n            submit is called.  */\r\n    var load_premultiply_alpha : Bool = false;\r\n\r\n    public function new( _options:TextureOptions ) {\r\n\r\n        assertnull(_options, 'Texture create requires non-null options');\r\n\r\n        def(_options.resource_type, ResourceType.texture);\r\n\r\n        super( _options );\r\n\r\n        //texture id must be first, followed by bind\r\n\r\n        def(_options.texture, create_texture_id());\r\n\r\n        texture = _options.texture;\r\n\r\n        bind();\r\n\r\n        apply_default_options(_options);\r\n\r\n            //pixels require width and height\r\n        if(_options.pixels != null) {\r\n            assertnull(_options.width, 'Texture create with pixels requires both width and height');\r\n            assertnull(_options.height, 'Texture create with pixels requires both width and height');\r\n        }\r\n\r\n        if(_options.width != null || _options.height != null) {\r\n\r\n                //width requires height and vice versa\r\n            assertnull(_options.height, 'Texture requires both width and height, only width was given in construct options');\r\n            assertnull(_options.width, 'Texture requires both width and height, only height was given in construct options');\r\n\r\n            width = width_actual = _options.width;\r\n            height = height_actual = _options.height;\r\n\r\n            if(_options.pixels != null) {\r\n                submit(_options.pixels);\r\n            }\r\n\r\n        } //width/height not null\r\n\r\n\r\n    } //new\r\n\r\n        /** Returns the estimated memory usage of this Texture, in bytes. */\r\n    override public function memory_use() {\r\n\r\n            //:todo: not force 4 bpp\r\n        return (width_actual * height_actual * 4);\r\n\r\n    } //memory_use\r\n\r\n\r\n        /** Fetch the pixels from the texture id, storing them in the provided array buffer view.\r\n            Returns image pixels in RGBA format, as unsigned byte (0-255) values only.\r\n            This means that the view must be `w * h * 4` in length, minimum.\r\n            By default, x and y are 0, 0, and the texture `width` and `height`\r\n            are used (not width_actual/height_actual) */\r\n    public function fetch( _into:Uint8Array, ?_x:Int = 0, ?_y:Int = 0, ?_w:Int, ?_h:Int ) : Uint8Array {\r\n\r\n        assertnull(_into, 'Texture fetch requires a valid buffer to store the pixels.');\r\n\r\n        def(_x, 0);\r\n        def(_y, 0);\r\n        def(_w, width);\r\n        def(_h, height);\r\n\r\n        var _required = _w * _h * 4;\r\n\r\n        assert( _into.length >= _required, 'Texture fetch requires at least $_required (w * h * 4) bytes for the pixels, you have ${_into.length}!' );\r\n\r\n            //GL ES/WebGL spec doesn't include `glGetTexImage`,\r\n            //but we can read the pixels from a temporary frame buffer (render texture) instead\r\n            //This way works on all targets the same.\r\n\r\n        var fb = GL.createFramebuffer();\r\n\r\n        GL.bindFramebuffer(GL.FRAMEBUFFER, fb);\r\n        GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture, 0);\r\n\r\n        assert(GL.checkFramebufferStatus(GL.FRAMEBUFFER) == GL.FRAMEBUFFER_COMPLETE);\r\n\r\n            GL.readPixels(_x, _y, _w, _h, GL.RGBA, GL.UNSIGNED_BYTE, _into);\r\n\r\n        GL.bindFramebuffer(GL.FRAMEBUFFER, null);\r\n        GL.deleteFramebuffer(fb);\r\n        fb = null;\r\n\r\n        return _into;\r\n\r\n    } //fetch\r\n\r\n        /** Submit a pixels array to the texture id. Must match the type and format accordingly. */\r\n    public function submit( _pixels:ArrayBufferView, ?_target:TextureSubmitTarget, ?_level:Int = 0) {\r\n\r\n        assert(_level >= 0, 'Texture submit level cannot be negative');\r\n\r\n        var _max = max_size();\r\n\r\n        assert(width_actual <= _max, 'Texture actual width bigger than maximum hardware size (width:$width_actual, max:$_max)');\r\n        assert(height_actual <= _max, 'Texture actual height bigger than maximum hardware size (height:$height_actual, max:$_max)');\r\n\r\n        bind();\r\n\r\n        def(_target, TextureSubmitTarget.tex_2D);\r\n\r\n        switch(type) {\r\n            case TextureType.tex_2D:\r\n\r\n                if(compressed) {\r\n                    GL.compressedTexImage2D(_target, _level, format, width_actual, height_actual, border, _pixels);\r\n                } else {\r\n                    GL.texImage2D(_target, _level, format, width_actual, height_actual, border, format, data_type, _pixels);\r\n                }\r\n\r\n            case _:\r\n\r\n                _debug('Texture submit skipped for type `$type`');\r\n        \r\n        } //type\r\n\r\n    } //submit\r\n\r\n        /** Generates mipmaps for this texture. */\r\n    public function generate_mipmaps() {\r\n\r\n        bind();\r\n        GL.generateMipmap(type);\r\n\r\n    } //generate_mipmaps\r\n\r\n        /** Bind this texture to the it's active texture slot,\r\n            and it's texture id to the texture type. Calling this\r\n            repeatedly is fine, as the state is tracked by\r\n            the RenderState. */\r\n    public function bind() {\r\n\r\n        Luxe.renderer.state.activeTexture( GL.TEXTURE0+slot );\r\n        Luxe.renderer.state.bindTexture( type, texture );\r\n\r\n    } //bind\r\n\r\n//Resource overrides\r\n\r\n        /** Reloads this texture from it's id - only a valid call if the id is a image asset resource. */\r\n    override public function reload() : Promise {\r\n\r\n        assert(state != ResourceState.destroyed, 'Resource cannot reload when already destroyed');\r\n\r\n        clear();\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            state = ResourceState.loading;\r\n\r\n            var get = Luxe.snow.assets.image(id);\r\n\r\n            get.then(function(_asset:AssetImage) {\r\n\r\n                texture = create_texture_id();\r\n\r\n                from_asset(_asset);\r\n\r\n                state = ResourceState.loaded;\r\n                resolve(this);\r\n\r\n            }); //then\r\n\r\n            get.error(function(_error) {\r\n\r\n                state = ResourceState.failed;\r\n                reject(_error);\r\n\r\n            });\r\n\r\n        }); //promise\r\n\r\n    } //reload\r\n\r\n    function from_asset(_asset:AssetImage, _clear_asset:Bool=true) {\r\n\r\n        dump_asset_info( _asset );\r\n\r\n        width = _asset.image.width;\r\n        height = _asset.image.height;\r\n        width_actual = _asset.image.width_actual;\r\n        height_actual = _asset.image.height_actual;\r\n\r\n        if(load_premultiply_alpha) {\r\n            Luxe.utils.premultiply_alpha(_asset.image.pixels);\r\n        }\r\n\r\n        submit( _asset.image.pixels );\r\n\r\n        if(_clear_asset) {\r\n            _asset.image.pixels = null;\r\n            _asset = null;\r\n        }\r\n\r\n        apply_props();\r\n\r\n    } //from_asset\r\n\r\n    override function clear() {\r\n\r\n        if(texture != null) {\r\n            GL.deleteTexture(texture);\r\n        }\r\n\r\n    } //clear\r\n\r\n//Internal\r\n\r\n        //:todo:refactor:gl:\r\n    function create_texture_id() {\r\n\r\n        return GL.createTexture();\r\n\r\n    } //create_texture_id\r\n\r\n    inline function apply_props() {\r\n\r\n        apply_filter(filter_min, FilterSlot.min_filter);\r\n        apply_filter(filter_mag, FilterSlot.mag_filter);\r\n        apply_clamp(clamp_s, ClampSlot.wrap_s);\r\n        apply_clamp(clamp_t, ClampSlot.wrap_t);\r\n\r\n    } //apply_props\r\n\r\n    function apply_default_options( _options:TextureOptions ) {\r\n\r\n        //texture properties\r\n\r\n            load_premultiply_alpha = def(_options.load_premultiply_alpha, false);\r\n            compressed = def(_options.compressed, false);\r\n            format = def(_options.format, GL.RGBA);\r\n            type = def(_options.type, GL.TEXTURE_2D);\r\n            data_type = def(_options.data_type, GL.UNSIGNED_BYTE);\r\n\r\n        //properties\r\n\r\n            //filter\r\n                filter_min = def(_options.filter_min, default_filter);\r\n                filter_mag = def(_options.filter_mag, default_filter);\r\n\r\n            //clamp\r\n                clamp_s = def(_options.clamp_s, default_clamp);\r\n                clamp_t = def(_options.clamp_t, default_clamp);\r\n\r\n    } //apply_default_options\r\n\r\n\r\n        /** Return the maximum size of a texture from the hardware */\r\n    public static function max_size() : Int return GL.getParameter(GL.MAX_TEXTURE_SIZE);\r\n\r\n        //:todo: not be a weird static function\r\n    static inline function dump_asset_info(_asset:AssetImage) {\r\n\r\n        _debug('Texture Asset id: '         + _asset.image.id);\r\n        _debug('\\t image.bpp: '             + _asset.image.bpp);\r\n        _debug('\\t image.bpp_source: '      + _asset.image.bpp_source);\r\n        _debug('\\t image.pixels.length: '   + _asset.image.pixels.length);\r\n        _debug('\\t image.height: '          + _asset.image.height);\r\n        _debug('\\t image.height_actual: '   + _asset.image.height_actual);\r\n        _debug('\\t image.width: '           + _asset.image.width);\r\n        _debug('\\t image.width_actual: '    + _asset.image.width_actual);\r\n\r\n    } //dump_asset_info\r\n\r\n//Properties\r\n\r\n    function set_clamp_s( _clamp:ClampType ) {\r\n\r\n        bind();\r\n\r\n        apply_clamp(_clamp, ClampSlot.wrap_s);\r\n\r\n        return clamp_s = _clamp;\r\n\r\n    } //set_clamp_s\r\n\r\n    function set_clamp_t( _clamp:ClampType ) {\r\n\r\n        bind();\r\n\r\n        apply_clamp(_clamp, ClampSlot.wrap_t);\r\n\r\n        return clamp_t = _clamp;\r\n\r\n    } //set_clamp_t\r\n\r\n    function set_filter_min( _filter : FilterType ) {\r\n\r\n        bind();\r\n\r\n        apply_filter(_filter, FilterSlot.min_filter);\r\n\r\n        return filter_min = _filter;\r\n\r\n    } //set_filter_min\r\n\r\n    function set_filter_mag( _filter : FilterType ) {\r\n\r\n        bind();\r\n\r\n        apply_filter(_filter, FilterSlot.mag_filter);\r\n\r\n        return filter_mag = _filter;\r\n\r\n    } //set_filter_mag\r\n\r\n//Internal helpers, :todo:refactor:gl:\r\n\r\n    inline function apply_clamp( _clamp:ClampType, _type:ClampSlot ) {\r\n\r\n        GL.texParameteri(type, _type, _clamp);\r\n\r\n    } //apply_clamp\r\n\r\n    inline function apply_filter( _filter:FilterType, _type:FilterSlot ) {\r\n\r\n        GL.texParameteri(type, _type, _filter);\r\n\r\n    } //apply_filter\r\n\r\n    override function toString() {\r\n\r\n        var _type = type_name(type);\r\n        var _filter_min = filter_name(filter_min);\r\n        var _filter_mag = filter_name(filter_mag);\r\n        var _clamp_s = clamp_name(clamp_s);\r\n        var _clamp_t = clamp_name(clamp_t);\r\n\r\n        var _filter = 'filter(min: $_filter_min, mag:$_filter_mag)';\r\n        var _clamp = 'clamp(s: $_clamp_t, t: $_clamp_t)';\r\n        var _width = 'size(size: ${width}x${height}, actual: ${width_actual}x${height_actual})';\r\n\r\n        return 'Texture(id: $id, tex: $texture, type:$_type, $_width $_filter $_clamp )';\r\n\r\n    } //toString\r\n\r\n    static function type_name(_type:TextureType) {\r\n        return switch(_type) {\r\n            case TextureType.tex_2D: 'tex_2D';\r\n            case TextureType.tex_cube: 'tex_cube';\r\n        }\r\n    }\r\n\r\n    static function filter_name(_filter:FilterType) {\r\n        return switch(_filter) {\r\n            case FilterType.linear:              'linear';\r\n            case FilterType.nearest:             'nearest';\r\n            case FilterType.mip_linear_linear:   'mip_linear_linear';\r\n            case FilterType.mip_linear_nearest:  'mip_linear_nearest';\r\n            case FilterType.mip_nearest_linear:  'mip_nearest_linear';\r\n            case FilterType.mip_nearest_nearest: 'mip_nearest_nearest';\r\n        }\r\n    } //filter_name\r\n\r\n    static function clamp_name(_clamp:ClampType) {\r\n        return switch(_clamp) {\r\n            case ClampType.edge:    'edge';\r\n            case ClampType.repeat:  'repeat';\r\n            case ClampType.mirror:  'mirror';\r\n        }\r\n    } //clamp_name\r\n\r\n} //Texture\r\n\r\n\r\n//General Texture specific types,\r\n//initial abstraction out GL specifics\r\n\r\n\r\n    typedef TextureID = GLTexture;\r\n    typedef TextureFormat = Int;\r\n    typedef TextureDataType = Int;\r\n\r\n    @:enum abstract TextureType(Int) from Int to Int {\r\n\r\n        var tex_2D = GL.TEXTURE_2D;\r\n        var tex_cube = GL.TEXTURE_CUBE_MAP;\r\n        //:future: var tex_3D = 0x806F; //GL.TEXTURE_3D;\r\n\r\n    } //TextureType\r\n\r\n    @:enum abstract TextureSubmitTarget(Int) from Int to Int {\r\n\r\n        var tex_2D          = GL.TEXTURE_2D;\r\n\r\n        var cube_plus_x     = GL.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n        var cube_plus_y     = GL.TEXTURE_CUBE_MAP_POSITIVE_Y;\r\n        var cube_plus_z     = GL.TEXTURE_CUBE_MAP_POSITIVE_Z;\r\n\r\n        var cube_minus_x    = GL.TEXTURE_CUBE_MAP_NEGATIVE_X;\r\n        var cube_minus_y    = GL.TEXTURE_CUBE_MAP_NEGATIVE_Y;\r\n        var cube_minus_z    = GL.TEXTURE_CUBE_MAP_NEGATIVE_Z;\r\n\r\n    } //TextureSubmitTarget\r\n\r\n    @:enum abstract FilterType(Int) from Int to Int {\r\n\r\n        var nearest = GL.NEAREST;\r\n        var linear = GL.LINEAR;\r\n        var mip_nearest_nearest = GL.NEAREST_MIPMAP_NEAREST;\r\n        var mip_linear_nearest = GL.LINEAR_MIPMAP_NEAREST;\r\n        var mip_nearest_linear = GL.NEAREST_MIPMAP_LINEAR;\r\n        var mip_linear_linear = GL.LINEAR_MIPMAP_LINEAR;\r\n\r\n    } //FilterType\r\n\r\n    @:enum abstract ClampType(Int) from Int to Int {\r\n\r\n        var edge = GL.CLAMP_TO_EDGE;\r\n        var repeat = GL.REPEAT;\r\n        var mirror = GL.MIRRORED_REPEAT;\r\n\r\n    } //ClampType\r\n\r\n\r\n//Private Texture types\r\n\r\n    @:enum private abstract ClampSlot(Int) from Int to Int {\r\n        var wrap_s = GL.TEXTURE_WRAP_S;\r\n        var wrap_t = GL.TEXTURE_WRAP_T;\r\n        //:future: var wrap_r = GL.TEXTURE_WRAP_R;\r\n    }\r\n\r\n    @:enum private abstract FilterSlot(Int) from Int to Int {\r\n        var min_filter = GL.TEXTURE_MIN_FILTER;\r\n        var mag_filter = GL.TEXTURE_MAG_FILTER;\r\n    }\r\n","package phoenix;\r\n\r\nimport snow.modules.opengl.GL;\r\nimport phoenix.Batcher;\r\nimport phoenix.Texture;\r\nimport phoenix.Renderer.RenderTarget;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.options.ResourceOptions;\r\nimport luxe.resource.Resource;\r\nimport luxe.Resources;\r\n\r\n\r\n    //A render texture just extends texture so it can be assigned to meshes etc\r\nclass RenderTexture extends Texture implements RenderTarget {\r\n\r\n        //These are for RenderTarget interface\r\n    public var framebuffer : GLFramebuffer;\r\n    public var renderbuffer : GLRenderbuffer;\r\n        //You generally don't want this to be anything other than 0.\r\n    public var viewport_scale : Float = 1;\r\n\r\n    public function new( _options:RenderTextureOptions ) {\r\n\r\n        _options.resource_type = ResourceType.render_texture;\r\n\r\n        super( _options );\r\n\r\n        def(_options.width, Std.int(Luxe.screen.w));\r\n        def(_options.height, Std.int(Luxe.screen.h));\r\n\r\n            //Width and height of this texture item\r\n        width = width_actual = _options.width;\r\n        height = height_actual = _options.height;\r\n\r\n            //super creates the texture id\r\n            //and binds the texture id for us\r\n\r\n            //Create the actual texture storage in gpu memory\r\n        if(_options.texture != null) {\r\n            submit(null);\r\n        }\r\n            //these must be set to be texture complete\r\n        apply_props();\r\n\r\n            //Create the framebuffer\r\n        framebuffer = GL.createFramebuffer();\r\n            //Bind it\r\n        bindBuffer();\r\n\r\n            //create the renderbuffer\r\n        renderbuffer = GL.createRenderbuffer();\r\n            //Bind it so we can attach stuff\r\n        bindRenderBuffer();\r\n\r\n            //Create storage for the depth buffer :todo: optionize\r\n        #if (web || mobile || tvos)\r\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT16, width, height);\r\n        #else\r\n        GL.renderbufferStorage(GL.RENDERBUFFER, GL.DEPTH_COMPONENT, width, height);\r\n        #end\r\n            //Attach the framebuffer texture to the buffer\r\n        GL.framebufferTexture2D( GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, texture, 0 );\r\n            //Attach the depth buffer to the render buffer\r\n        GL.framebufferRenderbuffer( GL.FRAMEBUFFER, GL.DEPTH_ATTACHMENT, GL.RENDERBUFFER, renderbuffer);\r\n\r\n\r\n        var status = GL.checkFramebufferStatus( GL.FRAMEBUFFER );\r\n\r\n        switch (status) {\r\n\r\n            case GL.FRAMEBUFFER_COMPLETE:\r\n\r\n            case GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\r\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\");\r\n\r\n            case GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\r\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\");\r\n\r\n            case GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\r\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\");\r\n\r\n            case GL.FRAMEBUFFER_UNSUPPORTED:\r\n                throw(\"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\");\r\n\r\n            default:\r\n                throw(\"Incomplete framebuffer: \" + status);\r\n        }\r\n\r\n            //no lingering\r\n        unbindBuffer();\r\n        unbindRenderBuffer();\r\n\r\n            //add to the resource system\r\n        system.add(this);\r\n\r\n    } //new\r\n\r\n    override function clear() {\r\n\r\n        super.clear();\r\n\r\n        if(framebuffer != null) {\r\n            GL.deleteFramebuffer(framebuffer);\r\n        }\r\n\r\n        if(renderbuffer != null) {\r\n            GL.deleteRenderbuffer(renderbuffer);\r\n        }\r\n\r\n    } //clear\r\n\r\n    @:noCompletion public function bindBuffer() {\r\n\r\n        Luxe.renderer.state.bindFramebuffer(framebuffer);\r\n\r\n    } //bind\r\n\r\n    @:noCompletion public function unbindBuffer( ?_other:GLFramebuffer=null ) {\r\n\r\n        Luxe.renderer.state.bindFramebuffer( _other );\r\n\r\n    } //unbind\r\n\r\n    @:noCompletion public function bindRenderBuffer() {\r\n\r\n        Luxe.renderer.state.bindRenderbuffer( renderbuffer );\r\n\r\n    } //bind\r\n\r\n    @:noCompletion public function unbindRenderBuffer( ?_other:GLRenderbuffer=null ) {\r\n\r\n        Luxe.renderer.state.bindRenderbuffer( _other );\r\n\r\n    } //unbind\r\n\r\n\r\n} //RenderTexture","package phoenix;\r\n\r\nimport snow.modules.opengl.GL;\r\nimport snow.systems.assets.Asset;\r\n\r\nimport luxe.Log.*;\r\n\r\nimport luxe.Engine;\r\nimport luxe.Rectangle;\r\n\r\nimport phoenix.Batcher;\r\nimport phoenix.RenderPath;\r\nimport phoenix.geometry.Geometry;\r\n\r\nimport phoenix.RenderTexture;\r\nimport phoenix.Shader;\r\nimport phoenix.Color;\r\nimport phoenix.Camera;\r\nimport phoenix.Texture;\r\nimport phoenix.BitmapFont;\r\nimport snow.types.Types.Error;\r\n\r\ntypedef BatcherKey = {\r\n    uuid : String,\r\n    layer : Int\r\n}\r\n\r\nprivate typedef DefaultShader = {\r\n    source: { vert:String, frag:String },\r\n    shader : Shader\r\n}\r\n\r\nprivate typedef DefaultShaders = {\r\n    plain : DefaultShader,\r\n    textured : DefaultShader,\r\n    bitmapfont : DefaultShader\r\n}\r\n\r\ninterface RenderTarget {\r\n    public var width: Int;\r\n    public var height: Int;\r\n    public var viewport_scale: Float;\r\n    public var framebuffer: GLFramebuffer;\r\n    public var renderbuffer: GLRenderbuffer;\r\n}\r\n\r\n@:allow(phoenix.Renderer)\r\nclass Backbuffer implements RenderTarget {\r\n\r\n    public var width: Int;\r\n    public var height: Int;\r\n    public var viewport_scale: Float;\r\n    public var framebuffer: GLFramebuffer;\r\n    public var renderbuffer: GLRenderbuffer;\r\n\r\n    function new(_render_w:Int, _render_h:Int, _render_scale:Float, _fb:GLFramebuffer, _rb:GLRenderbuffer) {\r\n        width = _render_w;\r\n        height = _render_h;\r\n        viewport_scale = _render_scale;\r\n        framebuffer = _fb;\r\n        renderbuffer = _rb;\r\n    }\r\n\r\n}\r\n\r\nclass Renderer {\r\n\r\n    public var batchers : Array<Batcher>;\r\n\r\n    public var core : Engine;\r\n    public var state : RenderState;\r\n    public var default_framebuffer : GLFramebuffer;\r\n    public var default_renderbuffer : GLRenderbuffer;\r\n        //Default rendering\r\n    public var shaders : DefaultShaders;\r\n        //Default view and batching renderer\r\n    public var batcher : Batcher;\r\n    public var camera : Camera;\r\n        //Default font for debug stuff etc\r\n    public var font : BitmapFont;\r\n        //This will be null if there's no default font\r\n    public var font_asset : AssetImage;\r\n        //Default render path is a forward renderer, and acts as a fallback for deferred\r\n        //render path is the active render path, can replace it to render in a different manner\r\n        //It will pass all batchers to be processed etc for you to do whatever with\r\n    public var render_path : RenderPath;\r\n    public var default_render_path : RenderPath;\r\n\r\n    @:isVar public var target (get,set) : RenderTarget;\r\n    public var default_target: RenderTarget;\r\n    public var backbuffer: Backbuffer;\r\n\r\n    public var should_clear : Bool = true;\r\n    public var stop : Bool = false;\r\n    public var stop_count : Int = 0;\r\n    public var clear_color : Color;\r\n\r\n    public var stats : RendererStats;\r\n\r\n    public function new( _core:luxe.Engine, _asset:AssetImage ) {\r\n\r\n        core = _core;\r\n        font_asset = _asset;\r\n\r\n        //store the default framebuffer/renderbuffer as on some platforms it is not just '0'\r\n        //:todo:refactor:gl:\r\n\r\n            default_framebuffer = GL.getParameter(GL.FRAMEBUFFER_BINDING);\r\n            default_renderbuffer = GL.getParameter(GL.RENDERBUFFER_BINDING);\r\n\r\n            #if luxe_no_device_pixel_scaling\r\n                var render_scale_ratio = 1.0;\r\n            #else\r\n                var render_scale_ratio = core.app.runtime.window_device_pixel_ratio();\r\n            #end\r\n\r\n            backbuffer = new Backbuffer(\r\n                core.app.runtime.window_width(),\r\n                core.app.runtime.window_height(),\r\n                render_scale_ratio,\r\n                default_framebuffer,\r\n                default_renderbuffer\r\n            );\r\n\r\n        _debug(\"default Framebuffer set to \" + default_framebuffer);\r\n        _debug(\"default Renderbuffer set to \" + default_renderbuffer);\r\n\r\n    } //new\r\n\r\n    public function init() {\r\n\r\n            //:todo:GL context query\r\n            //Don't remove this,\r\n            //it's a catch for crashing because\r\n            //we don't have a valid GL context, until the query\r\n            //is finalized on snow side\r\n        log('opengl ${snow.modules.opengl.GL.versionString()}');\r\n\r\n        state = new RenderState(this);\r\n        clear_color = new Color().rgb(0x1a1a1a);\r\n        stats = new RendererStats();\r\n        target = default_target = backbuffer;\r\n        batchers = [];\r\n\r\n            //The default view\r\n        camera = new Camera();\r\n            //Create the default render path\r\n        default_render_path = new RenderPath( this );\r\n            //Apply it\r\n        render_path = default_render_path;\r\n\r\n            //init shaders\r\n        create_default_shaders();\r\n\r\n            //create the default batcher\r\n        batcher = new Batcher( this, 'default batcher' );\r\n        batcher.layer = 1;\r\n        add_batch(batcher);\r\n\r\n        #if !no_default_font\r\n\r\n            create_default_font();\r\n\r\n        #end //no_default_font\r\n\r\n        if(Luxe.core.app.config.render.depth > 0) {\r\n                // Enable z buffer use\r\n            state.enable(GL.DEPTH_TEST);\r\n                // Accept fragment if it closer or equal away from the other\r\n            state.depth_function(GL.LEQUAL);\r\n                //Clear the depth buffer\r\n            GL.clearDepth(1.0);\r\n        }\r\n\r\n            //Enable blending\r\n        GL.enable(GL.BLEND);\r\n        GL.blendFunc(GL.SRC_ALPHA, GL.ONE_MINUS_SRC_ALPHA);\r\n\r\n            //Make sure that we aren't premultiplying the back buffer\r\n        #if luxe_web\r\n            GL.pixelStorei(GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n        #end //luxe_web\r\n\r\n    } //init\r\n\r\n    public function destroy() {\r\n\r\n        clear( new luxe.Color().rgb(0xff440b) );\r\n\r\n    } //destroy\r\n\r\n    @:allow(phoenix.Batcher)\r\n    function sort_batchers( a:Batcher, b:Batcher ) {\r\n        if(a.layer < b.layer) return -1;\r\n        if(a.layer > b.layer) return 1;\r\n        if(a.sequence < b.sequence) return -1;\r\n        if(a.sequence > b.sequence) return 1;\r\n        return 1;\r\n    } //sort_batchers\r\n\r\n    public function add_batch( batch:Batcher ) {\r\n\r\n        batchers.push( batch );\r\n        batchers.sort( sort_batchers );\r\n\r\n    } //add_batch\r\n\r\n    public function remove_batch( batch:Batcher ) {\r\n\r\n        batchers.remove( batch );\r\n\r\n    } //remove_batch\r\n\r\n        /** Create a batcher, convenience for create batcher, add batcher (option), and create a camera for the batcher. */\r\n    public function create_batcher( ? options:luxe.options.BatcherOptions ) : Batcher {\r\n\r\n            //:todo: why is this hardcoded at 2\r\n        var _new_batcher_layer = 2;\r\n\r\n        if(options != null) {\r\n\r\n            def(options.name, 'batcher');\r\n            def(options.layer, _new_batcher_layer);\r\n            def(options.camera, new phoenix.Camera());\r\n            def(options.max_verts, 16384);\r\n\r\n        } else {\r\n            options = {\r\n                name : 'batcher',\r\n                camera : new phoenix.Camera(),\r\n                layer : _new_batcher_layer,\r\n                max_verts : 16384\r\n            }\r\n        }\r\n\r\n        var _batcher = new Batcher( this, options.name, options.max_verts );\r\n            _batcher.view = options.camera;\r\n            _batcher.layer = options.layer;\r\n\r\n        if( options.no_add == null || options.no_add == false ) {\r\n            add_batch( _batcher );\r\n        }\r\n\r\n\r\n        return _batcher;\r\n\r\n    } //create_batcher\r\n\r\n\r\n    public function clear( _color:Color ) {\r\n\r\n        def(_color, clear_color);\r\n\r\n        GL.clearColor( _color.r, _color.g, _color.b, _color.a );\r\n\r\n        if(Luxe.core.app.config.render.depth > 0) {\r\n            GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT);\r\n            GL.clearDepth(1.0);\r\n        } else {\r\n            GL.clear(GL.COLOR_BUFFER_BIT);\r\n        }\r\n\r\n    } //clear\r\n\r\n    public function blend_disable(disabled_state:Bool) {\r\n\r\n        disabled_state ? state.enable(GL.BLEND) : state.disable(GL.BLEND);\r\n\r\n    } //blend_disable\r\n\r\n    public function blend_mode(?_src_mode:BlendMode = BlendMode.src_alpha, _dst_mode:BlendMode = BlendMode.one_minus_src_alpha) {\r\n\r\n        GL.blendFunc(_src_mode, _dst_mode);\r\n\r\n    } //set blendmode\r\n\r\n    public function blend_equation(?_equation:BlendEquation = BlendEquation.add) {\r\n\r\n        GL.blendEquation(_equation);\r\n\r\n    } //set blend equation\r\n\r\n        //The resize handler\r\n    @:allow(luxe.Engine)\r\n    function internal_resized(_w:Int, _h:Int) {\r\n\r\n        backbuffer.width = _w;\r\n        backbuffer.height = _h;\r\n\r\n            //if device pixels are used, update the scale factor in case they changed monitors\r\n        #if !luxe_no_device_pixel_scaling\r\n            backbuffer.viewport_scale = core.app.runtime.window_device_pixel_ratio();\r\n        #end\r\n\r\n    } //internal_resized\r\n\r\n        //The main render function\r\n    @:allow(luxe.Engine)\r\n    function process() {\r\n\r\n        // if(stop) { return; }\r\n\r\n        if(should_clear) {\r\n            clear( clear_color );\r\n        }\r\n\r\n            //render\r\n        render_path.render( batchers, stats );\r\n\r\n        // stop_count++;\r\n        // if(stop_count >= 3) {\r\n        //     stop = true;\r\n        // }\r\n\r\n    } //process\r\n\r\n    @:allow(luxe.Engine)\r\n    function prerender() {\r\n\r\n        stats.reset();\r\n\r\n    } //prerender\r\n\r\n    function get_target() : RenderTarget {\r\n\r\n        return target;\r\n\r\n    } //get_target\r\n\r\n    function set_target(_target:RenderTarget) {\r\n\r\n        if(_target == null) _target = default_target;\r\n\r\n        bind_target(_target);\r\n\r\n        return target = _target;\r\n\r\n    } //set_target\r\n\r\n    public inline function bind_target(_target:RenderTarget) {\r\n\r\n        state.bindFramebuffer(_target.framebuffer);\r\n        state.bindRenderbuffer(_target.renderbuffer);\r\n\r\n    } //bind_target\r\n\r\n    function create_default_shaders() {\r\n\r\n        _debug('creating default shaders...');\r\n\r\n        var vert = null;\r\n        var frag = null;\r\n        var frag_textured = null;\r\n        var frag_bitmapfont = null;\r\n\r\n        #if (linc_opengl && !linc_opengl_GLES && !js)\r\n            if(Luxe.snow.config.render.opengl.profile == snow.types.Types.OpenGLProfile.core) {\r\n                var vaos = [0];\r\n                opengl.GL.glGenVertexArrays(1, vaos);\r\n                opengl.GL.glBindVertexArray(vaos[0]);\r\n\r\n                vert = haxe.Resource.getString('default.vert.gl3.glsl');\r\n                frag = haxe.Resource.getString('default.frag.gl3.glsl');\r\n                frag_textured = haxe.Resource.getString('default.frag.textured.gl3.glsl');\r\n                frag_bitmapfont = haxe.Resource.getString('default.frag.bitmapfont.gl3.glsl');\r\n            }\r\n        #end\r\n\r\n        if(vert == null) {\r\n            vert = haxe.Resource.getString('default.vert.glsl');\r\n            frag = haxe.Resource.getString('default.frag.glsl');\r\n            frag_textured = haxe.Resource.getString('default.frag.textured.glsl');\r\n            frag_bitmapfont = haxe.Resource.getString('default.frag.bitmapfont.glsl');\r\n        }\r\n\r\n\r\n        #if luxe_web\r\n            var ext = snow.modules.opengl.GL.gl.getExtension('OES_standard_derivatives');\r\n        #end\r\n\r\n            //for web + mobile, these are required\r\n        #if !desktop\r\n            frag = \"precision mediump float;\\n\" + frag;\r\n            frag_textured = \"precision mediump float;\\n\" + frag_textured;\r\n            frag_bitmapfont = \"#extension GL_OES_standard_derivatives : enable\\n#extension OES_standard_derivatives : enable\\nprecision mediump float;\\n\" + frag_bitmapfont;\r\n        #end\r\n\r\n        var _plain = new Shader({ id:'luxe.shader', frag_id:'default', vert_id:'default' });\r\n        var _textured = new Shader({ id:'luxe.shader_textured', frag_id:'textured', vert_id:'default' });\r\n        var _font = new Shader({ id:'luxe.shader_bitmapfont', frag_id:'bitmapfont', vert_id:'default' });\r\n\r\n        //create compile and link the shaders\r\n        var _ok = true;\r\n\r\n            _ok = _ok && _plain.from_string( vert, frag );\r\n            _ok = _ok && _textured.from_string( vert, frag_textured );\r\n            _ok = _ok && _font.from_string( vert, frag_bitmapfont );\r\n\r\n        assert(_ok, 'Default shaders failed to compile or link. See log for errors');\r\n\r\n        //store for use\r\n\r\n        shaders = {\r\n            plain : { shader : _plain, source : { vert:vert, frag:frag } },\r\n            textured : { shader : _textured, source : { vert:vert, frag:frag_textured } },\r\n            bitmapfont : { shader : _font, source : { vert:vert, frag:frag_bitmapfont } },\r\n        };\r\n\r\n        _debug('done.');\r\n\r\n    } //create_default_shaders\r\n\r\n    function create_default_font() {\r\n\r\n        assertnull(font_asset, 'Renderer / failed to create the default font');\r\n\r\n        _debug(\"creating the default font...\");\r\n\r\n                //Create the font texture\r\n            var _font_texture = new Texture({\r\n                id:'luxe.font.png',\r\n                width: font_asset.image.width_actual,\r\n                height: font_asset.image.height_actual,\r\n                pixels: font_asset.image.pixels\r\n            });\r\n\r\n            assertnull(_font_texture, 'Renderer / failed to create the default font... font_texture was null.');\r\n\r\n            var _font_data = haxe.Resource.getString('default.fnt');\r\n\r\n            font = new BitmapFont({\r\n                id: 'luxe.font',\r\n                font_data: _font_data,\r\n                pages: [ _font_texture ]\r\n            });\r\n\r\n        _debug(\"done. \" + _font_texture.width + 'x' + _font_texture.height );\r\n\r\n    } //create_default_font\r\n\r\n} //renderer\r\n\r\n\r\n\r\nclass RendererStats {\r\n\r\n    public function new(){}\r\n    public var batchers : Int = 0;\r\n    public var geometry_count : Int = 0;\r\n    public var dynamic_batched_count : Int = 0;\r\n    public var static_batched_count : Int = 0;\r\n    public var visible_count : Int = 0;\r\n    public var draw_calls : Int = 0;\r\n    public var vert_count : Int = 0;\r\n\r\n    public function reset() {\r\n        geometry_count = 0;\r\n        dynamic_batched_count = 0;\r\n        static_batched_count = 0;\r\n        visible_count = 0;\r\n        draw_calls = 0;\r\n        vert_count = 0;\r\n    }\r\n\r\n    function toString() {\r\n        return\r\n            'Renderer Statistics\\n' +\r\n            '\\tbatcher count : ' + batchers + '\\n' +\r\n            '\\ttotal geometry : ' + geometry_count + '\\n' +\r\n            '\\tvisible geometry : ' + visible_count + '\\n' +\r\n            '\\tdynamic batched geometry : ' + dynamic_batched_count + '\\n' +\r\n            '\\tstatic batched geometry : ' + static_batched_count + '\\n' +\r\n            '\\ttotal draw calls : ' + draw_calls + '\\n' +\r\n            '\\ttotal vertices : ' + vert_count;\r\n    }\r\n\r\n}\r\n\r\n","package phoenix.geometry;\r\n\r\nimport luxe.Log.*;\r\nimport phoenix.Vector;\r\nimport phoenix.geometry.Vertex;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Batcher.PrimitiveType;\r\nimport luxe.options.GeometryOptions.CircleGeometryOptions;\r\n\r\n\r\nclass RingGeometry extends Geometry {\r\n\r\n    public function new(_options:CircleGeometryOptions) {\r\n\r\n        _options.primitive_type = PrimitiveType.lines;\r\n\r\n        super(_options);\r\n\r\n            //some default values so that the circle is visible with no values\r\n        var _radius_x = 32.0;\r\n        var _radius_y = 32.0;\r\n\r\n        def(_options.end_angle, 360);\r\n        def(_options.start_angle, 0);\r\n\r\n        if(_options.r != null) {\r\n            _radius_x = _options.r;\r\n            _radius_y = _options.r;\r\n        }\r\n\r\n        if(_options.rx != null) {\r\n            _radius_x = _options.rx;\r\n        }\r\n\r\n        if(_options.ry != null) {\r\n            _radius_y = _options.ry;\r\n        }\r\n\r\n        if(_options.steps == null) {\r\n            if(_options.smooth == null) {\r\n                var _max = Math.max(_radius_x, _radius_y);\r\n                _options.steps = Luxe.utils.geometry.segments_for_smooth_circle( _max );\r\n            } else {\r\n                var _smooth = _options.smooth;\r\n                var _max = Math.max(_radius_x, _radius_y);\r\n                _options.steps = Luxe.utils.geometry.segments_for_smooth_circle( _max, _smooth );\r\n            }\r\n        }\r\n\r\n            //Apply the new options\r\n        set( _options.x, _options.y, _radius_x, _radius_y, _options.steps, _options.start_angle, _options.end_angle );\r\n\r\n    } //new\r\n\r\n    public function set( _x:Float, _y:Float, _rx:Float, _ry:Float, _steps:Int, _start_angle_degrees:Float=0, _end_angle_degrees:Float=360 ) {\r\n\r\n            //adapted from\r\n            //http://slabode.exofire.net/circle_draw.shtml\r\n\r\n            if(Math.abs(_start_angle_degrees) > 360) _start_angle_degrees %= 360;\r\n            if(Math.abs(_end_angle_degrees) > 360) _end_angle_degrees %= 360;\r\n\r\n            var _start_angle_rad = luxe.utils.Maths.radians(_start_angle_degrees);\r\n            var _end_angle_rad = luxe.utils.Maths.radians(_end_angle_degrees);\r\n\r\n            var _range = _end_angle_rad - _start_angle_rad;\r\n\r\n                //Precompute the value based on segments\r\n            var theta = _range / _steps;\r\n\r\n            var tangential_factor = Math.tan( theta );\r\n            var radial_factor = Math.cos( theta );\r\n\r\n            var x : Float = _rx * Math.cos(_start_angle_rad);\r\n            var y : Float = _rx * Math.sin(_start_angle_rad);\r\n\r\n            //now work out the ratio between _x and _y\r\n            //:todo: epsilon\r\n            var radial_ratio : Float = _rx / _ry;\r\n            if(radial_ratio == 0) radial_ratio = 0.000000001;\r\n\r\n            var _index = 0;\r\n            var _segment_pos = [];\r\n            for( i in 0 ... _steps ) {\r\n\r\n                var __x = x;\r\n                var __y = y / radial_ratio;\r\n\r\n                    //the position of this current segment\r\n                var _seg = new Vector( __x,__y );\r\n                    //we store them to reference them behind\r\n                _segment_pos.push(_seg);\r\n\r\n                    //one for the segment position\r\n                add(new Vertex( _seg, color ));\r\n\r\n                    //and if past 0, one for the prev segment to close the tri\r\n                if(_index > 0) {\r\n                    var prevvert = _segment_pos[_index];\r\n                    add(new Vertex( prevvert.clone(), color ));\r\n                }\r\n\r\n                var tx = -y;\r\n                var ty = x;\r\n\r\n                x += tx * tangential_factor;\r\n                y += ty * tangential_factor;\r\n\r\n                x *= radial_factor;\r\n                y *= radial_factor;\r\n\r\n                _index++;\r\n\r\n            } //for\r\n\r\n                //if steps is < 0 no segments were added\r\n            if(_segment_pos.length > 0) {\r\n                add( new Vertex( _segment_pos[0].clone(), color ) );\r\n            }\r\n\r\n        //and finally, set the position\r\n        transform.pos = new Vector( _x, _y );\r\n\r\n    } //set\r\n\r\n} //RingGeometry\r\n","package phoenix.geometry;\r\n\r\nimport luxe.Log.*;\r\nimport phoenix.Vector;\r\nimport phoenix.geometry.Vertex;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Batcher.PrimitiveType;\r\nimport luxe.options.GeometryOptions.CircleGeometryOptions;\r\n\r\n\r\nclass ArcGeometry extends RingGeometry {\r\n\r\n    public function new(_options:CircleGeometryOptions) {\r\n\r\n        super(_options);\r\n\r\n            //remove the first center point\r\n            //and the last extra vert\r\n        vertices.pop();\r\n        vertices.pop();\r\n\r\n    } //new\r\n\r\n} //ArcGeometry\r\n","package phoenix.geometry;\r\n\r\nimport luxe.Log.*;\r\nimport phoenix.Vector;\r\nimport phoenix.geometry.Vertex;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Batcher.PrimitiveType;\r\nimport luxe.options.GeometryOptions.CircleGeometryOptions;\r\n\r\n\r\nclass CircleGeometry extends Geometry {\r\n\r\n    public function new(_options:CircleGeometryOptions) {\r\n\r\n        _options.primitive_type = PrimitiveType.triangles;\r\n\r\n        super(_options);\r\n\r\n            //some default values so that the circle is visible with no values\r\n        var _radius_x = 32.0;\r\n        var _radius_y = 32.0;\r\n\r\n        def(_options.end_angle, 360);\r\n        def(_options.start_angle, 0);\r\n\r\n        if(_options.r != null) {\r\n            _radius_x = _options.r;\r\n            _radius_y = _options.r;\r\n        }\r\n\r\n        if(_options.rx != null) {\r\n            _radius_x = _options.rx;\r\n        }\r\n\r\n        if(_options.ry != null) {\r\n            _radius_y = _options.ry;\r\n        }\r\n\r\n        if(_options.steps == null) {\r\n            if(_options.smooth == null) {\r\n                var _max = Math.max(_radius_x, _radius_y);\r\n                _options.steps = Luxe.utils.geometry.segments_for_smooth_circle( _max );\r\n            } else {\r\n                var _smooth = _options.smooth;\r\n                var _max = Math.max(_radius_x, _radius_y);\r\n                _options.steps = Luxe.utils.geometry.segments_for_smooth_circle( _max, _smooth );\r\n            }\r\n        }\r\n\r\n            //Apply the new options\r\n        set( _options.x, _options.y, _radius_x, _radius_y, _options.steps, _options.start_angle, _options.end_angle );\r\n\r\n    } //new\r\n\r\n    public function set( _x:Float, _y:Float, _rx:Float, _ry:Float, _steps:Int, _start_angle:Float=0, _end_angle:Float=360 ) {\r\n\r\n            //adapted from\r\n            //http://slabode.exofire.net/circle_draw.shtml\r\n\r\n            var half_pi = Math.PI/2;\r\n            var _start_angle_rad = luxe.utils.Maths.radians(_start_angle) - half_pi;\r\n            var _end_angle_rad = luxe.utils.Maths.radians(_end_angle) - half_pi;\r\n\r\n            var _range = _end_angle_rad - _start_angle_rad;\r\n\r\n                //how much % of 360 is this, to limit step count?\r\n            _steps = Math.ceil((Math.abs(_range)/(Math.PI*2)) * _steps );\r\n\r\n                //Precompute the value based on segments\r\n            var theta = _range / _steps;\r\n\r\n            var tangential_factor = Math.tan( theta );\r\n            var radial_factor = Math.cos( theta );\r\n\r\n            var x = _rx * Math.cos(_start_angle_rad);\r\n            var y = _rx * Math.sin(_start_angle_rad);\r\n\r\n            //now work out the ratio between _x and _y\r\n            var radial_ratio = _rx / _ry;\r\n            if(radial_ratio == 0) {\r\n                radial_ratio = 0.000000001;\r\n            }\r\n\r\n            var _index = 0;\r\n            var _segment_pos = [];\r\n            for( i in 0 ... _steps+1 ) {\r\n\r\n                var __x = x;\r\n                var __y = y / radial_ratio;\r\n\r\n                    //the position of this current segment\r\n                var _seg = new Vector( __x,__y );\r\n                    //we store them to reference them behind\r\n                _segment_pos.push(_seg);\r\n\r\n                    //and if past first node, close the prev tri with new seg pos\r\n                if(_index > 0) {\r\n                    add(new Vertex( _seg, color )); //2\r\n                }\r\n\r\n                    //one for the center point\r\n                add( new Vertex( new Vector( 0,0 ), color ) ); //0\r\n\r\n                    //one for the segment position\r\n                add(new Vertex( _seg, color )); //1\r\n\r\n                var tx = -y;\r\n                var ty = x;\r\n\r\n                x += tx * tangential_factor;\r\n                y += ty * tangential_factor;\r\n\r\n                x *= radial_factor;\r\n                y *= radial_factor;\r\n\r\n                _index++;\r\n\r\n            } //for\r\n\r\n        add(new Vertex( _segment_pos[_steps], color )); //1\r\n\r\n            //and finally, set the position\r\n        transform.pos = new Vector( _x, _y );\r\n\r\n    } //set\r\n\r\n\r\n} //CircleGeometry\r\n","package phoenix.geometry;\r\n\r\nimport phoenix.Rectangle;\r\nimport phoenix.Texture;\r\nimport phoenix.Shader;\r\nimport phoenix.Batcher;\r\n\r\n@:allow(phoenix.Batcher)\r\n@:allow(phoenix.BatchState)\r\n@:allow(phoenix.geometry.Geometry)\r\nclass GeometryState {\r\n\r\n    var dirty = false;\r\n    var log = false;\r\n    var ignore_blend = true;\r\n\r\n    @:isVar var primitive_type(default, set) : PrimitiveType;\r\n    @:isVar var shader(default, set) : Shader;\r\n    @:isVar var texture(default, set) : Texture;\r\n    @:isVar var depth(default, set) : Float = 0.0;\r\n    @:isVar var clip(default, set) : Bool = false;\r\n    @:isVar var clip_x(default, set) : Float = 0;\r\n    @:isVar var clip_y(default, set) : Float = 0;\r\n    @:isVar var clip_w(default, set) : Float = 0;\r\n    @:isVar var clip_h(default, set) : Float = 0;\r\n    @:isVar var blend_disabled(default, set) : Bool = false;\r\n    @:isVar var blend_src_alpha(default, set) : BlendMode = BlendMode.src_alpha;\r\n    @:isVar var blend_src_rgb(default, set) : BlendMode = BlendMode.src_alpha;\r\n    @:isVar var blend_dest_alpha(default, set) : BlendMode = BlendMode.one_minus_src_alpha;\r\n    @:isVar var blend_dest_rgb(default, set) : BlendMode = BlendMode.one_minus_src_alpha;\r\n\r\n    inline\r\n    function new() {\r\n\r\n        texture = null;\r\n        shader = null;\r\n        primitive_type = PrimitiveType.points;\r\n\r\n    } //new\r\n\r\n    inline\r\n    function clone_onto( _other:GeometryState )  {\r\n\r\n        _other.dirty = dirty;\r\n        _other.texture = texture;\r\n        _other.shader = shader;\r\n        _other.depth = depth;\r\n        _other.primitive_type = primitive_type;\r\n        _other.clip = clip;\r\n        _other.clip_x = clip_x;\r\n        _other.clip_y = clip_y;\r\n        _other.clip_w = clip_w;\r\n        _other.clip_h = clip_h;\r\n        _other.blend_disabled = blend_disabled;\r\n        _other.blend_src_alpha = blend_src_alpha;\r\n        _other.blend_src_rgb = blend_src_rgb;\r\n        _other.blend_dest_alpha = blend_dest_alpha;\r\n        _other.blend_dest_rgb = blend_dest_rgb;\r\n        _other.ignore_blend = ignore_blend;\r\n\r\n    } //clone_onto\r\n\r\n    function str() {\r\n\r\n        if(!log) return;\r\n\r\n        trace('\\t+ GEOMETRYSTATE $dirty');\r\n            trace('\\t\\tdepth - $depth');\r\n            trace('\\t\\ttexture - ' + (( texture == null) ? 'null' :  texture.id ));\r\n            if(texture != null) {\r\n                trace('\\t\\t\\t ${texture.texture}');\r\n            }\r\n            trace('\\t\\tshader - ' + (( shader == null) ? 'null' :  shader.id ));\r\n            trace('\\t\\tprimitive_type - $primitive_type');\r\n            trace('\\t\\tclip - $clip');\r\n            trace('\\t\\tclip rect - $clip_x,$clip_y,$clip_w,$clip_h');\r\n            trace('\\t\\tblend - $blend_disabled - src_alpha($blend_src_alpha) src_rgb($blend_src_rgb) dest_alpha($blend_dest_alpha) dest_rgb($blend_dest_rgb)');\r\n        trace('\\t- GEOMETRYSTATE');\r\n\r\n    } //str\r\n\r\n    inline\r\n    function clean() {\r\n\r\n        dirty = false;\r\n\r\n    } //clean\r\n\r\n    #if !luxe_no_hotpath_inline @:extern inline #end\r\n    function update( other : GeometryState ) {\r\n\r\n        if(depth != other.depth) {\r\n            depth = other.depth;\r\n        }\r\n\r\n        if(texture != other.texture) {\r\n            texture = other.texture;\r\n        }\r\n\r\n        if(shader != other.shader) {\r\n            shader = other.shader;\r\n        }\r\n\r\n        if(primitive_type != other.primitive_type) {\r\n            primitive_type = other.primitive_type;\r\n        }\r\n\r\n        if(clip != other.clip) {\r\n            clip = other.clip;\r\n        }\r\n\r\n        if(clip_x != other.clip_x) {\r\n            clip_x = other.clip_x;\r\n        } //clip_x\r\n\r\n        if(clip_y != other.clip_y) {\r\n            clip_y = other.clip_y;\r\n        } //clip_y\r\n\r\n        if(clip_w != other.clip_w) {\r\n            clip_w = other.clip_w;\r\n        } //clip_w\r\n\r\n        if(clip_h != other.clip_h) {\r\n            clip_h = other.clip_h;\r\n        } //clip_h\r\n\r\n        if(blend_disabled != other.blend_disabled) {\r\n            blend_disabled = other.blend_disabled;\r\n        } //blend_disabled\r\n\r\n        if(blend_src_alpha != other.blend_src_alpha) {\r\n            blend_src_alpha = other.blend_src_alpha;\r\n        } //blend_src_alpha\r\n\r\n        if(blend_src_rgb != other.blend_src_rgb) {\r\n            blend_src_rgb = other.blend_src_rgb;\r\n        } //blend_src_rgb\r\n\r\n        if(blend_dest_alpha != other.blend_dest_alpha) {\r\n            blend_dest_alpha = other.blend_dest_alpha;\r\n        } //blend_dest_alpha\r\n\r\n        if(blend_dest_rgb != other.blend_dest_rgb) {\r\n            blend_dest_rgb = other.blend_dest_rgb;\r\n        } //blend_dest_rgb\r\n\r\n        if(ignore_blend != other.ignore_blend) {\r\n            ignore_blend = other.ignore_blend;\r\n        } //ignore_blend\r\n\r\n    } //update\r\n\r\n//Primitive Type\r\n    inline function set_primitive_type(val : PrimitiveType) : PrimitiveType {\r\n        dirty = true;\r\n        return primitive_type = val;\r\n    }\r\n//Texture\r\n    inline function set_texture(val : Texture) : Texture {\r\n        dirty = true;\r\n        return texture = val;\r\n    }\r\n//Shader\r\n    inline function set_shader(val : Shader) : Shader {\r\n        dirty = true;\r\n        return shader = val;\r\n    }\r\n//Depth\r\n    inline function set_depth(val : Float) : Float {\r\n        return depth = val;\r\n    }\r\n//Clip\r\n    inline function set_clip(val : Bool) : Bool {\r\n        dirty = true;\r\n        return clip = val;\r\n    }\r\n//Clip rect\r\n    inline function set_clip_x(val : Float) : Float {\r\n        dirty = true;\r\n        return clip_x = val;\r\n    }\r\n    inline function set_clip_y(val : Float) : Float {\r\n        dirty = true;\r\n        return clip_y = val;\r\n    }\r\n    inline function set_clip_w(val : Float) : Float {\r\n        dirty = true;\r\n        return clip_w = val;\r\n    }\r\n    inline function set_clip_h(val : Float) : Float {\r\n        dirty = true;\r\n        return clip_h = val;\r\n    }\r\n    inline function set_blend_disabled(val : Bool) : Bool {\r\n        dirty = true;\r\n        return blend_disabled = val;\r\n    }\r\n    inline function set_blend_src_alpha(val : Int) : Int {\r\n        dirty = true;\r\n        return blend_src_alpha = val;\r\n    }\r\n    inline function set_blend_src_rgb(val : Int) : Int {\r\n        dirty = true;\r\n        return blend_src_rgb = val;\r\n    }\r\n    inline function set_blend_dest_alpha(val : Int) : Int {\r\n        dirty = true;\r\n        return blend_dest_alpha = val;\r\n    }\r\n    inline function set_blend_dest_rgb(val : Int) : Int {\r\n        dirty = true;\r\n        return blend_dest_rgb = val;\r\n    }\r\n//\r\n\r\n}\r\n","package phoenix.geometry;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Vector;\r\nimport luxe.Color;\r\n\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.Geometry;\r\n\r\nimport luxe.options.GeometryOptions.LineGeometryOptions;\r\n\r\nclass LineGeometry extends Geometry {\r\n\r\n    @:isVar public var p0(default,set) : Vector;\r\n    @:isVar public var p1(default,set) : Vector;\r\n    @:isVar public var color0(default,set) : Color;\r\n    @:isVar public var color1(default,set) : Color;\r\n\r\n    public function new(_options:LineGeometryOptions) {\r\n\r\n        _options.primitive_type = PrimitiveType.lines;\r\n\r\n        super(_options);\r\n\r\n        def(_options.color, new Color());\r\n        def(_options.color0, _options.color);\r\n        def(_options.color1, _options.color);\r\n\r\n        p0 = def(_options.p0, new Vector());\r\n        p1 = def(_options.p1, new Vector(64,64)); //:todo: unit constant\r\n\r\n        add(new Vertex( p0, _options.color0 ));\r\n        add(new Vertex( p1, _options.color1 ));\r\n\r\n    } //new\r\n\r\n//Internal\r\n\r\n    function set_p0(_p:Vector) : Vector {\r\n\r\n        p0 = _p;\r\n\r\n        if(vertices.length == 0) return p0;\r\n\r\n        vertices[0].pos = p0;\r\n\r\n        return p0 = _p;\r\n\r\n    } //set_p0\r\n\r\n    function set_p1(_p:Vector) : Vector {\r\n\r\n        p1 = _p;\r\n\r\n        if(vertices.length == 0) return p1;\r\n\r\n        vertices[1].pos = p1;\r\n\r\n        return p1 = _p;\r\n\r\n    } //set_p1\r\n\r\n    function set_color0(_c:Color) : Color {\r\n\r\n        color0 = _c;\r\n\r\n        if(vertices.length == 0) return color0;\r\n\r\n        vertices[0].color = color0;\r\n\r\n        return color0;\r\n\r\n    } //set_color0\r\n\r\n    function set_color1(_c:Color) : Color {\r\n\r\n        color1 = _c;\r\n\r\n        if(vertices.length == 0) return color1;\r\n\r\n        vertices[1].color = color1;\r\n\r\n        return color1;\r\n\r\n    } //set_color1\r\n\r\n} //LineGeometry\r\n","package phoenix.geometry;\r\n\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.Vertex;\r\nimport phoenix.geometry.TextureCoord;\r\nimport phoenix.Rectangle;\r\nimport phoenix.Shader;\r\nimport phoenix.Texture;\r\n\r\nimport phoenix.Color;\r\nimport phoenix.Vector;\r\n\r\nimport luxe.Log.*;\r\nimport luxe.options.GeometryOptions;\r\n\r\ntypedef PackedQuad = {\r\n    uid : UInt,\r\n    verts : Array<Vertex>,\r\n    flipx : Bool,\r\n    flipy : Bool,\r\n    visible : Bool,\r\n    _uv_cache : Rectangle\r\n}\r\n\r\ntypedef PackedQuadOptions = {\r\n    x : Float,\r\n    y : Float,\r\n    w : Float,\r\n    h : Float,\r\n\r\n    ?color : Color,\r\n    ?uv : Rectangle,\r\n    ?flipx : Bool,\r\n    ?flipy : Bool,\r\n    ?visible : Bool\r\n}\r\n\r\n//Note that a quad pack geometry has only one texture,\r\n// it is for optimising singular geometry that shares many quads\r\n// and share a shader and texture and state\r\n\r\nclass QuadPackGeometry extends Geometry {\r\n\r\n    public var quads : Map<Int, PackedQuad>;\r\n\r\n    public function new(_options:GeometryOptions) {\r\n\r\n        _options.primitive_type = PrimitiveType.triangles;\r\n\r\n        super( _options );\r\n\r\n        quads = new Map();\r\n\r\n    } //new\r\n\r\n    public function clear() {\r\n\r\n        for(q in quads.keys()) {\r\n            quad_remove( q );\r\n        }\r\n\r\n    } //clear\r\n\r\n    public function quad_add( _options:PackedQuadOptions ) : Int {\r\n\r\n        def(_options.visible, true);\r\n        def(_options.flipx, false);\r\n        def(_options.flipy, false);\r\n\r\n        var _uid = Luxe.utils.uniquehash();\r\n\r\n            //First triangle\r\n        var vert0 = new Vertex( new Vector( _options.x,            _options.y ), _options.color );\r\n        var vert1 = new Vertex( new Vector( _options.x+_options.w, _options.y ), _options.color );\r\n        var vert2 = new Vertex( new Vector( _options.x+_options.w, _options.y+_options.h ), _options.color );\r\n\r\n           //Second triangle\r\n        var vert3 = new Vertex( new Vector( _options.x , _options.y+_options.h ), _options.color );\r\n        var vert4 = new Vertex( new Vector( _options.x , _options.y ), _options.color );\r\n        var vert5 = new Vertex( new Vector( _options.x+_options.w , _options.y+_options.h ), _options.color );\r\n\r\n                //tl\r\n            add( vert0 );\r\n                //tr\r\n            add( vert1 );\r\n                //br\r\n            add( vert2 );\r\n                //bl\r\n            add( vert3 );\r\n                //tl\r\n            add( vert4 );\r\n                //br\r\n            add( vert5 );\r\n\r\n             //create the packed quad\r\n        var _quad:PackedQuad = {\r\n            uid : _uid,\r\n            verts : [],\r\n            flipx : _options.flipx,\r\n            flipy : _options.flipx,\r\n            visible : _options.visible,\r\n            _uv_cache : new Rectangle(0,0,1,1)\r\n        }\r\n\r\n            _quad.verts.push( vert0 );\r\n            _quad.verts.push( vert1 );\r\n            _quad.verts.push( vert2 );\r\n            _quad.verts.push( vert3 );\r\n            _quad.verts.push( vert4 );\r\n            _quad.verts.push( vert5 );\r\n\r\n        quads.set( _uid, _quad );\r\n\r\n        if(_options.uv != null) {\r\n            quad_uv( _uid, _options.uv );\r\n        }\r\n\r\n            //for locked geometry\r\n        dirty = true;\r\n\r\n        return _uid;\r\n\r\n    } //add_quad\r\n\r\n    public function quad_remove( _quad_id:Int ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n\r\n            remove( _quad.verts[0] );\r\n            remove( _quad.verts[1] );\r\n            remove( _quad.verts[2] );\r\n            remove( _quad.verts[3] );\r\n            remove( _quad.verts[4] );\r\n            remove( _quad.verts[5] );\r\n\r\n            quads.remove( _quad_id );\r\n\r\n                //for locked geometry\r\n            dirty = true;\r\n\r\n        } //_quad\r\n\r\n    } //quad_remove\r\n\r\n    public function quad_visible( _quad_id:Int, visible:Bool ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n\r\n                //add only if not already added\r\n            if(visible && !_quad.visible) {\r\n\r\n                _quad.visible = false;\r\n\r\n                add( _quad.verts[0] );\r\n                add( _quad.verts[1] );\r\n                add( _quad.verts[2] );\r\n                add( _quad.verts[3] );\r\n                add( _quad.verts[4] );\r\n                add( _quad.verts[5] );\r\n\r\n            } else if(!visible && _quad.visible) {\r\n\r\n                _quad.visible = false;\r\n\r\n                remove( _quad.verts[0] );\r\n                remove( _quad.verts[1] );\r\n                remove( _quad.verts[2] );\r\n                remove( _quad.verts[3] );\r\n                remove( _quad.verts[4] );\r\n                remove( _quad.verts[5] );\r\n\r\n            } //visible\r\n\r\n                //for locked geometry\r\n            dirty = true;\r\n\r\n        } //_quad\r\n\r\n    } //quad_visible\r\n\r\n    public function quad_resize( _quad_id:Int, _size : Rectangle ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n\r\n            _quad.verts[0].pos = new Vector( _size.x,         _size.y );\r\n            _quad.verts[1].pos = new Vector( _size.x+_size.w, _size.y );\r\n            _quad.verts[2].pos = new Vector( _size.x+_size.w, _size.y+_size.h );\r\n\r\n            _quad.verts[3].pos = new Vector( _size.x,         _size.y+_size.h );\r\n            _quad.verts[4].pos = new Vector( _size.x,         _size.y );\r\n            _quad.verts[5].pos = new Vector( _size.x+_size.w, _size.y+_size.h );\r\n\r\n                //for locked geometry\r\n            dirty = true;\r\n\r\n        } //_quad\r\n\r\n    } //remove_quad\r\n\r\n    public function quad_pos( _quad_id:Int, _p:Vector ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n\r\n            var _diffx = _p.x - _quad.verts[0].pos.x;\r\n            var _diffy = _p.y - _quad.verts[0].pos.y;\r\n\r\n            _quad.verts[0].pos.x += _diffx;\r\n            _quad.verts[0].pos.y += _diffy;\r\n\r\n            _quad.verts[1].pos.x += _diffx;\r\n            _quad.verts[1].pos.y += _diffy;\r\n\r\n            _quad.verts[2].pos.x += _diffx;\r\n            _quad.verts[2].pos.y += _diffy;\r\n\r\n            _quad.verts[3].pos.x += _diffx;\r\n            _quad.verts[3].pos.y += _diffy;\r\n\r\n            _quad.verts[4].pos.x += _diffx;\r\n            _quad.verts[4].pos.y += _diffy;\r\n\r\n            _quad.verts[5].pos.x += _diffx;\r\n            _quad.verts[5].pos.y += _diffy;\r\n\r\n                //for locked geometry\r\n            dirty = true;\r\n\r\n        } //_quad != null\r\n\r\n    } //quad_pos\r\n\r\n    public function quad_color( _quad_id:Int, _c:Color ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n            _quad.verts[0].color = _c;\r\n            _quad.verts[1].color = _c;\r\n            _quad.verts[2].color = _c;\r\n            _quad.verts[3].color = _c;\r\n            _quad.verts[4].color = _c;\r\n            _quad.verts[5].color = _c;\r\n        } //_quad != null\r\n\r\n    } //quad_color\r\n\r\n    public function quad_alpha( _quad_id:Int, _a:Float ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n            _quad.verts[0].color.a = _a;\r\n            _quad.verts[1].color.a = _a;\r\n            _quad.verts[2].color.a = _a;\r\n            _quad.verts[3].color.a = _a;\r\n            _quad.verts[4].color.a = _a;\r\n            _quad.verts[5].color.a = _a;\r\n        } //_quad != null\r\n\r\n    } //quad_alpha\r\n\r\n    public function quad_uv_space( _quad_id:Int, _uv : Rectangle ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n\r\n            var flipx = _quad.flipx;\r\n            var flipy = _quad.flipy;\r\n\r\n                //the uv width and height\r\n            var sz_x = _uv.w;\r\n            var sz_y = _uv.h;\r\n\r\n                //tl\r\n            var tl_x = _uv.x;\r\n            var tl_y = _uv.y;\r\n\r\n                //Keep for later, before changing the values for flipping\r\n            _quad._uv_cache.set( tl_x, tl_y, sz_x, sz_y );\r\n\r\n                //tr\r\n            var tr_x = tl_x + sz_x;\r\n            var tr_y = tl_y;\r\n                //br\r\n            var br_x = tl_x + sz_x;\r\n            var br_y = tl_y + sz_y;\r\n                //bl\r\n            var bl_x = tl_x;\r\n            var bl_y = tl_y + sz_y;\r\n\r\n            var tmp_x = 0.0;\r\n            var tmp_y = 0.0;\r\n\r\n                    //flipped y swaps tl and tr with bl and br, only on y\r\n                if(flipy) {\r\n\r\n                        //swap tl and bl\r\n                    tmp_y = bl_y;\r\n                        bl_y = tl_y;\r\n                        tl_y = tmp_y;\r\n\r\n                        //swap tr and br\r\n                    tmp_y = br_y;\r\n                        br_y = tr_y;\r\n                        tr_y = tmp_y;\r\n\r\n                } //flipy\r\n\r\n                    //flipped x swaps tl and bl with tr and br, only on x\r\n                if(flipx) {\r\n\r\n                        //swap tl and tr\r\n                    tmp_x = tr_x;\r\n                        tr_x = tl_x;\r\n                        tl_x = tmp_x;\r\n\r\n                        //swap bl and br\r\n                    tmp_x = br_x;\r\n                        br_x = bl_x;\r\n                        bl_x = tmp_x;\r\n\r\n                } //flipx\r\n\r\n            _quad.verts[0].uv.uv0.set_uv( tl_x , tl_y );\r\n            _quad.verts[1].uv.uv0.set_uv( tr_x , tr_y );\r\n            _quad.verts[2].uv.uv0.set_uv( br_x , br_y );\r\n\r\n            _quad.verts[3].uv.uv0.set_uv( bl_x , bl_y );\r\n            _quad.verts[4].uv.uv0.set_uv( tl_x , tl_y );\r\n            _quad.verts[5].uv.uv0.set_uv( br_x , br_y );\r\n\r\n                //for locked geometry\r\n            dirty = true;\r\n\r\n        } //_quad != null\r\n\r\n    } //quad_uv_space\r\n\r\n    public function quad_uv( _quad_id:Int, _uv : Rectangle ) {\r\n\r\n        if( texture == null ) {\r\n            trace(\"Warning : calling UV on a PackedQuad Geometry with null texture.\");\r\n            return;\r\n        }\r\n\r\n        var tlx = _uv.x/texture.width_actual;\r\n        var tly = _uv.y/texture.height_actual;\r\n        var szx = _uv.w/texture.width_actual;\r\n        var szy = _uv.h/texture.height_actual;\r\n\r\n        quad_uv_space( _quad_id, new luxe.Rectangle( tlx, tly, szx, szy ) );\r\n\r\n    } //quad_uv\r\n\r\n    public function quad_flipx( _quad_id:Int, _flip:Bool ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n            _quad.flipx = _flip;\r\n            quad_uv_space( _quad_id, _quad._uv_cache );\r\n        } //_quad != null\r\n\r\n    } //quad_flipx\r\n\r\n    public function quad_flipy( _quad_id:Int, _flip:Bool ) {\r\n\r\n        var _quad = quads.get( _quad_id );\r\n\r\n        if(_quad != null) {\r\n            _quad.flipy = _flip;\r\n            quad_uv_space( _quad_id, _quad._uv_cache );\r\n        } //_quad != null\r\n\r\n    } //quad_flipy\r\n\r\n} //QuadPackGeometry\r\n","package phoenix.geometry;\r\n\r\n\r\nimport luxe.Log.*;\r\nimport luxe.Vector;\r\nimport phoenix.Batcher;\r\nimport phoenix.geometry.Geometry;\r\n\r\nimport luxe.options.GeometryOptions.RectangleGeometryOptions;\r\n\r\nclass RectangleGeometry extends Geometry {\r\n\r\n        /** Create a new Rectangle goemetry with given options */\r\n    public function new(_options:RectangleGeometryOptions) {\r\n\r\n        _options.primitive_type = PrimitiveType.lines;\r\n\r\n        super(_options);\r\n\r\n        var _x = _options.x;\r\n        var _y = _options.y;\r\n        var _w = _options.w;\r\n        var _h = _options.h;\r\n\r\n        if(_options.rect != null) {\r\n            _x = _options.rect.x;\r\n            _y = _options.rect.y;\r\n            _w = _options.rect.w;\r\n            _h = _options.rect.h;\r\n        }\r\n\r\n            //tl\r\n        add(new Vertex( new Vector( 0, 0 ), color ));\r\n            //tr\r\n        add(new Vertex( new Vector( _w, 0 ), color ));\r\n\r\n            //tr\r\n        add(new Vertex( new Vector( _w, 0 ), color ));\r\n            //br\r\n        add(new Vertex( new Vector( _w, _h ), color ));\r\n\r\n            //br\r\n        add(new Vertex( new Vector( _w, _h ), color ));\r\n            //bl\r\n        add(new Vertex( new Vector( 0, _h ), color ));\r\n\r\n            //bl\r\n        add(new Vertex( new Vector( 0, _h ), color ));\r\n            //tl\r\n        add(new Vertex( new Vector( 0, 0 ), color ));\r\n\r\n        transform.pos = transform.pos.set_xy( _x, _y );\r\n\r\n    } //new\r\n\r\n        /** Set the vertices from values */\r\n    public function set_xywh( _x:Float, _y:Float, _w:Float, _h:Float ) {\r\n\r\n        if(vertices.length == 0) return;\r\n\r\n        vertices[0].pos.set_xy( 0, 0 );\r\n            //tr\r\n        vertices[1].pos.set_xy( _w, 0 );\r\n\r\n            //tr\r\n        vertices[2].pos.set_xy( _w, 0 );\r\n            //br\r\n        vertices[3].pos.set_xy( _w, _h );\r\n\r\n            //br\r\n        vertices[4].pos.set_xy( _w, _h );\r\n            //bl\r\n        vertices[5].pos.set_xy( 0, _h );\r\n\r\n            //bl\r\n        vertices[6].pos.set_xy( 0, _h );\r\n            //tl\r\n        vertices[7].pos.set_xy( 0, 0 );\r\n\r\n            //\r\n        transform.pos = transform.pos.set_xy( _x, _y );\r\n\r\n    } //set_xywh\r\n\r\n        /** Set the vertices based on a rectangle instance */\r\n    public inline function set( _rect:luxe.Rectangle ) {\r\n\r\n        set_xywh(_rect.x, _rect.y, _rect.w, _rect.h);\r\n\r\n    } //set\r\n\r\n\r\n} //RectangleGeometry\r\n","package phoenix.geometry;\r\n\r\nimport luxe.options.GeometryOptions;\r\nimport luxe.utils.Maths;\r\n\r\nimport phoenix.BitmapFont;\r\nimport phoenix.geometry.Vertex;\r\nimport phoenix.geometry.Geometry;\r\nimport phoenix.Batcher;\r\nimport phoenix.Color;\r\nimport phoenix.Rectangle;\r\n\r\nimport luxe.Log.*;\r\n\r\nusing luxe.utils.unifill.Unifill;\r\n\r\n@:enum abstract EvTextGeometry(Int) from Int to Int {\r\n    var unknown = 0;\r\n    var update_text = 1;\r\n}\r\n\r\ntypedef TextGeometryOptions = {\r\n\r\n    > GeometryOptions,\r\n\r\n    ? text: String,\r\n    ? font: BitmapFont,\r\n    ? point_size: Float,\r\n    ? line_spacing: Float,\r\n    ? letter_spacing: Float,\r\n    ? letter_snapping : Bool,\r\n\r\n    ? bounds : Rectangle,\r\n    ? bounds_wrap : Bool,\r\n\r\n    ? align : TextAlign,\r\n    ? align_vertical : TextAlign,\r\n\r\n    ? sdf: Bool,\r\n    ? smoothness: Float,\r\n    ? thickness: Float,\r\n\r\n    ? outline: Float,\r\n    ? outline_color: Color,\r\n\r\n    ? glow_threshold: Float,\r\n    ? glow_amount: Float,\r\n    ? glow_color: Color\r\n\r\n}\r\n\r\nclass TextGeometry extends Geometry {\r\n\r\n    //regular font stuff\r\n\r\n        @:isVar public var text (default,set) : String = '';\r\n        @:isVar public var font (default,set) : BitmapFont;\r\n        @:isVar public var point_size (default,set) : Float = 32.0;\r\n        @:isVar public var line_spacing (default,set) : Float = 0.0;\r\n        @:isVar public var letter_spacing (default,set) : Float = 0.0;\r\n        @:isVar public var letter_snapping (default,set) : Bool = false;\r\n\r\n        @:isVar public var bounds (default,set) : Rectangle;\r\n        @:isVar public var bounds_wrap (default,set) : Bool = false;\r\n\r\n        @:isVar public var align (default,set) : TextAlign;\r\n        @:isVar public var align_vertical (default,set) : TextAlign;\r\n\r\n    //distance field specific\r\n\r\n        public var sdf : Bool = false;\r\n        public var unique : Bool = false;\r\n\r\n        @:isVar public var smoothness (default,set) : Float = 0.75;\r\n        @:isVar public var thickness (default,set) : Float = 0.5;\r\n\r\n        @:isVar public var outline (default,set) : Float = 0;\r\n        @:isVar public var outline_color (default,set) : Color;\r\n\r\n        @:isVar public var glow_threshold (default,set) : Float = 0;\r\n        @:isVar public var glow_amount (default,set) : Float = 0;\r\n        @:isVar public var glow_color (default,set) : Color;\r\n\r\n    //sizing cached information\r\n\r\n        public var line_widths : Array<Float>;\r\n        public var text_width : Float = 0;\r\n        public var text_height : Float = 0;\r\n        public var line_offsets : Array< Array<Float> >;\r\n        public var lines : Array<String>;\r\n\r\n    //access to change events\r\n\r\n        @:noCompletion\r\n        public var emitter : luxe.Emitter<EvTextGeometry>;\r\n\r\n    //internal\r\n\r\n        var cache : Array< Array<Vertex> >;\r\n        var options : TextGeometryOptions;\r\n\r\n        var text_h_w : Float = 0;\r\n        var text_h_h : Float = 0;\r\n        public var point_ratio : Float = 1;\r\n\r\n        var dirty_sizing (default,set) : Bool = true;\r\n        var dirty_align: Bool = true;\r\n        var setup_: Bool = true;\r\n\r\n    //common\r\n\r\n        static var tab_regex : EReg = new EReg('\\t','gim');\r\n\r\n    public function new(_options:TextGeometryOptions) {\r\n\r\n        options = _options;\r\n        emitter = new luxe.Emitter<EvTextGeometry>();\r\n\r\n        assertnull(options, 'TextGeometry requires non-null options');\r\n\r\n        //order here before super() is important\r\n\r\n                //make sure sdf flag is early enough\r\n            if(options.sdf != null) sdf = options.sdf;\r\n                //use the default font if none specified\r\n            font = def(options.font, Luxe.renderer.font);\r\n                //the default font is always sdf enabled\r\n            if(font == Luxe.renderer.font) { sdf = true; }\r\n\r\n                //if a custom shader is not given,\r\n                //use the default sdf or normal textured\r\n                //but if they have a custom shader, flag\r\n                //the instance as unique so their options are mutable\r\n            if(options.shader == null) {\r\n                if(sdf) {\r\n                    options.shader = Luxe.renderer.shaders.bitmapfont.shader;\r\n                } else {\r\n                    options.shader = Luxe.renderer.shaders.textured.shader;\r\n                }\r\n            } else {\r\n                    //only unique if not the default\r\n                if(options.shader != Luxe.renderer.shaders.bitmapfont.shader) {\r\n                    unique = true;\r\n                }\r\n            }\r\n\r\n            options.primitive_type = PrimitiveType.triangles;\r\n\r\n            super( options );\r\n\r\n        //setup\r\n\r\n        cache = [];\r\n        line_widths = [];\r\n        line_offsets = [[],[]];\r\n        lines = [];\r\n        outline_color = new Color();\r\n        glow_color = new Color();\r\n\r\n        default_options();\r\n\r\n        setup_ = false;\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n        /** Remove any cached vertices that are unused by the current text. */\r\n    #if release inline #end\r\n    public function tidy() {\r\n\r\n        var _vertidx = Math.floor(vertices.length / 6);\r\n        var _diff = cache.length - _vertidx;\r\n\r\n        if(_diff > 0) {\r\n\r\n            // _verbose('tidy: remove $_diff from cache');\r\n\r\n            var extra = cache.splice(_vertidx, _diff);\r\n            var c = extra.length;\r\n            while(c > 0) {\r\n                c--;\r\n                var vert = extra.pop();\r\n                    vert = null;\r\n            }\r\n\r\n        } //diff>0\r\n\r\n    } //tidy\r\n\r\n\r\n//Internal\r\n\r\n    override function drop( ?remove:Bool = true ) {\r\n\r\n        text = null;\r\n        font = null;\r\n        bounds = null;\r\n        outline_color = null;\r\n        glow_color = null;\r\n        if(line_widths != null) {\r\n            line_widths.splice(0,line_widths.length);\r\n            line_widths = null;\r\n        }\r\n        if(line_offsets != null) {\r\n            line_offsets.splice(0,line_offsets.length);\r\n            line_offsets = null;\r\n        }\r\n        if(lines != null) {\r\n            lines.splice(0,lines.length);\r\n            lines = null;\r\n        }\r\n        emitter = null;\r\n        options = null;\r\n        if(cache != null) {\r\n            while(cache.length > 0) {\r\n                var c = cache.pop();\r\n                while(c.length > 0) {\r\n                    var v = c.pop();\r\n                    v.destroy();\r\n                    v = null;\r\n                }\r\n                c = null;\r\n            }\r\n            cache = null;\r\n        }\r\n\r\n        super.drop(remove);\r\n\r\n    } //drop\r\n\r\n\r\n    function default_options() {\r\n\r\n            //:todo: TextGeometry pages\r\n            //currently one page is supported\r\n            //because each vertex would\r\n            //need to know the page it's on\r\n            //and that would be best served\r\n            //by the new batcher attributes\r\n            //as to not muddy everything up\r\n        texture = font.pages[0];\r\n\r\n        //normal font stuff\r\n\r\n            if(options.letter_snapping != null) letter_snapping = options.letter_snapping;\r\n            if(options.letter_spacing != null) letter_spacing = options.letter_spacing;\r\n            if(options.line_spacing != null) line_spacing = options.line_spacing;\r\n            if(options.point_size != null) point_size = options.point_size;\r\n\r\n            if(options.bounds != null) bounds = options.bounds;\r\n            if(options.bounds_wrap != null) bounds_wrap = options.bounds_wrap;\r\n\r\n            def(options.align, TextAlign.left);\r\n            def(options.align_vertical, TextAlign.top);\r\n\r\n            align = options.align;\r\n            align_vertical = options.align_vertical;\r\n\r\n        //sdf based\r\n        //these will be set anyway, but ignored if not sdf\r\n\r\n            if(options.thickness != null) thickness = options.thickness;\r\n            if(options.smoothness != null) smoothness = options.smoothness;\r\n\r\n            if(options.outline != null) outline = options.outline;\r\n            if(options.outline_color != null) outline_color = options.outline_color;\r\n\r\n            if(options.glow_threshold != null) glow_threshold = options.glow_threshold;\r\n            if(options.glow_amount != null) glow_amount = options.glow_amount;\r\n            if(options.glow_color != null) glow_color = options.glow_color;\r\n\r\n            if(sdf) flush_uniforms();\r\n\r\n            //text must be last, as it relies on the rest\r\n        if(options.text != null) text = options.text;\r\n\r\n    } //default_options\r\n\r\n    #if release inline #end\r\n    function set_text(_text:String) : String {\r\n\r\n        if(_text == null) {\r\n            _debug('null text passed into TextGeometry!');\r\n            _text = '';\r\n        }\r\n\r\n            //don't care if it's the same value\r\n        if(text != _text) {\r\n\r\n                //update the value\r\n            text = _text;\r\n\r\n            if(text != '') {\r\n\r\n                dirty_sizing = true;\r\n                update_text();\r\n\r\n            } else {\r\n                vertices.splice(0, vertices.length);\r\n            }\r\n\r\n        } //same val\r\n\r\n        return text;\r\n\r\n    } //set_text\r\n\r\n    #if release inline #end\r\n    function stats() {\r\n        return 'letters:${(vertices.length/6)} / cache:${ cache.length }';\r\n    }\r\n\r\n    #if release inline #end\r\n    function update_sizes() {\r\n\r\n        if(!dirty_sizing) return false;\r\n\r\n            //:todo: tab width\r\n        var drawn_text = tab_regex.replace(text, '    ');\r\n        if(bounds_wrap && bounds != null) {\r\n            drawn_text = font.wrap_string_to_bounds(drawn_text, bounds, point_size, letter_spacing);\r\n        }\r\n\r\n        lines.splice(0, lines.length);\r\n        lines = drawn_text.split('\\n');\r\n\r\n            line_widths.splice(0, line_widths.length);\r\n\r\n            text_width = font.width_of(drawn_text, point_size, letter_spacing, line_widths);\r\n            text_height = font.height_of_lines(lines, point_size, line_spacing);\r\n            text_h_w = text_width / 2;\r\n            text_h_h = text_height / 2;\r\n            point_ratio = point_size / font.info.point_size;\r\n\r\n            dirty_sizing = false;\r\n\r\n        return true;\r\n\r\n    } //update_sizes\r\n\r\n\r\n    // #if release inline #end\r\n    function update_text() {\r\n\r\n        var _pos_x = 0.0;\r\n        var _pos_y = 0.0;\r\n        var _bounds_based = (bounds != null);\r\n\r\n        if(_bounds_based) {\r\n            transform.pos.x = _pos_x = bounds.x;\r\n            transform.pos.y = _pos_y = bounds.y;\r\n        }\r\n\r\n        var _cur_x = 0.0;\r\n        var _cur_y = 0.0;\r\n        var _line_idx = 0;\r\n        var _total_idx = 0;\r\n        var _is_char = true;\r\n        var _was_dirty = update_sizes();\r\n\r\n        inline function _step() {\r\n            _cur_y += (font.info.line_height + line_spacing) * point_ratio;\r\n            _cur_x = 0;\r\n        }\r\n\r\n        for(_line in lines) {\r\n\r\n                //Calculate alignment offsets\r\n                //Left is at 0, so it's handled already, same as top\r\n            var _line_x_offset = 0.0;\r\n            var _line_y_offset = 0.0;\r\n\r\n            if(dirty_align) {\r\n\r\n                if(!_bounds_based) {\r\n\r\n                    _line_x_offset = switch(align) {\r\n                        case center: -(line_widths[_line_idx]/2.0);\r\n                        case right: -line_widths[_line_idx];\r\n                        default: 0.0;\r\n                    }\r\n\r\n                    _line_y_offset = switch(align_vertical) {\r\n                        case center: -text_h_h;\r\n                        case bottom: -text_height;\r\n                        default: 0.0;\r\n                    }\r\n\r\n                } else {\r\n\r\n                    _line_x_offset = switch(align) {\r\n                        case center: -(line_widths[_line_idx]/2.0) + (bounds.w/2);\r\n                        case right: -line_widths[_line_idx] + (bounds.w);\r\n                        default: 0.0;\r\n                    }\r\n\r\n                    _line_y_offset = switch(align_vertical) {\r\n                        case center: (bounds.h/2) - text_h_h;\r\n                        case bottom: (bounds.h) - text_height;\r\n                        default: 0.0;\r\n                    }\r\n\r\n                }\r\n\r\n                    //store it in the cache for later\r\n                line_offsets[0][_line_idx] = _line_x_offset;\r\n                line_offsets[1][_line_idx] = _line_y_offset;\r\n\r\n            } else {\r\n\r\n                _line_x_offset = line_offsets[0][_line_idx];\r\n                _line_y_offset = line_offsets[1][_line_idx];\r\n\r\n            }\r\n\r\n            if( _line_idx != 0 ){\r\n                _step();\r\n            } //_line_idx\r\n\r\n                //for each character in the line\r\n\r\n            var _idx = 0;\r\n            for(_uglyph in _line.uIterator()) {\r\n\r\n                var _index = _uglyph.toInt();\r\n                var _char = font.info.chars.get(_index);\r\n                _is_char = (_char != null && _index > 32);\r\n\r\n                    //:todo: make this a small preset vert set matching �\r\n                    //or the missing char box style char, rather than just a space\r\n                if(!_is_char) {\r\n                    _char = font.space_char;\r\n                }\r\n\r\n                if(_is_char) {\r\n\r\n                        //the geometry positioning\r\n                    var _quad_x  = _line_x_offset + _cur_x + ( _char.xoffset * point_ratio );\r\n                    var _quad_y  = _line_y_offset + _cur_y + ( _char.yoffset * point_ratio );\r\n\r\n                    if(letter_snapping) {\r\n                        //:todo: TextGeometry; letter_snapping test against round/floor with pixel fonts with @EduardoLopes\r\n                        _quad_x = Math.floor(_quad_x);\r\n                        _quad_y = Math.floor(_quad_y);\r\n                    }\r\n                        //the texture page\r\n                    var _page = font.pages[_char.page];\r\n                        //work out the coordinates for the uv's\r\n                    var _u1 = _char.x/_page.width_actual;\r\n                    var _v1 = _char.y/_page.height_actual;\r\n                    var _u2 = (_char.x + _char.width) / _page.width_actual;\r\n                    var _v2 = (_char.y + _char.height) / _page.height_actual;\r\n\r\n                    update_char( _total_idx,\r\n                                 _quad_x, _quad_y, _char.width*point_ratio, _char.height*point_ratio,\r\n                                 _u1, _v1, _u2, _v2, color );\r\n\r\n                        //this should only count\r\n                        //visual characters\r\n                    _total_idx++;\r\n\r\n                } //don't draw non visible char\r\n\r\n                    //after the letter,\r\n                    //the x movement forward\r\n                var _x_inc = _char.xadvance;\r\n\r\n                    //adjust for kerning + tracking(letterspace)\r\n                if( _idx < _line.length-1 ) {\r\n                    _x_inc += font.kerning( _index, _line.uCharCodeAt(_idx+1) );\r\n                    if(_index >= 32) {\r\n                        _x_inc += letter_spacing;\r\n                    }\r\n                }\r\n\r\n                _x_inc *= point_ratio;\r\n\r\n                    //apply it with the point size ratio\r\n                _cur_x += _x_inc;\r\n\r\n                    //increment char index\r\n                _idx++;\r\n\r\n            } //for each letter in string\r\n\r\n                //increase the line counter\r\n            _line_idx++;\r\n\r\n        } //each line\r\n\r\n            //for unused vertices, we remove\r\n            //them from the visible set,\r\n            //keeping them in cache (only tidy() cleans cache)\r\n        var _vertidx = Std.int(vertices.length / 6);\r\n        var _diff = _vertidx - _total_idx;\r\n\r\n        if(_diff > 0) {\r\n            vertices.splice(_total_idx * 6, _diff * 6);\r\n        }\r\n\r\n            //if it was true, it's false now\r\n        dirty_align = false;\r\n        emitter.emit(EvTextGeometry.update_text);\r\n\r\n    } //update_text\r\n\r\n    // #if release inline #end\r\n    function update_char( _letteridx:Int, _x:Float, _y:Float, _w:Float, _h:Float, _u:Float, _v:Float, _u2:Float, _v2:Float, _color:Color ) {\r\n\r\n        var vert0:Vertex; var vert1:Vertex; var vert2:Vertex;\r\n        var vert3:Vertex; var vert4:Vertex; var vert5:Vertex;\r\n\r\n        var quad = cache[_letteridx];\r\n\r\n            //if no cache at this index we need to add vertices\r\n        if(quad == null) {\r\n\r\n            // _debug(' idx $_letteridx out of cache range, adding cache index');\r\n\r\n            vert0 = new Vertex( new Vector( _x, _y ), _color );\r\n            vert1 = new Vertex( new Vector( _x+_w, _y ), _color );\r\n            vert2 = new Vertex( new Vector( _x+_w, _y+_h ), _color );\r\n\r\n            vert3 = new Vertex( new Vector( _x, _y+_h ), _color );\r\n            vert4 = new Vertex( new Vector( _x, _y ), _color );\r\n            vert5 = new Vertex( new Vector( _x+_w, _y+_h), _color );\r\n\r\n            quad = [vert0, vert1, vert2, vert3, vert4, vert5];\r\n            cache[_letteridx] = quad;\r\n\r\n        } else {\r\n\r\n            // _debug(' idx $_letteridx in cache, setting cache index');\r\n            //this cache index existed as vertices so we fetch them\r\n\r\n            vert0 = quad[0]; vert1 = quad[1]; vert2 = quad[2];\r\n            vert3 = quad[3]; vert4 = quad[4]; vert5 = quad[5];\r\n\r\n                //then update the values\r\n            vert0.pos.set_xy( _x    , _y    );\r\n            vert1.pos.set_xy( _x+_w , _y    );\r\n            vert2.pos.set_xy( _x+_w , _y+_h );\r\n            vert3.pos.set_xy( _x    , _y+_h );\r\n            vert4.pos.set_xy( _x    , _y    );\r\n            vert5.pos.set_xy( _x+_w , _y+_h );\r\n\r\n        } //quad != null\r\n\r\n        vert0.uv.uv0.set_uv( _u  , _v  );\r\n        vert1.uv.uv0.set_uv( _u2 , _v  );\r\n        vert2.uv.uv0.set_uv( _u2 , _v2 );\r\n        vert3.uv.uv0.set_uv( _u  , _v2 );\r\n        vert4.uv.uv0.set_uv( _u  , _v  );\r\n        vert5.uv.uv0.set_uv( _u2 , _v2 );\r\n\r\n            //now, if the vert count is lower than the index, add these\r\n            //to the geometry itself. This must be done each time since\r\n            //the vertices length potentially changes after each char\r\n        var _vertidx = Math.floor(vertices.length / 6);\r\n\r\n        if(_vertidx <= _letteridx) {\r\n            add( vert0 ); add( vert1 );  add( vert2 );\r\n            add( vert3 ); add( vert4 );  add( vert5 );\r\n        }\r\n\r\n    } //update_char\r\n\r\n//Setters\r\n\r\n    #if release inline #end\r\n    function set_dirty_sizing(_b:Bool) {\r\n\r\n            dirty_align = true;\r\n\r\n        return dirty_sizing = _b;\r\n\r\n    } //set_dirty_sizing\r\n\r\n    #if release inline #end\r\n    function set_bounds( _bounds:Rectangle ) {\r\n\r\n        bounds = _bounds;\r\n\r\n        if(bounds == null) return bounds;\r\n\r\n        dirty_sizing = true;\r\n        update_text();\r\n\r\n        return bounds;\r\n\r\n    } //set_bounds\r\n\r\n    #if release inline #end\r\n    function set_bounds_wrap( _wrap:Bool ) {\r\n\r\n        bounds_wrap = _wrap;\r\n\r\n            dirty_sizing = true;\r\n            update_text();\r\n\r\n        return bounds_wrap;\r\n\r\n    } //set_bounds_wrap\r\n\r\n    #if release inline #end\r\n    function set_letter_snapping( _snap:Bool ) {\r\n\r\n        letter_snapping = _snap;\r\n\r\n            dirty_sizing = true;\r\n            update_text();\r\n\r\n        return letter_snapping;\r\n\r\n    } //set_letter_snapping\r\n\r\n    #if release inline #end\r\n    function set_line_spacing(_line_spacing:Float) {\r\n\r\n        line_spacing = _line_spacing;\r\n\r\n            dirty_sizing = true;\r\n            update_text();\r\n\r\n        return line_spacing;\r\n\r\n    } //set_line_spacing\r\n\r\n    #if release inline #end\r\n    function set_letter_spacing(_letter_spacing:Float) {\r\n\r\n        letter_spacing = _letter_spacing;\r\n\r\n            dirty_sizing = true;\r\n            update_text();\r\n\r\n        return letter_spacing;\r\n\r\n    } //set_leading\r\n\r\n    #if release inline #end\r\n    function set_align( _align:TextAlign ) {\r\n\r\n        align = _align;\r\n\r\n            dirty_align = true;\r\n            update_text();\r\n\r\n        return align;\r\n\r\n    } //set_align\r\n\r\n    #if release inline #end\r\n    function set_align_vertical( _align_vertical:TextAlign ) {\r\n\r\n        align_vertical = _align_vertical;\r\n\r\n            dirty_align = true;\r\n            update_text();\r\n\r\n        return align_vertical;\r\n\r\n    } //set_align_vertical\r\n\r\n    #if release inline #end\r\n    function set_point_size( s:Float ) {\r\n\r\n        if(s < 0) s = 0;\r\n        point_size = s;\r\n\r\n            dirty_sizing = true;\r\n            update_text();\r\n\r\n        return point_size;\r\n\r\n    } //set_point_size\r\n\r\n    #if release inline #end\r\n    function set_font( _font:BitmapFont ) {\r\n\r\n        font = _font;\r\n\r\n        if(!setup_ && _font != null) {\r\n            // :todo: TextGeometry pages\r\n            texture = font.pages[0];\r\n            dirty_sizing = true;\r\n            dirty_align = true;\r\n            update_text();\r\n        }\r\n\r\n        return font;\r\n\r\n    } //set_font\r\n\r\n\r\n//SDF specific features\r\n\r\n\r\n    #if release inline #end\r\n    function set_smoothness(s:Float) {\r\n\r\n        if(s < 0) s = 0;\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_float('smoothness',s);\r\n        }\r\n\r\n        return smoothness = s;\r\n\r\n    } //set_smoothness\r\n\r\n    #if release inline #end\r\n    function set_thickness(s:Float) {\r\n\r\n        if(s < 0) s = 0;\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_float('thickness',s);\r\n        }\r\n\r\n        return thickness = s;\r\n\r\n    } //set_thickness\r\n\r\n    #if release inline #end\r\n    function set_outline(s:Float) {\r\n\r\n        s = Maths.clamp(s, 0.0, 1.0);\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_float('outline',s);\r\n        }\r\n\r\n        return outline = s;\r\n\r\n    } //set_outline\r\n\r\n    #if release inline #end\r\n    function set_glow_threshold(s:Float) {\r\n\r\n        if(s < 0) s = 0;\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_float('glow_threshold',s);\r\n        }\r\n\r\n        return glow_threshold = s;\r\n\r\n    } //set_glow_threshold\r\n\r\n    #if release inline #end\r\n    function set_glow_amount(s:Float) {\r\n\r\n        if(s < 0) s = 0;\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_float('glow_amount',s);\r\n        }\r\n\r\n        return glow_amount = s;\r\n\r\n    } //set_glow_amount\r\n\r\n    #if release inline #end\r\n    function set_outline_color(c:Color) {\r\n\r\n        if(c == null) return outline_color = c;\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_color('outline_color', c);\r\n        }\r\n\r\n        return outline_color = c;\r\n\r\n    } //set_outline_color\r\n\r\n    #if release inline #end\r\n    function set_glow_color(c:Color) {\r\n\r\n        if(c == null) return glow_color = c;\r\n\r\n        if(shader != null && sdf && unique) {\r\n            shader.set_color('glow_color', c);\r\n        }\r\n\r\n        return glow_color = c;\r\n\r\n    } //set_glow_color\r\n\r\n        //internal convenience for when\r\n        //the shader type changes to sdf\r\n        //and values need refreshing\r\n    #if release inline #end\r\n    function flush_uniforms() {\r\n        if(shader != null && sdf) {\r\n            shader.set_float('smoothness', smoothness);\r\n            shader.set_float('thickness', thickness);\r\n            shader.set_float('outline', outline);\r\n            shader.set_float('glow_threshold', glow_threshold);\r\n            shader.set_float('glow_amount', glow_amount);\r\n            shader.set_color('outline_color', outline_color);\r\n            shader.set_color('glow_color', glow_color);\r\n        }\r\n    }\r\n\r\n\r\n} //TextGeometry\r\n","package phoenix.geometry;\r\n\r\n\r\nclass TextureCoordSet {\r\n\r\n\r\n    public var uv0 : TextureCoord;\r\n    public var uv1 : TextureCoord;\r\n    public var uv2 : TextureCoord;\r\n    public var uv3 : TextureCoord;\r\n    public var uv4 : TextureCoord;\r\n    public var uv5 : TextureCoord;\r\n    public var uv6 : TextureCoord;\r\n    public var uv7 : TextureCoord;\r\n\r\n\r\n    public inline function new() {\r\n\r\n        uv0 = new TextureCoord();\r\n        uv1 = new TextureCoord();\r\n        uv2 = new TextureCoord();\r\n        uv3 = new TextureCoord();\r\n        uv4 = new TextureCoord();\r\n        uv5 = new TextureCoord();\r\n        uv6 = new TextureCoord();\r\n        uv7 = new TextureCoord();\r\n\r\n    } //new\r\n\r\n    public inline function clone() {\r\n\r\n        var _set = new TextureCoordSet();\r\n\r\n            _set.uv0.set(uv0.u, uv0.v, uv0.w, uv0.t);\r\n            _set.uv1.set(uv1.u, uv1.v, uv1.w, uv1.t);\r\n            _set.uv2.set(uv2.u, uv2.v, uv2.w, uv2.t);\r\n            _set.uv3.set(uv3.u, uv3.v, uv3.w, uv3.t);\r\n            _set.uv4.set(uv4.u, uv4.v, uv4.w, uv4.t);\r\n            _set.uv5.set(uv5.u, uv5.v, uv5.w, uv5.t);\r\n            _set.uv6.set(uv6.u, uv6.v, uv6.w, uv6.t);\r\n            _set.uv7.set(uv7.u, uv7.v, uv7.w, uv7.t);\r\n\r\n        return _set;\r\n\r\n    } //clone\r\n\r\n    public inline function destroy() {\r\n        uv0 = null;\r\n        uv1 = null;\r\n        uv2 = null;\r\n        uv3 = null;\r\n        uv4 = null;\r\n        uv5 = null;\r\n        uv6 = null;\r\n        uv7 = null;\r\n    }\r\n\r\n\r\n} //TextureCoordSet\r\n\r\n\r\nclass TextureCoord {\r\n\r\n\r\n    public var u : Float = 0.0;\r\n    public var v : Float = 0.0;\r\n    public var w : Float = 0.0;\r\n    public var t : Float = 0.0;\r\n\r\n\r\n    public inline function new(_u:Float = 0.0, _v:Float = 0.0, _w:Float = 0.0, _t:Float = 0.0) {\r\n\r\n        u = _u;\r\n        v = _v;\r\n        w = _w;\r\n        t = _t;\r\n\r\n    } //new\r\n\r\n    public inline function clone() {\r\n\r\n        return new TextureCoord( u, v, w, t );\r\n\r\n    } //clone\r\n\r\n    public inline function set( _u : Float, _v : Float, _w : Float, _t:Float ) : TextureCoord {\r\n\r\n        u = _u;\r\n        v = _v;\r\n        w = _w;\r\n        t = _t;\r\n\r\n        return this;\r\n\r\n    } //set\r\n\r\n    public inline function set_uv( _u : Float, _v : Float ) : TextureCoord {\r\n\r\n        u = _u;\r\n        v = _v;\r\n\r\n        return this;\r\n\r\n    } //set_uv\r\n\r\n    inline function toString() {\r\n\r\n        return  '{ u:$v, v:$v }';\r\n\r\n    } //toString\r\n\r\n\r\n} //TextureCoord\r\n","package phoenix.geometry;\r\n\r\nimport phoenix.geometry.TextureCoord;\r\nimport phoenix.Vector;\r\nimport phoenix.Color;\r\n\r\nclass Vertex {\r\n\r\n\r\n    public var pos : Vector;\r\n    public var color : Color;\r\n    public var uv : TextureCoordSet;\r\n    public var normal : Vector;\r\n\r\n\r\n    public inline function new( _pos : Vector, ?_color:Color = null, ?_normal:Vector = null ) {\r\n\r\n        uv = new TextureCoordSet();\r\n\r\n        pos = _pos;\r\n        color = (_color == null) ? new Color() : _color;\r\n        normal = (_normal == null) ? new Vector() : _normal;\r\n\r\n    } //new\r\n\r\n    public inline function clone() : Vertex {\r\n\r\n        var _new = new Vertex( pos.clone(), color.clone(), normal.clone() );\r\n            _new.uv = uv.clone();\r\n\r\n        return _new;\r\n\r\n    } //clone\r\n\r\n    public inline function destroy() {\r\n        pos = null;\r\n        color = null;\r\n        normal = null;\r\n        uv.destroy();\r\n        uv = null;\r\n    }\r\n\r\n\r\n} //Vertex\r\n","package phoenix.utils;\r\n\r\nimport snow.modules.opengl.GL;\r\nimport phoenix.Batcher.PrimitiveType;\r\nimport phoenix.Batcher.BlendMode;\r\n\r\nclass Rendering {\r\n\r\n    public static inline function gl_blend_mode_from_BlendMode(_b:BlendMode) {\r\n\r\n        switch(_b) {\r\n            case zero:\r\n                return GL.ZERO;\r\n            case one:\r\n                return GL.ONE;\r\n            case src_color:\r\n                return GL.SRC_COLOR;\r\n            case one_minus_src_color:\r\n                return GL.ONE_MINUS_SRC_COLOR;\r\n            case src_alpha:\r\n                return GL.SRC_ALPHA;\r\n            case one_minus_src_alpha:\r\n                return GL.ONE_MINUS_SRC_ALPHA;\r\n            case dst_alpha:\r\n                return GL.DST_ALPHA;\r\n            case one_minus_dst_alpha:\r\n                return GL.ONE_MINUS_DST_ALPHA;\r\n            case dst_color:\r\n                return GL.DST_COLOR;\r\n            case one_minus_dst_color:\r\n                return GL.ONE_MINUS_DST_COLOR;\r\n            case src_alpha_saturate:\r\n                return GL.SRC_ALPHA_SATURATE;\r\n        }\r\n    } //BlendMode convert\r\n\r\n    public static inline function fovx_to_y(fovx:Float, aspect:Float):Float {\r\n\r\n        return (180 / Math.PI) * (2 * Math.atan(Math.tan(fovx * (Math.PI / 180) / 2) * (1 / aspect)));\r\n\r\n    } //fovx_to_y\r\n\r\n} //Rendering\r\n","package snow;\r\n\r\nimport snow.api.Debug.*;\r\nimport snow.api.Timer;\r\nimport snow.api.Promise;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.types.Types;\r\n\r\nimport snow.core.Runtime;\r\nimport snow.systems.io.IO;\r\nimport snow.systems.input.Input;\r\nimport snow.systems.assets.Asset.AssetJSON;\r\nimport snow.systems.assets.Assets;\r\nimport snow.systems.audio.Audio;\r\n\r\n\r\nclass Snow {\r\n\r\n    //public\r\n\r\n            /** The host application */\r\n        public var host : AppHost;\r\n            /** The application configuration specifics (like window, user, runtime, etc) */\r\n        public var config : snow.types.Types.AppConfig;\r\n            /** Whether or not we are frozen, ignoring events i.e backgrounded/paused */\r\n        public var freeze (default,set) : Bool = false;\r\n            /** Whether or not the ready state has been reached */\r\n        public var ready (default, null) : Bool = false;\r\n\r\n            /** The current timestamp */\r\n        public var time (get,never) : Float;\r\n            /** Generate a unique ID to use */\r\n        public var uniqueid (get,never) : String;\r\n            /** A static access to the timestamp for convenience */\r\n        public static var timestamp (get, never) : Float;\r\n\r\n    //systems\r\n\r\n            /** The runtime module */\r\n        public var runtime : AppRuntime;\r\n            /** The io system */\r\n        public var io : IO;\r\n            /** The input system */\r\n        public var input : Input;\r\n            /** The audio system */\r\n        public var audio : Audio;\r\n            /** The asset system */\r\n        public var assets : Assets;\r\n\r\n    //state\r\n\r\n            /** The platform identifier, a string,\r\n                but uses `snow.types.Types.Platform` abstract enum internally */\r\n        public var platform : String = 'unknown';\r\n            /** The os identifier, a string,\r\n                but uses `snow.types.Types.OS` abstract enum internally */\r\n        public var os : String;\r\n            /** A debug flag for convenience, true if the app was built with the haxe -debug flag or define */\r\n        public var debug : Bool = #if debug true #else false #end;\r\n\r\n            /** Set if shut down has commenced */\r\n        public var shutting_down : Bool = false;\r\n            /** Set if shut dow has completed  */\r\n        public var has_shutdown : Bool = false;\r\n\r\n    //extensions\r\n\r\n        var extensions: Array<snow.core.Extension>;\r\n\r\n    //internal preallocated events\r\n\r\n        var sys_event: SystemEvent;\r\n        var win_event: WindowEvent;\r\n\r\n    //api\r\n\r\n        public function new(_host : AppHost) {\r\n\r\n            assertnull(_host, 'snow App instance was null!');\r\n\r\n            _debug('app / init / debug:$debug');\r\n            _debug('app / ident: ' + snow.types.Config.app_ident);\r\n            _debug('app / config: ' + snow.types.Config.app_config);\r\n\r\n            if(snow.api.Debug.get_level() > 1) {\r\n                log('log / level to ${snow.api.Debug.get_level()}' );\r\n                var _filter = snow.api.Debug.get_filter();\r\n                var _exclude = snow.api.Debug.get_exclude();\r\n                if(_filter != null) log('log / filter : $_filter');\r\n                if(_exclude != null) log('log / exclude : $_exclude');\r\n            }\r\n\r\n            host = _host;\r\n            host.app = this;\r\n            config = default_config();\r\n\r\n            _debug('app / assets / ${snow.types.Config.module_assets}');\r\n            _debug('app / audio / ${snow.types.Config.module_audio}');\r\n            _debug('app / io / ${snow.types.Config.module_io}');\r\n\r\n            sys_event = new SystemEvent();\r\n            win_event = new WindowEvent();\r\n\r\n            io = new IO(this);\r\n            input = new Input(this);\r\n            audio = new Audio(this);\r\n            assets = new Assets(this);\r\n\r\n            extensions = [];\r\n            for(_ext_type in snow.types.Config.extensions) {\r\n\r\n                var _class = Type.resolveClass(_ext_type);\r\n                if(_class == null) throw Error.error('Extension `$_ext_type`: Type not found via Type.resolveClass!');\r\n\r\n                var _instance:snow.core.Extension = Type.createInstance(_class, null);\r\n                if(_instance == null) throw Error.error('Extension `$_ext_type`: Instance was null on calling new()!');\r\n\r\n                extensions.push(_instance);\r\n\r\n            } //each extension\r\n\r\n            _debug('app / runtime / new ${snow.types.Config.app_runtime}');\r\n\r\n            runtime = new AppRuntime(this);\r\n\r\n            assertnull(os, 'init - Runtime didn\\'t set the app.os value!');\r\n            assertnull(platform, 'init - Runtime didn\\'t set the app.platform value!');\r\n            // assertnull(config.runtime, 'init - Runtime didn\\'t set the app.config.runtime value!');\r\n\r\n            _debug('app / os:$os / platform:$platform / init / $time');\r\n            dispatch_event(se_init);\r\n            host.internal_init();\r\n\r\n            step();\r\n\r\n            _debug('app / ready / $time');\r\n            dispatch_event(se_ready);\r\n\r\n            step();\r\n\r\n            _debug('init / runtime / ${runtime.name} / run');\r\n\r\n            var _should_exit = runtime.run();\r\n            if(_should_exit && !(has_shutdown || shutting_down)) {\r\n                shutdown();\r\n            }\r\n\r\n        } //new\r\n\r\n            //internal\r\n        var immediate_shutdown = false;\r\n\r\n            /** Shutdown the engine and quit */\r\n        public function shutdown() {\r\n\r\n            // assert(shutting_down == false, 'snow - calling shutdown more than once is disallowed');\r\n            if(shutting_down) {\r\n                log('shutdown / called again, already shutting down - ignoring');\r\n                return;\r\n            }\r\n            \r\n            assert(has_shutdown == false, 'snow - calling shutdown more than once is disallowed');\r\n\r\n            shutting_down = true;\r\n\r\n            host.ondestroy();\r\n\r\n            dispatch_event(se_shutdown);\r\n\r\n            io.shutdown();\r\n            audio.shutdown();\r\n            assets.shutdown();\r\n            input.shutdown();\r\n\r\n            runtime.shutdown(immediate_shutdown);\r\n\r\n            has_shutdown = true;\r\n\r\n        } //shutdown\r\n\r\n    //events\r\n\r\n            /** Dispatch a system event explicitly */\r\n        public function dispatch_event(_type:SystemEventType) {\r\n\r\n            sys_event.set(_type, null, null);\r\n\r\n            onevent(sys_event);\r\n\r\n        } //dispatch_event\r\n\r\n        //internal\r\n        var window_in_background = false;\r\n\r\n        public function dispatch_window_event(_type:WindowEventType, _timestamp:Float, _window_id:Int, _x:Int, _y:Int) {\r\n            \r\n            win_event.set(_type, _timestamp, _window_id, _x, _y);\r\n            sys_event.set(se_window, win_event, null);\r\n\r\n            #if snow_native\r\n                if(_type == WindowEventType.we_focus_lost) {\r\n                    window_in_background = true;\r\n                } else if(_type == WindowEventType.we_focus_gained) {\r\n                    window_in_background = false;\r\n                }\r\n            #end\r\n            \r\n            onevent(sys_event);\r\n\r\n        } //dispatch_window_event\r\n\r\n        @:allow(snow.systems.input.Input)\r\n        function dispatch_input_event(_event:InputEvent) {\r\n            \r\n            sys_event.set(se_input, null, _event);\r\n            \r\n            onevent(sys_event);\r\n\r\n        } //dispatch_input_event\r\n\r\n            /** Handles snow system events, typically emitted via the runtime and modules.\r\n                Dispatch events manually using the `dispatch_*` calls. */\r\n        var i = 0;\r\n        public function onevent(_event:SystemEvent) {\r\n\r\n            // if( _event.type != se_tick ) {\r\n            //    log('event / system event / ${_event.type}');\r\n            //     if(_event.window != null) {\r\n            //         log('   window / ${_event.window.type} / ${_event.window.window_id} / ${_event.window.data1},${_event.window.data2}');\r\n            //     }\r\n            // }\r\n\r\n            io.onevent( _event );\r\n            audio.onevent( _event );\r\n            input.onevent( _event );\r\n            host.onevent( _event );\r\n\r\n            i = 0; while(i < extensions.length) {\r\n                extensions[i].onevent(_event);\r\n                ++i;\r\n            }\r\n\r\n            switch(_event.type) {\r\n\r\n                case se_ready:                      on_ready_event();\r\n                case se_tick:                       on_tick_event();\r\n                case se_quit:                       shutdown();\r\n                case se_shutdown:                   log('goodbye.');\r\n                    //mobile app terminate is an immediate termination\r\n                case se_app_terminating:\r\n                    immediate_shutdown = true;\r\n                    shutdown();\r\n                case _:\r\n\r\n            } //switch _event.type\r\n\r\n        } //onevent\r\n\r\n            /** Call a function at the start of the next frame,\r\n                useful for async calls in a sync context, allowing the sync function to return safely before the onload is fired. */\r\n        inline\r\n        public static function next( func: Void->Void ) {\r\n\r\n            if(func != null) next_queue.push(func);\r\n\r\n        } //next\r\n\r\n            /** Call a function at the end of the current frame */\r\n        inline\r\n        public static function defer( func: Void->Void ) {\r\n\r\n            if(func != null) defer_queue.push(func);\r\n\r\n        } //defer\r\n\r\n    //internal endpoints\r\n\r\n        inline function get_time() : Float return get_timestamp();\r\n        inline function get_uniqueid() : String return make_uniqueid();\r\n        static inline function get_timestamp() : Float return AppRuntime.timestamp();\r\n\r\n    //internal event handlers\r\n\r\n        var had_ready_event = false;\r\n        inline function on_ready_event() {\r\n\r\n            assert(had_ready_event == false, 'snow; the ready event should not be fired repeatedly');\r\n            had_ready_event = true;\r\n\r\n            setup_configs().then(function(_) {\r\n\r\n                _debug('init / setup default configs : ok');\r\n                _debug('init / runtime ready');\r\n                runtime.ready();\r\n\r\n                _debug('init / host ready');\r\n                host.ready();\r\n\r\n                _debug('init / ready');\r\n                ready = true;\r\n\r\n            }).error(function(e) {\r\n\r\n                throw Error.init('snow / cannot recover from error: $e');\r\n\r\n            });\r\n\r\n            step();\r\n\r\n        } //on_ready_event\r\n\r\n        inline function on_tick_event() {\r\n\r\n            if(freeze) return;\r\n            \r\n            #if snow_native\r\n                if(window_in_background && config.window.background_sleep != 0) {\r\n                    Sys.sleep(config.window.background_sleep);\r\n                }\r\n            #end\r\n\r\n            Timer.update();\r\n\r\n            snow.api.Promise.Promises.step();\r\n\r\n            cycle_next_queue();\r\n\r\n            if(!shutting_down && ready) {\r\n                host.internal_tick();\r\n            }\r\n\r\n            cycle_defer_queue();\r\n\r\n        } //on_tick_event\r\n\r\n    //setup and boot\r\n\r\n        function setup_configs() {\r\n\r\n                //blank/null config path means don't try to load it\r\n            if(snow.types.Config.app_config == null || snow.types.Config.app_config == '') {\r\n\r\n                setup_host_config();\r\n\r\n                return Promise.resolve();\r\n\r\n            } //blank config\r\n\r\n            return new Promise(function(resolve, reject) {\r\n\r\n                _debug('config / fetching user config');\r\n\r\n                default_user_config().then(function(_user_conf:Dynamic) {\r\n\r\n                    config.user = _user_conf;\r\n\r\n                }).error(function(error){\r\n\r\n                    throw Error.init('config / failed / default user config JSON failed to parse. Cannot recover. $error');\r\n\r\n                }).then(function(){\r\n\r\n                    setup_host_config();\r\n                    resolve();\r\n\r\n                });\r\n\r\n            }); //promise\r\n\r\n        } //setup_configs\r\n\r\n        inline function setup_host_config() {\r\n\r\n            _debug('config / fetching host config');\r\n\r\n            config = host.config( config );\r\n\r\n        } //setup_host_config\r\n\r\n            /** Handles the default method of parsing a user config json */\r\n        function default_user_config() : Promise {\r\n\r\n            _debug('config / setting up default user config');\r\n\r\n                //for the default config, we only reject if there is a json parse error\r\n            return new Promise(function(resolve, reject) {\r\n\r\n                var load = io.data_flow(assets.path(snow.types.Config.app_config), AssetJSON.processor);\r\n\r\n                    load.then(resolve).error(function(error:Error) {\r\n                        switch(error) {\r\n                            case Error.parse(val):\r\n                                reject(error);\r\n                            case _:\r\n                                log('config / user config will be null! / $error');\r\n                                resolve(null);\r\n                        }\r\n                    });\r\n\r\n            }); //promise\r\n\r\n        } //default_user_config\r\n\r\n        function default_config() : AppConfig {\r\n\r\n            return {\r\n                user : null,\r\n                window : default_window_config(),\r\n                render : default_render_config(),\r\n                runtime : null\r\n            }\r\n\r\n        } //default_config\r\n\r\n        /** Returns a default configured render config */\r\n        function default_render_config() : RenderConfig {\r\n\r\n            _debug('config / fetching default render config');\r\n\r\n            return {\r\n                depth : 0,\r\n                stencil : 0,\r\n                antialiasing : 0,\r\n                red_bits : 8,\r\n                green_bits : 8,\r\n                blue_bits : 8,\r\n                alpha_bits : 8,\r\n                default_clear: { r:0, g:0, b:0, a:1 },\r\n                opengl : {\r\n                    #if mobile\r\n                        major:2, minor:0,\r\n                        profile: OpenGLProfile.gles\r\n                    #else\r\n                        major:0, minor: 0,\r\n                        profile: OpenGLProfile.compatibility\r\n                    #end\r\n                },\r\n                webgl : {\r\n                    version : 1\r\n                }\r\n            };\r\n\r\n        } //default_render_config\r\n\r\n            /** Returns a default configured window config */\r\n        function default_window_config() : WindowConfig {\r\n\r\n            _debug('config / fetching default window config');\r\n\r\n            var conf : WindowConfig = {\r\n                true_fullscreen     : false,\r\n                fullscreen          : false,\r\n                borderless          : false,\r\n                resizable           : true,\r\n                x                   : 0x1FFF0000,\r\n                y                   : 0x1FFF0000,\r\n                width               : 960,\r\n                height              : 640,\r\n                title               : 'snow app',\r\n                no_input            : false,\r\n                background_sleep    : 1/15\r\n            };\r\n\r\n                #if mobile\r\n                    conf.fullscreen = true;\r\n                    conf.borderless = true;\r\n                #end //mobile\r\n\r\n            return conf;\r\n\r\n        } //default_window_config\r\n\r\n    //properties\r\n\r\n        function set_freeze( _freeze:Bool ) {\r\n\r\n            freeze = _freeze;\r\n\r\n            dispatch_event(_freeze ? se_freeze : se_unfreeze);\r\n\r\n            return freeze;\r\n\r\n        } //set_freeze\r\n\r\n    //step\r\n\r\n        inline function step() {\r\n\r\n            snow.api.Promise.Promises.step();\r\n\r\n            while(next_queue.length > 0) {\r\n                cycle_next_queue();\r\n            }\r\n\r\n            while(defer_queue.length > 0) {\r\n                cycle_defer_queue();\r\n            }\r\n\r\n        } //step\r\n\r\n    //callbacks\r\n\r\n        static var next_queue : Array<Void->Void> = [];\r\n        static var defer_queue : Array<Void->Void> = [];\r\n\r\n        inline function cycle_next_queue() {\r\n\r\n            var count = next_queue.length;\r\n            var i = 0;\r\n            while(i < count) {\r\n                (next_queue.shift())();\r\n                ++i;\r\n            }\r\n\r\n        } //cycle_next_queue\r\n\r\n        inline function cycle_defer_queue() {\r\n\r\n            var count = defer_queue.length;\r\n            var i = 0;\r\n            while(i < count) {\r\n                (defer_queue.shift())();\r\n                ++i;\r\n            }\r\n\r\n        } //cycle_next_queue\r\n\r\n    //helpers\r\n\r\n        @:noCompletion public\r\n        inline function copy_window_config( _config:WindowConfig ) : WindowConfig {\r\n            return {\r\n                borderless:_config.borderless,\r\n                fullscreen:_config.fullscreen,\r\n                true_fullscreen:_config.true_fullscreen,\r\n                height:_config.height,\r\n                no_input:_config.no_input,\r\n                background_sleep:_config.background_sleep,\r\n                resizable:_config.resizable,\r\n                title:'${_config.title}',\r\n                width:_config.width,\r\n                x:_config.x,\r\n                y:_config.y\r\n            }\r\n        }\r\n\r\n        @:noCompletion public\r\n        inline function copy_render_config( _config:RenderConfig ) : RenderConfig {\r\n            return {\r\n                antialiasing: _config.antialiasing,\r\n                depth: _config.depth,\r\n                stencil: _config.stencil,\r\n                red_bits: _config.red_bits,\r\n                green_bits: _config.green_bits,\r\n                blue_bits: _config.blue_bits,\r\n                alpha_bits: _config.alpha_bits,\r\n                default_clear: { \r\n                    r: _config.default_clear.r,\r\n                    g: _config.default_clear.g,\r\n                    b: _config.default_clear.b,\r\n                    a: _config.default_clear.a\r\n                },\r\n                opengl : {\r\n                    major: _config.opengl.major,\r\n                    minor: _config.opengl.minor,\r\n                    profile: _config.opengl.profile\r\n                }\r\n            }\r\n        }\r\n\r\n        function make_uniqueid(?val:Int) : String {\r\n\r\n            // http://www.anotherchris.net/csharp/friendly-unique-id-generation-part-2/#base62\r\n\r\n            if(val == null) {\r\n                #if neko val = Std.random(0x3FFFFFFF);\r\n                #else val = Std.random(0x7fffffff);\r\n                #end\r\n            }\r\n\r\n            inline function to_char(value:Int) {\r\n                if (value > 9) {\r\n                    var ascii = (65 + (value - 10));\r\n                    if (ascii > 90) ascii += 6;\r\n                    return String.fromCharCode(ascii);\r\n                } else return Std.string(value).charAt(0);\r\n            } //to_char\r\n\r\n            var r = Std.int(val % 62);\r\n            var q = Std.int(val / 62);\r\n\r\n            if (q > 0) return make_uniqueid(q) + to_char(r);\r\n\r\n            return Std.string(to_char(r));\r\n\r\n        } //make_uniqueid\r\n\r\n} //Snow\r\n","package snow.api;\r\n\r\nimport haxe.io.Path;\r\nimport haxe.macro.Context;\r\nimport haxe.macro.Expr;\r\n\r\nprivate enum LogError {\r\n    RequireString(detail:String);\r\n}\r\n\r\nclass Debug {\r\n\r\n        //default to `log`\r\n    static var _level : Int = 1;\r\n    static var _filter : Array<String>;\r\n    static var _exclude : Array<String>;\r\n    static var _log_width : Int = 16;\r\n\r\n    macro public static function get_level() : haxe.macro.Expr {\r\n        return macro $v{ ${snow.api.Debug._level} };\r\n    }\r\n    macro public static function get_filter() : haxe.macro.Expr {\r\n        return macro $v{ ${snow.api.Debug._filter} };\r\n    }\r\n    macro public static function get_exclude() : haxe.macro.Expr {\r\n        return macro $v{ ${snow.api.Debug._exclude} };\r\n    }\r\n\r\n    macro static function level( __level:Int ) : haxe.macro.Expr {\r\n\r\n        _level = __level;\r\n\r\n        return macro null;\r\n\r\n    } //level\r\n\r\n    macro static function filter( __filter:String ) : haxe.macro.Expr {\r\n\r\n        _filter = __filter.split(',');\r\n\r\n        var _index = 0;\r\n        for(_f in _filter) {\r\n            _filter[_index] = StringTools.trim(_f);\r\n            _index++;\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //filter\r\n\r\n    macro static function exclude( __exclude:String ) : haxe.macro.Expr {\r\n\r\n        _exclude = __exclude.split(',');\r\n\r\n        var _index = 0;\r\n        for(_e in _exclude) {\r\n            _exclude[_index] = StringTools.trim(_e);\r\n            _index++;\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //exclude\r\n\r\n    macro static function width( _width:Int ) : haxe.macro.Expr {\r\n\r\n        _log_width = _width;\r\n\r\n        return macro null;\r\n\r\n    } //width\r\n\r\n        //This macro uses the defined log level value to reject code that\r\n        //shouldn't even exist at runtime , like low level debug information\r\n        //and logging by injecting or not injecting code\r\n    macro public static function log( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 0);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}i / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //log\r\n\r\n    macro public static function _debug( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 1);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}d / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //_debug\r\n\r\n    macro public static function _verbose( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 2);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}v / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //_verbose\r\n\r\n    macro public static function _verboser( value:Dynamic ) : Expr {\r\n\r\n        var _file = Path.withoutDirectory(Context.getPosInfos(Context.currentPos()).file);\r\n        var _context = Path.withoutExtension(_file).toLowerCase();\r\n        var _spaces = _get_spacing(_file);\r\n\r\n        for(meta in Context.getLocalClass().get().meta.get()) {\r\n            if(meta.name == ':log_as') {\r\n                var _str = switch(meta.params[0].expr) {\r\n                    case EConst(CString(str)): _context = str;\r\n                    default: throw LogError.RequireString('log_as meta requires a string constant like \"name\"');\r\n                }\r\n            }\r\n        } //for each meta\r\n\r\n        var _log = (_level > 3);\r\n\r\n            if(_filter != null && (_filter.indexOf(_context) == -1)) {\r\n                _log = false;\r\n            }\r\n\r\n            if(_exclude != null && (_exclude.indexOf(_context) != -1)) {\r\n                _log = false;\r\n            }\r\n\r\n        if(_log) {\r\n            return macro @:pos(Context.currentPos()) trace('${_spaces}V / $_context / ' + $value);\r\n        }\r\n\r\n        return macro null;\r\n\r\n    } //_verboser\r\n\r\n    macro public static function assert(expr:Expr, ?reason:ExprOf<String>) {\r\n        #if !snow_no_assertions\r\n            var _str = haxe.macro.ExprTools.toString(expr);\r\n\r\n            reason = switch(reason) {\r\n                case macro null: macro '';\r\n                case _: macro ' ( ' + $reason + ' )';\r\n            }\r\n\r\n            return macro @:pos(Context.currentPos()) {\r\n                if(!$expr) throw snow.api.Debug.DebugError.assertion( '$_str' + $reason);\r\n            }\r\n        #end\r\n        return macro null;\r\n    } //assert\r\n\r\n    macro public static function assertnull(value:Expr, ?reason:ExprOf<String>) {\r\n        #if !snow_no_assertions\r\n            var _str = haxe.macro.ExprTools.toString(value);\r\n\r\n            reason = switch(reason) {\r\n                case macro null: macro '';\r\n                case _: macro ' ( ' + $reason + ' )';\r\n            }\r\n            return macro @:pos(Context.currentPos()) {\r\n                if($value == null) throw snow.api.Debug.DebugError.null_assertion('$_str was null' + $reason);\r\n            }\r\n        #end\r\n        return macro null;\r\n    } //assert\r\n\r\n    macro public static function def(value:Expr, def:Expr):Expr {\r\n        return macro @:pos(Context.currentPos()) {\r\n            if($value == null) $value = $def;\r\n            $value;\r\n        }\r\n    }\r\n\r\n\r\n//Internal Helpers\r\n\r\n\r\n    static function _get_spacing(_file:String ) {\r\n\r\n        var _spaces = '';\r\n\r\n            //the magic number here is File.hx[:1234] for the trace listener log spacing\r\n        var _trace_length = _file.length + 4;\r\n        var _diff : Int = _log_width - _trace_length;\r\n        if(_diff > 0) {\r\n            for(i in 0 ... _diff) {\r\n                _spaces += ' ';\r\n            }\r\n        }\r\n\r\n        return _spaces;\r\n\r\n    } //_get_spacing\r\n\r\n} // Debug\r\n\r\nenum DebugError {\r\n    assertion(expr:String);\r\n    null_assertion(expr:String);\r\n}\r\n","package snow.api;\r\n\r\nimport haxe.ds.IntMap;\r\nimport snow.api.Debug.*;\r\n\r\nprivate typedef EmitHandler = Dynamic->Void;\r\nprivate typedef HandlerList = Array<EmitHandler>;\r\n\r\n@:noCompletion private typedef EmitNode<T> = { event : T, handler:EmitHandler #if debug, ?pos:haxe.PosInfos #end }\r\n\r\n\r\n/** A simple event emitter, used as a base class for systems that want to handle direct connections to named events */\r\n\r\n// @:generic\r\nclass Emitter<ET:Int> {\r\n\r\n    @:noCompletion public var bindings : IntMap<HandlerList>;\r\n\r\n        //store connections loosely, to find connected locations\r\n    var connected : List< EmitNode<ET> >;\r\n        //store the items to remove\r\n    var _to_remove : List< EmitNode<ET> >;\r\n\r\n        /** create a new emitter instance, for binding functions easily to named events. similar to `Events` */\r\n    public function new() {\r\n\r\n        _to_remove = new List();\r\n        connected = new List();\r\n\r\n        bindings = new IntMap<HandlerList>();\r\n\r\n    } //new\r\n\r\n        /** Emit a named event */\r\n    public function emit<T>( event:ET, ?data:T #if debug, ?pos:haxe.PosInfos #end ) {\r\n\r\n        _check();\r\n\r\n        var list = bindings.get(event);\r\n        if(list != null && list.length > 0) {\r\n            for(handler in list) {\r\n                #if debug _verboser('emit / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\r\n                handler(data);\r\n            }\r\n        }\r\n\r\n            //needed because handlers\r\n            //might disconnect listeners\r\n        _check();\r\n\r\n    } //emit\r\n\r\n        /** connect a named event to a handler */\r\n    public function on<T>(event:ET, handler: T->Void #if debug, ?pos:haxe.PosInfos #end ) {\r\n\r\n        _check();\r\n\r\n        #if debug _verbose('on / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\r\n\r\n        if(!bindings.exists(event)) {\r\n\r\n            bindings.set(event, [handler]);\r\n            connected.push({ handler:handler, event:event #if debug, pos:pos #end });\r\n\r\n        } else {\r\n            var list = bindings.get(event);\r\n            if(list.indexOf(handler) == -1) {\r\n                list.push(handler);\r\n                connected.push({ handler:handler, event:event #if debug, pos:pos #end });\r\n            }\r\n        }\r\n\r\n    } //on\r\n\r\n        /** disconnect a named event and handler. returns true on success, or false if event or handler not found */\r\n    public function off<T>(event:ET, handler: T->Void #if debug, ?pos:haxe.PosInfos #end ) : Bool {\r\n\r\n        _check();\r\n\r\n        var success = false;\r\n\r\n        if(bindings.exists(event)) {\r\n\r\n            #if debug _verbose('off / $event / ${pos.fileName}:${pos.lineNumber}@${pos.className}.${pos.methodName}'); #end\r\n\r\n            _to_remove.push({ event:event, handler:handler });\r\n\r\n            for(_info in connected) {\r\n                if(_info.event == event && _info.handler == handler) {\r\n                    connected.remove(_info);\r\n                }\r\n            }\r\n\r\n                //debateable :p\r\n            success = true;\r\n\r\n        } //if exists\r\n\r\n        return success;\r\n\r\n    } //off\r\n\r\n    var _checking = false;\r\n\r\n    function _check() {\r\n\r\n        if(_checking) {\r\n            return;\r\n        }\r\n\r\n        _checking = true;\r\n\r\n        if(_to_remove.length > 0) {\r\n\r\n            for(_node in _to_remove) {\r\n\r\n                var list = bindings.get(_node.event);\r\n                list.remove( _node.handler );\r\n\r\n                    //clear the event list if there are no bindings\r\n                if(list.length == 0) {\r\n                    bindings.remove(_node.event);\r\n                }\r\n\r\n            } //each node\r\n\r\n            _to_remove = null;\r\n            _to_remove = new List();\r\n\r\n        } //_to_remove length > 0\r\n\r\n        _checking = false;\r\n\r\n    } //_check\r\n\r\n} //Emitter\r\n","package snow.api;\r\n\r\n/**\r\nThe Promise interface represents a proxy for a value not necessarily\r\nknown when the promise is created. It allows you to associate handlers\r\nto an asynchronous action's eventual success or failure. This lets asynchronous\r\nmethods return values like synchronous methods: instead of the final value,\r\nthe asynchronous method returns a promise of having a value at some point in the future.\r\n\r\nA pending promise can become either fulfilled with a value, or\r\nrejected with a reason. When either of these happens, the associated\r\nhandlers queued up by a promise's then method are called. (If the promise\r\nhas already been fulfilled or rejected when a corresponding handler is attached,\r\nthe handler will be called, so there is no race condition between an asynchronous\r\noperation completing and its handlers being attached.)\r\n\r\nAs the Promise.prototype.then and Promise.prototype.error methods return promises,\r\nthey can be chained—an operation called composition.\r\n\r\nDocumentation provided mostly by MDN\r\nlicensed under CC-BY-SA 2.5. by Mozilla Contributors.\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n*/\r\n@:allow(snow.api.Promises)\r\nclass Promise {\r\n\r\n        /** The state this promise is in. */\r\n    var state : PromiseState;\r\n        /** internal: The result of this promise */\r\n    var result : Dynamic;\r\n        /** internal: The reactions lists */\r\n    var reject_reactions: Array<Dynamic>;\r\n    var fulfill_reactions: Array<Dynamic>;\r\n    var settle_reactions: Array<Dynamic>;\r\n\r\n        /** internal: If the promise was handled by a reject reaction */\r\n    var was_caught: Bool = false;\r\n\r\n        /** Creates a new promise by providing a function with two callback arguments.\r\n            Inside this function, invoking these callbacks controls the promise state.\r\n\r\n            For example, if fetching a value async, and the operation fails, you would\r\n            invoke the second callback with the reason/error. If the operation succeeded,\r\n            you would invoke the first.\r\n\r\n            `new Promise(function(resolve, reject) {\r\n                var success = ... get value ...\r\n                if(success) {\r\n                    resolve(value);\r\n                } else {\r\n                    reject(Error(...));\r\n                }\r\n            });` */\r\n    public function new<T>( func:T ) {\r\n\r\n        state = pending;\r\n\r\n        reject_reactions = [];\r\n        fulfill_reactions = [];\r\n        settle_reactions = [];\r\n\r\n        Promises.queue(function() {\r\n\r\n            #if hxpromise_catch_and_reject_on_promise_body\r\n                try {\r\n                    untyped func(onfulfill, onreject);\r\n                } catch(err:Dynamic) {\r\n                    onexception(err);\r\n                }\r\n            #else\r\n                untyped func(onfulfill, onreject);\r\n            #end //hxpromise_catch_and_reject_on_promise_body\r\n\r\n            Promises.defer(Promises.next);\r\n        });\r\n\r\n    } //new\r\n\r\n        /** The then function returns a Promise. It takes two arguments,\r\n            both are callback functions for the success and failure cases of the Promise. */\r\n    public function then<T,T1>( on_fulfilled:T, ?on_rejected:T ) : Promise {\r\n\r\n        switch(state) {\r\n\r\n            case pending: {\r\n                add_fulfill(on_fulfilled);\r\n                add_reject(on_rejected);\r\n                return new_linked_promise();\r\n            }\r\n\r\n            case fulfilled: {\r\n                Promises.defer(on_fulfilled, result);\r\n                return Promise.resolve(result);\r\n            }\r\n\r\n            case rejected: {\r\n                Promises.defer(on_rejected, result);\r\n                return Promise.reject(result);\r\n            }\r\n\r\n        } //switch\r\n\r\n    } //then\r\n\r\n        /** The error function returns a Promise and deals with rejected cases only.\r\n            It behaves the same as calling then(null, on_rejected).*/\r\n    public function error<T>( on_rejected:T ) : Promise {\r\n\r\n        switch(state) {\r\n\r\n            case pending: {\r\n                add_reject(on_rejected);\r\n                return new_linked_resolve_empty();\r\n            }\r\n\r\n            case fulfilled: {\r\n                return Promise.resolve(result);\r\n            }\r\n\r\n            case rejected: {\r\n                Promises.defer(on_rejected, result);\r\n                return Promise.reject(result);\r\n            }\r\n\r\n        } //switch\r\n\r\n    } //error\r\n\r\n        /** The Promise.all(iterable) function returns a promise that\r\n            resolves when all of the promises in the iterable argument\r\n            have resolved. The result is passed as an array of values\r\n            from all the promises.\r\n            If any of the passed in promises rejects, the all Promise\r\n            immediately rejects with the value of the promise that rejected,\r\n            discarding all the other promises whether or not they have resolved. */\r\n    public static function all( list:Array<Promise> ) {\r\n\r\n        #if debug\r\n            for(item in list) {\r\n                if(item == null) throw \"Promise.all handed an array with null items within it\";\r\n            }\r\n        #end\r\n\r\n        return new Promise(function(ok, no) {\r\n\r\n            var current = 0;\r\n            var total = list.length;\r\n            var fulfill_result = [];\r\n            var reject_result = null;\r\n            var all_state:PromiseState = pending;\r\n\r\n            var single_ok = function(index, val) {\r\n\r\n                if(all_state != pending) return;\r\n\r\n                current++;\r\n                fulfill_result[index] = val;\r\n\r\n                if(total == current) {\r\n                    all_state = fulfilled;\r\n                    ok(fulfill_result);\r\n                }\r\n\r\n            } //single_ok\r\n\r\n            var single_err = function(val) {\r\n\r\n                if(all_state != pending) return;\r\n\r\n                all_state = rejected;\r\n                reject_result = val;\r\n                no(reject_result);\r\n\r\n            } //single_err\r\n\r\n            var index = 0;\r\n            for(promise in list) {\r\n                promise.then(single_ok.bind(index,_)).error(single_err);\r\n                index++;\r\n            }\r\n\r\n        }); //promise\r\n\r\n    } //all\r\n\r\n        /** The Promise.race function returns a promise that\r\n            resolves or rejects as soon as one of the promises in the\r\n            list resolves or rejects, with the value or reason from that promise. */\r\n    public static function race( list:Array<Promise> ) {\r\n\r\n        return new Promise(function(ok,no) {\r\n\r\n            var settled = false;\r\n            var single_ok = function(val) {\r\n                if(settled) return;\r\n                settled = true;\r\n                ok(val);\r\n            }\r\n\r\n            var single_err = function(val) {\r\n                if(settled) return;\r\n                settled = true;\r\n                no(val);\r\n            }\r\n\r\n            for(promise in list) {\r\n                promise.then(single_ok).error(single_err);\r\n            }\r\n        });\r\n\r\n    } //race\r\n\r\n        /** The Promise.reject function returns a Promise object\r\n            that is rejected with the optional reason. */\r\n    public static function reject<T>( ?reason:T ) {\r\n\r\n        return new Promise(function(ok, no){\r\n            no(reason);\r\n        });\r\n\r\n    } //reject\r\n\r\n        /** The static Promise.resolve function returns a Promise object\r\n            that is resolved with the given value. */\r\n    public static function resolve<T>( ?val:T ) {\r\n\r\n        return new Promise(function(ok, no){\r\n            ok(val);\r\n        });\r\n\r\n    } //resolve\r\n\r\n//Debug\r\n\r\n    function toString() {\r\n        return 'Promise { state:${state_string()}, result:$result }';\r\n    }\r\n\r\n//Internal\r\n\r\n        /** internal: Add a settle reaction unless\r\n            this promise is already settled,\r\n            if it is the call is deferred but happens \"immediately\" */\r\n    function add_settle(f) {\r\n\r\n        if(state == pending) {\r\n            settle_reactions.push(f);\r\n        } else {\r\n            Promises.defer(f,result);\r\n        }\r\n\r\n    } //add_settle\r\n\r\n        /** internal: Return a new linked promise that\r\n            will wait on this, and settle it with this result */\r\n    function new_linked_promise() {\r\n\r\n        return new Promise(function(f, r) {\r\n            add_settle(function(_){\r\n                if(state == fulfilled){\r\n                    f(result);\r\n                } else {\r\n                    r(result);\r\n                }\r\n            });\r\n        }); //promise\r\n\r\n    } //\r\n\r\n\r\n        /** internal: Return a resolved promise that\r\n            will wait on this, and fulfill with this result */\r\n    function new_linked_resolve() {\r\n        return new Promise(function (f,r) {\r\n            add_settle(function(val) {\r\n                f(val);\r\n            });\r\n        });\r\n    } //\r\n\r\n        /** internal: Return a rejected promise that\r\n            will wait on this, and reject with this result */\r\n    function new_linked_reject() {\r\n        return new Promise(function (f,r) {\r\n            add_settle(function(val){\r\n                r(val);\r\n            });\r\n        });\r\n    } //\r\n\r\n        /** internal: Return an already resolved\r\n            promise that will wait on this one\r\n            but have no value fulfilled */\r\n    function new_linked_resolve_empty() {\r\n        return new Promise(function(f,r) {\r\n            add_settle(function(_){\r\n                f();\r\n            });\r\n        });\r\n    } //\r\n\r\n        /** internal: Return an already rejected\r\n            promise that will wait on this one\r\n            but have no value rejected */\r\n    function new_linked_reject_empty() {\r\n        return new Promise(function(f,r) {\r\n            add_settle(function(_){\r\n                r();\r\n            });\r\n        });\r\n    } //\r\n\r\n\r\n        /** internal: Add a fulfill reaction callback */\r\n    function add_fulfill<T>(f:T) {\r\n        if(f != null) {\r\n            fulfill_reactions.push(f);\r\n        }\r\n    } //\r\n\r\n        /** internal: Add a reject reaction callback */\r\n    function add_reject<T>(f:T) {\r\n        if(f != null) {\r\n            was_caught = true;\r\n            reject_reactions.push(f);\r\n        }\r\n    } //\r\n\r\n//State shifts\r\n\r\n        /** internal: Called if the promise is fulfilled. */\r\n    function onfulfill<T>( val:T ) {\r\n\r\n        // trace('resolve: to $val, with ${fulfill_reactions.length} reactions');\r\n\r\n        state = fulfilled;\r\n        result = val;\r\n\r\n        while(fulfill_reactions.length > 0) {\r\n            var fn = fulfill_reactions.shift();\r\n            fn(result);\r\n        }\r\n\r\n        onsettle();\r\n\r\n    } //onfulfill\r\n\r\n        /** internal: Called if the promise is rejected. */\r\n    function onreject<T>( reason:T ) {\r\n\r\n        // trace('reject: to $reason, with ${reject_reactions.length} reactions');\r\n\r\n        state = rejected;\r\n        result = reason;\r\n\r\n        while(reject_reactions.length > 0) {\r\n            var fn = reject_reactions.shift();\r\n            fn(result);\r\n        }\r\n\r\n        onsettle();\r\n\r\n    } //onreject\r\n\r\n        /** internal: Called when the promise is settled. */\r\n    function onsettle() {\r\n\r\n        while(settle_reactions.length > 0) {\r\n            var fn = settle_reactions.shift();\r\n            fn(result);\r\n        }\r\n\r\n    } //onsettle\r\n\r\n        /** internal: Handle exceptions in the promise callback.\r\n            This causes a rejection, and if no handlers are found will throw */\r\n    function onexception<T>( err:T ) {\r\n\r\n        #if !hxpromise_dont_throw_unhandled_rejection\r\n\r\n        add_settle(function(_){\r\n            if(!was_caught) {\r\n                if(state == rejected) {\r\n                    throw PromiseError.UnhandledPromiseRejection(this.toString());\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n\r\n        #end //hxpromise_throw_unhandled_rejection\r\n\r\n            //state can't transition\r\n            //and we shouldn't reject twice\r\n            //so we only reject if pending\r\n        if(state == pending) {\r\n            onreject(err);\r\n        }\r\n\r\n    } //onexception\r\n\r\n        /** internal: return a string for our state */\r\n    function state_string() {\r\n        return switch(state){\r\n            case pending:'pending';\r\n            case fulfilled:'fulfilled';\r\n            case rejected:'rejected';\r\n        }\r\n    }\r\n\r\n} //Promise\r\n\r\n\r\n/**\r\nPromises implementation. Use this to integrate the promises\r\ninto your code base. Call step at the end of a frame/microtask.\r\n*/\r\n@:allow(snow.api.Promise)\r\nclass Promises {\r\n\r\n    static var calls: Array<Dynamic> = [];\r\n    static var defers: Array<{f:Dynamic,a:Dynamic}> = [];\r\n\r\n        /** Call this once when you want to propagate promises */\r\n    public static function step() {\r\n\r\n        next();\r\n\r\n        while(defers.length > 0) {\r\n            var defer = defers.shift();\r\n                defer.f(defer.a);\r\n        }\r\n\r\n    } //\r\n\r\n        /** Handle the next job in the queue if any */\r\n    static function next() {\r\n        if(calls.length > 0) (calls.shift())();\r\n    } //\r\n\r\n        /** Defer a call with an argument to the next step */\r\n    static function defer<T,T1>(f:T, ?a:T1) {\r\n        if(f == null) return;\r\n        defers.push({f:f, a:a});\r\n    } //\r\n\r\n        /** Queue a job to be executed in order */\r\n    static function queue<T>(f:T) {\r\n        if(f == null) return;\r\n        calls.push(f);\r\n    } //\r\n\r\n} //Promises\r\n\r\n//Promise types\r\n\r\nenum PromiseError {\r\n    UnhandledPromiseRejection(err:Dynamic);\r\n}\r\n\r\n@:enum\r\nabstract PromiseState(Int) from Int to Int {\r\n        //initial state, not fulfilled or rejected\r\n    var pending = 0;\r\n        //successful operation\r\n    var fulfilled = 1;\r\n        //failed operation\r\n    var rejected = 2;\r\n\r\n} //\r\n","package snow.api;\r\n\r\nimport haxe.PosInfos;\r\nimport haxe.Log;\r\n\r\n@:allow(snow.Snow)\r\n    class Timer {\r\n\r\n        static var running_timers:Array<Timer> = [];\r\n\r\n        @:noCompletion public var time:Float;\r\n        @:noCompletion public var fire_at:Float;\r\n        @:noCompletion public var running:Bool;\r\n\r\n        public function new(_time:Float) {\r\n\r\n            time = _time;\r\n            running_timers.push( this );\r\n            fire_at = Snow.timestamp + time;\r\n            running = true;\r\n\r\n        } //new\r\n\r\n        public static function measure<T>( f : Void -> T, ?pos : PosInfos ) : T {\r\n            var t0 = Snow.timestamp;\r\n            var r = f();\r\n            Log.trace((Snow.timestamp - t0) + \"s\", pos);\r\n            return r;\r\n        }\r\n\r\n        // Set this with \"run=...\"\r\n        dynamic public function run () { }\r\n\r\n        public function stop ():Void {\r\n\r\n            if (running) {\r\n                running = false;\r\n                running_timers.remove (this);\r\n            }\r\n\r\n        } //stop\r\n\r\n\r\n        static function update() {\r\n\r\n            var now = Snow.timestamp;\r\n\r\n            for (timer in running_timers) {\r\n                if(timer.running) {\r\n                    if(timer.fire_at < now) {\r\n                        timer.fire_at += timer.time;\r\n                        timer.run();\r\n                    } //now\r\n                }\r\n            } //all timers\r\n\r\n        } //update\r\n\r\n            //From std/haxe/Timer.hx\r\n        public static function delay( _time:Float, _f:Void -> Void ) {\r\n\r\n            var t = new Timer( _time );\r\n            t.run = function() {\r\n                t.stop();\r\n                _f();\r\n            };\r\n\r\n            return t;\r\n\r\n        } //delay\r\n\r\n    } //Timer\r\n\r\n","package snow.api.buffers;\r\n\r\n#if js\r\n\r\n    @:forward\r\n    @:arrayAccess\r\n    abstract Float32Array(js.html.Float32Array)\r\n        from js.html.Float32Array\r\n        to js.html.Float32Array {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\r\n\r\n        inline public function new(_elements:Int) {\r\n            this = new js.html.Float32Array(_elements);\r\n        }\r\n\r\n        inline static public function fromArray<T>(_array:Array<T>) : Float32Array {\r\n            return new js.html.Float32Array(untyped _array);\r\n        }\r\n\r\n        inline static public function fromView(_view:ArrayBufferView) : Float32Array {\r\n            return new js.html.Float32Array(untyped _view);\r\n        }\r\n\r\n        inline static public function fromBuffer(_buffer:ArrayBuffer, _byteOffset:Int, _byteLength:Int) : Float32Array {\r\n            return new js.html.Float32Array(_buffer, _byteOffset, Std.int(_byteLength/BYTES_PER_ELEMENT));\r\n        }\r\n\r\n\r\n        @:arrayAccess @:extern inline function __set(idx:Int, val:Float) : Void this[idx] = val;\r\n        @:arrayAccess @:extern inline function __get(idx:Int) : Float return this[idx];\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Float32Array {\r\n            if(byteOffset == null) return new js.html.Float32Array(cast bytes.getData());\r\n            if(len == null) return new js.html.Float32Array(cast bytes.getData(), byteOffset);\r\n            return new js.html.Float32Array(cast bytes.getData(), byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            #if (haxe_ver < 3.2)\r\n                return @:privateAccess new haxe.io.Bytes( this.byteLength, cast new js.html.Uint8Array(this.buffer) );\r\n            #else\r\n                return @:privateAccess new haxe.io.Bytes( cast new js.html.Uint8Array(this.buffer) );\r\n            #end\r\n        }\r\n\r\n        inline function toString() return 'Float32Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#else\r\n\r\n    import snow.api.buffers.ArrayBufferView;\r\n    import snow.api.buffers.TypedArrayType;\r\n\r\n    @:forward\r\n    abstract Float32Array(ArrayBufferView) from ArrayBufferView to ArrayBufferView {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\r\n\r\n        public var length (get, never):Int;\r\n\r\n        inline public function new(_elements:Int) {\r\n            this = ArrayBufferView.fromElements(Float32, _elements);\r\n        }\r\n\r\n        // @:generic //:todo: on use with generic: Type not found : snow.api.buffers._Float32Array.Float32Array_Impl_\r\n        inline static public function fromArray<T>(_array:Array<T>) : Float32Array {\r\n            return ArrayBufferView.fromArray(Float32, cast _array);\r\n        }\r\n\r\n        inline static public function fromView(_view:ArrayBufferView) : Float32Array {\r\n            return ArrayBufferView.fromView(Float32, _view);\r\n        }\r\n\r\n        inline static public function fromBuffer(_buffer:ArrayBuffer, _byteOffset:Int, _byteLength:Int) : Float32Array {\r\n            return ArrayBufferView.fromBuffer(Float32, _buffer, _byteOffset, _byteLength);\r\n        }\r\n\r\n    //Public API\r\n\r\n        public inline function subarray( begin:Int, end:Null<Int> = null) : Float32Array return this.subarray(begin, end);\r\n\r\n\r\n        inline public static function fromBytes(_bytes:haxe.io.Bytes, ?_byteOffset:Int=0, ?_byteLength:Int) : Float32Array {\r\n            if(_byteLength == null) _byteLength = _bytes.length;\r\n            return Float32Array.fromBuffer(_bytes.getData(), _byteOffset, _byteLength);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            return haxe.io.Bytes.ofData(this.buffer);\r\n        }\r\n\r\n    //Internal\r\n\r\n        inline function toString() return this == null ? null : 'Float32Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n        @:extern inline function get_length() return this.length;\r\n\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __get(idx:Int) : Float {\r\n            return ArrayBufferIO.getFloat32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT) );\r\n        }\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __set(idx:Int, val:Float) : Void {\r\n            ArrayBufferIO.setFloat32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT), val);\r\n        }\r\n\r\n    }\r\n\r\n#end //!js\r\n","package snow.api.buffers;\r\n\r\n#if js\r\n\r\n    @:forward\r\n    abstract Int32Array(js.html.Int32Array)\r\n        from js.html.Int32Array\r\n        to js.html.Int32Array {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\r\n\r\n        inline public function new(_elements:Int) {\r\n            this = new js.html.Int32Array(_elements);\r\n        }\r\n\r\n        inline static public function fromArray<T>(_array:Array<T>) : Int32Array {\r\n            return new js.html.Int32Array(untyped _array);\r\n        }\r\n\r\n        inline static public function fromView(_view:ArrayBufferView) : Int32Array {\r\n            return new js.html.Int32Array(untyped _view);\r\n        }\r\n\r\n        inline static public function fromBuffer(_buffer:ArrayBuffer, _byteOffset:Int, _byteLength:Int) : Int32Array {\r\n            return new js.html.Int32Array(_buffer, _byteOffset, Std.int(_byteLength/BYTES_PER_ELEMENT));\r\n        }\r\n\r\n        @:arrayAccess @:extern inline function __set(idx:Int, val:Int) : Void this[idx] = val;\r\n        @:arrayAccess @:extern inline function __get(idx:Int) : Int return this[idx];\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int=0, ?len:Int ) : Int32Array {\r\n            if(byteOffset == null) return new js.html.Int32Array(cast bytes.getData());\r\n            if(len == null) return new js.html.Int32Array(cast bytes.getData(), byteOffset);\r\n            return new js.html.Int32Array(cast bytes.getData(), byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            #if (haxe_ver < 3.2)\r\n                return @:privateAccess new haxe.io.Bytes( this.byteLength, cast new js.html.Uint8Array(this.buffer) );\r\n            #else\r\n                return @:privateAccess new haxe.io.Bytes( cast new js.html.Uint8Array(this.buffer) );\r\n            #end\r\n        }\r\n\r\n        inline function toString() return 'Int32Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#else\r\n\r\n    import snow.api.buffers.ArrayBufferView;\r\n    import snow.api.buffers.TypedArrayType;\r\n\r\n    @:forward\r\n    abstract Int32Array(ArrayBufferView) from ArrayBufferView to ArrayBufferView {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 4;\r\n\r\n        public var length (get, never):Int;\r\n\r\n        inline public function new(_elements:Int) {\r\n            this = ArrayBufferView.fromElements(Int32, _elements);\r\n        }\r\n\r\n        // @:generic\r\n        static public inline function fromArray<T>(_array:Array<T>) : Int32Array {\r\n            return ArrayBufferView.fromArray(Int32, cast _array);\r\n        }\r\n\r\n        static public inline function fromView(_view:ArrayBufferView) : Int32Array {\r\n            return ArrayBufferView.fromView(Int32, _view);\r\n        }\r\n\r\n        static public inline function fromBuffer(_buffer:ArrayBuffer, _byteOffset:Int, _byteLength:Int) : Int32Array {\r\n            return ArrayBufferView.fromBuffer(Int32, _buffer, _byteOffset, _byteLength);\r\n        }\r\n\r\n    //Public API\r\n\r\n        public inline function subarray( begin:Int, end:Null<Int> = null) : Int32Array return this.subarray(begin, end);\r\n\r\n\r\n        inline public static function fromBytes(_bytes:haxe.io.Bytes, ?_byteOffset:Int=0, ?_byteLength:Int) : Int32Array {\r\n            if(_byteLength == null) _byteLength = _bytes.length;\r\n            return Int32Array.fromBuffer(_bytes.getData(), _byteOffset, _byteLength);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            return haxe.io.Bytes.ofData(this.buffer);\r\n        }\r\n\r\n    //Internal\r\n\r\n        inline function get_length() return this.length;\r\n\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __get(idx:Int) {\r\n            return ArrayBufferIO.getInt32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT));\r\n        }\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __set(idx:Int, val:Int) : Void {\r\n            ArrayBufferIO.setInt32(this.buffer, this.byteOffset+(idx*BYTES_PER_ELEMENT), val);\r\n        }\r\n\r\n        inline function toString() return this == null ? null : 'Int32Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#end //!js\r\n","package snow.api.buffers;\r\n\r\n#if js\r\n\r\n    @:forward\r\n    abstract Uint8Array(js.html.Uint8Array)\r\n        from js.html.Uint8Array\r\n        to js.html.Uint8Array {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 1;\r\n\r\n        inline public function new(_elements:Int) {\r\n            this = new js.html.Uint8Array(_elements);\r\n        }\r\n        \r\n        inline static public function fromArray<T>(_array:Array<T>) : Uint8Array {\r\n            return new js.html.Uint8Array(untyped _array);\r\n        }\r\n        \r\n        inline static public function fromView(_view:ArrayBufferView) : Uint8Array {\r\n            return new js.html.Uint8Array(untyped _view);\r\n        }\r\n        \r\n        inline static public function fromBuffer(_buffer:ArrayBuffer, _byteOffset:Int, _byteLength:Int) : Uint8Array {\r\n            return new js.html.Uint8Array(_buffer, _byteOffset, _byteLength);\r\n        }\r\n\r\n        @:arrayAccess @:extern inline function __set(idx:Int, val:UInt) : Void this[idx] = val;\r\n        @:arrayAccess @:extern inline function __get(idx:Int) : Int return this[idx];\r\n\r\n\r\n            //non spec haxe conversions\r\n        inline public static function fromBytes( bytes:haxe.io.Bytes, ?byteOffset:Int, ?len:Int ) : Uint8Array {\r\n            if(byteOffset == null) return new js.html.Uint8Array(cast bytes.getData());\r\n            if(len == null) return new js.html.Uint8Array(cast bytes.getData(), byteOffset);\r\n            return new js.html.Uint8Array(cast bytes.getData(), byteOffset, len);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            #if (haxe_ver < 3.2)\r\n                return @:privateAccess new haxe.io.Bytes( this.byteLength, cast new js.html.Uint8Array(this.buffer) );\r\n            #else\r\n                return @:privateAccess new haxe.io.Bytes( cast new js.html.Uint8Array(this.buffer) );\r\n            #end\r\n        }\r\n\r\n        inline function toString() return 'Uint8Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n    }\r\n\r\n#else\r\n\r\n    import snow.api.buffers.ArrayBufferView;\r\n    import snow.api.buffers.TypedArrayType;\r\n\r\n    @:forward\r\n    abstract Uint8Array(ArrayBufferView) from ArrayBufferView to ArrayBufferView {\r\n\r\n        public inline static var BYTES_PER_ELEMENT : Int = 1;\r\n\r\n        public var length (get, never):Int;\r\n\r\n        inline public function new(_elements:Int) {\r\n            this = ArrayBufferView.fromElements(Uint8, _elements);\r\n        }\r\n\r\n        // @:generic\r\n        static public inline function fromArray<T>(_array:Array<T>) : Uint8Array {\r\n            return ArrayBufferView.fromArray(Uint8, cast _array);\r\n        }\r\n\r\n        static public inline function fromView(_view:ArrayBufferView) : Uint8Array {\r\n            return ArrayBufferView.fromView(Uint8, _view);\r\n        }\r\n\r\n        static public inline function fromBuffer(_buffer:ArrayBuffer, _byteOffset:Int, _byteLength:Int) : Uint8Array {\r\n            return ArrayBufferView.fromBuffer(Uint8, _buffer, _byteOffset, _byteLength);\r\n        }\r\n\r\n    //Public API\r\n\r\n        public inline function subarray( begin:Int, end:Null<Int> = null) : Uint8Array return this.subarray(begin, end);\r\n\r\n\r\n        inline public static function fromBytes(_bytes:haxe.io.Bytes, ?_byteOffset:Int=0, ?_byteLength:Int) : Uint8Array {\r\n            if(_byteLength == null) _byteLength = _bytes.length;\r\n            return Uint8Array.fromBuffer(_bytes.getData(), _byteOffset, _byteLength);\r\n        }\r\n\r\n        inline public function toBytes() : haxe.io.Bytes {\r\n            return haxe.io.Bytes.ofData(this.buffer);\r\n        }\r\n\r\n    //Internal\r\n\r\n        inline function toString() return this == null ? null : 'Uint8Array [byteLength:${this.byteLength}, length:${this.length}]';\r\n\r\n        inline function get_length() return this.length;\r\n\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __get(idx:Int) {\r\n            return ArrayBufferIO.getUint8(this.buffer, this.byteOffset+idx);\r\n        }\r\n\r\n        @:noCompletion\r\n        @:arrayAccess @:extern\r\n        public inline function __set(idx:Int, val:UInt) : Void {\r\n            ArrayBufferIO.setUint8(this.buffer, this.byteOffset+idx, val);\r\n        }\r\n\r\n    }\r\n\r\n#end //!js\r\n","package snow.core;\r\n\r\nimport snow.types.Types;\r\nimport snow.api.Promise;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.systems.audio.AudioSource;\r\nimport snow.systems.audio.AudioInstance;\r\n\r\n@:allow(snow.systems.audio.Audio)\r\nclass Audio implements snow.modules.interfaces.Audio {\r\n\r\n    var app: snow.Snow;\r\n    var active: Bool = false;\r\n    function new(_app:snow.Snow) app = _app;\r\n    function onevent(event:SystemEvent):Void {}\r\n    function shutdown():Void {}\r\n    public function suspend():Void {}\r\n    public function resume():Void {}\r\n\r\n    public function data_from_load(_path:String, ?_is_stream:Bool=false, ?_format:AudioFormatType) : Promise { return null; }\r\n    public function data_from_bytes(_id:String, _bytes:Uint8Array, ?_format:AudioFormatType) : Promise { return null; }\r\n\r\n    public function play(_source:AudioSource, _volume:Float, _paused:Bool) : AudioHandle { return null; }\r\n    public function loop(_source:AudioSource, _volume:Float, _paused:Bool) : AudioHandle { return null; }\r\n    public function pause(_handle:AudioHandle) : Void {}\r\n    public function unpause(_handle:AudioHandle) : Void {}\r\n    public function stop(_handle:AudioHandle) : Void {}\r\n\r\n    public function volume(_handle:AudioHandle, _volume:Float) : Void {}\r\n    public function pan(_handle:AudioHandle, _pan:Float) : Void {}\r\n    public function pitch(_handle:AudioHandle, _pitch:Float) : Void {}\r\n    public function position(_handle:AudioHandle, _time:Float) : Void {}\r\n\r\n    public function volume_of(_handle:AudioHandle) : Float { return 0.0; }\r\n    public function pan_of(_handle:AudioHandle) : Float { return 0.0; }\r\n    public function pitch_of(_handle:AudioHandle) : Float { return 0.0; }\r\n    public function position_of(_handle:AudioHandle) : Float { return 0.0; }\r\n    public function state_of(_handle:AudioHandle) : AudioState { return as_invalid; }\r\n    public function loop_of(_handle:AudioHandle) : Bool { return false; }\r\n    public function instance_of(_handle:AudioHandle) : AudioInstance { return null; }\r\n\r\n   /** Uses the extension of the given path to return the `AudioFormatType` */\r\n        public static inline function audio_format_from_path(_path:String) : AudioFormatType {\r\n\r\n            var _ext = haxe.io.Path.extension(_path);\r\n            return switch(_ext) {\r\n                case 'wav': af_wav;\r\n                case 'ogg': af_ogg;\r\n                case 'pcm': af_pcm;\r\n                case _:     af_unknown;\r\n            }\r\n\r\n        } //audio_format_from_path\r\n\r\n}","package snow.core.web;\r\n\r\n#if js\r\n\r\nimport snow.types.Types;\r\nimport snow.api.Debug.*;\r\n\r\n#if (!snow_no_initial_glclear)\r\nimport snow.modules.opengl.GL;\r\n#end\r\n\r\n@:allow(snow.Snow)\r\nclass Runtime implements snow.core.Runtime {\r\n\r\n    public var app:snow.Snow;\r\n        /** The runtime window canvas */\r\n    public var window : WindowHandle;\r\n        /** The name of this runtime */\r\n    public var name (default, null): String = 'web';\r\n\r\n        /** The window id to use for events */\r\n    static inline var web_window_id = 1;\r\n\r\n        /** The window x position. \r\n            Internal, set by update_window_bounds */\r\n    var window_x : Int = 0;\r\n        /** The window y position.\r\n            Internal, set by update_window_bounds */\r\n    var window_y : Int = 0;\r\n        /** The window element width\r\n            Internal, set by update_window_bounds */\r\n    var window_w : Int = 0;\r\n        /** The window element height\r\n            Internal, set by update_window_bounds */\r\n    var window_h : Int = 0;\r\n        /** The window device pixel ratio\r\n            Internal, set by update_window_bounds */\r\n    var window_dpr : Float = 1.0;\r\n\r\n        /** Whether or not the browser has gamepad API support */\r\n    var gamepads_supported : Bool = false;\r\n        /** internal start time, allowing 0 based time values */\r\n    static var timestamp_start : Float = 0.0;\r\n\r\n    function new(_app:snow.Snow) {\r\n\r\n        app = _app;\r\n        app.platform = Platform.platform_web;\r\n        app.os = guess_os();\r\n\r\n        timestamp_start = (js.Browser.window.performance.now()/1000.0);\r\n\r\n        app.config.runtime = {\r\n            window_id : 'app',\r\n            window_parent : js.Browser.document.body,\r\n            prevent_default_context_menu : true,\r\n            prevent_default_mouse_wheel : true,\r\n            prevent_default_touches : true,\r\n            prevent_default_keys : [\r\n                Key.left, Key.right, Key.up, Key.down,\r\n                Key.backspace, Key.tab, Key.delete, Key.space\r\n            ]\r\n        };\r\n\r\n        gamepads_init();\r\n\r\n        log('web / init ok');\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n    public inline function window_device_pixel_ratio() {\r\n\r\n        return js.Browser.window.devicePixelRatio == null ? 1.0 : js.Browser.window.devicePixelRatio;\r\n\r\n    } //window_device_pixel_ratio\r\n\r\n    public inline function window_width() : Int {\r\n\r\n        return window.width;\r\n\r\n    } //window_width\r\n\r\n    public inline function window_height() : Int {\r\n\r\n        return window.height;\r\n\r\n    } //window_height\r\n\r\n    public function window_grab(enable:Bool) : Bool {\r\n\r\n        if(enable) {\r\n    \r\n            if(window.requestPointerLock != null) {\r\n                window.requestPointerLock();\r\n            } else if(untyped window.webkitRequestPointerLock != null) {\r\n                untyped window.webkitRequestPointerLock();\r\n            } else if(untyped window.mozRequestPointerLock != null) {\r\n                untyped window.mozRequestPointerLock(); \r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        } else {\r\n\r\n            if(js.Browser.document.exitPointerLock != null) {\r\n                js.Browser.document.exitPointerLock();\r\n            } else if(untyped js.Browser.document.webkitExitPointerLock != null) {\r\n                untyped js.Browser.document.webkitExitPointerLock();\r\n            } else if(untyped js.Browser.document.mozExitPointerLock != null) {\r\n                untyped js.Browser.document.mozExitPointerLock();\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    } //window_grab\r\n\r\n    var p_padding = '0';\r\n    var p_margin = '0';\r\n    var p_s_width = '';\r\n    var p_s_height = '';\r\n    var p_width = 0;\r\n    var p_height = 0;\r\n    var p_body_overflow = '0';\r\n    var p_body_margin = '0';\r\n\r\n        //the window.onresize event handler\r\n    inline function onresize_handler(_) {\r\n\r\n        window.style.width = '${js.Browser.window.innerWidth}px';\r\n        window.style.height = '${js.Browser.window.innerHeight}px';\r\n    \r\n    } //onresize_handler\r\n\r\n    public function window_fullscreen(enable:Bool, ?true_fullscreen:Bool=false) : Bool {\r\n\r\n        var _result = true;\r\n\r\n        if(enable) {\r\n\r\n            p_padding       = window.style.padding;\r\n            p_margin        = window.style.margin;\r\n            p_s_width       = window.style.width;\r\n            p_s_height      = window.style.height;\r\n            p_width         = window.width;\r\n            p_height        = window.height;\r\n            p_body_margin   = js.Browser.document.body.style.margin;\r\n            p_body_overflow = js.Browser.document.body.style.overflow;\r\n\r\n                //css device pixels\r\n            window.style.margin = '0';\r\n            window.style.padding = '0';\r\n            window.style.width = js.Browser.window.innerWidth + 'px';\r\n            window.style.height = js.Browser.window.innerHeight + 'px';\r\n\r\n                //renderable pixels, we request latest dpr, since this can happen at any time\r\n            window_dpr = window_device_pixel_ratio();\r\n            window.width = Math.floor(js.Browser.window.innerWidth * window_dpr);\r\n            window.height = Math.floor(js.Browser.window.innerHeight * window_dpr);\r\n\r\n                //stop the browser page from having scrollbars etc\r\n            js.Browser.document.body.style.margin = '0';\r\n            js.Browser.document.body.style.overflow = 'hidden';\r\n\r\n            if(true_fullscreen) {\r\n                if(window.requestFullscreen != null) {\r\n                    window.requestFullscreen();\r\n                } else if(untyped window.requestFullScreen != null) {\r\n                    untyped window.requestFullScreen(null);\r\n                } else if(untyped window.webkitRequestFullscreen != null) {\r\n                    untyped window.webkitRequestFullscreen();\r\n                } else if(untyped window.mozRequestFullScreen != null) {\r\n                    untyped window.mozRequestFullScreen();\r\n                } else {\r\n                    _result = false;\r\n                }\r\n            } //if true_fullscreen\r\n\r\n                //listen for changes, this will trigger the right resize\r\n            js.Browser.window.addEventListener(\"resize\", onresize_handler);\r\n\r\n        } else {\r\n\r\n            js.Browser.window.removeEventListener(\"resize\", onresize_handler);\r\n\r\n            window.style.padding = p_padding;\r\n            window.style.margin = p_margin;\r\n            window.style.width = p_s_width;\r\n            window.style.height = p_s_height;\r\n            window.width = p_width;\r\n            window.height = p_height;\r\n            js.Browser.document.body.style.margin = p_body_margin;\r\n            js.Browser.document.body.style.overflow = p_body_overflow;\r\n\r\n            if(true_fullscreen) {\r\n                if(js.Browser.document.exitFullscreen != null) {\r\n                    js.Browser.document.exitFullscreen();\r\n                } else if(untyped js.Browser.document.webkitExitFullscreen != null) {\r\n                    untyped js.Browser.document.webkitExitFullscreen();\r\n                } else if(untyped js.Browser.document.mozCancelFullScreen != null) {\r\n                    untyped js.Browser.document.mozCancelFullScreen();\r\n                } else {\r\n                    _result = false;\r\n                }\r\n            } //true_fullscreen\r\n\r\n        } //enable\r\n\r\n        return _result;\r\n\r\n    } //window_fullscreen\r\n\r\n//Public static API\r\n\r\n    inline public static function timestamp() : Float {\r\n\r\n        return (js.Browser.window.performance.now()/1000.0) - timestamp_start;\r\n\r\n    } //timestamp\r\n\r\n//Internal runtime API\r\n\r\n    function shutdown(?_immediate:Bool=false) {\r\n\r\n        log('runtime / web / shutdown');\r\n\r\n        js.Browser.document.removeEventListener('visibilitychange', on_visibilitychange);\r\n        js.Browser.document.removeEventListener('keydown', on_keydown);\r\n        js.Browser.document.removeEventListener('keyup', on_keyup);\r\n        js.Browser.document.removeEventListener('keypress', on_keypress);\r\n\r\n        js.Browser.window.removeEventListener(\"gamepadconnected\", on_gamepadconnected);\r\n        js.Browser.window.removeEventListener(\"gamepaddisconnected\", on_gamepaddisconnected);\r\n\r\n        window.remove();\r\n        window = null;\r\n        snow.modules.opengl.GL.gl = null;\r\n\r\n    } //shutdown\r\n\r\n    function run() : Bool {\r\n\r\n        log('web / run');\r\n\r\n        loop_pre_ready();\r\n\r\n        return false;\r\n\r\n    } //run\r\n\r\n    function ready() {\r\n\r\n        log('web / ready');\r\n\r\n        create_window();\r\n\r\n    } //ready\r\n\r\n//internal\r\n\r\n    inline function dispatch_window_ev(_type:WindowEventType, ?_x:Int, ?_y:Int) {\r\n\r\n        app.dispatch_window_event(_type, timestamp(), web_window_id, _x, _y);\r\n\r\n    } //dispatch_window_ev\r\n\r\n    function setup_events() {\r\n\r\n        //window events\r\n\r\n            window.addEventListener('mouseleave', function(_ev:js.html.MouseEvent) {\r\n\r\n                dispatch_window_ev(we_leave);\r\n\r\n            }); //mouseleave\r\n\r\n            window.addEventListener('mouseenter', function(_ev:js.html.MouseEvent) {\r\n\r\n               dispatch_window_ev(we_enter);\r\n\r\n            }); //mouseenter\r\n\r\n            js.Browser.document.addEventListener('visibilitychange', on_visibilitychange);\r\n\r\n        //key events\r\n\r\n            js.Browser.document.addEventListener('keydown',  on_keydown);\r\n            js.Browser.document.addEventListener('keyup',    on_keyup);\r\n            js.Browser.document.addEventListener('keypress', on_keypress);\r\n\r\n        //mouse events\r\n\r\n            window.addEventListener('contextmenu', function(_ev:js.html.MouseEvent){\r\n\r\n                if(app.config.runtime.prevent_default_context_menu) {\r\n                    _ev.preventDefault();\r\n                }\r\n\r\n            }); //contextmenu\r\n\r\n            inline function translate_mouse_x(_ev:js.html.MouseEvent) {\r\n                return Math.floor(window_dpr * (_ev.pageX - window_x));\r\n            }\r\n\r\n            inline function translate_mouse_y(_ev:js.html.MouseEvent) {\r\n                return Math.floor(window_dpr * (_ev.pageY - window_y));\r\n            }\r\n\r\n            window.addEventListener('mousedown', function(_ev:js.html.MouseEvent) {\r\n\r\n                app.input.dispatch_mouse_down_event(\r\n                    translate_mouse_x(_ev),\r\n                    translate_mouse_y(_ev),\r\n                    _ev.button + 1, //:native buttons are 1 based\r\n                    timestamp(),\r\n                    web_window_id\r\n                );\r\n\r\n            }); //mousedown\r\n\r\n            window.addEventListener('mouseup', function(_ev:js.html.MouseEvent){\r\n\r\n                app.input.dispatch_mouse_up_event(\r\n                    translate_mouse_x(_ev),\r\n                    translate_mouse_y(_ev),\r\n                    _ev.button + 1, //:native buttons are 1 based\r\n                    timestamp(),\r\n                    web_window_id\r\n                );\r\n\r\n            }); //mouseup\r\n\r\n            window.addEventListener('mousemove', function(_ev:js.html.MouseEvent){\r\n\r\n                var _movement_x = _ev.movementX == null ? 0 : _ev.movementX;\r\n                var _movement_y = _ev.movementY == null ? 0 : _ev.movementY;\r\n                    _movement_x = Math.floor(_movement_x * window_dpr);\r\n                    _movement_y = Math.floor(_movement_y * window_dpr);\r\n\r\n                app.input.dispatch_mouse_move_event(\r\n                    translate_mouse_x(_ev),\r\n                    translate_mouse_y(_ev),\r\n                    _movement_x,\r\n                    _movement_y,\r\n                    timestamp(),\r\n                    web_window_id\r\n                );\r\n\r\n            }); //mousemove\r\n\r\n            window.addEventListener('wheel', function(_ev:js.html.WheelEvent) {\r\n\r\n                if(app.config.runtime.prevent_default_mouse_wheel) {\r\n                    _ev.preventDefault();\r\n                }\r\n\r\n                app.input.dispatch_mouse_wheel_event(\r\n                    _ev.deltaX,\r\n                    _ev.deltaY,\r\n                    timestamp(),\r\n                    web_window_id\r\n                );\r\n\r\n            });\r\n\r\n        //touch events\r\n\r\n            window.addEventListener('touchstart', function(_ev:js.html.TouchEvent) {\r\n\r\n                if(app.config.runtime.prevent_default_touches) {\r\n                    _ev.preventDefault();\r\n                }\r\n\r\n                    //:todo:web:touch: test with window_x/y/w/h\r\n                var _bound = window.getBoundingClientRect();\r\n                for(touch in _ev.changedTouches) {\r\n\r\n                    var _x:Float = (touch.clientX - _bound.left);\r\n                    var _y:Float = (touch.clientY - _bound.top);\r\n                        _x = _x/_bound.width;\r\n                        _y = _y/_bound.height;\r\n\r\n                    app.input.dispatch_touch_down_event(\r\n                        _x,\r\n                        _y,\r\n                        0, //:todo:web:touch: dx, dy values\r\n                        0,\r\n                        touch.identifier,\r\n                        timestamp()\r\n                    );\r\n                \r\n                } //each touch\r\n\r\n            }); //touchstart\r\n\r\n            window.addEventListener('touchend', function(_ev:js.html.TouchEvent) {\r\n\r\n                if(app.config.runtime.prevent_default_touches) {\r\n                    _ev.preventDefault();\r\n                }\r\n\r\n                    //:todo:web:touch: test with window_x/y/w/h\r\n                var _bound = window.getBoundingClientRect();\r\n                for(touch in _ev.changedTouches) {\r\n\r\n                    var _x:Float = touch.clientX - _bound.left;\r\n                    var _y:Float = touch.clientY - _bound.top;\r\n                        _x = _x/_bound.width;\r\n                        _y = _y/_bound.height;\r\n\r\n                    app.input.dispatch_touch_up_event(\r\n                        _x,\r\n                        _y,\r\n                        0, //:todo:web:touch: dx, dy values\r\n                        0,\r\n                        touch.identifier,\r\n                        timestamp()\r\n                    );\r\n\r\n                } //each touch\r\n\r\n            }); //touchend\r\n\r\n            window.addEventListener('touchmove', function(_ev:js.html.TouchEvent) {\r\n\r\n                if(app.config.runtime.prevent_default_touches) {\r\n                    _ev.preventDefault();\r\n                }\r\n\r\n                    //:todo:web:touch: test with window_x/y/w/h\r\n                var _bound = window.getBoundingClientRect();\r\n                for(touch in _ev.changedTouches) {\r\n\r\n                    var _x:Float = touch.clientX - _bound.left;\r\n                    var _y:Float = touch.clientY - _bound.top;\r\n                        _x = _x/_bound.width;\r\n                        _y = _y/_bound.height;\r\n\r\n                    app.input.dispatch_touch_move_event(\r\n                        _x,\r\n                        _y,\r\n                        0, //:todo:web:touch: dx, dy values\r\n                        0,\r\n                        touch.identifier,\r\n                        timestamp()\r\n                    );\r\n\r\n                } //each touch\r\n\r\n            }); //touchmove\r\n\r\n        //gamepad events\r\n\r\n            js.Browser.window.addEventListener(\"gamepadconnected\",    on_gamepadconnected);\r\n            js.Browser.window.addEventListener(\"gamepaddisconnected\", on_gamepaddisconnected);\r\n\r\n        //window events\r\n\r\n            //:todo:web:orientation events\r\n\r\n    } //setup_events\r\n\r\n    //event handlers\r\n\r\n        function on_visibilitychange(_) {\r\n\r\n            if(js.Browser.document.hidden) {\r\n                dispatch_window_ev(we_hidden);\r\n                dispatch_window_ev(we_minimized);\r\n                dispatch_window_ev(we_focus_lost);\r\n            } else {\r\n                dispatch_window_ev(we_shown);\r\n                dispatch_window_ev(we_restored);\r\n                dispatch_window_ev(we_focus_gained);\r\n            }\r\n\r\n        } //on_visibilitychange\r\n\r\n        function on_keydown(_ev:js.html.KeyboardEvent) {\r\n\r\n            var _keycode = convert_keycode(_ev.keyCode);\r\n            var _scancode = Key.to_scan(_keycode);\r\n            var _mod_state = mod_state_from_event(_ev);\r\n\r\n            if(app.config.runtime.prevent_default_keys.indexOf(_keycode) != -1) {\r\n                _ev.preventDefault();\r\n            }\r\n\r\n            app.input.dispatch_key_down_event(\r\n                _keycode,\r\n                _scancode,\r\n                _ev.repeat,\r\n                _mod_state,\r\n                timestamp(),\r\n                web_window_id\r\n            );\r\n\r\n        } //on_keydown\r\n\r\n        function on_keyup(_ev:js.html.KeyboardEvent) {\r\n\r\n            var _keycode = convert_keycode(_ev.keyCode);\r\n            var _scancode = Key.to_scan(_keycode);\r\n            var _mod_state = mod_state_from_event(_ev);\r\n\r\n            if(app.config.runtime.prevent_default_keys.indexOf(_keycode) != -1) {\r\n                _ev.preventDefault();\r\n            }\r\n\r\n            app.input.dispatch_key_up_event(\r\n                _keycode,\r\n                _scancode,\r\n                _ev.repeat,\r\n                _mod_state,\r\n                timestamp(),\r\n                web_window_id\r\n            );\r\n\r\n        } //on_keyup\r\n\r\n            //a list of keycodes that should not generate text\r\n            //based typing events, because... browsers.\r\n        static var key_press_ignored = [Key.backspace, Key.enter];\r\n        function on_keypress(_ev:js.html.KeyboardEvent) {\r\n\r\n            if(_ev.which != 0 && key_press_ignored.indexOf(_ev.keyCode) == -1) {\r\n\r\n                var _text = String.fromCharCode(_ev.charCode);\r\n\r\n                app.input.dispatch_text_event(\r\n                    _text, 0, _text.length,\r\n                    te_input,\r\n                    timestamp(),\r\n                    web_window_id\r\n                );\r\n\r\n            }\r\n\r\n        } //on_keypress\r\n\r\n        function on_gamepadconnected(_ev:{ gamepad:js.html.Gamepad }) {\r\n\r\n            _debug('gamepad connected at index ${_ev.gamepad.index}: ${_ev.gamepad.id}. ${_ev.gamepad.buttons.length} buttons, ${_ev.gamepad.axes.length} axes');\r\n\r\n            gamepads_init_cache(_ev.gamepad);\r\n\r\n            app.input.dispatch_gamepad_device_event(\r\n                _ev.gamepad.index,\r\n                _ev.gamepad.id,\r\n                ge_device_added,\r\n                timestamp()\r\n            );\r\n\r\n        } //on_gamepadconnected\r\n\r\n        function on_gamepaddisconnected(_ev:{ gamepad:js.html.Gamepad }) {\r\n\r\n            _debug('gamepad disconnected at index ${_ev.gamepad.index}: ${_ev.gamepad.id}');\r\n\r\n            gamepad_btns_cache[_ev.gamepad.index] = null;\r\n            \r\n            app.input.dispatch_gamepad_device_event(\r\n                _ev.gamepad.index,\r\n                _ev.gamepad.id,\r\n                ge_device_removed,\r\n                timestamp()\r\n            );\r\n\r\n        } //on_gamepaddisconnected\r\n\r\n    function create_window() {\r\n\r\n        var config = app.config.window;\r\n        window = js.Browser.document.createCanvasElement();\r\n\r\n            //For High DPI, we scale the config sizes\r\n        window_dpr = window_device_pixel_ratio();\r\n        window.width = Math.floor(config.width * window_dpr);\r\n        window.height = Math.floor(config.height * window_dpr);\r\n\r\n            //These are in css device pixels\r\n        window_w = config.width;\r\n        window_h = config.height;\r\n        window.style.width = config.width+'px';\r\n        window.style.height = config.height+'px';\r\n            //This is typically required for our WebGL blending\r\n        window.style.background = '#000';\r\n\r\n        _debug('created window at ${window_x},${window_y} - ${window.width}x${window.height} pixels (${config.width}x${config.height}@${window_dpr}x)');\r\n\r\n        window.id = app.config.runtime.window_id;\r\n        app.config.runtime.window_parent.appendChild(window);\r\n\r\n        if(config.title != null) {\r\n            js.Browser.document.title = config.title;\r\n        }\r\n\r\n        if(!create_render_context(window)) {\r\n            create_render_context_failed();\r\n            return;\r\n        }\r\n\r\n        post_render_context(window);\r\n\r\n        setup_events();\r\n\r\n        if(config.fullscreen) {\r\n            window_fullscreen(true, config.true_fullscreen);\r\n            update_window_bounds();\r\n        }\r\n\r\n    } //create_window\r\n\r\n    function post_render_context(window:WindowHandle) {\r\n\r\n        #if (!snow_no_initial_gl_clear)\r\n\r\n            var color = app.config.render.default_clear;\r\n\r\n            GL.clearDepth(1.0);\r\n            GL.clearStencil(0);\r\n            GL.clearColor(color.r, color.g, color.b, color.a);\r\n            GL.clear(GL.COLOR_BUFFER_BIT | GL.DEPTH_BUFFER_BIT | GL.STENCIL_BUFFER_BIT);\r\n\r\n        #end\r\n\r\n    } //post_render_context\r\n\r\n    function create_render_context(_window:WindowHandle) : Bool {\r\n\r\n        var config = app.config.render;\r\n        var attr : js.html.webgl.ContextAttributes = config.webgl;\r\n\r\n        attr = apply_GL_attr(config, attr);\r\n\r\n        var _gl = null;\r\n\r\n        if(config.webgl.version != 1) {\r\n            _gl = window.getContext('webgl${config.webgl.version}');\r\n            if(_gl == null) _gl = window.getContext('experimental-webgl${config.webgl.version}');\r\n        } else {\r\n            _gl = window.getContextWebGL(attr);\r\n        }\r\n\r\n        snow.modules.opengl.GL.gl = _gl;\r\n\r\n        log('web / GL / context(${_gl != null})');\r\n\r\n        return _gl != null;\r\n\r\n    } //create_render_context\r\n\r\n    function apply_GL_attr(render:RenderConfig, attr:js.html.webgl.ContextAttributes) {\r\n\r\n        attr.alpha = def(attr.alpha, false);\r\n        attr.premultipliedAlpha = def(attr.premultipliedAlpha, false);\r\n        attr.antialias = def(attr.antialias, app.config.render.antialiasing > 0);\r\n        attr.depth = def(attr.depth, app.config.render.depth > 0);\r\n        attr.stencil = def(attr.stencil, app.config.render.stencil > 0);\r\n\r\n        return attr;\r\n\r\n    } //apply_GL_attr\r\n\r\n    function create_render_context_failed() {\r\n\r\n        var msg =  'WebGL is required to run this!<br/><br/>';\r\n            msg += 'visit <a style=\"color:#06b4fb; text-decoration:none;\" href=\"http://get.webgl.org/\">get.webgl.com</a> for info<br/>';\r\n            msg += 'and contact the developer of this app';\r\n\r\n        var text_el : js.html.Element;\r\n        var overlay_el : js.html.Element;\r\n\r\n        text_el = js.Browser.document.createDivElement();\r\n        overlay_el = js.Browser.document.createDivElement();\r\n\r\n        text_el.style.marginLeft = 'auto';\r\n        text_el.style.marginRight = 'auto';\r\n        text_el.style.color = '#d3d3d3';\r\n        text_el.style.marginTop = '5em';\r\n        text_el.style.fontSize = '1.4em';\r\n        text_el.style.fontFamily = 'helvetica,sans-serif';\r\n        text_el.innerHTML = msg;\r\n\r\n        overlay_el.style.top = '0';\r\n        overlay_el.style.left = '0';\r\n        overlay_el.style.width = '100%';\r\n        overlay_el.style.height = '100%';\r\n        overlay_el.style.display = 'block';\r\n        overlay_el.style.minWidth = '100%';\r\n        overlay_el.style.minHeight = '100%';\r\n        overlay_el.style.textAlign = 'center';\r\n        overlay_el.style.position = 'absolute';\r\n        overlay_el.style.background = 'rgba(1,1,1,0.90)';\r\n\r\n        overlay_el.appendChild(text_el);\r\n        js.Browser.document.body.appendChild(overlay_el);\r\n\r\n        throw Error.error('runtime / web / failed to create render context, unable to recover');\r\n\r\n    } //failed_render_context\r\n\r\n//main loop\r\n\r\n    inline function request_frame() {\r\n\r\n        js.Browser.window.requestAnimationFrame(loop);\r\n\r\n    } //request_frame\r\n\r\n    function loop(?_t:Float = 0.016) : Bool {\r\n\r\n        if(app.has_shutdown) return false;\r\n\r\n        if(gamepads_supported) gamepads_poll();\r\n\r\n        update_window_bounds();\r\n\r\n        app.dispatch_event(se_tick);\r\n\r\n        if(!app.shutting_down) {\r\n            request_frame();\r\n        }\r\n\r\n        return true;\r\n\r\n    } //loop\r\n\r\n//internal main loop before ready is fired\r\n\r\n    function loop_pre_ready(?_t:Float = 0.016) : Bool {\r\n\r\n        app.dispatch_event(se_tick);\r\n\r\n        if(!app.shutting_down) {\r\n            if(!app.ready) {\r\n                js.Browser.window.requestAnimationFrame(loop_pre_ready);\r\n            } else {\r\n                js.Browser.window.requestAnimationFrame(loop);\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    } //loop_pre_ready\r\n\r\n//input\r\n\r\n    inline function mod_state_from_event(_key_event:js.html.KeyboardEvent) : ModState {\r\n\r\n        var _none : Bool =\r\n            !_key_event.altKey &&\r\n            !_key_event.ctrlKey &&\r\n            !_key_event.metaKey &&\r\n            !_key_event.shiftKey;\r\n\r\n            app.input.mod_state.none    = _none;\r\n            app.input.mod_state.lshift  = _key_event.shiftKey;\r\n            app.input.mod_state.rshift  = _key_event.shiftKey;\r\n            app.input.mod_state.lctrl   = _key_event.ctrlKey;\r\n            app.input.mod_state.rctrl   = _key_event.ctrlKey;\r\n            app.input.mod_state.lalt    = _key_event.altKey;\r\n            app.input.mod_state.ralt    = _key_event.altKey;\r\n            app.input.mod_state.lmeta   = _key_event.metaKey;\r\n            app.input.mod_state.rmeta   = _key_event.metaKey;\r\n            app.input.mod_state.num     = false;                //:unsupported:\r\n            app.input.mod_state.caps    = false;                //:unsupported:\r\n            app.input.mod_state.mode    = false;                //:unsupported:\r\n            app.input.mod_state.ctrl    = _key_event.ctrlKey;\r\n            app.input.mod_state.shift   = _key_event.shiftKey;\r\n            app.input.mod_state.alt     = _key_event.altKey;\r\n            app.input.mod_state.meta    = _key_event.metaKey;\r\n        \r\n        return app.input.mod_state;\r\n\r\n    } //mod_state_from_event\r\n\r\n        /** This takes a *DOM* keycode and returns a snow Keycodes value */\r\n    inline function convert_keycode(dom_keycode:Int) : Int {\r\n\r\n            //this converts the uppercase into lower case,\r\n            //since those are fixed values it doesn't need to be checked\r\n        if (dom_keycode >= 65 && dom_keycode <= 90) {\r\n            return dom_keycode + 32;\r\n        }\r\n\r\n            //this will pass back the same value if unmapped\r\n        return DOMKeys.dom_key_to_keycode(dom_keycode);\r\n\r\n    } //convert_keycode\r\n\r\n//window helpers\r\n\r\n    inline function get_window_x(_bounds:js.html.DOMRect) {\r\n        return Math.round(_bounds.left + js.Browser.window.pageXOffset - js.Browser.document.body.clientTop);\r\n    }\r\n    \r\n    inline function get_window_y(_bounds:js.html.DOMRect) {\r\n        return Math.round(_bounds.top + js.Browser.window.pageYOffset - js.Browser.document.body.clientLeft);\r\n    }\r\n        \r\n    inline function update_window_bounds() {\r\n\r\n        window_dpr = window_device_pixel_ratio();\r\n\r\n        var _bounds = window.getBoundingClientRect();\r\n\r\n        var _x = get_window_x(_bounds);\r\n        var _y = get_window_y(_bounds);\r\n        var _w = Math.round(_bounds.width);\r\n        var _h = Math.round(_bounds.height);\r\n\r\n        if(_x != window_x || _y != window_y) {\r\n            window_x = _x;\r\n            window_y = _y;\r\n            dispatch_window_ev(we_moved, window_x, window_y);\r\n        }\r\n\r\n        if(_w != window_w || _h != window_h) {\r\n            window_w = _w;\r\n            window_h = _h;\r\n            window.width = Math.floor(window_w * window_dpr);\r\n            window.height = Math.floor(window_h * window_dpr);\r\n            dispatch_window_ev(we_size_changed, window.width, window.height);\r\n        }\r\n\r\n    } //update_window_bounds\r\n\r\n//gamepads\r\n    \r\n    var gamepad_btns_cache : Array<Array<Float>>;\r\n\r\n    inline function gamepads_init_cache(_gamepad:js.html.Gamepad) {\r\n\r\n        gamepad_btns_cache[_gamepad.index] = [];\r\n        \r\n        for(i in 0 ... _gamepad.buttons.length) {\r\n            gamepad_btns_cache[_gamepad.index].push(0);\r\n        }\r\n\r\n    } //gamepads_init_cache\r\n\r\n    inline function gamepads_init() {\r\n\r\n        var _list = gamepads_get_list();\r\n        if(_list != null) {\r\n            gamepads_supported = true;\r\n            gamepad_btns_cache = [];\r\n            for(_gamepad in _list) {\r\n                if(_gamepad != null) {\r\n                    gamepads_init_cache(_gamepad);\r\n                }\r\n            }\r\n        } else {\r\n            //:todo:web: more assistive gamepad failure\r\n            log(\"Gamepads are not supported in this browser :(\");\r\n        }\r\n\r\n    } //gamepads_init\r\n\r\n    inline function gamepads_poll() {\r\n\r\n        var list = gamepads_get_list();\r\n    \r\n        assertnull(list, 'gamepad list not found, but they were previously?');\r\n\r\n        var _count = list.length;\r\n        var _idx = 0;\r\n        \r\n        while(_idx < _count) {\r\n\r\n            var _gamepad = list[_idx];\r\n            if(_gamepad == null) {\r\n                _idx++;\r\n                continue;\r\n            }\r\n\r\n            for(_axis_idx in 0 ... _gamepad.axes.length) {\r\n                \r\n                var _axis = _gamepad.axes[_axis_idx];\r\n                if(_axis != 0) {\r\n                    app.input.dispatch_gamepad_axis_event(\r\n                        _gamepad.index,\r\n                        _axis_idx,\r\n                        _axis,\r\n                        timestamp()\r\n                    );\r\n                }\r\n\r\n            } //each axis\r\n\r\n            var _prev_btn = gamepad_btns_cache[_gamepad.index];\r\n            for(_btn_idx in 0 ... _gamepad.buttons.length) {\r\n                \r\n                var _btn = _gamepad.buttons[_btn_idx];\r\n\r\n                if(_btn.value != _prev_btn[_btn_idx]) {\r\n\r\n                    if(_btn.pressed) {\r\n                        app.input.dispatch_gamepad_button_down_event(\r\n                            _gamepad.index,\r\n                            _btn_idx,\r\n                            _btn.value,\r\n                            timestamp()\r\n                        );\r\n                    } else {\r\n                        app.input.dispatch_gamepad_button_up_event(\r\n                            _gamepad.index,\r\n                            _btn_idx,\r\n                            _btn.value,\r\n                            timestamp()\r\n                        );\r\n                    }\r\n\r\n                    _prev_btn[_btn_idx] = _btn.value;\r\n\r\n                } //changed\r\n\r\n            } //each button\r\n\r\n            _idx++;\r\n        } //each gamepad\r\n\r\n    } //gamepads_poll\r\n\r\n    inline function gamepads_get_list() : Array<js.html.Gamepad> {\r\n\r\n        if( js.Browser.navigator.getGamepads != null ) {\r\n            return js.Browser.navigator.getGamepads();\r\n        }\r\n\r\n        if( untyped js.Browser.navigator.webkitGetGamepads != null ) {\r\n            return untyped js.Browser.navigator.webkitGetGamepads();\r\n        }\r\n\r\n        return null;\r\n\r\n    } //get_gamepad_list\r\n\r\n//helpers\r\n\r\n    function guess_os() {\r\n\r\n        var _ver = js.Browser.navigator.appVersion;\r\n        var _agent = js.Browser.navigator.userAgent;\r\n\r\n        inline function has(_val:String, _test:String) {\r\n            var r = new EReg(_val,'gi');\r\n            return r.match(_test);\r\n        }\r\n\r\n        if(has('mac', _ver))        return OS.os_mac;\r\n        if(has('win', _ver))        return OS.os_windows;\r\n            //I know it's not linux technically (should be unix)\r\n        if(has('x11', _ver))        return OS.os_linux;\r\n        if(has('linux', _ver))      return OS.os_linux;\r\n        if(has('android', _ver))    return OS.os_android;\r\n        if(has('ipad', _agent))     return OS.os_ios;\r\n        if(has('iphone', _agent))   return OS.os_ios;\r\n        if(has('ipod', _agent))     return OS.os_ios;\r\n\r\n        return OS.os_unknown;\r\n\r\n    } //guess_os\r\n\r\n} //Runtime\r\n\r\n\r\ntypedef WindowHandle = js.html.CanvasElement;\r\ntypedef RuntimeConfig = {\r\n\r\n        /** The DOM element to put the window canvas into. default: <body> */\r\n    @:optional var window_parent : js.html.Element;\r\n        /** The canvas element id=\"\" attribute. default: 'app' */\r\n    @:optional var window_id : String;\r\n\r\n        /** Any Key.* values stored in this array sent to the page will be consumed by snow. `event.preventDefault` is used.\r\n            Keys can be removed or added to the array at runtime. default:left,up,down,right,backspace,tab,delete */\r\n    @:optional var prevent_default_keys : Array<Int>;\r\n        /** If true, mouse wheel events sent to the page will be consumed by snow. `event.preventDefault` is used. default: true*/\r\n    @:optional var prevent_default_mouse_wheel : Bool;\r\n        /** If true, touch events sent to the page will be consumed by snow. `event.preventDefault` is used. default: true*/\r\n    @:optional var prevent_default_touches : Bool;\r\n        /** If true, right clicking will consume the event on the canvas. `event.preventDefault` is used. default: true*/\r\n    @:optional var prevent_default_context_menu : Bool;\r\n\r\n} //RuntimeConfig\r\n\r\n\r\n\r\nprivate class DOMKeys {\r\n\r\n    /** This function takes the DOM keycode and translates it into the\r\n        corresponding snow Keycodes value - but only if needed for special cases */\r\n    public static function dom_key_to_keycode(_keycode:Int) {\r\n\r\n        switch(_keycode) {\r\n\r\n        //\r\n            case dom_shift:         return Key.lshift;     //:todo : this is both left/right but returns left\r\n            case dom_ctrl:          return Key.lctrl;      //:todo : ^\r\n            case dom_alt:           return Key.lalt;       //:todo : ^\r\n            case dom_capslock:      return Key.capslock;\r\n        //\r\n            case dom_pageup:        return Key.pageup;\r\n            case dom_pagedown:      return Key.pagedown;\r\n            case dom_end:           return Key.end;\r\n            case dom_home:          return Key.home;\r\n            case dom_left:          return Key.left;\r\n            case dom_up:            return Key.up;\r\n            case dom_right:         return Key.right;\r\n            case dom_down:          return Key.down;\r\n            case dom_printscr:      return Key.printscreen;\r\n            case dom_insert:        return Key.insert;\r\n            case dom_delete:        return Key.delete;\r\n        //\r\n            case dom_lmeta:         return Key.lmeta;\r\n            case dom_rmeta:         return Key.rmeta;\r\n            case dom_meta:          return Key.lmeta;\r\n        //\r\n            case dom_kp_0:          return Key.kp_0;\r\n            case dom_kp_1:          return Key.kp_1;\r\n            case dom_kp_2:          return Key.kp_2;\r\n            case dom_kp_3:          return Key.kp_3;\r\n            case dom_kp_4:          return Key.kp_4;\r\n            case dom_kp_5:          return Key.kp_5;\r\n            case dom_kp_6:          return Key.kp_6;\r\n            case dom_kp_7:          return Key.kp_7;\r\n            case dom_kp_8:          return Key.kp_8;\r\n            case dom_kp_9:          return Key.kp_9;\r\n            case dom_kp_multiply:   return Key.kp_multiply;\r\n            case dom_kp_plus:       return Key.kp_plus;\r\n            case dom_kp_minus:      return Key.kp_minus;\r\n            case dom_kp_decimal:    return Key.kp_decimal;\r\n            case dom_kp_divide:     return Key.kp_divide;\r\n            case dom_kp_numlock:    return Key.numlockclear;\r\n        //\r\n            case dom_f1:            return Key.f1;\r\n            case dom_f2:            return Key.f2;\r\n            case dom_f3:            return Key.f3;\r\n            case dom_f4:            return Key.f4;\r\n            case dom_f5:            return Key.f5;\r\n            case dom_f6:            return Key.f6;\r\n            case dom_f7:            return Key.f7;\r\n            case dom_f8:            return Key.f8;\r\n            case dom_f9:            return Key.f9;\r\n            case dom_f10:           return Key.f10;\r\n            case dom_f11:           return Key.f11;\r\n            case dom_f12:           return Key.f12;\r\n            case dom_f13:           return Key.f13;\r\n            case dom_f14:           return Key.f14;\r\n            case dom_f15:           return Key.f15;\r\n            case dom_f16:           return Key.f16;\r\n            case dom_f17:           return Key.f17;\r\n            case dom_f18:           return Key.f18;\r\n            case dom_f19:           return Key.f19;\r\n            case dom_f20:           return Key.f20;\r\n            case dom_f21:           return Key.f21;\r\n            case dom_f22:           return Key.f22;\r\n            case dom_f23:           return Key.f23;\r\n            case dom_f24:           return Key.f24;\r\n        //\r\n            case dom_caret:         return Key.caret;\r\n            case dom_exclaim:       return Key.exclaim;\r\n            case dom_quotedbl:      return Key.quotedbl;\r\n            case dom_hash:          return Key.hash;\r\n            case dom_dollar:        return Key.dollar;\r\n            case dom_percent:       return Key.percent;\r\n            case dom_ampersand:     return Key.ampersand;\r\n            case dom_underscore:    return Key.underscore;\r\n            case dom_leftparen:     return Key.leftparen;\r\n            case dom_rightparen:    return Key.rightparen;\r\n            case dom_asterisk:      return Key.asterisk;\r\n            case dom_plus:          return Key.plus;\r\n            case dom_pipe:          return Key.backslash; // pipe\r\n            case dom_minus:         return Key.minus;\r\n            case dom_leftbrace:     return Key.leftbracket; // {, same code as [ on native...\r\n            case dom_rightbrace:    return Key.rightbracket; // }, same code as ] on native...\r\n            case dom_tilde:         return Key.backquote; // tilde\r\n        //\r\n            case dom_audiomute:     return Key.audiomute;\r\n            case dom_volumedown:    return Key.volumedown;\r\n            case dom_volumeup:      return Key.volumeup;\r\n        //\r\n            case dom_comma:         return Key.comma;\r\n            case dom_period:        return Key.period;\r\n            case dom_slash:         return Key.slash;\r\n            case dom_backquote:     return Key.backquote;\r\n            case dom_leftbracket:   return Key.leftbracket;\r\n            case dom_rightbracket:  return Key.rightbracket;\r\n            case dom_backslash:     return Key.backslash;\r\n            case dom_quote:         return Key.quote;\r\n\r\n        } //switch(_keycode)\r\n\r\n        return _keycode;\r\n\r\n    } //dom_key_to_keycode\r\n\r\n    // the keycodes below are dom specific keycodes mapped to snow input names\r\n    // these values *come from the browser* dom spec codes only, some info here\r\n    // http://www.w3.org/TR/DOM-Level-3-Events/#determine-keydown-keyup-keyCode\r\n\r\n //\r\n    static inline var dom_shift          = 16;\r\n    static inline var dom_ctrl           = 17;\r\n    static inline var dom_alt            = 18;\r\n    static inline var dom_capslock       = 20;\r\n //\r\n    static inline var dom_pageup         = 33;\r\n    static inline var dom_pagedown       = 34;\r\n    static inline var dom_end            = 35;\r\n    static inline var dom_home           = 36;\r\n    static inline var dom_left           = 37;\r\n    static inline var dom_up             = 38;\r\n    static inline var dom_right          = 39;\r\n    static inline var dom_down           = 40;\r\n    static inline var dom_printscr       = 44;\r\n    static inline var dom_insert         = 45;\r\n    static inline var dom_delete         = 46;\r\n //\r\n    static inline var dom_lmeta          = 91;\r\n    static inline var dom_rmeta          = 93;\r\n //\r\n    static inline var dom_kp_0           = 96;\r\n    static inline var dom_kp_1           = 97;\r\n    static inline var dom_kp_2           = 98;\r\n    static inline var dom_kp_3           = 99;\r\n    static inline var dom_kp_4           = 100;\r\n    static inline var dom_kp_5           = 101;\r\n    static inline var dom_kp_6           = 102;\r\n    static inline var dom_kp_7           = 103;\r\n    static inline var dom_kp_8           = 104;\r\n    static inline var dom_kp_9           = 105;\r\n    static inline var dom_kp_multiply    = 106;\r\n    static inline var dom_kp_plus        = 107;\r\n    static inline var dom_kp_minus       = 109;\r\n    static inline var dom_kp_decimal     = 110;\r\n    static inline var dom_kp_divide      = 111;\r\n    static inline var dom_kp_numlock     = 144;\r\n //\r\n    static inline var dom_f1             = 112;\r\n    static inline var dom_f2             = 113;\r\n    static inline var dom_f3             = 114;\r\n    static inline var dom_f4             = 115;\r\n    static inline var dom_f5             = 116;\r\n    static inline var dom_f6             = 117;\r\n    static inline var dom_f7             = 118;\r\n    static inline var dom_f8             = 119;\r\n    static inline var dom_f9             = 120;\r\n    static inline var dom_f10            = 121;\r\n    static inline var dom_f11            = 122;\r\n    static inline var dom_f12            = 123;\r\n    static inline var dom_f13            = 124;\r\n    static inline var dom_f14            = 125;\r\n    static inline var dom_f15            = 126;\r\n    static inline var dom_f16            = 127;\r\n    static inline var dom_f17            = 128;\r\n    static inline var dom_f18            = 129;\r\n    static inline var dom_f19            = 130;\r\n    static inline var dom_f20            = 131;\r\n    static inline var dom_f21            = 132;\r\n    static inline var dom_f22            = 133;\r\n    static inline var dom_f23            = 134;\r\n    static inline var dom_f24            = 135;\r\n //\r\n    static inline var dom_caret          = 160;\r\n    static inline var dom_exclaim        = 161;\r\n    static inline var dom_quotedbl       = 162;\r\n    static inline var dom_hash           = 163;\r\n    static inline var dom_dollar         = 164;\r\n    static inline var dom_percent        = 165;\r\n    static inline var dom_ampersand      = 166;\r\n    static inline var dom_underscore     = 167;\r\n    static inline var dom_leftparen      = 168;\r\n    static inline var dom_rightparen     = 169;\r\n    static inline var dom_asterisk       = 170;\r\n    static inline var dom_plus           = 171;\r\n    static inline var dom_pipe           = 172; //backslash\r\n    static inline var dom_minus          = 173;\r\n    static inline var dom_leftbrace      = 174;\r\n    static inline var dom_rightbrace     = 175;\r\n    static inline var dom_tilde          = 176;\r\n //\r\n    static inline var dom_audiomute      = 181;\r\n    static inline var dom_volumedown     = 182;\r\n    static inline var dom_volumeup       = 183;\r\n //\r\n    static inline var dom_comma          = 188;\r\n    static inline var dom_period         = 190;\r\n    static inline var dom_slash          = 191;\r\n    static inline var dom_backquote      = 192;\r\n    static inline var dom_leftbracket    = 219;\r\n    static inline var dom_rightbracket   = 221;\r\n    static inline var dom_backslash      = 220;\r\n    static inline var dom_quote          = 222;\r\n    static inline var dom_meta           = 224;\r\n\r\n} //DOMKeys\r\n\r\n#end","package snow.core.web.assets;\r\n\r\n#if snow_web\r\n\r\nimport snow.systems.assets.Asset.AssetImage;\r\nimport snow.systems.assets.Assets;\r\nimport snow.types.Types;\r\nimport snow.api.Debug.*;\r\nimport snow.api.buffers.*;\r\nimport snow.api.Promise;\r\n\r\nimport snow.core.web.assets.tga.TGA;\r\nimport snow.core.web.assets.psd.PSD;\r\n\r\n@:allow(snow.systems.assets.Assets)\r\nclass Assets implements snow.modules.interfaces.Assets {\r\n\r\n//module interface\r\n\r\n    var app: snow.Snow;\r\n    function new( _app:snow.Snow ) app = _app;\r\n    function onevent(event:SystemEvent):Void {}\r\n    function shutdown() {}\r\n\r\n//Public API\r\n\r\n    //Images\r\n\r\n        public function image_info_from_load( _id:String, ?_components:Int = 4 ) : Promise {\r\n\r\n            return app.io.data_flow(_id, AssetImage.processor);\r\n\r\n        } //image_info_from_load\r\n\r\n            /** Create an image info (padded to POT) from a given Canvas or Image element. */\r\n        public function image_info_from_element( _id:String, _elem ) : ImageData {\r\n\r\n            var width_pot = nearest_power_of_two(_elem.width);\r\n            var height_pot = nearest_power_of_two(_elem.height);\r\n            var image_bytes = POT_bytes_from_element(_elem.width, _elem.height, width_pot, height_pot, cast _elem);\r\n\r\n            var info = new ImageData(app, {\r\n                id : _id,\r\n                bpp : 4,\r\n                width : _elem.width,\r\n                height : _elem.height,\r\n                width_actual : width_pot,\r\n                height_actual : height_pot,\r\n                bpp_source : 4,\r\n                pixels : image_bytes\r\n            });\r\n\r\n            image_bytes = null;\r\n\r\n            return info;\r\n\r\n        } //image_info_from_element\r\n\r\n            /** Create an image info from raw (already decoded) image pixels */\r\n        public function image_info_from_pixels(_id:String, _width:Int, _height:Int, _pixels:Uint8Array, ?_bpp:Int=4) : ImageData {\r\n\r\n            var info = new ImageData(app, {\r\n                id : _id,\r\n                bpp : 4,\r\n                width : _width,\r\n                height : _height,\r\n                width_actual : _width,\r\n                height_actual : _height,\r\n                bpp_source : 4,\r\n                pixels : _pixels,\r\n            });\r\n\r\n            return info;\r\n        }\r\n\r\n            /** Create an image info (padded to POT) from bytes. Promises an ImageData. */\r\n        public function image_info_from_bytes( _id:String, _bytes:Uint8Array, ?_components:Int = 4 ) : Promise {\r\n\r\n            assertnull(_id);\r\n            assertnull(_bytes);\r\n            assert(_bytes.length != 0);\r\n\r\n            var ext = haxe.io.Path.extension(_id);\r\n\r\n            #if snow_web_tga\r\n                if(ext == 'tga') return Promise.resolve(image_info_from_bytes_tga(_id, _bytes));\r\n            #end\r\n\r\n            #if snow_web_psd\r\n                if(ext == 'psd') return Promise.resolve(image_info_from_bytes_psd(_id , _bytes));\r\n            #end\r\n\r\n            return new Promise(function(resolve, reject) {\r\n\r\n                    //convert to a binary string\r\n                var str = '', i = 0, len = _bytes.length;\r\n                while(i < len) str += String.fromCharCode(_bytes[i++] & 0xff);\r\n\r\n                var b64 = js.Browser.window.btoa(str);\r\n                var src = 'data:image/$ext;base64,$b64';\r\n\r\n                    //convert to an image element\r\n                var _img = new js.html.Image();\r\n\r\n                _img.onload = function(_) {\r\n                    var info = image_info_from_element(_id, _img);\r\n                    resolve(info);\r\n                }\r\n\r\n                _img.onerror = function(e) {\r\n                    reject(Error.error('failed to load image from bytes, on error: $e'));\r\n                }\r\n\r\n                _img.src = src;\r\n\r\n            }); //promise\r\n\r\n        } //image_info_from_bytes\r\n\r\n//Internal converters\r\n\r\n    #if snow_web_psd\r\n\r\n        /** Return an image info from the bytes of a PSD image */\r\n        function image_info_from_bytes_psd( _id:String, _bytes:Uint8Array ) {\r\n\r\n            var psd = new PSD(_bytes);\r\n                psd.parse();\r\n\r\n            var _width = untyped psd.header.width;\r\n            var _height = untyped psd.header.height;\r\n            var _pixels = new Uint8Array(untyped psd.image.pixelData);\r\n\r\n            return image_info_from_pixels(_id, _width, _height, _pixels);\r\n\r\n        } //image_info_from_bytes_psd\r\n\r\n    #end //snow_web_psd\r\n\r\n    #if snow_web_tga\r\n\r\n        /** Return an image info from the bytes of a tga image */\r\n        function image_info_from_bytes_tga( _id:String, _bytes:Uint8Array ) {\r\n\r\n            var image = new TGA();\r\n                image.load( _bytes );\r\n\r\n            return image_info_from_element(_id, image.getCanvas());\r\n\r\n        } //image_info_from_bytes_tga\r\n\r\n    #end //snow_web_tga\r\n\r\n        /** Return a POT array of bytes from raw image pixels */\r\n    function POT_bytes_from_pixels(_width:Int, _height:Int, _width_pot:Int, _height_pot:Int, _source:Uint8Array) : Uint8Array {\r\n\r\n        var tmp_canvas = js.Browser.document.createCanvasElement();\r\n\r\n            tmp_canvas.width = _width_pot;\r\n            tmp_canvas.height = _height_pot;\r\n\r\n        var tmp_context = tmp_canvas.getContext2d();\r\n\r\n            tmp_context.clearRect( 0, 0, tmp_canvas.width, tmp_canvas.height );\r\n\r\n        var image_bytes = null;\r\n        var _pixels = new js.html.Uint8ClampedArray(_source.buffer);\r\n        var _imgdata = tmp_context.createImageData( _width, _height );\r\n            _imgdata.data.set(_pixels);\r\n\r\n        try {\r\n\r\n                //store the data in it first\r\n            tmp_context.putImageData( _imgdata, 0, 0 );\r\n                //then bring out the full size\r\n            image_bytes = tmp_context.getImageData( 0, 0, tmp_canvas.width, tmp_canvas.height );\r\n\r\n        } catch(e:Dynamic) {\r\n\r\n            var tips = '- textures served from file:/// throw security errors\\n';\r\n                tips += '- textures served over http:// work for cross origin byte requests';\r\n\r\n            log(tips);\r\n            throw e;\r\n\r\n        } //catch\r\n\r\n            //cleanup\r\n        tmp_canvas = null; \r\n        tmp_context = null;\r\n        _imgdata = null;\r\n\r\n        return Uint8Array.fromView(image_bytes.data);\r\n    \r\n    }\r\n\r\n        /** Return a POT array of bytes from an image/canvas element */\r\n    function POT_bytes_from_element(_width:Int, _height:Int, _width_pot:Int, _height_pot:Int, _source:js.html.Element) : Uint8Array {\r\n\r\n        var tmp_canvas = js.Browser.document.createCanvasElement();\r\n\r\n            tmp_canvas.width = _width_pot;\r\n            tmp_canvas.height = _height_pot;\r\n\r\n        var tmp_context = tmp_canvas.getContext2d();\r\n\r\n            tmp_context.clearRect( 0,0, tmp_canvas.width, tmp_canvas.height );\r\n            tmp_context.drawImage( cast _source, 0, 0, _width, _height );\r\n\r\n        var image_bytes = null;\r\n\r\n        try {\r\n\r\n            image_bytes = tmp_context.getImageData( 0, 0, tmp_canvas.width, tmp_canvas.height );\r\n\r\n        } catch(e:Dynamic) {\r\n\r\n            var tips = '- textures served from file:/// throw security errors\\n';\r\n                tips += '- textures served over http:// work for cross origin byte requests';\r\n\r\n            log(tips);\r\n            throw e;\r\n\r\n        } //catch\r\n\r\n            //cleanup\r\n        tmp_canvas = null; tmp_context = null;\r\n\r\n        return Uint8Array.fromView(image_bytes.data);\r\n\r\n    } //POT_bytes_from_element\r\n\r\n\r\n    //Internal helpers\r\n        static var POT = true;\r\n\r\n        function nearest_power_of_two(_value:Int) {\r\n\r\n            if(!POT) return _value;\r\n\r\n            _value--;\r\n\r\n            _value |= _value >> 1;\r\n            _value |= _value >> 2;\r\n            _value |= _value >> 4;\r\n            _value |= _value >> 8;\r\n            _value |= _value >> 16;\r\n\r\n            _value++;\r\n\r\n            return _value;\r\n\r\n        } //nearest_power_of_two\r\n\r\n} //Assets\r\n\r\n#end //snow_web\r\n","package snow.core.web.io;\r\n\r\n#if snow_web\r\n\r\nimport snow.types.Types;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.Promise;\r\nimport snow.api.Debug.*;\r\n\r\n\r\n@:allow(snow.systems.io.IO)\r\nclass IO implements snow.modules.interfaces.IO {\r\n\r\n    var app: snow.Snow;\r\n    function new(_app:snow.Snow) app = _app;\r\n    function shutdown() {}\r\n    function onevent( _event:SystemEvent ) : Void {}\r\n\r\n//Public API\r\n\r\n    public function app_path() : String {\r\n\r\n        return './';\r\n\r\n    } //app_path\r\n\r\n    public function app_path_prefs() : String {\r\n\r\n        return './';\r\n\r\n    } //app_path_prefs\r\n\r\n    public function url_open( _url:String ) {\r\n\r\n        if(_url != null && _url.length > 0) {\r\n            js.Browser.window.open(_url, '_blank');\r\n        }\r\n\r\n    } //url_open\r\n\r\n        /** Load bytes from the file path/url given.\r\n            On web a request is sent for the data */\r\n    public function data_load( _path:String, ?_options:IODataOptions ) : Promise {\r\n\r\n        return new Promise(function(resolve,reject) {\r\n\r\n                //defaults\r\n            var _async = true;\r\n            var _binary = true;\r\n\r\n            if(_options != null) {\r\n                if(_options.binary != null) _binary = _options.binary;\r\n            }\r\n\r\n            var request = new js.html.XMLHttpRequest();\r\n                request.open(\"GET\", _path, _async);\r\n\r\n            if(_binary) {\r\n                request.overrideMimeType('text/plain; charset=x-user-defined');\r\n            } else {\r\n                request.overrideMimeType('text/plain; charset=UTF-8');\r\n            }\r\n\r\n                //only _async can set this type\r\n            if(_async) {\r\n                request.responseType = js.html.XMLHttpRequestResponseType.ARRAYBUFFER;\r\n            }\r\n\r\n            request.onload = function(data) {\r\n\r\n                if(request.status == 200) {\r\n                    resolve( new Uint8Array(request.response) );\r\n                } else {\r\n                    reject(Error.error('request status was ${request.status} / ${request.statusText}'));\r\n                }\r\n\r\n            } //onload\r\n\r\n            request.send();\r\n\r\n        });\r\n\r\n    } //data_load\r\n\r\n    public function data_save( _path:String, _data:Uint8Array, ?_options:IODataOptions ) : Bool {\r\n\r\n        return false;\r\n\r\n    } //data_save\r\n\r\n\r\n        /** Returns the path where string_save operates.\r\n            One targets where this is not a path, the path will be prefaced with `< >/`,\r\n            i.e on web targets the path will be `<localstorage>/` followed by the ID. */\r\n    public function string_save_path( ?_slot:Int = 0 ) : String {\r\n\r\n        var _pref_path = '<localstorage>';\r\n        var _slot_path = string_slot_id(_slot);\r\n        var _path = haxe.io.Path.join([_pref_path, _slot_path]);\r\n\r\n        return haxe.io.Path.normalize(_path);\r\n\r\n    } //string_save_path\r\n\r\n//Internal API\r\n\r\n    inline function string_slot_id(_slot:Int = 0) {\r\n        var _parts = snow.types.Config.app_ident.split('.');\r\n        var _appname = _parts.pop();\r\n        var _org = _parts.join('.');\r\n\r\n        return '$_org/$_appname/${app.io.string_save_prefix}.$_slot';\r\n    }\r\n\r\n    inline function string_slot_destroy( ?_slot:Int = 0 ) : Bool {\r\n\r\n        var storage = js.Browser.window.localStorage;\r\n        if(storage == null) {\r\n            log('localStorage isnt supported in this browser?!');\r\n            return false;\r\n        }\r\n\r\n        var _id = string_slot_id(_slot);\r\n\r\n        storage.removeItem(_id);\r\n\r\n        return false;\r\n\r\n    } //string_slot_destroy\r\n\r\n        //flush the string map to disk\r\n    inline function string_slot_save( ?_slot:Int = 0, _contents:String ) : Bool {\r\n\r\n        var storage = js.Browser.window.localStorage;\r\n        if(storage == null) {\r\n            log('localStorage isnt supported in this browser?!');\r\n            return false;\r\n        }\r\n\r\n        var _id = string_slot_id(_slot);\r\n\r\n        storage.setItem(_id, _contents);\r\n\r\n        return true;\r\n\r\n    } //string_slot_save\r\n\r\n        //get the string contents of this slot,\r\n        //or null if not found/doesn't exist\r\n    inline function string_slot_load( ?_slot:Int = 0 ) : String {\r\n\r\n        var storage = js.Browser.window.localStorage;\r\n        if(storage == null) {\r\n            log('localStorage isnt supported in this browser?!');\r\n            return null;\r\n        }\r\n\r\n        var _id = string_slot_id(_slot);\r\n\r\n        return storage.getItem(_id);\r\n\r\n    } //string_slot_load\r\n\r\n    inline function string_slot_encode( _string:String ) : String {\r\n        return js.Browser.window.btoa(_string);\r\n    }\r\n\r\n    inline function string_slot_decode( _string:String ) : String {\r\n        return js.Browser.window.atob(_string);\r\n    }\r\n\r\n\r\n} //IO\r\n\r\n#end //snow_web\r\n","package snow.modules.opengl.web;\r\n\r\n#if snow_web\r\n\r\nimport js.html.webgl.RenderingContext;\r\n\r\nimport snow.api.buffers.ArrayBuffer;\r\nimport snow.api.buffers.ArrayBufferView;\r\nimport snow.api.buffers.Int32Array;\r\nimport snow.api.buffers.Float32Array;\r\n\r\n\r\ntypedef GLActiveInfo                = js.html.webgl.ActiveInfo;\r\ntypedef GLBuffer                    = js.html.webgl.Buffer;\r\ntypedef GLContextAttributes         = js.html.webgl.ContextAttributes;\r\ntypedef GLFramebuffer               = js.html.webgl.Framebuffer;\r\ntypedef GLProgram                   = js.html.webgl.Program;\r\ntypedef GLRenderbuffer              = js.html.webgl.Renderbuffer;\r\ntypedef GLShader                    = js.html.webgl.Shader;\r\ntypedef GLTexture                   = js.html.webgl.Texture;\r\ntypedef GLUniformLocation           = js.html.webgl.UniformLocation;\r\ntypedef GLShaderPrecisionFormat     = js.html.webgl.ShaderPrecisionFormat;\r\n\r\nclass GL {\r\n\r\n\r\n\r\n    public static var version(get_version, null) : Int;\r\n    public static var gl : RenderingContext;\r\n\r\n//non-spec\r\n\r\n    public static function versionString():String {\r\n\r\n        var ver = gl.getParameter(VERSION);\r\n        var slver = gl.getParameter(SHADING_LANGUAGE_VERSION);\r\n        var ren = gl.getParameter(RENDERER);\r\n        var ven = gl.getParameter(VENDOR);\r\n\r\n        return \"/ \" + ver + \" / \" + slver + \" / \" + ren + \" / \" + ven + \" /\";\r\n    \r\n    } //versionString\r\n\r\n//spec\r\n\r\n    inline public static function activeTexture(texture:Int):Void\r\n        gl.activeTexture(texture);\r\n\r\n    inline public static function attachShader(program:GLProgram, shader:GLShader):Void\r\n        gl.attachShader(program, shader);\r\n\r\n    inline public static function bindAttribLocation(program:GLProgram, index:Int, name:String):Void\r\n        gl.bindAttribLocation(program, index, name);\r\n\r\n    inline public static function bindBuffer(target:Int, buffer:GLBuffer):Void\r\n        gl.bindBuffer(target, buffer);\r\n\r\n    inline public static function bindFramebuffer(target:Int, framebuffer:GLFramebuffer):Void\r\n        gl.bindFramebuffer(target, framebuffer);\r\n\r\n    inline public static function bindRenderbuffer(target:Int, renderbuffer:GLRenderbuffer):Void\r\n        gl.bindRenderbuffer(target, renderbuffer);\r\n\r\n    inline public static function bindTexture(target:Int, texture:GLTexture):Void\r\n        gl.bindTexture(target, texture);\r\n\r\n    inline public static function blendColor(red:Float, green:Float, blue:Float, alpha:Float):Void\r\n        gl.blendColor(red, green, blue, alpha);\r\n\r\n    inline public static function blendEquation(mode:Int):Void\r\n        gl.blendEquation(mode);\r\n\r\n    inline public static function blendEquationSeparate(modeRGB:Int, modeAlpha:Int):Void\r\n        gl.blendEquationSeparate(modeRGB, modeAlpha);\r\n\r\n    inline public static function blendFunc(sfactor:Int, dfactor:Int):Void\r\n        gl.blendFunc(sfactor, dfactor);\r\n\r\n    inline public static function blendFuncSeparate(srcRGB:Int, dstRGB:Int, srcAlpha:Int, dstAlpha:Int):Void\r\n        gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n\r\n    inline public static function bufferData(target:Int, data:ArrayBufferView, usage:Int):Void\r\n        gl.bufferData( target, data, usage );\r\n\r\n    inline public static function bufferSubData(target:Int, offset:Int, data:ArrayBufferView):Void\r\n        gl.bufferSubData(target, offset, data);\r\n\r\n    inline public static function checkFramebufferStatus(target:Int):Int\r\n        return gl.checkFramebufferStatus(target);\r\n\r\n    inline public static function clear(mask:Int):Void\r\n        gl.clear(mask);\r\n\r\n    inline public static function clearColor(red:Float, green:Float, blue:Float, alpha:Float):Void\r\n        gl.clearColor(red, green, blue, alpha);\r\n\r\n    inline public static function clearDepth(depth:Float):Void\r\n        gl.clearDepth(depth);\r\n\r\n    inline public static function clearStencil(s:Int):Void\r\n        gl.clearStencil(s);\r\n\r\n    inline public static function colorMask(red:Bool, green:Bool, blue:Bool, alpha:Bool):Void\r\n        gl.colorMask(red, green, blue, alpha);\r\n\r\n    inline public static function compileShader(shader:GLShader):Void\r\n        gl.compileShader(shader);\r\n\r\n    inline public static function compressedTexImage2D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, border:Int, data:ArrayBufferView):Void\r\n        gl.compressedTexImage2D(target, level, internalformat, width, height, border, data);\r\n\r\n    inline public static function compressedTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, width:Int, height:Int, format:Int, data:ArrayBufferView):Void\r\n        gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);\r\n\r\n    inline public static function copyTexImage2D(target:Int, level:Int, internalformat:Int, x:Int, y:Int, width:Int, height:Int, border:Int):Void\r\n        gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);\r\n\r\n    inline public static function copyTexSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, x:Int, y:Int, width:Int, height:Int):Void\r\n        gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\r\n\r\n    inline public static function createBuffer():GLBuffer\r\n        return gl.createBuffer();\r\n\r\n    inline public static function createFramebuffer():GLFramebuffer\r\n        return gl.createFramebuffer();\r\n\r\n    inline public static function createProgram():GLProgram\r\n        return gl.createProgram();\r\n\r\n    inline public static function createRenderbuffer():GLRenderbuffer\r\n        return gl.createRenderbuffer();\r\n\r\n    inline public static function createShader(type:Int):GLShader\r\n        return gl.createShader(type);\r\n\r\n    inline public static function createTexture():GLTexture\r\n        return gl.createTexture();\r\n\r\n    inline public static function cullFace(mode:Int):Void\r\n        gl.cullFace(mode);\r\n\r\n    inline public static function deleteBuffer(buffer:GLBuffer):Void\r\n        gl.deleteBuffer(buffer);\r\n\r\n    inline public static function deleteFramebuffer(framebuffer:GLFramebuffer):Void\r\n        gl.deleteFramebuffer(framebuffer);\r\n\r\n    inline public static function deleteProgram(program:GLProgram):Void\r\n        gl.deleteProgram(program);\r\n\r\n    inline public static function deleteRenderbuffer(renderbuffer:GLRenderbuffer):Void\r\n        gl.deleteRenderbuffer(renderbuffer);\r\n\r\n    inline public static function deleteShader(shader:GLShader):Void\r\n        gl.deleteShader(shader);\r\n\r\n    inline public static function deleteTexture(texture:GLTexture):Void\r\n        gl.deleteTexture(texture);\r\n\r\n    inline public static function depthFunc(func:Int):Void\r\n        gl.depthFunc(func);\r\n\r\n    inline public static function depthMask(flag:Bool):Void\r\n        gl.depthMask(flag);\r\n\r\n    inline public static function depthRange(zNear:Float, zFar:Float):Void\r\n        gl.depthRange(zNear, zFar);\r\n\r\n    inline public static function detachShader(program:GLProgram, shader:GLShader):Void\r\n        gl.detachShader(program, shader);\r\n\r\n    inline public static function disable(cap:Int):Void\r\n        gl.disable(cap);\r\n\r\n    inline public static function disableVertexAttribArray(index:Int):Void\r\n        gl.disableVertexAttribArray(index);\r\n\r\n    inline public static function drawArrays(mode:Int, first:Int, count:Int):Void\r\n        gl.drawArrays(mode, first, count);\r\n\r\n    inline public static function drawElements(mode:Int, count:Int, type:Int, offset:Int):Void\r\n        gl.drawElements(mode, count, type, offset);\r\n\r\n    inline public static function enable(cap:Int):Void\r\n        gl.enable(cap);\r\n\r\n    inline public static function enableVertexAttribArray(index:Int):Void\r\n        gl.enableVertexAttribArray(index);\r\n\r\n    inline public static function finish():Void\r\n        gl.finish();\r\n\r\n    inline public static function flush():Void\r\n        gl.flush();\r\n\r\n    inline public static function framebufferRenderbuffer(target:Int, attachment:Int, renderbuffertarget:Int, renderbuffer:GLRenderbuffer):Void\r\n        gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);\r\n\r\n    inline public static function framebufferTexture2D(target:Int, attachment:Int, textarget:Int, texture:GLTexture, level:Int):Void\r\n        gl.framebufferTexture2D(target, attachment, textarget, texture, level);\r\n\r\n    inline public static function frontFace(mode:Int):Void\r\n        gl.frontFace(mode);\r\n\r\n    inline public static function generateMipmap(target:Int):Void\r\n        gl.generateMipmap(target);\r\n\r\n    inline public static function getActiveAttrib(program:GLProgram, index:Int):GLActiveInfo\r\n        return gl.getActiveAttrib(program, index);\r\n\r\n    inline public static function getActiveUniform(program:GLProgram, index:Int):GLActiveInfo\r\n        return gl.getActiveUniform(program, index);\r\n\r\n    inline public static function getAttachedShaders(program:GLProgram):Array<GLShader>\r\n        return gl.getAttachedShaders(program);\r\n\r\n    inline public static function getAttribLocation(program:GLProgram, name:String):Int\r\n        return gl.getAttribLocation(program, name);\r\n\r\n    inline public static function getBufferParameter(target:Int, pname:Int):Dynamic\r\n        return gl.getBufferParameter(target, pname);\r\n\r\n    inline public static function getContextAttributes():GLContextAttributes\r\n        return gl.getContextAttributes();\r\n\r\n    inline public static function getError():Int\r\n        return gl.getError();\r\n\r\n    inline public static function getExtension(name:String):Dynamic\r\n        return gl.getExtension(name);\r\n\r\n    inline public static function getFramebufferAttachmentParameter(target:Int, attachment:Int, pname:Int):Dynamic\r\n        return gl.getFramebufferAttachmentParameter(target, attachment, pname);\r\n\r\n    inline public static function getParameter(pname:Int):Dynamic\r\n        return gl.getParameter(pname);\r\n\r\n    inline public static function getProgramInfoLog(program:GLProgram):String\r\n        return gl.getProgramInfoLog(program);\r\n\r\n    inline public static function getProgramParameter(program:GLProgram, pname:Int):Int\r\n        return gl.getProgramParameter(program, pname);\r\n\r\n    inline public static function getRenderbufferParameter(target:Int, pname:Int):Dynamic\r\n        return gl.getRenderbufferParameter(target, pname);\r\n\r\n    inline public static function getShaderInfoLog(shader:GLShader):String\r\n        return gl.getShaderInfoLog(shader);\r\n\r\n    inline public static function getShaderParameter(shader:GLShader, pname:Int):Int\r\n        return gl.getShaderParameter(shader, pname);\r\n\r\n    inline public static function getShaderPrecisionFormat(shadertype:Int, precisiontype:Int) : GLShaderPrecisionFormat\r\n        return gl.getShaderPrecisionFormat(shadertype, precisiontype);\r\n\r\n    inline public static function getShaderSource(shader:GLShader):String\r\n        return gl.getShaderSource(shader);\r\n\r\n    inline public static function getSupportedExtensions() : Array<String>\r\n        return gl.getSupportedExtensions();\r\n\r\n    inline public static function getTexParameter(target:Int, pname:Int):Dynamic\r\n        return gl.getTexParameter(target, pname);\r\n\r\n    inline public static function getUniform(program:GLProgram, location:GLUniformLocation):Dynamic\r\n        return gl.getUniform(program, location);\r\n\r\n    inline public static function getUniformLocation(program:GLProgram, name:String):GLUniformLocation\r\n        return gl.getUniformLocation(program, name);\r\n\r\n    inline public static function getVertexAttrib(index:Int, pname:Int):Dynamic\r\n        return gl.getVertexAttrib(index, pname);\r\n\r\n    inline public static function getVertexAttribOffset(index:Int, pname:Int):Int\r\n        return gl.getVertexAttribOffset(index, pname);\r\n\r\n    inline public static function hint(target:Int, mode:Int):Void\r\n        gl.hint(target, mode);\r\n\r\n    inline public static function isBuffer(buffer:GLBuffer):Bool\r\n        return gl.isBuffer(buffer);\r\n\r\n    // This is non-static\r\n    // public function isContextLost():Bool { return false; }\r\n\r\n    inline public static function isEnabled(cap:Int):Bool\r\n        return gl.isEnabled(cap);\r\n\r\n    inline public static function isFramebuffer(framebuffer:GLFramebuffer):Bool\r\n        return gl.isFramebuffer(framebuffer);\r\n\r\n    inline public static function isProgram(program:GLProgram):Bool\r\n        return gl.isProgram(program);\r\n\r\n    inline public static function isRenderbuffer(renderbuffer:GLRenderbuffer):Bool\r\n        return gl.isRenderbuffer(renderbuffer);\r\n\r\n    inline public static function isShader(shader:GLShader):Bool\r\n        return gl.isShader(shader);\r\n\r\n    inline public static function isTexture(texture:GLTexture):Bool\r\n        return gl.isTexture(texture);\r\n\r\n    inline public static function lineWidth(width:Float):Void\r\n        gl.lineWidth(width);\r\n\r\n    inline public static function linkProgram(program:GLProgram):Void\r\n        gl.linkProgram(program);\r\n\r\n    inline public static function pixelStorei(pname:Int, param:Int):Void\r\n        gl.pixelStorei(pname, param);\r\n\r\n    inline public static function polygonOffset(factor:Float, units:Float):Void\r\n        gl.polygonOffset(factor, units);\r\n\r\n        // TODO: pixels? May need setting to work (canvas.getContext(\"experimental-webgl\", {preserveDrawingBuffer: true});)\r\n    inline public static function readPixels(x:Int, y:Int, width:Int, height:Int, format:Int, type:Int, data:ArrayBufferView):Void\r\n        gl.readPixels(x, y, width, height, format, type, data);\r\n\r\n    inline public static function renderbufferStorage(target:Int, internalformat:Int, width:Int, height:Int):Void\r\n        gl.renderbufferStorage(target, internalformat, width, height);\r\n\r\n    inline public static function sampleCoverage(value:Float, invert:Bool):Void\r\n        gl.sampleCoverage(value, invert);\r\n\r\n    inline public static function scissor(x:Int, y:Int, width:Int, height:Int):Void\r\n        gl.scissor(x, y, width, height);\r\n\r\n    inline public static function shaderSource(shader:GLShader, source:String):Void\r\n        gl.shaderSource(shader, source);\r\n\r\n    inline public static function stencilFunc(func:Int, ref:Int, mask:Int):Void\r\n        gl.stencilFunc(func, ref, mask);\r\n\r\n    inline public static function stencilFuncSeparate(face:Int, func:Int, ref:Int, mask:Int):Void\r\n        gl.stencilFuncSeparate(face, func, ref, mask);\r\n\r\n    inline public static function stencilMask(mask:Int):Void\r\n        gl.stencilMask(mask);\r\n\r\n    inline public static function stencilMaskSeparate(face:Int, mask:Int):Void\r\n        gl.stencilMaskSeparate(face, mask);\r\n\r\n    inline public static function stencilOp(fail:Int, zfail:Int, zpass:Int):Void\r\n        gl.stencilOp(fail, zfail, zpass);\r\n\r\n    inline public static function stencilOpSeparate(face:Int, fail:Int, zfail:Int, zpass:Int):Void\r\n        gl.stencilOpSeparate(face, fail, zfail, zpass);\r\n\r\n    inline public static function texImage2D(target:Int, level:Int, internalformat:Int, width:Int, height:Int, border:Int, format:Int, type:Int, data:ArrayBufferView):Void\r\n        gl.texImage2D(target, level, internalformat, width, height, border, format, type, data);\r\n\r\n    inline public static function texParameterf(target:Int, pname:Int, param:Float):Void\r\n        gl.texParameterf(target, pname, param);\r\n\r\n    inline public static function texParameteri(target:Int, pname:Int, param:Int):Void\r\n        gl.texParameteri(target, pname, param);\r\n\r\n    inline public static function texSubImage2D(target:Int, level:Int, xoffset:Int, yoffset:Int, width:Int, height:Int, format:Int, type:Int, data:ArrayBufferView):Void\r\n        gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, data);\r\n\r\n    inline public static function uniform1f(location:GLUniformLocation, x:Float):Void\r\n        gl.uniform1f(location, x);\r\n\r\n    inline public static function uniform1fv(location:GLUniformLocation, data:Float32Array):Void\r\n        gl.uniform1fv(location, data);\r\n\r\n    inline public static function uniform1i(location:GLUniformLocation, x:Int):Void\r\n        gl.uniform1i(location, x);\r\n\r\n    inline public static function uniform1iv(location:GLUniformLocation, data:Int32Array):Void\r\n        gl.uniform1iv(location, data);\r\n\r\n    inline public static function uniform2f(location:GLUniformLocation, x:Float, y:Float):Void\r\n        gl.uniform2f(location, x, y);\r\n\r\n    inline public static function uniform2fv(location:GLUniformLocation, data:Float32Array):Void\r\n        gl.uniform2fv(location, data);\r\n\r\n    inline public static function uniform2i(location:GLUniformLocation, x:Int, y:Int):Void\r\n        gl.uniform2i(location, x, y);\r\n\r\n    inline public static function uniform2iv(location:GLUniformLocation, data:Int32Array):Void\r\n        gl.uniform2iv(location, data);\r\n\r\n    inline public static function uniform3f(location:GLUniformLocation, x:Float, y:Float, z:Float):Void\r\n        gl.uniform3f(location, x, y, z);\r\n\r\n    inline public static function uniform3fv(location:GLUniformLocation, data:Float32Array):Void\r\n        gl.uniform3fv(location, data);\r\n\r\n    inline public static function uniform3i(location:GLUniformLocation, x:Int, y:Int, z:Int):Void\r\n        gl.uniform3i(location, x, y, z);\r\n\r\n    inline public static function uniform3iv(location:GLUniformLocation, data:Int32Array):Void\r\n        gl.uniform3iv(location, data);\r\n\r\n    inline public static function uniform4f(location:GLUniformLocation, x:Float, y:Float, z:Float, w:Float):Void\r\n        gl.uniform4f(location, x, y, z, w);\r\n\r\n    inline public static function uniform4fv(location:GLUniformLocation, data:Float32Array):Void\r\n        gl.uniform4fv(location, data);\r\n\r\n    inline public static function uniform4i(location:GLUniformLocation, x:Int, y:Int, z:Int, w:Int):Void\r\n        gl.uniform4i(location, x, y, z, w);\r\n\r\n    inline public static function uniform4iv(location:GLUniformLocation, data:Int32Array):Void\r\n        gl.uniform4iv(location, data);\r\n\r\n    inline public static function uniformMatrix2fv(location:GLUniformLocation, transpose:Bool, data:Float32Array):Void\r\n        gl.uniformMatrix2fv(location, transpose, data);\r\n\r\n    inline public static function uniformMatrix3fv(location:GLUniformLocation, transpose:Bool, data:Float32Array):Void\r\n        gl.uniformMatrix3fv(location, transpose, data);\r\n\r\n    inline public static function uniformMatrix4fv(location:GLUniformLocation, transpose:Bool, data:Float32Array):Void\r\n        gl.uniformMatrix4fv(location, transpose, data);\r\n\r\n    inline public static function useProgram(program:GLProgram):Void\r\n        gl.useProgram(program);\r\n\r\n    inline public static function validateProgram(program:GLProgram):Void\r\n        gl.validateProgram(program);\r\n\r\n    inline public static function vertexAttrib1f(indx:Int, x:Float):Void\r\n        gl.vertexAttrib1f(indx, x);\r\n\r\n    inline public static function vertexAttrib1fv(indx:Int, data:Float32Array):Void\r\n        gl.vertexAttrib1fv(indx, data);\r\n\r\n    inline public static function vertexAttrib2f(indx:Int, x:Float, y:Float):Void\r\n        gl.vertexAttrib2f(indx, x, y);\r\n\r\n    inline public static function vertexAttrib2fv(indx:Int, data:Float32Array):Void\r\n        gl.vertexAttrib2fv(indx, data);\r\n\r\n    inline public static function vertexAttrib3f(indx:Int, x:Float, y:Float, z:Float):Void\r\n        gl.vertexAttrib3f(indx, x, y, z);\r\n\r\n    inline public static function vertexAttrib3fv(indx:Int, data:Float32Array):Void\r\n        gl.vertexAttrib3fv(indx, data);\r\n\r\n    inline public static function vertexAttrib4f(indx:Int, x:Float, y:Float, z:Float, w:Float):Void\r\n        gl.vertexAttrib4f(indx, x, y, z, w);\r\n\r\n    inline public static function vertexAttrib4fv(indx:Int, data:Float32Array):Void\r\n        gl.vertexAttrib4fv(indx, data);\r\n\r\n    inline public static function vertexAttribPointer(indx:Int, size:Int, type:Int, normalized:Bool, stride:Int, offset:Int):Void\r\n        gl.vertexAttribPointer(indx, size, type, normalized, stride, offset);\r\n\r\n    inline public static function viewport(x:Int, y:Int, width:Int, height:Int):Void\r\n        gl.viewport(x, y, width, height);\r\n\r\n\r\n// getters/setters\r\n\r\n    static function get_version():Int { return RenderingContext.VERSION; }\r\n\r\n//defines\r\n\r\n    /* ClearBufferMask */\r\n    public static inline var DEPTH_BUFFER_BIT               = 0x00000100;\r\n    public static inline var STENCIL_BUFFER_BIT             = 0x00000400;\r\n    public static inline var COLOR_BUFFER_BIT               = 0x00004000;\r\n\r\n    /* BeginMode */\r\n    public static inline var POINTS                         = 0x0000;\r\n    public static inline var LINES                          = 0x0001;\r\n    public static inline var LINE_LOOP                      = 0x0002;\r\n    public static inline var LINE_STRIP                     = 0x0003;\r\n    public static inline var TRIANGLES                      = 0x0004;\r\n    public static inline var TRIANGLE_STRIP                 = 0x0005;\r\n    public static inline var TRIANGLE_FAN                   = 0x0006;\r\n\r\n    /* AlphaFunction(not supported in ES20) */\r\n    /*      NEVER */\r\n    /*      LESS */\r\n    /*      EQUAL */\r\n    /*      LEQUAL */\r\n    /*      GREATER */\r\n    /*      NOTEQUAL */\r\n    /*      GEQUAL */\r\n    /*      ALWAYS */\r\n\r\n    /* BlendingFactorDest */\r\n    public static inline var ZERO                           = 0;\r\n    public static inline var ONE                            = 1;\r\n    public static inline var SRC_COLOR                      = 0x0300;\r\n    public static inline var ONE_MINUS_SRC_COLOR            = 0x0301;\r\n    public static inline var SRC_ALPHA                      = 0x0302;\r\n    public static inline var ONE_MINUS_SRC_ALPHA            = 0x0303;\r\n    public static inline var DST_ALPHA                      = 0x0304;\r\n    public static inline var ONE_MINUS_DST_ALPHA            = 0x0305;\r\n\r\n    /* BlendingFactorSrc */\r\n    /*      ZERO */\r\n    /*      ONE */\r\n    public static inline var DST_COLOR                      = 0x0306;\r\n    public static inline var ONE_MINUS_DST_COLOR            = 0x0307;\r\n    public static inline var SRC_ALPHA_SATURATE             = 0x0308;\r\n    /*      SRC_ALPHA */\r\n    /*      ONE_MINUS_SRC_ALPHA */\r\n    /*      DST_ALPHA */\r\n    /*      ONE_MINUS_DST_ALPHA */\r\n\r\n    /* BlendEquationSeparate */\r\n    public static inline var FUNC_ADD                       = 0x8006;\r\n    public static inline var BLEND_EQUATION                 = 0x8009;\r\n    public static inline var BLEND_EQUATION_RGB             = 0x8009;   /* same as BLEND_EQUATION */\r\n    public static inline var BLEND_EQUATION_ALPHA           = 0x883D;\r\n\r\n    /* BlendSubtract */\r\n    public static inline var FUNC_SUBTRACT                  = 0x800A;\r\n    public static inline var FUNC_REVERSE_SUBTRACT          = 0x800B;\r\n\r\n    /* Separate Blend Functions */\r\n    public static inline var BLEND_DST_RGB                  = 0x80C8;\r\n    public static inline var BLEND_SRC_RGB                  = 0x80C9;\r\n    public static inline var BLEND_DST_ALPHA                = 0x80CA;\r\n    public static inline var BLEND_SRC_ALPHA                = 0x80CB;\r\n    public static inline var CONSTANT_COLOR                 = 0x8001;\r\n    public static inline var ONE_MINUS_CONSTANT_COLOR       = 0x8002;\r\n    public static inline var CONSTANT_ALPHA                 = 0x8003;\r\n    public static inline var ONE_MINUS_CONSTANT_ALPHA       = 0x8004;\r\n    public static inline var BLEND_COLOR                    = 0x8005;\r\n\r\n    /* GLBuffer Objects */\r\n    public static inline var ARRAY_BUFFER                   = 0x8892;\r\n    public static inline var ELEMENT_ARRAY_BUFFER           = 0x8893;\r\n    public static inline var ARRAY_BUFFER_BINDING           = 0x8894;\r\n    public static inline var ELEMENT_ARRAY_BUFFER_BINDING   = 0x8895;\r\n\r\n    public static inline var STREAM_DRAW                    = 0x88E0;\r\n    public static inline var STATIC_DRAW                    = 0x88E4;\r\n    public static inline var DYNAMIC_DRAW                   = 0x88E8;\r\n\r\n    public static inline var BUFFER_SIZE                    = 0x8764;\r\n    public static inline var BUFFER_USAGE                   = 0x8765;\r\n\r\n    public static inline var CURRENT_VERTEX_ATTRIB          = 0x8626;\r\n\r\n    /* CullFaceMode */\r\n    public static inline var FRONT                          = 0x0404;\r\n    public static inline var BACK                           = 0x0405;\r\n    public static inline var FRONT_AND_BACK                 = 0x0408;\r\n\r\n    /* DepthFunction */\r\n    /*      NEVER */\r\n    /*      LESS */\r\n    /*      EQUAL */\r\n    /*      LEQUAL */\r\n    /*      GREATER */\r\n    /*      NOTEQUAL */\r\n    /*      GEQUAL */\r\n    /*      ALWAYS */\r\n\r\n    /* EnableCap */\r\n    /* TEXTURE_2D */\r\n    public static inline var CULL_FACE                      = 0x0B44;\r\n    public static inline var BLEND                          = 0x0BE2;\r\n    public static inline var DITHER                         = 0x0BD0;\r\n    public static inline var STENCIL_TEST                   = 0x0B90;\r\n    public static inline var DEPTH_TEST                     = 0x0B71;\r\n    public static inline var SCISSOR_TEST                   = 0x0C11;\r\n    public static inline var POLYGON_OFFSET_FILL            = 0x8037;\r\n    public static inline var SAMPLE_ALPHA_TO_COVERAGE       = 0x809E;\r\n    public static inline var SAMPLE_COVERAGE                = 0x80A0;\r\n\r\n    /* ErrorCode */\r\n    public static inline var NO_ERROR                       = 0;\r\n    public static inline var INVALID_ENUM                   = 0x0500;\r\n    public static inline var INVALID_VALUE                  = 0x0501;\r\n    public static inline var INVALID_OPERATION              = 0x0502;\r\n    public static inline var OUT_OF_MEMORY                  = 0x0505;\r\n\r\n    /* FrontFaceDirection */\r\n    public static inline var CW                             = 0x0900;\r\n    public static inline var CCW                            = 0x0901;\r\n\r\n    /* GetPName */\r\n    public static inline var LINE_WIDTH                     = 0x0B21;\r\n    public static inline var ALIASED_POINT_SIZE_RANGE       = 0x846D;\r\n    public static inline var ALIASED_LINE_WIDTH_RANGE       = 0x846E;\r\n    public static inline var CULL_FACE_MODE                 = 0x0B45;\r\n    public static inline var FRONT_FACE                     = 0x0B46;\r\n    public static inline var DEPTH_RANGE                    = 0x0B70;\r\n    public static inline var DEPTH_WRITEMASK                = 0x0B72;\r\n    public static inline var DEPTH_CLEAR_VALUE              = 0x0B73;\r\n    public static inline var DEPTH_FUNC                     = 0x0B74;\r\n    public static inline var STENCIL_CLEAR_VALUE            = 0x0B91;\r\n    public static inline var STENCIL_FUNC                   = 0x0B92;\r\n    public static inline var STENCIL_FAIL                   = 0x0B94;\r\n    public static inline var STENCIL_PASS_DEPTH_FAIL        = 0x0B95;\r\n    public static inline var STENCIL_PASS_DEPTH_PASS        = 0x0B96;\r\n    public static inline var STENCIL_REF                    = 0x0B97;\r\n    public static inline var STENCIL_VALUE_MASK             = 0x0B93;\r\n    public static inline var STENCIL_WRITEMASK              = 0x0B98;\r\n    public static inline var STENCIL_BACK_FUNC              = 0x8800;\r\n    public static inline var STENCIL_BACK_FAIL              = 0x8801;\r\n    public static inline var STENCIL_BACK_PASS_DEPTH_FAIL   = 0x8802;\r\n    public static inline var STENCIL_BACK_PASS_DEPTH_PASS   = 0x8803;\r\n    public static inline var STENCIL_BACK_REF               = 0x8CA3;\r\n    public static inline var STENCIL_BACK_VALUE_MASK        = 0x8CA4;\r\n    public static inline var STENCIL_BACK_WRITEMASK         = 0x8CA5;\r\n    public static inline var VIEWPORT                       = 0x0BA2;\r\n    public static inline var SCISSOR_BOX                    = 0x0C10;\r\n    /*      SCISSOR_TEST */\r\n    public static inline var COLOR_CLEAR_VALUE              = 0x0C22;\r\n    public static inline var COLOR_WRITEMASK                = 0x0C23;\r\n    public static inline var UNPACK_ALIGNMENT               = 0x0CF5;\r\n    public static inline var PACK_ALIGNMENT                 = 0x0D05;\r\n    public static inline var MAX_TEXTURE_SIZE               = 0x0D33;\r\n    public static inline var MAX_VIEWPORT_DIMS              = 0x0D3A;\r\n    public static inline var SUBPIXEL_BITS                  = 0x0D50;\r\n    public static inline var RED_BITS                       = 0x0D52;\r\n    public static inline var GREEN_BITS                     = 0x0D53;\r\n    public static inline var BLUE_BITS                      = 0x0D54;\r\n    public static inline var ALPHA_BITS                     = 0x0D55;\r\n    public static inline var DEPTH_BITS                     = 0x0D56;\r\n    public static inline var STENCIL_BITS                   = 0x0D57;\r\n    public static inline var POLYGON_OFFSET_UNITS           = 0x2A00;\r\n    /*      POLYGON_OFFSET_FILL */\r\n    public static inline var POLYGON_OFFSET_FACTOR          = 0x8038;\r\n    public static inline var TEXTURE_BINDING_2D             = 0x8069;\r\n    public static inline var SAMPLE_BUFFERS                 = 0x80A8;\r\n    public static inline var SAMPLES                        = 0x80A9;\r\n    public static inline var SAMPLE_COVERAGE_VALUE          = 0x80AA;\r\n    public static inline var SAMPLE_COVERAGE_INVERT         = 0x80AB;\r\n\r\n    /* GetTextureParameter */\r\n    /*      TEXTURE_MAG_FILTER */\r\n    /*      TEXTURE_MIN_FILTER */\r\n    /*      TEXTURE_WRAP_S */\r\n    /*      TEXTURE_WRAP_T */\r\n\r\n    public static inline var COMPRESSED_TEXTURE_FORMATS     = 0x86A3;\r\n\r\n    /* HintMode */\r\n    public static inline var DONT_CARE                      = 0x1100;\r\n    public static inline var FASTEST                        = 0x1101;\r\n    public static inline var NICEST                         = 0x1102;\r\n\r\n    /* HintTarget */\r\n    public static inline var GENERATE_MIPMAP_HINT            = 0x8192;\r\n\r\n    /* DataType */\r\n    public static inline var BYTE                           = 0x1400;\r\n    public static inline var UNSIGNED_BYTE                  = 0x1401;\r\n    public static inline var SHORT                          = 0x1402;\r\n    public static inline var UNSIGNED_SHORT                 = 0x1403;\r\n    public static inline var INT                            = 0x1404;\r\n    public static inline var UNSIGNED_INT                   = 0x1405;\r\n    public static inline var FLOAT                          = 0x1406;\r\n\r\n    /* PixelFormat */\r\n    public static inline var DEPTH_COMPONENT                = 0x1902;\r\n    public static inline var ALPHA                          = 0x1906;\r\n    public static inline var RGB                            = 0x1907;\r\n    public static inline var RGBA                           = 0x1908;\r\n    public static inline var LUMINANCE                      = 0x1909;\r\n    public static inline var LUMINANCE_ALPHA                = 0x190A;\r\n\r\n    /* PixelType */\r\n    /*      UNSIGNED_BYTE */\r\n    public static inline var UNSIGNED_SHORT_4_4_4_4         = 0x8033;\r\n    public static inline var UNSIGNED_SHORT_5_5_5_1         = 0x8034;\r\n    public static inline var UNSIGNED_SHORT_5_6_5           = 0x8363;\r\n\r\n    /* Shaders */\r\n    public static inline var FRAGMENT_SHADER                  = 0x8B30;\r\n    public static inline var VERTEX_SHADER                    = 0x8B31;\r\n    public static inline var MAX_VERTEX_ATTRIBS               = 0x8869;\r\n    public static inline var MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB;\r\n    public static inline var MAX_VARYING_VECTORS              = 0x8DFC;\r\n    public static inline var MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\r\n    public static inline var MAX_VERTEX_TEXTURE_IMAGE_UNITS   = 0x8B4C;\r\n    public static inline var MAX_TEXTURE_IMAGE_UNITS          = 0x8872;\r\n    public static inline var MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD;\r\n    public static inline var SHADER_TYPE                      = 0x8B4F;\r\n    public static inline var DELETE_STATUS                    = 0x8B80;\r\n    public static inline var LINK_STATUS                      = 0x8B82;\r\n    public static inline var VALIDATE_STATUS                  = 0x8B83;\r\n    public static inline var ATTACHED_SHADERS                 = 0x8B85;\r\n    public static inline var ACTIVE_UNIFORMS                  = 0x8B86;\r\n    public static inline var ACTIVE_ATTRIBUTES                = 0x8B89;\r\n    public static inline var SHADING_LANGUAGE_VERSION         = 0x8B8C;\r\n    public static inline var CURRENT_PROGRAM                  = 0x8B8D;\r\n\r\n    /* StencilFunction */\r\n    public static inline var NEVER                          = 0x0200;\r\n    public static inline var LESS                           = 0x0201;\r\n    public static inline var EQUAL                          = 0x0202;\r\n    public static inline var LEQUAL                         = 0x0203;\r\n    public static inline var GREATER                        = 0x0204;\r\n    public static inline var NOTEQUAL                       = 0x0205;\r\n    public static inline var GEQUAL                         = 0x0206;\r\n    public static inline var ALWAYS                         = 0x0207;\r\n\r\n    /* StencilOp */\r\n    /*      ZERO */\r\n    public static inline var KEEP                           = 0x1E00;\r\n    public static inline var REPLACE                        = 0x1E01;\r\n    public static inline var INCR                           = 0x1E02;\r\n    public static inline var DECR                           = 0x1E03;\r\n    public static inline var INVERT                         = 0x150A;\r\n    public static inline var INCR_WRAP                      = 0x8507;\r\n    public static inline var DECR_WRAP                      = 0x8508;\r\n\r\n    /* StringName */\r\n    public static inline var VENDOR                         = 0x1F00;\r\n    public static inline var RENDERER                       = 0x1F01;\r\n    public static inline var VERSION                        = 0x1F02;\r\n\r\n    /* TextureMagFilter */\r\n    public static inline var NEAREST                        = 0x2600;\r\n    public static inline var LINEAR                         = 0x2601;\r\n\r\n    /* TextureMinFilter */\r\n    /*      NEAREST */\r\n    /*      LINEAR */\r\n    public static inline var NEAREST_MIPMAP_NEAREST         = 0x2700;\r\n    public static inline var LINEAR_MIPMAP_NEAREST          = 0x2701;\r\n    public static inline var NEAREST_MIPMAP_LINEAR          = 0x2702;\r\n    public static inline var LINEAR_MIPMAP_LINEAR           = 0x2703;\r\n\r\n    /* TextureParameterName */\r\n    public static inline var TEXTURE_MAG_FILTER             = 0x2800;\r\n    public static inline var TEXTURE_MIN_FILTER             = 0x2801;\r\n    public static inline var TEXTURE_WRAP_S                 = 0x2802;\r\n    public static inline var TEXTURE_WRAP_T                 = 0x2803;\r\n\r\n    /* TextureTarget */\r\n    public static inline var TEXTURE_2D                     = 0x0DE1;\r\n    public static inline var TEXTURE                        = 0x1702;\r\n\r\n    public static inline var TEXTURE_CUBE_MAP               = 0x8513;\r\n    public static inline var TEXTURE_BINDING_CUBE_MAP       = 0x8514;\r\n    public static inline var TEXTURE_CUBE_MAP_POSITIVE_X    = 0x8515;\r\n    public static inline var TEXTURE_CUBE_MAP_NEGATIVE_X    = 0x8516;\r\n    public static inline var TEXTURE_CUBE_MAP_POSITIVE_Y    = 0x8517;\r\n    public static inline var TEXTURE_CUBE_MAP_NEGATIVE_Y    = 0x8518;\r\n    public static inline var TEXTURE_CUBE_MAP_POSITIVE_Z    = 0x8519;\r\n    public static inline var TEXTURE_CUBE_MAP_NEGATIVE_Z    = 0x851A;\r\n    public static inline var MAX_CUBE_MAP_TEXTURE_SIZE      = 0x851C;\r\n\r\n    /* TextureUnit */\r\n    public static inline var TEXTURE0                       = 0x84C0;\r\n    public static inline var TEXTURE1                       = 0x84C1;\r\n    public static inline var TEXTURE2                       = 0x84C2;\r\n    public static inline var TEXTURE3                       = 0x84C3;\r\n    public static inline var TEXTURE4                       = 0x84C4;\r\n    public static inline var TEXTURE5                       = 0x84C5;\r\n    public static inline var TEXTURE6                       = 0x84C6;\r\n    public static inline var TEXTURE7                       = 0x84C7;\r\n    public static inline var TEXTURE8                       = 0x84C8;\r\n    public static inline var TEXTURE9                       = 0x84C9;\r\n    public static inline var TEXTURE10                      = 0x84CA;\r\n    public static inline var TEXTURE11                      = 0x84CB;\r\n    public static inline var TEXTURE12                      = 0x84CC;\r\n    public static inline var TEXTURE13                      = 0x84CD;\r\n    public static inline var TEXTURE14                      = 0x84CE;\r\n    public static inline var TEXTURE15                      = 0x84CF;\r\n    public static inline var TEXTURE16                      = 0x84D0;\r\n    public static inline var TEXTURE17                      = 0x84D1;\r\n    public static inline var TEXTURE18                      = 0x84D2;\r\n    public static inline var TEXTURE19                      = 0x84D3;\r\n    public static inline var TEXTURE20                      = 0x84D4;\r\n    public static inline var TEXTURE21                      = 0x84D5;\r\n    public static inline var TEXTURE22                      = 0x84D6;\r\n    public static inline var TEXTURE23                      = 0x84D7;\r\n    public static inline var TEXTURE24                      = 0x84D8;\r\n    public static inline var TEXTURE25                      = 0x84D9;\r\n    public static inline var TEXTURE26                      = 0x84DA;\r\n    public static inline var TEXTURE27                      = 0x84DB;\r\n    public static inline var TEXTURE28                      = 0x84DC;\r\n    public static inline var TEXTURE29                      = 0x84DD;\r\n    public static inline var TEXTURE30                      = 0x84DE;\r\n    public static inline var TEXTURE31                      = 0x84DF;\r\n    public static inline var ACTIVE_TEXTURE                 = 0x84E0;\r\n\r\n    /* TextureWrapMode */\r\n    public static inline var REPEAT                         = 0x2901;\r\n    public static inline var CLAMP_TO_EDGE                  = 0x812F;\r\n    public static inline var MIRRORED_REPEAT                = 0x8370;\r\n\r\n    /* Uniform Types */\r\n    public static inline var FLOAT_VEC2                     = 0x8B50;\r\n    public static inline var FLOAT_VEC3                     = 0x8B51;\r\n    public static inline var FLOAT_VEC4                     = 0x8B52;\r\n    public static inline var INT_VEC2                       = 0x8B53;\r\n    public static inline var INT_VEC3                       = 0x8B54;\r\n    public static inline var INT_VEC4                       = 0x8B55;\r\n    public static inline var BOOL                           = 0x8B56;\r\n    public static inline var BOOL_VEC2                      = 0x8B57;\r\n    public static inline var BOOL_VEC3                      = 0x8B58;\r\n    public static inline var BOOL_VEC4                      = 0x8B59;\r\n    public static inline var FLOAT_MAT2                     = 0x8B5A;\r\n    public static inline var FLOAT_MAT3                     = 0x8B5B;\r\n    public static inline var FLOAT_MAT4                     = 0x8B5C;\r\n    public static inline var SAMPLER_2D                     = 0x8B5E;\r\n    public static inline var SAMPLER_CUBE                   = 0x8B60;\r\n\r\n    /* Vertex Arrays */\r\n    public static inline var VERTEX_ATTRIB_ARRAY_ENABLED        = 0x8622;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_SIZE           = 0x8623;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_STRIDE         = 0x8624;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_TYPE           = 0x8625;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_NORMALIZED     = 0x886A;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_POINTER        = 0x8645;\r\n    public static inline var VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\r\n\r\n    /* Point Size */\r\n    public static inline var VERTEX_PROGRAM_POINT_SIZE       = 0x8642;\r\n    public static inline var POINT_SPRITE                    = 0x8861;\r\n\r\n    /* GLShader Source */\r\n    public static inline var COMPILE_STATUS                 = 0x8B81;\r\n\r\n    /* GLShader Precision-Specified Types */\r\n    public static inline var LOW_FLOAT                      = 0x8DF0;\r\n    public static inline var MEDIUM_FLOAT                   = 0x8DF1;\r\n    public static inline var HIGH_FLOAT                     = 0x8DF2;\r\n    public static inline var LOW_INT                        = 0x8DF3;\r\n    public static inline var MEDIUM_INT                     = 0x8DF4;\r\n    public static inline var HIGH_INT                       = 0x8DF5;\r\n\r\n    /* GLFramebuffer Object. */\r\n    public static inline var FRAMEBUFFER                    = 0x8D40;\r\n    public static inline var RENDERBUFFER                   = 0x8D41;\r\n\r\n    public static inline var RGBA4                          = 0x8056;\r\n    public static inline var RGB5_A1                        = 0x8057;\r\n    public static inline var RGB565                         = 0x8D62;\r\n    public static inline var DEPTH_COMPONENT16              = 0x81A5;\r\n    public static inline var STENCIL_INDEX                  = 0x1901;\r\n    public static inline var STENCIL_INDEX8                 = 0x8D48;\r\n    public static inline var DEPTH_STENCIL                  = 0x84F9;\r\n\r\n    public static inline var RENDERBUFFER_WIDTH             = 0x8D42;\r\n    public static inline var RENDERBUFFER_HEIGHT            = 0x8D43;\r\n    public static inline var RENDERBUFFER_INTERNAL_FORMAT   = 0x8D44;\r\n    public static inline var RENDERBUFFER_RED_SIZE          = 0x8D50;\r\n    public static inline var RENDERBUFFER_GREEN_SIZE        = 0x8D51;\r\n    public static inline var RENDERBUFFER_BLUE_SIZE         = 0x8D52;\r\n    public static inline var RENDERBUFFER_ALPHA_SIZE        = 0x8D53;\r\n    public static inline var RENDERBUFFER_DEPTH_SIZE        = 0x8D54;\r\n    public static inline var RENDERBUFFER_STENCIL_SIZE      = 0x8D55;\r\n\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = 0x8CD0;\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_OBJECT_NAME           = 0x8CD1;\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL         = 0x8CD2;\r\n    public static inline var FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\r\n\r\n    public static inline var COLOR_ATTACHMENT0              = 0x8CE0;\r\n    public static inline var DEPTH_ATTACHMENT               = 0x8D00;\r\n    public static inline var STENCIL_ATTACHMENT             = 0x8D20;\r\n    public static inline var DEPTH_STENCIL_ATTACHMENT       = 0x821A;\r\n\r\n    public static inline var NONE                           = 0;\r\n\r\n    public static inline var FRAMEBUFFER_COMPLETE                      = 0x8CD5;\r\n    public static inline var FRAMEBUFFER_INCOMPLETE_ATTACHMENT         = 0x8CD6;\r\n    public static inline var FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\r\n    public static inline var FRAMEBUFFER_INCOMPLETE_DIMENSIONS         = 0x8CD9;\r\n    public static inline var FRAMEBUFFER_UNSUPPORTED                   = 0x8CDD;\r\n\r\n    public static inline var FRAMEBUFFER_BINDING            = 0x8CA6;\r\n    public static inline var RENDERBUFFER_BINDING           = 0x8CA7;\r\n    public static inline var MAX_RENDERBUFFER_SIZE          = 0x84E8;\r\n\r\n    public static inline var INVALID_FRAMEBUFFER_OPERATION  = 0x0506;\r\n\r\n    /* WebGL-specific enums */\r\n    public static inline var UNPACK_FLIP_Y_WEBGL            = 0x9240;\r\n    public static inline var UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\r\n    public static inline var CONTEXT_LOST_WEBGL             = 0x9242;\r\n    public static inline var UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\r\n    public static inline var BROWSER_DEFAULT_WEBGL          = 0x9244;\r\n\r\n\r\n\r\n}\r\n\r\n#end //snow_web\r\n","package snow.modules.webaudio;\r\n\r\n#if js\r\n\r\nimport snow.api.Debug.*;\r\nimport snow.types.Types;\r\nimport snow.api.Promise;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.buffers.Float32Array;\r\nimport snow.systems.audio.AudioSource;\r\nimport snow.systems.audio.AudioInstance;\r\n\r\nprivate typedef WebSound = {\r\n    source: AudioSource,\r\n    handle: AudioHandle,\r\n    instance: AudioInstance,\r\n\r\n    buffer_node: js.html.audio.AudioBufferSourceNode,\r\n    media_node: js.html.audio.MediaElementAudioSourceNode,\r\n    media_elem: js.html.Audio,\r\n\r\n    gain_node: js.html.audio.GainNode,\r\n    pan_node: js.html.audio.PannerNode,\r\n\r\n    state: AudioState,\r\n    loop: Bool,\r\n    pan: Float,\r\n    time_start: Float,\r\n    ?time_pause: Float,\r\n}\r\n\r\n@:allow(snow.modules.webaudio)\r\n@:allow(snow.systems.audio.Audio)\r\nclass Audio implements snow.modules.interfaces.Audio {\r\n\r\n    var handle_seq = 0;\r\n\r\n    var instances: Map<AudioHandle, WebSound>;\r\n    var buffers: Map<AudioSource, js.html.audio.AudioBuffer>;\r\n\r\n    var context: js.html.audio.AudioContext;\r\n\r\n    static inline var half_pi : Float = 1.5707;\r\n\r\n    var app: snow.Snow;\r\n    var active: Bool = false;\r\n\r\n    function new(_app:snow.Snow) {\r\n\r\n        app = _app;\r\n        instances = new Map();\r\n\r\n        try {\r\n            context = new js.html.audio.AudioContext();\r\n        } catch(err:Dynamic) {\r\n            try {\r\n                context = untyped __js__('new window.webkitAudioContext()');\r\n            } catch(err:Dynamic) {\r\n                log('WebAudio: no AudioContext could be created! No audio loading or playback will be available.');\r\n                return;\r\n            }\r\n        }\r\n\r\n        assertnull(context, 'Audio / webaudio / no AudioContext could be created, is the Web Audio API supported?');\r\n\r\n        var info =\r\n            'channelCount: ${context.destination.channelCount}, ' +\r\n            'channelCountMode: \"${context.destination.channelCountMode}\", ' +\r\n            'channelInterpretation: \"${context.destination.channelInterpretation}\", ' +\r\n            'maxChannelCount: ${context.destination.maxChannelCount}, ' +\r\n            'numberOfInputs: ${context.destination.numberOfInputs}, ' +\r\n            'numberOfOutputs: ${context.destination.numberOfOutputs}';\r\n\r\n        log('webaudio: $context / sampleRate: ${context.sampleRate} / destination: $info');\r\n\r\n        active = true;\r\n\r\n    } //new\r\n\r\n    function shutdown():Void {\r\n\r\n            //:todo: haxe js.html.audio.AudioContext api lacks suspend property\r\n        untyped context.close();\r\n\r\n    } //shutdown\r\n\r\n    function onevent(event:SystemEvent):Void {\r\n\r\n    } //onevent\r\n\r\n    inline function snd_of(_handle:AudioHandle) : WebSound {\r\n\r\n        return instances.get(_handle);\r\n\r\n    } //snd_of\r\n\r\n    function play_buffer(_data:AudioDataWebAudio) : js.html.audio.AudioBufferSourceNode {\r\n\r\n        var _node = context.createBufferSource();\r\n            _node.buffer = _data.buffer;\r\n\r\n        return _node;\r\n\r\n    } //play_buffer\r\n\r\n    function play_buffer_again(_handle:AudioHandle, _snd:WebSound, _start_time:Float) {\r\n\r\n        _snd.buffer_node = play_buffer(cast _snd.source.data);\r\n        _snd.buffer_node.connect(_snd.pan_node);\r\n        _snd.buffer_node.loop = _snd.loop;\r\n        _snd.pan_node.connect(_snd.gain_node);\r\n        _snd.gain_node.connect(context.destination);\r\n        _snd.buffer_node.start(0, _start_time);\r\n        _snd.buffer_node.onended = destroy_snd.bind(_snd);\r\n\r\n    } //play_buffer_again\r\n\r\n    function play_instance(\r\n        _handle:AudioHandle,\r\n        _source:AudioSource,\r\n        _inst:AudioInstance,\r\n        _data:AudioDataWebAudio,\r\n        _buffer_node:js.html.audio.AudioBufferSourceNode,\r\n        _volume:Float,\r\n        _loop:Bool\r\n    ) {\r\n\r\n        var _gain = context.createGain();\r\n        var _pan = context.createPanner();\r\n        var _node: js.html.audio.AudioNode = null;\r\n        var _pan_val = 0;\r\n\r\n        _gain.gain.value = _volume;\r\n        _pan.panningModel = js.html.audio.PanningModelType.EQUALPOWER;\r\n        _pan.setPosition(Math.cos(-1 * half_pi), 0, Math.sin(1 * half_pi));\r\n\r\n        if(_buffer_node != null) {\r\n            _node = _buffer_node;\r\n            _buffer_node.loop = _loop;\r\n        }\r\n\r\n        if(_data.media_node != null) {\r\n            _node = _data.media_node;\r\n            _data.media_elem.loop = _loop;\r\n        }\r\n\r\n            //source -> pan -> gain -> output\r\n        _node.connect(_pan);\r\n        _pan.connect(_gain);\r\n        _gain.connect(context.destination);\r\n\r\n        var _snd : WebSound = {\r\n            handle      : _handle,\r\n            source      : _source,\r\n            instance    : _inst,\r\n\r\n            buffer_node : _buffer_node,\r\n            media_node  : _data.media_node,\r\n            media_elem  : _data.media_elem,\r\n            gain_node   : _gain,\r\n            pan_node    : _pan,\r\n\r\n            state       : as_playing,\r\n            time_start  : app.time,\r\n            loop        : _loop,\r\n            pan         : 0\r\n        };\r\n\r\n        instances.set(_handle, _snd);\r\n\r\n        //:todo: handle _paused flag, also why is there a paused flag? \r\n        //when do you ever want to call play with paused as true?\r\n\r\n        if(_buffer_node != null) {\r\n            _buffer_node.start(0);\r\n            _buffer_node.onended = destroy_snd.bind(_snd);\r\n        }\r\n\r\n        if(_data.media_node != null) {\r\n\r\n            _data.media_elem.play();\r\n                //:todo: looping audio element ended event\r\n            _data.media_node.addEventListener('ended', function() {\r\n                app.audio.emit(ae_end, _handle);\r\n                _snd.state = as_stopped;\r\n            });\r\n\r\n        } //media node\r\n\r\n    }\r\n\r\n    public function play(_source:AudioSource, _volume:Float, _paused:Bool) : AudioHandle {\r\n\r\n        var _data:AudioDataWebAudio = cast _source.data;\r\n        var _handle = handle_seq;\r\n        var _inst = _source.instance(_handle);\r\n\r\n        if(_source.data.is_stream) {\r\n            _data.media_elem.play();\r\n            _data.media_elem.volume = 1.0;\r\n            play_instance(_handle, _source, _inst, _data, null, _volume, false);\r\n        } else {\r\n            play_instance(_handle, _source, _inst, _data, play_buffer(_data), _volume, false);\r\n        }\r\n\r\n        handle_seq++;\r\n\r\n        return _handle;\r\n\r\n    } //play\r\n\r\n    public function loop(_source:AudioSource, _volume:Float, _paused:Bool) : AudioHandle {\r\n\r\n        var _data:AudioDataWebAudio = cast _source.data;\r\n        var _handle = handle_seq;\r\n        var _inst = _source.instance(_handle);\r\n\r\n        if(_source.data.is_stream) {\r\n            _data.media_elem.play();\r\n            _data.media_elem.volume = 1.0;\r\n            play_instance(_handle, _source, _inst, _data, null, _volume, true);\r\n        } else {\r\n            play_instance(_handle, _source, _inst, _data, play_buffer(_data), _volume, true);\r\n        }\r\n\r\n        handle_seq++;\r\n\r\n        return _handle;\r\n\r\n    } //loop\r\n\r\n    function stop_buffer(_snd:WebSound) {\r\n        _snd.buffer_node.stop();\r\n        _snd.buffer_node.disconnect();\r\n        _snd.gain_node.disconnect();\r\n        _snd.pan_node.disconnect();\r\n        _snd.buffer_node = null;\r\n    }\r\n\r\n    public function pause(_handle:AudioHandle) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n\r\n        _debug('pause handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        _snd.time_pause = app.time - _snd.time_start;\r\n        _snd.state = as_paused;\r\n\r\n        if(_snd.buffer_node != null) {\r\n            stop_buffer(_snd);\r\n        } else if(_snd.media_node != null) {\r\n            _snd.media_elem.pause();\r\n        }\r\n\r\n    } //pause\r\n\r\n    public function unpause(_handle:AudioHandle) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n        if(_snd.state != as_paused) return;\r\n\r\n        _debug('unpause handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        if(_snd.media_node == null) {\r\n            play_buffer_again(_handle, _snd, _snd.time_pause);\r\n        } else {\r\n            _snd.media_elem.play();\r\n        }\r\n\r\n        _snd.state = as_playing;\r\n\r\n    } //unpause\r\n\r\n    inline function destroy_snd(_snd:WebSound) {\r\n\r\n        if(_snd.buffer_node != null) {\r\n            _snd.buffer_node.stop();\r\n            _snd.buffer_node.disconnect();\r\n            _snd.buffer_node = null;\r\n        }\r\n\r\n        if(_snd.media_node != null) {\r\n            _snd.media_elem.pause();\r\n            _snd.media_elem.currentTime = 0;\r\n            _snd.media_node.disconnect();\r\n            _snd.media_elem = null;\r\n            _snd.media_node = null;\r\n        }\r\n\r\n        if(_snd.gain_node != null) {\r\n            _snd.gain_node.disconnect();\r\n            _snd.gain_node = null;\r\n        } \r\n\r\n        if(_snd.pan_node != null) {\r\n            _snd.pan_node.disconnect();\r\n            _snd.pan_node = null;\r\n        }\r\n\r\n        instances.remove(_snd.handle);\r\n        _snd = null;\r\n\r\n    } //destroy_snd\r\n\r\n    public function stop(_handle:AudioHandle) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n\r\n        _debug('stop handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        destroy_snd(_snd);\r\n\r\n        _snd.state = as_stopped;\r\n\r\n    } //stop\r\n\r\n\r\n    public function volume(_handle:AudioHandle, _volume:Float) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n\r\n        _debug('volume=$_volume handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        _snd.gain_node.gain.value = _volume;\r\n\r\n    } //volume\r\n\r\n    public function pan(_handle:AudioHandle, _pan:Float) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n\r\n        _debug('pan=$_pan handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        _snd.pan = _pan;\r\n        _snd.pan_node.setPosition( Math.cos( (_pan-1)*half_pi ),   0,   Math.sin( (_pan+1)*half_pi ) );\r\n\r\n    } //pan\r\n\r\n    public function pitch(_handle:AudioHandle, _pitch:Float) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n\r\n        _debug('pitch=$_pitch handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        if(_snd.buffer_node != null) {\r\n            _snd.buffer_node.playbackRate.value = _pitch;\r\n        } else if(_snd.media_node != null) {\r\n            _snd.media_elem.playbackRate = _pitch;\r\n        }\r\n\r\n    } //pitch\r\n\r\n    public function position(_handle:AudioHandle, _time:Float) : Void {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return;\r\n\r\n        _debug('position=_time handle=$_handle, ' + _snd.source.data.id);\r\n\r\n        if(_snd.buffer_node != null) {\r\n            stop_buffer(_snd);\r\n            play_buffer_again(_handle, _snd, _time);\r\n        } else {\r\n            _snd.media_elem.currentTime = _time;\r\n        }\r\n\r\n    } //position\r\n\r\n\r\n    public function volume_of(_handle:AudioHandle) : Float {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return 0.0;\r\n\r\n        return _snd.gain_node.gain.value;\r\n\r\n    } //volume_of\r\n\r\n    public function pan_of(_handle:AudioHandle) : Float {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return 0.0;\r\n\r\n        return _snd.pan;\r\n\r\n    } //pan_of\r\n\r\n    public function pitch_of(_handle:AudioHandle) : Float {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return 0.0;\r\n\r\n        var _result = 1.0;\r\n\r\n        if(_snd.buffer_node != null) {\r\n            _result = _snd.buffer_node.playbackRate.value;\r\n        } else if(_snd.media_node != null) {\r\n            _result = _snd.media_elem.playbackRate;\r\n        }\r\n\r\n        return _result;\r\n\r\n    } //pitch_of\r\n\r\n    public function position_of(_handle:AudioHandle) : Float {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return 0.0;\r\n\r\n        //:todo: web audio position_of\r\n\r\n        return 0.0;\r\n\r\n    } //position_of\r\n\r\n    public function state_of(_handle:AudioHandle) : AudioState {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return as_invalid;\r\n\r\n        return _snd.state;\r\n\r\n    } //state_of\r\n\r\n    public function loop_of(_handle:AudioHandle) : Bool {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return false;\r\n\r\n        return _snd.loop;\r\n\r\n    } //loop_of\r\n\r\n    public function instance_of(_handle:AudioHandle) : AudioInstance {\r\n\r\n        var _snd = snd_of(_handle);\r\n        if(_snd == null) return null;\r\n\r\n        return _snd.instance;\r\n\r\n    } //instance_of\r\n\r\n\r\n    public function suspend():Void {\r\n\r\n            //:todo: haxe js.html.audio.AudioContext api lacks suspend property\r\n        untyped context.suspend();\r\n\r\n    } //suspend\r\n\r\n    public function resume():Void {\r\n\r\n            //:todo: haxe js.html.audio.AudioContext api lacks resume property\r\n        untyped context.resume();\r\n\r\n    } //resume\r\n\r\n//Data API\r\n\r\n    public function data_from_load(_path:String, ?_is_stream:Bool=false, ?_format:AudioFormatType) : Promise {\r\n\r\n        if(!active) return Promise.reject('WebAudio context unavailable');\r\n\r\n        if(_format == null) _format = snow.core.Audio.audio_format_from_path(_path);\r\n\r\n        if(_is_stream) {\r\n            return data_from_load_stream(_path, _format);\r\n        }\r\n\r\n        return data_from_load_sound(_path, _format);\r\n\r\n    } //data_from_load\r\n\r\n    public function data_from_bytes(_id:String, _bytes:Uint8Array, ?_format:AudioFormatType) : Promise {\r\n\r\n        if(!active) return Promise.reject('WebAudio context unavailable');\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            data_from_bytes_direct(_id, _bytes, _format, resolve, reject);\r\n\r\n        }); //Promise\r\n\r\n    } //data_from_bytes\r\n\r\n    //Internal helpers\r\n\r\n        function data_from_bytes_direct(_id:String, _bytes:Uint8Array, _format:AudioFormatType, resolve:AudioDataWebAudio->Void, reject:Dynamic->Void) {\r\n\r\n            context.decodeAudioData(_bytes.buffer, function(_buffer:js.html.audio.AudioBuffer) {\r\n\r\n                var _data = new AudioDataWebAudio(app, _buffer, {\r\n                    id         : _id,\r\n                    is_stream  : false,\r\n                    format     : _format,\r\n                    samples    : null,\r\n                    length     : _buffer.length,\r\n                    channels   : _buffer.numberOfChannels,\r\n                    rate       : Std.int(_buffer.sampleRate)\r\n                });\r\n\r\n                return resolve(_data);\r\n\r\n            }, function() {\r\n\r\n                return reject('failed to decode audio for `$_id`');\r\n\r\n            }); //error\r\n\r\n        } //data_from_bytes_direct\r\n\r\n        function data_from_load_sound(_path:String, _format:AudioFormatType) {\r\n\r\n            return new Promise(function(resolve,reject) {\r\n\r\n                var _load = app.io.data_load(_path);\r\n\r\n                _load.then(function(_bytes:Uint8Array) {\r\n\r\n                    data_from_bytes_direct(_path, _bytes, _format, resolve, reject);\r\n\r\n                }); //load\r\n\r\n            }); //Promise\r\n\r\n        } //data_from_load_sound\r\n\r\n        function data_from_load_stream(_path:String, _format:AudioFormatType) : Promise {\r\n\r\n            return new Promise(function(resolve, reject) {\r\n\r\n                //create audio element\r\n                var _element = new js.html.Audio(_path);\r\n                    _element.autoplay = false;\r\n                    _element.controls = false;\r\n                    _element.preload = 'auto';\r\n\r\n                _element.onerror = function(err) {\r\n\r\n                    var _error = switch(_element.error.code) {\r\n                        case 1: 'MEDIA_ERR_ABORTED';\r\n                        case 2: 'MEDIA_ERR_NETWORK';\r\n                        case 3: 'MEDIA_ERR_DECODE';\r\n                        case 4: 'MEDIA_ERR_SRC_NOT_SUPPORTED';\r\n                        case 5: 'MEDIA_ERR_ENCRYPTED';\r\n                        case _: 'unknown error';\r\n                    }\r\n\r\n                    return reject('failed to load `$_path` as stream : `$_error`');\r\n\r\n                } //onerror\r\n\r\n                _element.onloadedmetadata = function(_) {\r\n\r\n                    var _node = context.createMediaElementSource(_element);\r\n\r\n                        //Web Audio works with 32 bit IEEE float samples\r\n                    var _bytes_per_sample = 2; //this is for 16, though\r\n                    var _rate = Std.int(context.sampleRate);\r\n                    var _channels = _node.channelCount;\r\n\r\n                    var _sample_frames = _rate * _channels * _bytes_per_sample;\r\n                    var _length = Std.int(_element.duration * _sample_frames);\r\n\r\n                    var _data = new AudioDataWebAudio(app, _node, _element, {\r\n                            id         : _path,\r\n                            is_stream  : true,\r\n                            format     : _format,\r\n                            samples    : null,\r\n                            length     : _length,\r\n                            channels   : _channels,\r\n                            rate       : _rate\r\n                        });\r\n\r\n                    return resolve(_data);\r\n\r\n                } //onloadedmetadata\r\n\r\n            }); //promise\r\n\r\n        } //data_from_load_stream\r\n\r\n\r\n} //Audio\r\n\r\nprivate class AudioDataWebAudio extends AudioData {\r\n\r\n    public var buffer: js.html.audio.AudioBuffer;\r\n    public var media_node: js.html.audio.MediaElementAudioSourceNode;\r\n    public var media_elem: js.html.Audio;\r\n\r\n    inline public function new(\r\n        _app:snow.Snow,\r\n        ?_buffer:js.html.audio.AudioBuffer,\r\n        ?_media_node:js.html.audio.MediaElementAudioSourceNode,\r\n        ?_media_elem:js.html.Audio,\r\n        _opt:AudioDataOptions\r\n    ) {\r\n\r\n        buffer = _buffer;\r\n        media_node = _media_node;\r\n        media_elem = _media_elem;\r\n\r\n        super(_app, _opt);\r\n\r\n    } //new\r\n\r\n    override public function destroy() {\r\n\r\n        buffer = null;\r\n        media_node = null;\r\n        media_elem = null;\r\n\r\n        super.destroy();\r\n\r\n    } //destroy\r\n\r\n} //AudioDataWebAudio\r\n\r\n#end","package snow.types;\r\n\r\nimport snow.api.Debug.*;\r\nimport snow.api.buffers.Uint8Array;\r\n\r\n//Common types\r\n\r\n    //These types include further types we don't want to\r\n    #if !macro\r\n        typedef Asset      = snow.systems.assets.Asset.Asset;\r\n        typedef AssetBytes = snow.systems.assets.Asset.AssetBytes;\r\n        typedef AssetText  = snow.systems.assets.Asset.AssetText;\r\n        typedef AssetJSON  = snow.systems.assets.Asset.AssetJSON;\r\n        typedef AssetImage = snow.systems.assets.Asset.AssetImage;\r\n        typedef AssetAudio = snow.systems.assets.Asset.AssetAudio;\r\n        typedef Key        = snow.systems.input.Keycodes.Keycodes;\r\n        typedef Scan       = snow.systems.input.Keycodes.Scancodes;\r\n    #end\r\n\r\n    enum Error {\r\n        error(value:Dynamic);\r\n        init(value:Dynamic);\r\n        parse(value:Dynamic);\r\n    }\r\n\r\n    /** A platform identifier string */\r\n    @:enum abstract Platform(String)\r\n        from String to String {\r\n\r\n            /** */\r\n        var platform_unknown = 'unknown';\r\n            /** */\r\n        var platform_windows = 'windows';\r\n            /** */\r\n        var platform_mac     = 'mac';\r\n            /** */\r\n        var platform_linux   = 'linux';\r\n            /** */\r\n        var platform_android = 'android';\r\n            /** */\r\n        var platform_ios     = 'ios';\r\n            /** */\r\n        var platform_tvos    = 'tvos';\r\n            /** */\r\n        var platform_web     = 'web';\r\n\r\n    } //Platform\r\n\r\n    /** A platform identifier string */\r\n    @:enum abstract OS(String)\r\n        from String to String {\r\n\r\n            /** */\r\n        var os_unknown = 'unknown';\r\n            /** */\r\n        var os_windows = 'windows';\r\n            /** */\r\n        var os_mac     = 'mac';\r\n            /** */\r\n        var os_linux   = 'linux';\r\n            /** */\r\n        var os_android = 'android';\r\n            /** */\r\n        var os_ios     = 'ios';\r\n\r\n        var os_tvos    = 'tvos';\r\n\r\n    } //OS\r\n\r\n//Init bound types\r\n\r\n    private typedef UserConfigInit     = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"UserConfig\")]>;\r\n    private typedef RuntimeConfigInit  = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"RuntimeConfig\")]>;\r\n    private typedef WindowHandleInit   = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"WindowHandle\")]>;\r\n    private typedef AppHostInit        = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"AppHost\")]>;\r\n    private typedef AppRuntimeInit     = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"AppRuntime\")]>;\r\n    private typedef ModuleIOInit       = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"ModuleIO\")]>;\r\n    private typedef ModuleAudioInit    = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"ModuleAudio\")]>;\r\n    private typedef ModuleAssetsInit   = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"ModuleAssets\")]>;\r\n    #if snow_native\r\n        private typedef FileHandleInit = haxe.macro.MacroType<[snow.types.TypeCreate.build(\"FileHandle\")]>; //:todo: snow_native use\r\n    #end\r\n\r\n//Then define aliases\r\n//Trying to directly alias from the MacroType build call, \r\n//triggers assertions in the compiler with no error message\r\n\r\n    typedef UserConfig      = snow.types.user.UserConfig;\r\n    typedef RuntimeConfig   = snow.types.user.RuntimeConfig;\r\n    typedef WindowHandle    = snow.types.user.WindowHandle;\r\n    typedef AppHost         = snow.types.user.AppHost;\r\n    typedef AppRuntime      = snow.types.user.AppRuntime;\r\n    typedef ModuleIO        = snow.types.user.ModuleIO;\r\n    typedef ModuleAudio     = snow.types.user.ModuleAudio;\r\n    typedef ModuleAssets    = snow.types.user.ModuleAssets;\r\n    #if snow_native\r\n        typedef FileHandle  = snow.types.user.FileHandle;\r\n    #end\r\n\r\n\r\n    @:build(snow.types.TypeCreate.ext())\r\n    private class ExtensionsInit {}\r\n\r\n//Asset types\r\n\r\n    /** A type to identify assets when stored as an Asset */\r\n    @:enum abstract AssetType(Int)\r\n        from Int to Int {\r\n\r\n            /** An unknown asset type */\r\n        var at_unknown = 0;\r\n            /** An asset holding bytes data, as `Uint8Array` */\r\n        var at_bytes   = 1;\r\n            /** An asset holding text data, as `String` */\r\n        var at_text    = 2;\r\n            /** An asset holding JSON data, as `Dynamic` */\r\n        var at_json    = 3;\r\n            /** An asset holding image data, as `ImageData` */\r\n        var at_image   = 4;\r\n            /** An asset holding audio data, as `AudioSource` */\r\n        var at_audio   = 5;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case at_unknown: 'at_unknown';\r\n                case at_bytes:   'at_bytes';\r\n                case at_text:    'at_text';\r\n                case at_json:    'at_json';\r\n                case at_image:   'at_image';\r\n                case at_audio:   'at_audio';\r\n                case _:          '$this';\r\n            }\r\n        } //toString\r\n\r\n    } //AssetType\r\n\r\n    /** Information about an image file/data */\r\n    typedef ImageDataOptions = {\r\n\r\n            /** source asset id */\r\n        var id : String;\r\n            /** image width from source image */\r\n        var width : Int;\r\n            /** image height from source image */\r\n        var height : Int;\r\n            /** The actual width, used when image is automatically padded to POT */\r\n        var width_actual : Int;\r\n            /** The actual height, used when image is automatically padded to POT */\r\n        var height_actual : Int;\r\n            /** used bits per pixel */\r\n        var bpp : Int;\r\n            /** source bits per pixel */\r\n        var bpp_source : Int;\r\n            /** image pixel data */\r\n        var pixels : Uint8Array;\r\n\r\n    } //ImageDataOptions\r\n\r\n    class ImageData {\r\n\r\n        public var app : snow.Snow;\r\n            /** source asset id */\r\n        public var id : String = 'ImageData';\r\n            /** image width from source image */\r\n        public var width : Int = 0;\r\n            /** image height from source image */\r\n        public var height : Int = 0;\r\n            /** The actual width, used when image is automatically padded to POT */\r\n        public var width_actual : Int = 0;\r\n            /** The actual height, used when image is automatically padded to POT */\r\n        public var height_actual : Int = 0;\r\n            /** used bits per pixel */\r\n        public var bpp : Int = 4;\r\n            /** source bits per pixel */\r\n        public var bpp_source : Int = 4;\r\n            /** image pixel data */\r\n        public var pixels : Uint8Array;\r\n\r\n        inline public function new(_app:snow.Snow, _options:ImageDataOptions) {\r\n\r\n            app = _app;\r\n\r\n            id = def(_options.id, id);\r\n            width = _options.width;\r\n            height = _options.height;\r\n            width_actual = _options.width_actual;\r\n            height_actual = _options.height_actual;\r\n            bpp = _options.bpp;\r\n            bpp_source = _options.bpp_source;\r\n            pixels = def(_options.pixels, pixels);\r\n\r\n            _options = null;\r\n\r\n        } //new\r\n\r\n        public function destroy() {\r\n\r\n            id = null;\r\n            #if snow_native pixels.buffer = null; #end\r\n            pixels = null;\r\n\r\n        } //destroy\r\n\r\n        inline function toString() return '{ \"ImageData\":true, \"id\":$id, \"width\":$width, \"height\":$height, \"width_actual\":$width_actual, \"height_actual\":$height_actual, \"bpp\":$bpp, \"bpp_source\":$bpp_source }';\r\n\r\n    } //ImageData\r\n\r\n    /** Options for an IO data query */\r\n    typedef IODataOptions = {\r\n\r\n        /** Whether or not the data should be treated as binary. */\r\n        @:optional var binary:Bool;\r\n\r\n    } //IODataOptions\r\n\r\n//Audio types\r\n\r\n    /** An audio handle for tracking audio instances */\r\n    typedef AudioHandle = Null<Int>;\r\n\r\n    /** The type of format data for audio */\r\n    @:enum abstract AudioFormatType(Null<Int>)\r\n        from Null<Int> to Null<Int> {\r\n\r\n            /** */\r\n        var af_unknown  = 0;\r\n            /** */\r\n        var af_custom   = 1;\r\n            /** */\r\n        var af_ogg      = 2;\r\n            /** */\r\n        var af_wav      = 3;\r\n            /** */\r\n        var af_pcm      = 4;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case af_unknown:   'af_unknown';\r\n                case af_custom:    'af_custom';\r\n                case af_ogg:       'af_ogg';\r\n                case af_wav:       'af_wav';\r\n                case af_pcm:       'af_pcm';\r\n                case _:             '$this';\r\n            }\r\n        }\r\n\r\n    } //AudioFormatType\r\n\r\n    /**  */\r\n    @:enum abstract AudioEvent(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var ae_end = 0;\r\n            /** */\r\n        var ae_destroyed = 1;\r\n            /** */\r\n        var ae_destroyed_source = 2;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case ae_end:                'ae_end';\r\n                case ae_destroyed:          'ae_destroyed';\r\n                case ae_destroyed_source:   'ae_destroyed_source';\r\n                case _:                     '$this';\r\n            }\r\n        } //toString\r\n    } //AudioEvent\r\n\r\n    /**  */\r\n    @:enum abstract AudioState(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var as_invalid  = -1;\r\n            /** */\r\n        var as_paused   = 0;\r\n            /** */\r\n        var as_playing  = 1;\r\n            /** */\r\n        var as_stopped  = 2;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case as_invalid:    'as_invalid';\r\n                case as_paused:     'as_paused';\r\n                case as_playing:    'as_playing';\r\n                case as_stopped:    'as_stopped';\r\n                case _:             '$this';\r\n            }\r\n        } //toString\r\n    } //AudioState\r\n\r\n        /** Options for constructing an AudioData instance */\r\n    typedef AudioDataOptions = {\r\n\r\n        @:optional var id: String;\r\n\r\n        @:optional var rate: Int;\r\n        @:optional var length: Int;\r\n        @:optional var channels: Int;\r\n        @:optional var bits_per_sample: Int;\r\n        @:optional var format: AudioFormatType;\r\n        @:optional var samples: Uint8Array;\r\n        @:optional var is_stream: Bool;\r\n\r\n    } //AudioDataOptions\r\n\r\n        /** An audio data object contains information about audio samples or streams, ready to be used.\r\n            `AudioData` objects typically come from the `app.assets.audio` API or `app.audio.module.data_from_path`,\r\n            since the implemenation details of decoding audio and streams are module level implementation details.\r\n            This is stored by `AudioSource` and `AssetAudio` objects for example.*/\r\n    @:allow(snow.systems.audio.AudioInstance)\r\n    class AudioData {\r\n\r\n            /** Access to the snow runtime */\r\n        public var app: snow.Snow;\r\n            /** The associated id for the data */\r\n        public var id: String = 'AudioData';\r\n            /** The sample data bytes, if any (streams don't populate this) */\r\n        public var samples: Uint8Array;\r\n            /** The sample rate in samples per second */\r\n        public var rate: Int = 44100;\r\n            /** The PCM length in samples */\r\n        public var length: Int = 0;\r\n            /** The number of channels for this data */\r\n        public var channels: Int = 1;\r\n            /** The number of bits per sample for this data */\r\n        public var bits_per_sample: Int = 16;\r\n            /** The audio format type of the sample data */\r\n        public var format: AudioFormatType = af_unknown;\r\n            /** Whether or not this data is a stream of samples */\r\n        public var is_stream: Bool = false;\r\n            /** Whether or not this data has been destroyed */\r\n        public var destroyed: Bool = false;\r\n\r\n        inline public function new(_app:snow.Snow, _options:AudioDataOptions) {\r\n\r\n            app = _app;\r\n\r\n            id = def(_options.id, id);\r\n            rate = def(_options.rate, rate);\r\n            length = def(_options.length, length);\r\n            format = def(_options.format, format);\r\n            channels = def(_options.channels, channels);\r\n            bits_per_sample = def(_options.bits_per_sample, bits_per_sample);\r\n            is_stream = def(_options.is_stream, is_stream);\r\n            samples = def(_options.samples, samples);\r\n\r\n            _options = null;\r\n\r\n        } //new\r\n\r\n        //Public API, typically populated by subclasses\r\n\r\n            public function destroy() {\r\n\r\n                if(destroyed) return;\r\n\r\n                _debug('destroy AudioData `$id`');\r\n                destroyed = true;\r\n\r\n                id = null;\r\n                #if snow_native \r\n                    if(samples != null) {\r\n                        samples.buffer = null; \r\n                    }\r\n                #end\r\n                samples = null;\r\n\r\n            } //destroy\r\n\r\n        //Internal implementation details, populated by subclasses\r\n\r\n            function seek(_to:Int) : Bool return false;\r\n\r\n            function portion(_into:Uint8Array, _start:Int, _len:Int, _into_result:Array<Int>) : Array<Int> return _into_result;\r\n\r\n            inline function toString() return '{ \"AudioData\":true, \"id\":$id, \"rate\":$rate, \"length\":$length, \"channels\":$channels, \"format\":\"$format\", \"is_stream\":$is_stream }';\r\n\r\n    } //AudioData\r\n\r\n//App config types\r\n\r\n    /** The runtime application config info */\r\n    typedef AppConfig = {\r\n\r\n        /** The window config for the default window. default: see `WindowConfig` docs*/\r\n        @:optional var window       : WindowConfig;\r\n            /** The render config that specifies rendering and context backend specifics.  */\r\n        @:optional var render       : RenderConfig;\r\n            /** The user specific config, by default, read from a json file at runtime */\r\n        @:optional var user         : UserConfig;\r\n            /** The runtime specific config */\r\n        @:optional var runtime      : RuntimeConfig;\r\n\r\n    } //AppConfig\r\n\r\n    /** Config specific to the rendering context that would be used when creating windows */\r\n    typedef RenderConfig = {\r\n\r\n        /** Request the number of depth bits for the rendering context.\r\n            A value of 0 will not request a depth buffer. default: 0 */\r\n        @:optional var depth   : Int;\r\n            /** Request the number of stencil bits for the rendering context.\r\n                A value of 0 will not request a stencil buffer. default: 0 */\r\n        @:optional var stencil   : Int;\r\n            /** A value of `0`, `2`, `4`, `8` or other valid system value.\r\n                On WebGL contexts this value is true or false, bigger than 0 being true.\r\n                On native contexts this value sets the MSAA typically.\r\n                default webgl: 1 (enabled)\r\n                default: 0 */\r\n        @:optional var antialiasing : Int;\r\n\r\n            /** Request a specific number of red bits for the rendering context.\r\n                Unless you need to change this, don't. default: 8 */\r\n        @:optional var red_bits   : Int;\r\n            /** Request a specific number of green bits for the rendering context.\r\n                Unless you need to change this, don't. default: 8 */\r\n        @:optional var green_bits   : Int;\r\n            /** Request a specific number of blue bits for the rendering context.\r\n                Unless you need to change this, don't. default: 8 */\r\n        @:optional var blue_bits   : Int;\r\n            /** Request a specific number of alpha bits for the rendering context.\r\n                Unless you need to change this, don't. default: 8 */\r\n        @:optional var alpha_bits   : Int;\r\n\r\n            /** A color value that when creating the window, the window backbuffer will be cleared to.\r\n                A framework above snow can also use this for default clear color if desired.\r\n                The values are specified as 0..1. default: black, 0,0,0,1  */\r\n        @:optional var default_clear : { r:Float, g:Float, b:Float, a:Float };\r\n\r\n            /** OpenGL render context specific settings */\r\n        @:optional var opengl : RenderConfigOpenGL;\r\n            /** WebGL render context specific settings */\r\n        @:optional var webgl : RenderConfigWebGL;\r\n\r\n    } //RenderConfig\r\n\r\n\r\n    /** A type of OpenGL context profile to request. see RenderConfigOpenGL for info */\r\n    @:enum abstract OpenGLProfile(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var compatibility = 0;\r\n            /** */\r\n        var core = 1;\r\n            /** */\r\n        var gles = 2;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case compatibility: 'compatibility';\r\n                case core:          'core';\r\n                case gles:          'gles';\r\n                case _:             '$this';\r\n            }\r\n        } //toString\r\n\r\n    } //OpenGLProfile\r\n\r\n    /** Config specific to an OpenGL rendering context.\r\n        Note that these are hints to the system,\r\n        you must always check the values after initializing\r\n        for what you actually received. The OS/driver decides. */\r\n    typedef RenderConfigOpenGL = {\r\n\r\n        /** The major OpenGL version to request */\r\n        @:optional var major : Int;\r\n            /** The minor OpenGL version to request */\r\n        @:optional var minor : Int;\r\n            /** The OpenGL context profile to request */\r\n        @:optional var profile : OpenGLProfile;\r\n\r\n    } //RenderConfigOpenGL\r\n\r\n    /** Config specific to a WebGL rendering context.\r\n        See: https://www.khronos.org/registry/webgl/specs/latest/1.0/#WEBGLCONTEXTATTRIBUTES */\r\n    typedef RenderConfigWebGL = {\r\n\r\n        /** The WebGL version to request. default: 1 */\r\n        @:optional var version : Int;\r\n            /** If the value is true, the drawing buffer has an alpha channel for the\r\n                purposes of performing OpenGL destination alpha operations and\r\n                compositing with the page. If the value is false, no alpha buffer is available.\r\n                snow default: false\r\n                webgl default:true */\r\n        @:optional var alpha : Bool;\r\n            /** If the value is true, the drawing buffer has a depth buffer of at least 16 bits.\r\n                If the value is false, no depth buffer is available.\r\n                snow default: uses render config depth flag\r\n                webgl default:true */\r\n        @:optional var depth : Bool;\r\n            /** If the value is true, the drawing buffer has a stencil buffer of at least 8 bits.\r\n                If the value is false, no stencil buffer is available.\r\n                snow default: uses render config stencil flag\r\n                webgl default: false */\r\n        @:optional var stencil : Bool;\r\n            /** If the value is true and the implementation supports antialiasing the drawing buffer\r\n                will perform antialiasing using its choice of technique (multisample/supersample) and quality.\r\n                If the value is false or the implementation does not support\r\n                antialiasing, no antialiasing is performed\r\n                snow default: uses render config antialias flag\r\n                webgl default: true */\r\n        @:optional var antialias : Bool;\r\n            /** If the value is true the page compositor will assume the drawing buffer contains colors with premultiplied alpha.\r\n                If the value is false the page compositor will assume that colors in the drawing buffer are not premultiplied.\r\n                This flag is ignored if the alpha flag is false.\r\n                snow default: false\r\n                webgl default: true */\r\n        @:optional var premultipliedAlpha : Bool;\r\n            /** If false, once the drawing buffer is presented as described in theDrawing Buffer section,\r\n                the contents of the drawing buffer are cleared to their default values. All elements of the\r\n                drawing buffer (color, depth and stencil) are cleared. If the value is true the buffers will\r\n                not be cleared and will preserve their values until cleared or overwritten by the author.\r\n                On some hardware setting the preserveDrawingBuffer flag to true can have significant performance implications.\r\n                snow default: uses webgl default\r\n                webgl default: false */\r\n        @:optional var preserveDrawingBuffer : Bool;\r\n            /** Provides a hint to the implementation suggesting that, if possible, it creates a context\r\n                that optimizes for power consumption over performance. For example, on hardware that has more\r\n                than one GPU, it may be the case that one of them is less powerful but also uses less power.\r\n                An implementation may choose to, and may have to, ignore this hint.\r\n                snow default: uses webgl default\r\n                webgl default: false */\r\n        @:optional var preferLowPowerToHighPerformance : Bool;\r\n            /** If the value is true, context creation will fail if the implementation determines that the\r\n                performance of the created WebGL context would be dramatically lower than that of a native\r\n                application making equivalent OpenGL calls.\r\n                snow default: uses webgl default\r\n                webgl default: false */\r\n        @:optional var failIfMajorPerformanceCaveat : Bool;\r\n\r\n    } //RenderConfigWebGL\r\n\r\n    /** Window configuration information for creating windows */\r\n    typedef WindowConfig = {\r\n\r\n        /** create in fullscreen, default: false, `mobile` true */\r\n        @:optional var fullscreen       : Bool;\r\n            /** If false, the users native window/desktop resolution will be used instead of the specified window size. default: false\r\n                On native, changing the users video mode is less than ideal, so true_fullscreen is commonly discouraged. */\r\n        @:optional var true_fullscreen  : Bool;\r\n            /** allow the window to be resized, default: true */\r\n        @:optional var resizable        : Bool;\r\n            /** create as a borderless window, default: false */\r\n        @:optional var borderless       : Bool;\r\n            /** window x at creation. Leave this alone to use the OS default. */\r\n        @:optional var x                : Int;\r\n            /** window y at creation. Leave this alone to use the OS default. */\r\n        @:optional var y                : Int;\r\n            /** window width at creation, default: 960 */\r\n        @:optional var width            : Int;\r\n            /** window height at creation, default: 640 */\r\n        @:optional var height           : Int;\r\n            /** window title, default: 'snow app' */\r\n        @:optional var title            : String;\r\n            /** disables input arriving at/from this window. default: false */\r\n        @:optional var no_input         : Bool;\r\n            /** Time in seconds to sleep when in the background. \r\n                Setting this to zero disables the behavior. \r\n                This has no effect on the web target, \r\n                as there is no concept of sleep there (and browsers usually throttle background tabs).\r\n                Higher sleep times (i.e 1/10 or 1/30) use less cpu. default: 1/15 */\r\n        @:optional var background_sleep : Float;\r\n\r\n    } //WindowConfig\r\n\r\n//Event types\r\n\r\n    /** A system event */\r\n    @:allow(snow.Snow)\r\n    class SystemEvent {\r\n     //\r\n            /** The type of system event this event is. SystemEventType */\r\n        public var type (default,null) : SystemEventType;\r\n            /** If type is `window` this will be populated, otherwise null */\r\n        public var window (default,null) : WindowEvent;\r\n            /** If type is `input` this will be populated, otherwise null */\r\n        public var input (default,null) : InputEvent;\r\n\r\n        inline function new() {}\r\n\r\n        inline function set(_type:SystemEventType, _window:WindowEvent, _input:InputEvent) {\r\n            type = _type;\r\n            window = _window;\r\n            input = _input;\r\n        }\r\n\r\n        inline function toString() {\r\n            var _s = '{ \"SystemEvent\":true, \"type\":\"$type\"';\r\n            if(window != null) _s += ', \"window\":$window';\r\n            if(input != null) _s += ', \"input\":$input';\r\n            _s += ' }';\r\n            return _s;\r\n        }\r\n\r\n    } //SystemEvent\r\n\r\n    /** A system window event */\r\n    @:allow(snow.Snow)\r\n    class WindowEvent {\r\n     //\r\n            /** The type of window event this was. */\r\n        public var type (default,null) : WindowEventType = we_unknown;\r\n            /** The time in seconds that this event occured, useful for deltas */\r\n        public var timestamp (default,null) : Float = 0.0;\r\n            /** The window id from which this event originated */\r\n        public var window_id (default,null) : Int = -1;\r\n            /** Potential window event data */\r\n        public var x (default,default) : Null<Int>;\r\n            /** Potential window event data */\r\n        public var y (default,default) : Null<Int>;\r\n\r\n        inline function new() {}\r\n\r\n        inline function set(_type:WindowEventType, _timestamp:Float, _window_id:Int, ?_x:Null<Int>, ?_y:Null<Int>) {\r\n            type = _type;\r\n            timestamp = _timestamp;\r\n            window_id = _window_id;\r\n            x = _x;\r\n            y = _y;\r\n        }\r\n\r\n        inline function toString() return '{ \"WindowEvent\":true, \"type\":\"$type\", \"window\":$window_id, \"x\":$x, \"y\":$y, \"time\":$timestamp }';\r\n\r\n    } //WindowEvent\r\n\r\n    @:allow(snow.systems.input.Input)\r\n    class KeyEvent {\r\n\r\n        public var type (default,null): Null<KeyEventType>;\r\n        public var keycode (default,null): Null<Int>;\r\n        public var scancode (default,null): Null<Int>;\r\n        public var repeat (default,null): Null<Bool>;\r\n        public var mod (default,null): ModState;\r\n\r\n        inline function new() {}\r\n\r\n        inline function set(_type:KeyEventType, _keycode:Int, _scancode:Int, _repeat:Bool, _mod:ModState) {\r\n            type = _type;\r\n            keycode = _keycode;\r\n            scancode = _scancode;\r\n            repeat = _repeat;\r\n            mod = _mod;\r\n        }\r\n\r\n        inline function toString() return '{ \"KeyEvent\":true, \"type\":\"$type\", \"keycode\":$keycode, \"scancode\":$scancode, \"repeat\":$repeat, \"mod\":$mod }';\r\n\r\n    } //KeyEvent\r\n\r\n    @:allow(snow.systems.input.Input)\r\n    class TextEvent {\r\n\r\n        public var type (default, null): Null<TextEventType>;\r\n        public var text (default, null): String;\r\n        public var start (default, null): Null<Int>;\r\n        public var length (default, null): Null<Int>;\r\n\r\n        inline function new() {}\r\n\r\n        @:allow(snow.core.Runtime)\r\n        inline function set(_type:TextEventType, _text:String, _start:Int, _length:Int) {\r\n            type = _type;\r\n            text = _text;\r\n            start = _start;\r\n            length = _length;\r\n        }\r\n\r\n        inline function toString() return '{ \"TextEvent\":true, \"type\":\"$type\", \"text\":\"$text\", \"start\":$start, \"length\":$length }';\r\n\r\n    } //TextEvent\r\n\r\n    @:allow(snow.systems.input.Input)\r\n    class MouseEvent {\r\n        public var type (default, null): MouseEventType;\r\n        public var x (default, null): Int;\r\n        public var y (default, null): Int;\r\n        public var x_rel (default, null): Int;\r\n        public var y_rel (default, null): Int;\r\n        public var button (default, null): Int;\r\n        public var wheel_x (default, null): Float;\r\n        public var wheel_y (default, null): Float;\r\n\r\n        inline function new() {}\r\n\r\n        inline function set(_type:MouseEventType, _x:Int, _y:Int, _x_rel:Int, _y_rel:Int, _button:Int, _wheel_x:Float, _wheel_y:Float) {\r\n            type = _type;\r\n            x = _x;\r\n            y = _y;\r\n            x_rel = _x_rel;\r\n            y_rel = _y_rel;\r\n            button = _button;\r\n            wheel_x = _wheel_x;\r\n            wheel_y = _wheel_y;\r\n        }\r\n\r\n        inline function toString() return '{ \"MouseEvent\":true, \"type\":\"$type\", \"x\":$x, \"y\":$y, \"button\":$button, \"x_rel\":$x_rel, \"y_rel\":$y_rel, \"wheel_x\":$wheel_x, \"wheel_y\":$wheel_y }';\r\n\r\n    } //MouseEvent\r\n\r\n    @:allow(snow.systems.input.Input)\r\n    class TouchEvent {\r\n\r\n        public var type (default,null): TouchEventType;\r\n        public var touch_id (default,null): Int;\r\n        public var x (default,null): Float;\r\n        public var y (default,null): Float;\r\n        public var dx (default,null): Float;\r\n        public var dy (default,null): Float;\r\n\r\n        inline function new() {}\r\n\r\n        inline function set(_type:TouchEventType, _id:Int, _x:Float, _y:Float, _dx:Float, _dy:Float) {\r\n            type = _type;\r\n            touch_id = _id;\r\n            x = _x;\r\n            y = _y;\r\n            dx = _dx;\r\n            dy = _dy;\r\n        }\r\n\r\n        inline function toString() return '{ \"TouchEvent\":true, \"type\":\"$type\", \"touch_id\":$touch_id, \"x\":$x, \"y\":$y, \"dx\":$dx, \"dy\":$dy }';\r\n\r\n    } //TouchEvent\r\n\r\n    @:allow(snow.systems.input.Input)\r\n    class GamepadEvent {\r\n\r\n        public var type (default,null): GamepadEventType;\r\n        public var gamepad (default,null): Int;\r\n        public var axis (default,null): Null<Int>;\r\n        public var button (default,null): Null<Int>;\r\n        public var value (default,null): Null<Float>;\r\n        public var device_id (default,null): String;\r\n        public var device_event (default,null): Null<GamepadDeviceEventType>;\r\n\r\n        inline function new() {}\r\n\r\n        inline function set_axis(_gamepad:Int, _axis:Int, _value:Float) {\r\n            button = null;\r\n            device_id = null;\r\n            device_event = null;\r\n\r\n            axis    = _axis;\r\n            value   = _value;\r\n            type    = ge_axis;\r\n            gamepad = _gamepad;\r\n        } //set_axis\r\n\r\n        inline function set_button(_type:GamepadEventType, _gamepad:Int, _button:Int, _value:Float) {\r\n            axis = null;\r\n            device_id = null;\r\n            device_event = null;\r\n\r\n            type    = _type;\r\n            value   = _value;\r\n            button  = _button;\r\n            gamepad = _gamepad;\r\n        } //set_button\r\n\r\n        inline function set_device(_gamepad:Int, _id:String, _event:GamepadDeviceEventType) {\r\n            axis = null;\r\n            value = null;\r\n            button = null;\r\n\r\n            device_id    = _id;\r\n            device_event = _event;\r\n            gamepad      = _gamepad;\r\n            type         = ge_device;\r\n        } //set_device\r\n\r\n        inline function toString() return '{ \"GamepadEvent\":true, \"type\":\"$type\", \"gamepad\":$gamepad, \"axis\":$axis, \"button\":$button, \"value\":$value, \"device_id\":\"$device_id\", \"device_event\":\"$device_event\" }';\r\n\r\n    } //GamepadEvent\r\n\r\n    @:allow(snow.systems.input.Input)\r\n    class InputEvent {\r\n     //\r\n            /** The type of input event this was. */\r\n        public var type (default,null) : InputEventType;\r\n            /** The time in seconds that this event occured, useful for deltas. 0.0 if not specified */\r\n        public var timestamp (default,null) : Float = 0.0;\r\n            /** The window id from which this event originated, if any. -1 if not specified */\r\n        public var window_id (default,null) : Int = -1;\r\n            /** Populated if the event type is ie_key, otherwise null */\r\n        public var key (default,null) : KeyEvent;\r\n            /** Populated if the event type is ie_text, otherwise null */\r\n        public var text (default,null) : TextEvent;\r\n            /** Populated if the event type is ie_mouse, otherwise null */\r\n        public var mouse (default,null) : MouseEvent;\r\n            /** Populated if the event type is ie_touch, otherwise null */\r\n        public var touch (default,null) : TouchEvent;\r\n            /** Populated if the event type is ie_gamepad, otherwise null */\r\n        public var gamepad (default,null) : GamepadEvent;\r\n\r\n        function new() {}\r\n\r\n        inline function reset(_type:InputEventType, _window_id:Int, _timestamp:Float) {\r\n\r\n            type = _type;\r\n            key = null;\r\n            text = null;\r\n            mouse = null;\r\n            touch = null;\r\n            gamepad = null;\r\n            window_id = _window_id;\r\n            timestamp = _timestamp;\r\n\r\n        } //reset\r\n\r\n        inline function set_key(_event:KeyEvent, _window_id:Int, _timestamp:Float) {\r\n            reset(ie_key, _window_id, _timestamp);\r\n            key = _event;\r\n        } //set_key\r\n\r\n        inline function set_text(_event:TextEvent, _window_id:Int, _timestamp:Float) {\r\n            reset(ie_text, _window_id, _timestamp);\r\n            text = _event;\r\n        } //set_text\r\n\r\n        inline function set_mouse(_event:MouseEvent, _window_id:Int, _timestamp:Float) {\r\n            reset(ie_mouse, _window_id, _timestamp);\r\n            mouse = _event;\r\n        } //set_mouse\r\n\r\n        inline function set_touch(_event:TouchEvent, _timestamp:Float) {\r\n            reset(ie_touch, 0, _timestamp);\r\n            touch = _event;\r\n        } //set_touch\r\n\r\n        inline function set_gamepad(_event:GamepadEvent, _timestamp:Float) {\r\n            reset(ie_gamepad, 0, _timestamp);\r\n            gamepad = _event;\r\n        } //set_gamepad\r\n\r\n        inline function toString() {\r\n            var _s = '{ \"InputEvent\":true, \"type\":\"$type\"';\r\n\r\n                if(key != null)     _s += ', \"key\":$key';\r\n                if(text != null)    _s += ', \"text\":$text';\r\n                if(mouse != null)   _s += ', \"mouse\":$mouse';\r\n                if(touch != null)   _s += ', \"touch\":$touch';\r\n                if(gamepad != null) _s += ', \"gamepad\":$gamepad';\r\n\r\n                _s += '\"window\":$window_id, \"time\":$timestamp }';\r\n\r\n            return _s;\r\n        }\r\n\r\n    } //InputEvent\r\n\r\n    /** Input modifier state */\r\n    @:publicFields\r\n    class ModState {\r\n\r\n        @:allow(snow)\r\n        private inline function new() {}\r\n\r\n            /** no modifiers are down */\r\n        var none : Bool = false;\r\n            /** left shift key is down */\r\n        var lshift : Bool = false;\r\n            /** right shift key is down */\r\n        var rshift : Bool = false;\r\n            /** left ctrl key is down */\r\n        var lctrl : Bool = false;\r\n            /** right ctrl key is down */\r\n        var rctrl : Bool = false;\r\n            /** left alt/option key is down */\r\n        var lalt : Bool = false;\r\n            /** right alt/option key is down */\r\n        var ralt : Bool = false;\r\n            /** left windows/command key is down */\r\n        var lmeta : Bool = false;\r\n            /** right windows/command key is down */\r\n        var rmeta : Bool = false;\r\n            /** numlock is enabled */\r\n        var num : Bool = false;\r\n            /** capslock is enabled */\r\n        var caps : Bool = false;\r\n            /** mode key is down */\r\n        var mode : Bool = false;\r\n            /** left or right ctrl key is down */\r\n        var ctrl : Bool = false;\r\n            /** left or right shift key is down */\r\n        var shift : Bool = false;\r\n            /** left or right alt/option key is down */\r\n        var alt : Bool = false;\r\n            /** left or right windows/command key is down */\r\n        var meta : Bool = false;\r\n\r\n        inline function toString() {\r\n\r\n            var _s = '{ \"ModState\":true ';\r\n\r\n            if(none) return _s + ', \"none\":true }';\r\n\r\n                if(lshift) _s += ', \"lshift\":true';\r\n                if(rshift) _s += ', \"rshift\":true';\r\n                if(lctrl)  _s += ', \"lctrl\":true';\r\n                if(rctrl)  _s += ', \"rctrl\":true';\r\n                if(lalt)   _s += ', \"lalt\":true';\r\n                if(ralt)   _s += ', \"ralt\":true';\r\n                if(lmeta)  _s += ', \"lmeta\":true';\r\n                if(rmeta)  _s += ', \"rmeta\":true';\r\n                if(num)    _s += ', \"num\":true';\r\n                if(caps)   _s += ', \"caps\":true';\r\n                if(mode)   _s += ', \"mode\":true';\r\n                if(ctrl)   _s += ', \"ctrl\":true';\r\n                if(shift)  _s += ', \"shift\":true';\r\n                if(alt)    _s += ', \"alt\":true';\r\n                if(meta)   _s += ', \"meta\":true';\r\n\r\n            _s += '}';\r\n\r\n            return _s;\r\n\r\n        } //toString\r\n\r\n    } //ModState\r\n\r\n//Event Type enums\r\n\r\n    /** A key specific event event type */\r\n    @:enum abstract KeyEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var ke_unknown  = 0;\r\n            /** */\r\n        var ke_down     = 1;\r\n            /** */\r\n        var ke_up       = 2;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case ke_unknown: 'ke_unknown';\r\n                case ke_down:    'ke_down';\r\n                case ke_up:      'ke_up';\r\n                case _:          '$this';\r\n            }\r\n        } //toString\r\n    } //KeyEventType\r\n\r\n    /** A mouse specific event event type */\r\n    @:enum abstract MouseEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var me_unknown  = 0;\r\n            /** */\r\n        var me_move     = 1;\r\n            /** */\r\n        var me_down     = 2;\r\n            /** */\r\n        var me_up       = 3;\r\n            /** */\r\n        var me_wheel    = 4;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case me_unknown:    'me_unknown';\r\n                case me_move:       'me_move';\r\n                case me_down:       'me_down';\r\n                case me_up:         'me_up';\r\n                case me_wheel:      'me_wheel';\r\n                case _:             '$this';\r\n            }\r\n        } //toString\r\n    } //MouseEventType\r\n\r\n    /** A touch specific event event type */\r\n    @:enum abstract TouchEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var te_unknown  = 0;\r\n            /** */\r\n        var te_move     = 1;\r\n            /** */\r\n        var te_down     = 2;\r\n            /** */\r\n        var te_up       = 3;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case te_unknown:    'te_unknown';\r\n                case te_move:       'te_move';\r\n                case te_down:       'te_down';\r\n                case te_up:         'te_up';\r\n                case _:             '$this';\r\n            }\r\n        } //toString\r\n    } //TouchEventType\r\n\r\n    /** A touch specific event event type */\r\n    @:enum abstract GamepadEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** */\r\n        var ge_unknown  = 0;\r\n            /** */\r\n        var ge_axis     = 1;\r\n            /** */\r\n        var ge_down     = 2;\r\n            /** */\r\n        var ge_up       = 3;\r\n            /** */\r\n        var ge_device   = 4;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case ge_unknown:    'ge_unknown';\r\n                case ge_axis:       'ge_axis';\r\n                case ge_down:       'ge_down';\r\n                case ge_up:         'ge_up';\r\n                case ge_device:     'ge_device';\r\n                case _:             '$this';\r\n            }\r\n        } //toString\r\n    } //GamepadEventType\r\n\r\n    /** A text specific event event type */\r\n    @:enum abstract TextEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** An unknown text event */\r\n        var te_unknown    = 0;\r\n            /** An edit text typing event */\r\n        var te_edit    = 1;\r\n            /** An input text typing event */\r\n        var te_input   = 2;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case te_unknown: 'te_unknown';\r\n                case te_edit:    'te_edit';\r\n                case te_input:   'te_input';\r\n                case _:          '$this';\r\n            }\r\n        } //toString\r\n    } //TextEventType\r\n\r\n    /** A gamepad device event type */\r\n    @:enum abstract GamepadDeviceEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** A unknown device event */\r\n        var ge_unknown             = 0;\r\n            /** A device added event */\r\n        var ge_device_added        = 1;\r\n            /** A device removed event */\r\n        var ge_device_removed      = 2;\r\n            /** A device was remapped */\r\n        var ge_device_remapped     = 3;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case ge_unknown:         'ge_unknown';\r\n                case ge_device_added:    'ge_device_added';\r\n                case ge_device_removed:  'ge_device_removed';\r\n                case ge_device_remapped: 'ge_device_remapped';\r\n                case _:                  '$this';\r\n            }\r\n        } //toString\r\n    } //GamepadDeviceEventType\r\n\r\n    @:enum abstract SystemEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** An unknown system event */\r\n        var se_unknown                  = 0;\r\n            /** An system init event */\r\n        var se_init                     = 1;\r\n            /** An system ready event */\r\n        var se_ready                    = 2;\r\n            /** An system tick event */\r\n        var se_tick                     = 3;\r\n            /** An system freeze event */\r\n        var se_freeze                   = 4;\r\n            /** An system unfreeze event */\r\n        var se_unfreeze                 = 5;\r\n            /** An system pause event */\r\n        var se_suspend                  = 6;\r\n            /** An system shutdown event */\r\n        var se_shutdown                 = 7;\r\n            /** An system window event */\r\n        var se_window                   = 8;\r\n            /** An system input event */\r\n        var se_input                    = 9;\r\n\r\n            //snow application events\r\n\r\n            /** An system quit event. Initiated by user, can be cancelled/ignored */\r\n        var se_quit                       = 10;\r\n            /** An system terminating event, called by the OS (mobile specific) */\r\n        var se_app_terminating            = 11;\r\n            /** An system low memory event, clear memory if you can. Called by the OS (mobile specific) */\r\n        var se_app_lowmemory              = 12;\r\n            /** An event for just before the app enters the background, called by the OS (mobile specific) */\r\n        var se_app_willenterbackground    = 13;\r\n            /** An event for when the app enters the background, called by the OS (mobile specific) */\r\n        var se_app_didenterbackground     = 14;\r\n            /** An event for just before the app enters the foreground, called by the OS (mobile specific) */\r\n        var se_app_willenterforeground    = 15;\r\n            /** An event for when the app enters the foreground, called by the OS (mobile specific) */\r\n        var se_app_didenterforeground     = 16;\r\n\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case se_unknown:                    'se_unknown';\r\n                case se_init:                       'se_init';\r\n                case se_ready:                      'se_ready';\r\n                case se_tick:                       'se_tick';\r\n                case se_freeze:                     'se_freeze';\r\n                case se_unfreeze:                   'se_unfreeze';\r\n                case se_shutdown:                   'se_shutdown';\r\n                case se_window:                     'se_window';\r\n                case se_input:                      'se_input';\r\n                case se_quit:                       'se_quit';\r\n                case se_app_terminating:            'se_app_terminating';\r\n                case se_app_lowmemory:              'se_app_lowmemory';\r\n                case se_app_willenterbackground:    'se_app_willenterbackground';\r\n                case se_app_didenterbackground:     'se_app_didenterbackground';\r\n                case se_app_willenterforeground:    'se_app_willenterforeground';\r\n                case se_app_didenterforeground:     'se_app_didenterforeground';\r\n                case _:                             '$this';\r\n            }\r\n        } //toString\r\n    } //SystemEventType\r\n\r\n    @:enum abstract WindowEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** An unknown window event */\r\n        var we_unknown          = 0;\r\n            /** The window is shown */\r\n        var we_shown            = 1;\r\n            /** The window is hidden */\r\n        var we_hidden           = 2;\r\n            /** The window is exposed */\r\n        var we_exposed          = 3;\r\n            /** The window is moved */\r\n        var we_moved            = 4;\r\n            /** The window is resized, by the user or code. */\r\n        var we_resized          = 5;\r\n            /** The window is resized, by the OS or internals. */\r\n        var we_size_changed     = 6;\r\n            /** The window is minimized */\r\n        var we_minimized        = 7;\r\n            /** The window is maximized */\r\n        var we_maximized        = 8;\r\n            /** The window is restored */\r\n        var we_restored         = 9;\r\n            /** The window is entered by a mouse */\r\n        var we_enter            = 10;\r\n            /** The window is left by a mouse */\r\n        var we_leave            = 11;\r\n            /** The window has gained focus */\r\n        var we_focus_gained     = 12;\r\n            /** The window has lost focus */\r\n        var we_focus_lost       = 13;\r\n            /** The window is being closed/hidden */\r\n        var we_close            = 14;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case we_unknown:       'we_unknown';\r\n                case we_shown:         'we_shown';\r\n                case we_hidden:        'we_hidden';\r\n                case we_exposed:       'we_exposed';\r\n                case we_moved:         'we_moved';\r\n                case we_resized:       'we_resized';\r\n                case we_size_changed:  'we_size_changed';\r\n                case we_minimized:     'we_minimized';\r\n                case we_maximized:     'we_maximized';\r\n                case we_restored:      'we_restored';\r\n                case we_enter:         'we_enter';\r\n                case we_leave:         'we_leave';\r\n                case we_focus_gained:  'we_focus_gained';\r\n                case we_focus_lost:    'we_focus_lost';\r\n                case we_close:         'we_close';\r\n                case _:                '$this';\r\n            }\r\n        } //toString\r\n    } //WindowEventType\r\n\r\n    @:enum abstract InputEventType(Int)\r\n        from Int to Int {\r\n\r\n            /** An unknown input event */\r\n        var ie_unknown        = 0;\r\n            /** An keyboard input event */\r\n        var ie_key            = 1;\r\n            /** An keyboard text input event */\r\n        var ie_text           = 2;\r\n            /** An mouse input event */\r\n        var ie_mouse          = 3;\r\n            /** An touch input event */\r\n        var ie_touch          = 4;\r\n            /** An gamepad input event. */\r\n        var ie_gamepad        = 5;\r\n            /** An joystick input event. These are for older devices, and on mobile (for now): accellerometer */\r\n        var ie_joystick       = 6;\r\n\r\n        inline function toString() {\r\n            return switch(this) {\r\n                case ie_unknown:       'ie_unknown';\r\n                case ie_key:           'ie_key';\r\n                case ie_text:          'ie_text';\r\n                case ie_mouse:         'ie_mouse';\r\n                case ie_touch:         'ie_touch';\r\n                case ie_gamepad:       'ie_gamepad';\r\n                case ie_joystick:      'ie_joystick';\r\n                case _:                '$this';\r\n            }\r\n        } //toString\r\n    } //InputEventType\r\n","package snow.systems.assets;\r\n\r\nimport snow.systems.assets.Asset;\r\nimport snow.systems.assets.Assets;\r\nimport snow.types.Types;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.Promise;\r\nimport snow.api.Debug.*;\r\n\r\n\r\n/**  An asset base class. Get assets from the `app.assets` */\r\nclass Asset {\r\n\r\n        /** The asset system */\r\n    public var system : Assets;\r\n        /** The id of this asset, i.e `assets/image.png` */\r\n    public var id : String;\r\n        /** True if this asset has completely loaded. */\r\n    public var loaded : Bool = false;\r\n        /** A convenience type id when dealing with the base class.\r\n            This is an Int because it can be any number for custom types,\r\n            by default uses AssetType for the base types. */\r\n    public var type : Int;\r\n\r\n\r\n        /** Called from subclasses, by `app.assets` */\r\n    public function new( _system:Assets, _id:String, _type:Int=0 ) {\r\n\r\n        assertnull( _id );\r\n        assertnull( _system );\r\n\r\n        system = _system;\r\n        type = _type;\r\n        id = _id;\r\n\r\n    } //new\r\n\r\n        /** Implemented by subclasses to clean up their data and references. */\r\n    public function destroy() {\r\n\r\n    }\r\n\r\n} //Asset\r\n\r\n\r\n//Image\r\n\r\n\r\n\r\n    class AssetImage extends snow.systems.assets.Asset {\r\n\r\n        public var image (default,set): ImageData;\r\n\r\n        public function new(_system:Assets, _id:String, _image:ImageData) {\r\n\r\n            super(_system, _id, at_image);\r\n            image = _image;\r\n\r\n        } //new\r\n\r\n        //Public API\r\n\r\n                /** Reloads the bytes from the stored id, using the default processor, returning a promise for the asset. */\r\n            public function reload() : Promise {\r\n\r\n                loaded = false;\r\n\r\n                return new Promise(function(resolve, reject) {\r\n\r\n                    var _load = system.app.io.data_flow(system.path(id), provider);\r\n\r\n                    _load.then(\r\n                        function(_image:ImageData){\r\n                            image = _image;\r\n                            resolve(this);\r\n                        }\r\n                    ).error(reject);\r\n\r\n                }); //promise\r\n\r\n            } //reload\r\n\r\n            override public function destroy() {\r\n\r\n                image.destroy();\r\n                image = null;\r\n\r\n            }\r\n\r\n                /** Reload the asset from bytes */\r\n            public function reload_from_bytes(_bytes:Uint8Array) {\r\n\r\n                loaded = false;\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    var _load = system.module.image_info_from_bytes(id, _bytes);\r\n\r\n                    _load.then(function(_image:ImageData){\r\n                        image = _image;\r\n                        resolve(this);\r\n                    }).error(reject);\r\n\r\n                });\r\n\r\n            } //reload_from_bytes\r\n\r\n                /** Reload the asset from already decoded pixels */\r\n            public function reload_from_pixels(_width:Int, _height:Int, _pixels:Uint8Array) {\r\n\r\n                loaded = false;\r\n\r\n                image = system.module.image_info_from_pixels(id, _width, _height, _pixels);\r\n\r\n            } //reload_from_bytes\r\n\r\n        //Public Static API\r\n\r\n            public static function load(_system:Assets, _id:String) : Promise {\r\n\r\n                assertnull( _id );\r\n                assertnull( _system );\r\n\r\n                return new AssetImage(_system, _id, null).reload();\r\n\r\n            } //load\r\n\r\n            public static function load_from_bytes(_system:Assets, _id:String, _bytes:Uint8Array) : Promise {\r\n\r\n                assertnull( _id );\r\n                assertnull( _bytes );\r\n                assertnull( _system );\r\n\r\n                return new AssetImage(_system, _id, null).reload_from_bytes(_bytes);\r\n\r\n            } //load_from_bytes\r\n\r\n            public static function load_from_pixels(_system:Assets, _id:String, _width:Int, _height:Int, _pixels:Uint8Array) : AssetImage {\r\n\r\n                assertnull( _id );\r\n                assertnull( _pixels );\r\n                assertnull( _system );\r\n\r\n                var info = _system.module.image_info_from_pixels(_id, _width, _height, _pixels);\r\n\r\n                return new AssetImage(_system, _id, info);\r\n\r\n            } //load_from_pixels\r\n\r\n                /** A default io provider, using image_info_from_load from the asset module.\r\n                    Promises ImageData. Takes an asset path, not an asset id (use assets.path(id))*/\r\n            public static function provider(_app:snow.Snow, _path:String) : Promise {\r\n\r\n                return _app.assets.module.image_info_from_load(_path);\r\n\r\n            } //provider\r\n\r\n                /** A convenience io processor, using image_info_from_bytes, from the asset module. Promises ImageData */\r\n            public static function processor(_app:snow.Snow, _id:String, _data:Uint8Array) : Promise {\r\n\r\n                if(_data == null) return Promise.reject(Error.error(\"AssetImage processor: data was null\"));\r\n\r\n                return _app.assets.module.image_info_from_bytes(_id, _data);\r\n\r\n            } //load\r\n\r\n        //Internal\r\n\r\n                /** Set the image contained to a new value */\r\n            function set_image(_image:ImageData) {\r\n\r\n                loaded = _image != null;\r\n                return image = _image;\r\n\r\n            } //set_image\r\n\r\n    } //AssetImage\r\n\r\n\r\n//Audio\r\n\r\n\r\n    class AssetAudio extends snow.systems.assets.Asset {\r\n\r\n        public var audio (default,set): AudioData;\r\n\r\n        public function new(_system:Assets, _id:String, _audio:AudioData) {\r\n\r\n            super(_system, _id, at_audio);\r\n            audio = _audio;\r\n\r\n        } //new\r\n\r\n        //Public API\r\n\r\n                /** Reloads the audio from the stored id, using audio module `data_from_load`, returning a promise for the asset. */\r\n            public function reload(?_is_stream:Bool=false) : Promise {\r\n\r\n                loaded = false;\r\n\r\n                return new Promise(function(resolve, reject) {\r\n\r\n                    var _load = system.app.audio.module.data_from_load(system.path(id), _is_stream);\r\n\r\n                    _load.then(\r\n                        function(_audio:AudioData){\r\n                            audio = _audio;\r\n                            resolve(this);\r\n                        }\r\n                    ).error(reject);\r\n\r\n                }); //promise\r\n\r\n            } //reload\r\n\r\n            override public function destroy() {\r\n            \r\n                audio.destroy();\r\n                audio = null;\r\n            \r\n            } //destroy\r\n\r\n                /** Reload the asset from bytes */\r\n            public function reload_from_bytes(_bytes:Uint8Array, _format:AudioFormatType) {\r\n\r\n                loaded = false;\r\n\r\n                return new Promise(function(resolve, reject){\r\n\r\n                    var _load = system.app.audio.module.data_from_bytes(id, _bytes, _format);\r\n\r\n                    _load.then(function(_audio:AudioData){\r\n                        audio = _audio;\r\n                        resolve(this);\r\n                    }).error(reject);\r\n\r\n                });\r\n\r\n            } //reload_from_bytes\r\n\r\n        //Public Static API\r\n\r\n            public static function load(_system:Assets, _id:String, ?_is_stream:Bool=false) : Promise {\r\n\r\n                assertnull( _id );\r\n                assertnull( _system );\r\n\r\n                return new AssetAudio(_system, _id, null).reload(_is_stream);\r\n\r\n            } //load\r\n\r\n            public static function load_from_bytes(_system:Assets, _id:String, _bytes:Uint8Array, _format:AudioFormatType) : Promise {\r\n\r\n                assertnull( _id );\r\n                assertnull( _bytes );\r\n                assertnull( _system );\r\n\r\n                return new AssetAudio(_system, _id, null).reload_from_bytes(_bytes, _format);\r\n\r\n            } //load_from_bytes\r\n\r\n        //Internal\r\n\r\n                /** Set the audio contained to a new value */\r\n            function set_audio(_audio:AudioData) {\r\n\r\n                loaded = _audio != null;\r\n                return audio = _audio;\r\n\r\n            } //set_audio\r\n\r\n    } //AssetAudio\r\n\r\n\r\n//Bytes\r\n\r\n\r\n    class AssetBytes extends Asset {\r\n\r\n        public var bytes (default,set): Uint8Array;\r\n\r\n        public function new(_system:Assets, _id:String, _bytes:Uint8Array) {\r\n\r\n            super(_system, _id, at_bytes);\r\n            bytes = _bytes;\r\n\r\n        } //new\r\n\r\n        //Public API\r\n\r\n                /** Reloads the bytes from it's stored id, using the default processor, returning a promise for the asset. */\r\n            public function reload() : Promise {\r\n\r\n                return new Promise(function(resolve, reject) {\r\n\r\n                    system.app.io.data_flow(system.path(id)).then(function(_bytes:Uint8Array){\r\n\r\n                        bytes = _bytes;\r\n                        resolve(this);\r\n\r\n                    }).error(reject);\r\n\r\n                }); //promise\r\n\r\n            } //reload\r\n\r\n            override public function destroy() {\r\n                //:note: can't set the buffer on js, this is mostly for cpp gc anyway\r\n                #if snow_native if(bytes != null) bytes.buffer = null; #end\r\n                bytes = null;\r\n            }\r\n\r\n        //Static API\r\n\r\n                /** Create a new AssetBytes from an id, which returns a promise for the asset. */\r\n            public static function load( _system:Assets, _id:String ) : Promise {\r\n\r\n                return new AssetBytes(_system, _id, null).reload();\r\n\r\n            } //load\r\n\r\n\r\n        //Internal\r\n\r\n                /** Set the bytes contained to a new value */\r\n            function set_bytes(_bytes:Uint8Array) {\r\n\r\n                loaded = _bytes != null;\r\n                return bytes = _bytes;\r\n\r\n            } //set_bytes\r\n\r\n    } //AssetBytes\r\n\r\n\r\n//Text\r\n\r\n\r\n    class AssetText extends Asset {\r\n\r\n        public var text (default,set): String;\r\n\r\n        public function new(_system:Assets, _id:String, _text:String) {\r\n\r\n            super(_system, _id, at_text);\r\n            text = _text;\r\n\r\n        } //new\r\n\r\n        //Public API\r\n\r\n                /** Reloads the text from it's stored id, returning a promise for the asset. */\r\n            public function reload() : Promise {\r\n\r\n                return new Promise(function(resolve, reject) {\r\n\r\n                    system.app.io.data_flow(system.path(id), processor).then(function(_text:String){\r\n\r\n                        text = _text;\r\n                        resolve(this);\r\n\r\n                    }).error(reject);\r\n\r\n                }); //promise\r\n\r\n            } //reload\r\n\r\n            override public function destroy() {\r\n                text = null;\r\n            }\r\n\r\n        //Static API\r\n\r\n                /** Create a new AssetText from an id, which returns a promise for the asset. */\r\n            public static function load( _system:Assets, _id:String ) : Promise {\r\n\r\n                return new AssetText(_system, _id, null).reload();\r\n\r\n            } //load\r\n\r\n                /** A default text processor for the data processor API */\r\n            public static function processor(_app:snow.Snow, _id:String, _data:Uint8Array) : Promise {\r\n\r\n                if(_data == null) return Promise.reject(Error.error(\"AssetText processor: data was null\"));\r\n\r\n                var _string = _data.toBytes().toString();\r\n                    //:note: can't set the buffer on js, this is mostly for cpp gc anyway\r\n                    #if snow_native _data.buffer = null; #end\r\n                    _data = null;\r\n\r\n                return Promise.resolve(_string);\r\n\r\n            } //processor\r\n\r\n        //Internal\r\n\r\n                /** Set the text contained to a new value */\r\n            function set_text(_text:String) {\r\n\r\n                loaded = _text != null;\r\n                return text = _text;\r\n\r\n            } //set_text\r\n\r\n    } //AssetText\r\n\r\n//JSON\r\n\r\n    class AssetJSON extends Asset {\r\n\r\n        /** The json data stored in the asset */\r\n        public var json (default,set): Dynamic;\r\n\r\n        public function new( _system:snow.systems.assets.Assets, _id:String, _json:Dynamic ) {\r\n\r\n            super(_system, _id, at_json);\r\n            json = _json;\r\n\r\n        } //new\r\n\r\n        //Public API\r\n\r\n                /** Reloads the json from it's stored id, returning a promise for the asset. */\r\n            public function reload() : Promise {\r\n\r\n                return new Promise(function(resolve, reject) {\r\n\r\n                    system.app.io.data_flow(system.path(id), processor).then(function(_json:Dynamic){\r\n\r\n                        json = _json;\r\n                        resolve(this);\r\n\r\n                    }).error(reject);\r\n\r\n                }); //promise\r\n\r\n            } //reload\r\n\r\n            override public function destroy() {\r\n                json = null;\r\n            }\r\n\r\n        //Static API\r\n\r\n                /** Create a new AssetJSON from an id, which returns a promise for the asset. */\r\n            public static function load( _system:snow.systems.assets.Assets, _id:String ) : Promise {\r\n\r\n                return new AssetJSON(_system, _id, null).reload();\r\n\r\n            } //load\r\n\r\n                /** A default json processor for the data processor API */\r\n            public static function processor(_app:snow.Snow, _id:String, _data:Uint8Array) : Promise {\r\n\r\n                if(_data == null) return Promise.reject(Error.error(\"AssetJSON: data was null\"));\r\n\r\n                return new Promise(function(resolve, reject) {\r\n\r\n                    var _data_json : Dynamic = null;\r\n\r\n                    try { \r\n                        _data_json = haxe.Json.parse(_data.toBytes().toString()); \r\n                        _data = null;\r\n                    } catch(e:Dynamic) {\r\n                        _data = null;\r\n                        return reject(Error.parse(e));\r\n                    }\r\n\r\n                    return resolve(_data_json);\r\n\r\n                }); //promise\r\n\r\n            } //processor\r\n\r\n        //Internal\r\n\r\n                /** Set the json contained to a new value */\r\n            function set_json(_json:Dynamic) {\r\n\r\n                loaded = _json != null;\r\n                return json = _json;\r\n\r\n            } //set_json\r\n\r\n    } //AssetJSON\r\n","package snow.systems.assets;\r\n\r\nimport snow.api.Promise;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.Debug.*;\r\n\r\nimport snow.systems.assets.Asset;\r\nimport snow.types.Types;\r\n\r\n/** The asset system class gives you access to fetching and manipulating assets,\r\n    handling loading files and data in a consistent cross platform way */\r\n@:allow(snow.Snow)\r\nclass Assets {\r\n\r\n\r\n        /** If the assets are not relative to the runtime root path, this value can adjust all asset paths. This is automatically handled and exists to allow control. */\r\n    public var root : String = '';\r\n\r\n        /** access to module implementation */\r\n    public var module : ModuleAssets;\r\n        /** access to snow from subsystems */\r\n    public var app : Snow;\r\n\r\n\r\n        /** constructed internally, use `app.assets` */\r\n    function new( _app:Snow ) {\r\n\r\n        #if (ios || tvos)\r\n                //This is because of how the files are put into the xcode project\r\n                //for the iOS builds, it stores them inside of /assets to avoid\r\n                //including the root in the project in the Resources/ folder\r\n            root = 'assets/';\r\n        #end\r\n\r\n        app = _app;\r\n        module = new ModuleAssets(app);\r\n\r\n    } //new\r\n\r\n        /** Shutdown and clean up etc. */\r\n    function shutdown() {\r\n\r\n        module.shutdown();\r\n\r\n    } //shutdown\r\n\r\n\r\n//Public API\r\n\r\n        /** Get the asset path for an asset, adjusted by platform, root etc. */\r\n    public inline function path(_id:String) : String\r\n        return haxe.io.Path.join([root,_id]);\r\n\r\n        /** Get an asset as an `AssetBytes`, data stored as `Uint8Array`, using the default processor and provider */\r\n    public inline function bytes(_id:String) : Promise\r\n        return AssetBytes.load(this, _id);\r\n\r\n        /** Get an asset as an `AssetText`, data stored as `String`, using the default processor and provider */\r\n    public inline function text(_id:String) : Promise\r\n        return AssetText.load(this, _id);\r\n\r\n        /** Get an asset as an `AssetJSON`, data stored as `Dynamic`, using the default processor and provider */\r\n    public inline function json(_id:String) : Promise\r\n        return AssetJSON.load(this, _id);\r\n\r\n        /** Get an asset as an `AssetImage`, data stored as `ImageData`, using the default processor and provider */\r\n    public inline function image(_id:String) : Promise\r\n        return AssetImage.load(this, _id);\r\n\r\n        /** Get an asset as an `AssetImage`, data stored as `ImageData`, created from image file bytes (not pixels). */\r\n    public inline function image_from_bytes(_id:String, _bytes:Uint8Array) : Promise\r\n        return AssetImage.load_from_bytes(this, _id, _bytes);\r\n\r\n        /** Get an asset as an `AssetImage`, data stored as `ImageData`, created from image file pixels */\r\n    public inline function image_from_pixels(_id:String, _width:Int, _height:Int, _pixels:Uint8Array) : AssetImage\r\n        return AssetImage.load_from_pixels(this, _id, _width, _height, _pixels);\r\n\r\n        /** Get an asset as an `AssetAudio`, data stored as `AudioData`, using the default processor and provider */\r\n    public inline function audio(_id:String, ?_is_stream:Bool=false) : Promise\r\n        return AssetAudio.load(this, _id, _is_stream);\r\n\r\n        /** Get an asset as an `AssetAudio`, data stored as `AudioData`, created from audio file bytes. */\r\n    public inline function audio_from_bytes(_id:String, _bytes:Uint8Array, _format:AudioFormatType) : Promise\r\n        return AssetAudio.load_from_bytes(this, _id, _bytes, _format);\r\n\r\n} //Assets\r\n","package snow.systems.audio;\r\n\r\nimport snow.types.Types;\r\nimport snow.systems.assets.Asset;\r\nimport snow.systems.audio.AudioInstance;\r\nimport snow.api.Promise;\r\nimport snow.api.Debug.*;\r\nimport snow.api.Emitter;\r\n\r\n\r\n@:allow(snow.Snow)\r\nclass Audio {\r\n\r\n        /** access to snow from subsystems */\r\n    public var app : Snow;\r\n        /** access to module specific implementation */\r\n    public var module : ModuleAudio;\r\n        /** Set to false to stop any and all processing in the audio system */\r\n    public var active : Bool = false;\r\n\r\n    var emitter : Emitter<AudioEvent>;\r\n\r\n        /** constructed internally, use `app.audio` */\r\n    function new(_app:Snow) {\r\n\r\n        app = _app;\r\n        module = new ModuleAudio(app);\r\n        emitter = new Emitter();\r\n        active = module.active;\r\n\r\n    } //new\r\n\r\n//Public API\r\n\r\n    @:generic\r\n    public function on<T>(_event:AudioEvent, _handler:T->Void) : Void {\r\n    \r\n        emitter.on(_event, _handler);\r\n    \r\n    } //on\r\n    \r\n    @:generic\r\n    public function off<T>(_event:AudioEvent, _handler:T->Void) : Bool {\r\n    \r\n        return emitter.off(_event, _handler);\r\n    \r\n    } //off\r\n        \r\n    @:generic\r\n    public function emit<T>(_event:AudioEvent, _data:T) : Void {\r\n    \r\n        emitter.emit(_event, _data);\r\n    \r\n    } //emit\r\n    \r\n    public function play(_source:AudioSource, ?_volume:Float=1.0, ?_paused:Bool=false) : AudioHandle {\r\n\r\n        assert(_source != null, 'audio source must not be null');\r\n\r\n        if(!active) {\r\n            return -1;\r\n        }\r\n\r\n        return module.play(_source, _volume, _paused);\r\n\r\n    } //play\r\n\r\n        /** play and loop a sound source, indefinitely. Use stop to end it. */\r\n    public function loop(_source:AudioSource, ?_volume:Float=1.0, ?_paused:Bool=false) : AudioHandle {\r\n        \r\n        assert(_source != null, 'audio source must not be null');\r\n\r\n        if(!active) {\r\n            return -1;\r\n        }\r\n\r\n        return module.loop(_source, _volume, _paused);\r\n\r\n    } //loop\r\n\r\n    public function pause(_handle:AudioHandle) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.pause(_handle);\r\n    } //pause\r\n\r\n    public function unpause(_handle:AudioHandle) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.unpause(_handle);\r\n    } //unpause\r\n\r\n    public function stop(_handle:AudioHandle) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.stop(_handle);\r\n    } //stop\r\n\r\n    public function volume(_handle:AudioHandle, _volume:Float) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.volume(_handle, _volume);\r\n    } //volume\r\n\r\n    public function pan(_handle:AudioHandle, _pan:Float) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.pan(_handle, _pan);\r\n    } //pan\r\n\r\n    public function pitch(_handle:AudioHandle, _pitch:Float) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.pitch(_handle, _pitch);\r\n    } //pitch\r\n\r\n    public function position(_handle:AudioHandle, _position:Float) : Void {\r\n        if(!active || _handle == null) return;\r\n        module.position(_handle, _position);\r\n    } //position\r\n\r\n    public function state_of(_handle:AudioHandle) : AudioState {\r\n        return module.state_of(_handle);\r\n    } //state_of\r\n\r\n    public function loop_of(_handle:AudioHandle) : Bool {\r\n        assert(active, 'audio is suspended, queries are invalid');\r\n        return module.loop_of(_handle);\r\n    } //loop_of\r\n\r\n    public function instance_of(_handle:AudioHandle) : AudioInstance {\r\n        assert(active, 'audio is suspended, queries are invalid');\r\n        return module.instance_of(_handle); \r\n    } //instance_of\r\n\r\n    public function volume_of(_handle:AudioHandle) : Float {\r\n        assert(active, 'audio is suspended, queries are invalid');\r\n        return module.volume_of(_handle); \r\n    } //volume_of\r\n\r\n    public function pan_of(_handle:AudioHandle) : Float {\r\n        assert(active, 'audio is suspended, queries are invalid');\r\n        return module.pan_of(_handle); \r\n    } //pan_of\r\n\r\n    public function pitch_of(_handle:AudioHandle) : Float {\r\n        assert(active, 'audio is suspended, queries are invalid');\r\n        return module.pitch_of(_handle); \r\n    } //pitch_of\r\n\r\n    public function position_of(_handle:AudioHandle) : Float {\r\n        assert(active, 'audio is suspended, queries are invalid');\r\n        return module.position_of(_handle); \r\n    } //position_of\r\n\r\n    public function suspend() : Void {\r\n\r\n        if(!active) {\r\n            return;\r\n        }\r\n\r\n        _debug(\"suspending sound context\");\r\n        active = false;\r\n        module.suspend();\r\n\r\n    } //suspend\r\n\r\n    public function resume() : Void {\r\n\r\n        if(active || !module.active) {\r\n            return;\r\n        }\r\n\r\n        _debug(\"resuming sound context\");\r\n        active = true;\r\n        module.resume();\r\n\r\n    } //resume\r\n\r\n//Internal\r\n\r\n        /** Called by Snow when a system event is dispatched */\r\n    function onevent( _event:SystemEvent ) {\r\n\r\n        module.onevent(_event);\r\n\r\n        if(_event.type == se_freeze) {\r\n            suspend();\r\n        } else if(_event.type == se_unfreeze) {\r\n            resume();\r\n        } else if(_event.type == se_window) {\r\n            switch(_event.window.type) {\r\n                case WindowEventType.we_minimized:\r\n                    suspend();\r\n                case WindowEventType.we_restored:\r\n                    resume();\r\n                case _: {}\r\n            }\r\n        }\r\n\r\n    } //onevent\r\n\r\n        /** Called by Snow, cleans up sounds/system */\r\n    function shutdown() {\r\n\r\n        active = false;\r\n        module.shutdown();\r\n\r\n    } //shutdown\r\n\r\n} //Audio\r\n","package snow.systems.audio;\r\n\r\nimport snow.api.Emitter;\r\nimport snow.systems.audio.AudioSource;\r\nimport snow.types.Types.AudioHandle;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.Debug.*;\r\n\r\nclass AudioInstance {\r\n\r\n    public var source : AudioSource;\r\n    public var handle : AudioHandle;\r\n    public var destroyed : Bool = false;\r\n\r\n        /** Create a new instance from the given audio source.\r\n            Usually called via `source.instance()`, not directly. */\r\n    public function new(_source:AudioSource, _handle:AudioHandle) {\r\n\r\n        source = _source;\r\n        handle = _handle;\r\n        \r\n    }\r\n\r\n    public function tick() : Void {\r\n\r\n    }\r\n\r\n    public function has_ended() : Bool {\r\n        \r\n        assert(destroyed == false, 'snow / Audio / Instance has_ended queried after being destroyed');\r\n\r\n        return source.app.audio.state_of(handle) == as_stopped;\r\n\r\n    } //has_ended\r\n\r\n    public function destroy() {\r\n\r\n        assert(destroyed == false, 'snow / Audio / Instance being destroyed more than once');\r\n\r\n        source.app.audio.emit(ae_destroyed, handle);\r\n        source.instance_killed(this);\r\n        destroyed = true;\r\n        source = null;\r\n        handle = -1;\r\n\r\n    } //destroy\r\n\r\n    public function data_get(_into:Uint8Array, _start:Int, _length:Int, _into_result:Array<Int>) : Array<Int> {\r\n\r\n        assert(destroyed == false, 'snow / Audio / Instance data_get queried after being destroyed');\r\n\r\n        return source.data.portion(_into, _start, _length, _into_result);\r\n\r\n    } //data_get\r\n        \r\n    public function data_seek(_to_samples:Int) : Bool {\r\n\r\n        assert(destroyed == false, 'snow / Audio / Instance data_seek queried after being destroyed');\r\n\r\n        return source.data.seek(_to_samples);\r\n\r\n    } //data_seek\r\n    \r\n} //AudioInstance\r\n","package snow.systems.audio;\r\n\r\nimport snow.api.Debug.*;\r\nimport snow.types.Types.AudioHandle;\r\nimport snow.types.Types.AudioData;\r\nimport snow.systems.audio.AudioInstance;\r\n\r\nclass AudioSource {\r\n\r\n    public var app: snow.Snow;\r\n    public var data: AudioData;\r\n\r\n        /** Streams only:  The size in bytes of a single stream buffer.\r\n            This is ~1 sec in 16 bit mono. default:176400\r\n            for most cases this can be left alone. */\r\n    public var stream_buffer_length : Int = 176400;\r\n        /** Streams only: The number of buffers to queue up. default:2\r\n            For most cases this can be left alone. */\r\n    public var stream_buffer_count : Int = 2;\r\n        /** Whether this source has been destroyed */\r\n    public var destroyed : Bool = false;\r\n        /** A unique key for this source  */\r\n    public var source_id : String;\r\n\r\n        //local list of instances spawned from this source.\r\n        //used when destroying the source, to take instances with it.\r\n    var instances : Array<AudioInstance>;\r\n\r\n    public function new(_app:snow.Snow, _data:AudioData) {\r\n\r\n        app = _app;\r\n        data = _data;\r\n        source_id = app.uniqueid;\r\n\r\n        _debug('AudioSource / `$source_id` / ${data.id}');\r\n\r\n        instances = [];\r\n\r\n    } //new\r\n\r\n        /** Called by the audio system to obtain a new instance of this source. */\r\n    public function instance(_handle:AudioHandle) : AudioInstance {\r\n\r\n        var _instance = new AudioInstance(this, _handle);\r\n\r\n        if(instances.indexOf(_instance) == -1) {\r\n            instances.push(_instance);\r\n        }\r\n\r\n        return _instance;\r\n\r\n    } //instance\r\n\r\n        /** A helper for converting bytes to seconds for a sound source */\r\n    public function bytes_to_seconds(_bytes:Int) : Float {\r\n\r\n        var _word = data.bits_per_sample == 16 ? 2 : 1;\r\n        var _sample_frames = (data.rate * data.channels * _word);\r\n\r\n        return _bytes / _sample_frames;\r\n\r\n    } //bytes_to_seconds\r\n\r\n        /** A helper for converting seconds to bytes for this audio source */\r\n    public function seconds_to_bytes(_seconds:Float) : Int {\r\n\r\n        var _word = data.bits_per_sample == 16 ? 2 : 1;\r\n        var _sample_frames = (data.rate * data.channels * _word);\r\n\r\n        return Std.int(_seconds * _sample_frames);\r\n\r\n    } //seconds_to_bytes\r\n\r\n        //\r\n    public function duration() : Float {\r\n\r\n        return bytes_to_seconds(data.length);\r\n\r\n    } //duration\r\n\r\n    public function destroy() {\r\n\r\n        if(destroyed) {\r\n            log('destroying already destroyed source!');\r\n            return;\r\n        }\r\n\r\n        destroyed = true;\r\n\r\n        var c = instances.length;\r\n        var i = 0;\r\n\r\n        _debug('destroy / $source_id / ${data.id}, stream=${data.is_stream}, instances=$c');\r\n\r\n        while(i < c) {\r\n            var _instance = instances.pop();\r\n            _instance.destroy();\r\n            _instance = null;\r\n            i++;\r\n        }\r\n\r\n        app.audio.emit(ae_destroyed_source, this);\r\n\r\n        data.destroy();\r\n        data = null;\r\n        instances = null;\r\n        app = null;\r\n\r\n    } //destroy\r\n\r\n    @:allow(snow.systems.audio.AudioInstance)\r\n    function instance_killed(_instance:AudioInstance) {\r\n\r\n        instances.remove(_instance);\r\n\r\n    }\r\n\r\n} //AudioSource\r\n","package snow.systems.input;\r\n\r\nimport snow.types.Types;\r\nimport snow.api.Debug.assert;\r\n\r\ntypedef MapIntBool = Map<Int, Bool>;\r\ntypedef MapIntFloat = Map<Int, Float>;\r\n\r\n/** The snow input system. Accessed via `app.input` */\r\n@:allow(snow.Snow)\r\nclass Input {\r\n\r\n        /** access to snow from subsystems */\r\n    var app : Snow;\r\n\r\n        /** An internal value for how many gamepads to pre-set up at creation time */\r\n    var gamepad_init_count = 16;\r\n        /** A prealloacated input event for dispatching */\r\n    var event: InputEvent;\r\n    var key_event: KeyEvent;\r\n    var text_event: TextEvent;\r\n    var mouse_event: MouseEvent;\r\n    var touch_event: TouchEvent;\r\n    var gamepad_event: GamepadEvent;\r\n\r\n    @:allow(snow.core.Runtime)\r\n    var mod_state: ModState;\r\n\r\n        /** Constructed internally, use `app.input` */\r\n    function new( _app:Snow ) {\r\n\r\n        app = _app;\r\n        event = new InputEvent();\r\n        key_event = new KeyEvent();\r\n        text_event = new TextEvent();\r\n        mouse_event = new MouseEvent();\r\n        touch_event = new TouchEvent();\r\n        gamepad_event = new GamepadEvent();\r\n        mod_state = new ModState();\r\n        mod_state.none = true;\r\n\r\n        //keys\r\n\r\n            key_code_pressed = new Map();\r\n            key_code_down = new Map();\r\n            key_code_released = new Map();\r\n\r\n            scan_code_pressed = new Map();\r\n            scan_code_down = new Map();\r\n            scan_code_released = new Map();\r\n\r\n        //mouse\r\n\r\n            mouse_button_pressed = new Map();\r\n            mouse_button_down = new Map();\r\n            mouse_button_released = new Map();\r\n\r\n        //gamepad\r\n\r\n            gamepad_button_pressed = new Map();\r\n            gamepad_button_down = new Map();\r\n            gamepad_button_released = new Map();\r\n            gamepad_axis_values = new Map();\r\n            \r\n            for(i in 0...gamepad_init_count) {\r\n                gamepad_button_pressed.set(i, new Map());\r\n                gamepad_button_down.set(i, new Map());\r\n                gamepad_button_released.set(i, new Map());\r\n                gamepad_axis_values.set(i, new Map());\r\n            }\r\n\r\n        //touch\r\n\r\n            touches_down = new Map();\r\n\r\n    } //new\r\n\r\n        /** Destroy and clean up etc. */\r\n    function shutdown() {\r\n\r\n    } //shutdown\r\n\r\n//Public facing API\r\n\r\n\r\n    //Key immediate style access\r\n     //\r\n            /** returns true if the `Key` value was pressed in the latest frame */\r\n        public function keypressed( _code:Int ) : Bool {\r\n            return key_code_pressed.exists(_code);\r\n        } //keypressed\r\n\r\n            /** returns true if the `Key` value was released in the latest frame */\r\n        public function keyreleased( _code:Int ) : Bool {\r\n            return key_code_released.exists(_code);\r\n        } //keyreleased\r\n\r\n            /** returns true if the `Key` value is down at the time of calling this */\r\n        public function keydown( _code:Int ) : Bool {\r\n           return key_code_down.exists(_code);\r\n        } //keydown\r\n\r\n            /** returns true if the `Scan` value was pressed in the latest frame */\r\n        public function scanpressed( _code:Int ) : Bool {\r\n            return scan_code_pressed.exists(_code);\r\n        } //scanpressed\r\n\r\n            /** returns true if the `Scan` value was released in the latest frame */\r\n        public function scanreleased( _code:Int ) : Bool {\r\n            return scan_code_released.exists(_code);\r\n        } //scanreleased\r\n\r\n            /** returns true if the `Scan` value is down at the time of calling this */\r\n        public function scandown( _code:Int ) : Bool {\r\n           return scan_code_down.exists(_code);\r\n        } //keydown\r\n\r\n    //Mouse immediate style access\r\n      //\r\n            /** returns true if the mouse button was pressed in the latest frame */\r\n        public function mousepressed( _button:Int ) : Bool {\r\n            return mouse_button_pressed.exists(_button);\r\n        } //keypressed\r\n\r\n            /** returns true if the mouse button was released in the latest frame */\r\n        public function mousereleased( _button:Int ) : Bool {\r\n            return mouse_button_released.exists(_button);\r\n        } //mousereleased\r\n\r\n            /** returns true if the mouse button value is down at the time of calling this */\r\n        public function mousedown( _button:Int ) : Bool {\r\n           return mouse_button_down.exists(_button);\r\n        } //mousedown\r\n\r\n    //Gamepad immediate style access\r\n     //\r\n            /** returns true if the mouse button was pressed in the latest frame */\r\n        public function gamepadpressed( _gamepad:Int, _button:Int ) : Bool {\r\n\r\n            var _gamepad_state = gamepad_button_pressed.get(_gamepad);\r\n            return _gamepad_state != null ? _gamepad_state.exists(_button) : false;\r\n\r\n        } //keypressed\r\n\r\n            /** returns true if the gamepad button was released in the latest frame */\r\n        public function gamepadreleased( _gamepad:Int, _button:Int ) : Bool {\r\n\r\n            var _gamepad_state = gamepad_button_released.get(_gamepad);\r\n            return _gamepad_state != null ? _gamepad_state.exists(_button) : false;\r\n\r\n        } //gamepadreleased\r\n\r\n            /** returns true if the gamepad button value is down at the time of calling this */\r\n        public function gamepaddown( _gamepad:Int, _button:Int ) : Bool {\r\n\r\n           var _gamepad_state = gamepad_button_down.get(_gamepad);\r\n            return _gamepad_state != null ? _gamepad_state.exists(_button) : false;\r\n\r\n        } //gamepaddown\r\n\r\n            /** returns true if the gamepad button value is down at the time of calling this */\r\n        public function gamepadaxis( _gamepad:Int, _axis:Int ) : Float {\r\n\r\n            var _gamepad_state = gamepad_axis_values.get(_gamepad);\r\n            if(_gamepad_state != null) {\r\n                if(_gamepad_state.exists(_axis)) {\r\n                    return _gamepad_state.get(_axis);\r\n                }\r\n            }\r\n\r\n            return 0;\r\n\r\n        } //gamepaddown\r\n\r\n        /** manually dispatch a key down event through the system, delivered to the app handlers, internal and external */\r\n\r\n    public function dispatch_key_down_event( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {\r\n        //\r\n\r\n            //only do the realtime flags if not key repeat\r\n        if(!repeat) {\r\n                //flag the key as pressed, but unprocessed (false)\r\n            key_code_pressed.set(keycode, false);\r\n                //flag it as down, because keyup removes it\r\n            key_code_down.set(keycode, true);\r\n                //flag the scan as pressed, but unprocessed (false)\r\n            scan_code_pressed.set(scancode, false);\r\n                //flag it as down, because keyup removes it\r\n            scan_code_down.set(scancode, true);\r\n        }\r\n\r\n            //dispatch the event\r\n        key_event.set(ke_down, keycode, scancode, repeat, mod);\r\n        event.set_key(key_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n            //call the app directly\r\n        app.host.onkeydown(keycode, scancode, repeat, mod, timestamp, window_id);\r\n\r\n    } //dispatch_key_down_event\r\n\r\n        /** manually dispatch a key up event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_key_up_event( keycode:Int, scancode:Int, repeat:Bool, mod:ModState, timestamp:Float, window_id:Int ) {\r\n        //\r\n\r\n            //flag it as released but unprocessed\r\n        key_code_released.set(keycode, false);\r\n            //remove the down flag\r\n        key_code_down.remove(keycode);\r\n\r\n            //flag it as released but unprocessed\r\n        scan_code_released.set(scancode, false);\r\n            //remove the down flag\r\n        scan_code_down.remove(scancode);\r\n\r\n\r\n            //dispatch the event\r\n        key_event.set(ke_up, keycode, scancode, repeat, mod);\r\n        event.set_key(key_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n            //call the app directly\r\n        app.host.onkeyup(keycode, scancode, repeat, mod, timestamp, window_id);\r\n\r\n    } //dispatch_key_up_event\r\n\r\n        /** manually dispatch a text event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_text_event( text:String, start:Int, length:Int, type:TextEventType, timestamp:Float, window_id:Int ) {\r\n\r\n        text_event.set(type, text, start, length);\r\n        event.set_text(text_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ontextinput( text, start, length, type, timestamp, window_id );\r\n\r\n    } //dispatch_text_event\r\n\r\n\r\n        /** manually dispatch a mouse move event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_mouse_move_event( x:Int, y:Int, xrel:Int, yrel:Int, timestamp:Float, window_id:Int ) {\r\n\r\n        mouse_event.set(me_move, x, y, xrel, yrel, 0, 0, 0);\r\n        event.set_mouse(mouse_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.onmousemove( x, y, xrel, yrel, timestamp, window_id );\r\n\r\n    } //dispatch_mouse_move_event\r\n\r\n        /** manually dispatch a mouse button down event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_mouse_down_event( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {\r\n        //\r\n            //flag the button as pressed, but unprocessed (false)\r\n        mouse_button_pressed.set(button, false);\r\n            //flag it as down, because mouseup removes it\r\n        mouse_button_down.set(button, true);\r\n\r\n        mouse_event.set(me_down, x, y, 0, 0, button, 0, 0);\r\n        event.set_mouse(mouse_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.onmousedown( x, y, button, timestamp, window_id );\r\n\r\n    } //dispatch_mouse_down_event\r\n\r\n        /** manually dispatch a mouse button up event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_mouse_up_event( x:Int, y:Int, button:Int, timestamp:Float, window_id:Int ) {\r\n        //\r\n            //flag it as released but unprocessed\r\n        mouse_button_released.set(button, false);\r\n            //remove the down flag\r\n        mouse_button_down.remove(button);\r\n\r\n        mouse_event.set(me_up, x, y, 0, 0, button, 0, 0);\r\n        event.set_mouse(mouse_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n\r\n        app.host.onmouseup( x, y, button, timestamp, window_id );\r\n\r\n    } //dispatch_mouse_up_event\r\n\r\n        /** manually dispatch a mouse wheel event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_mouse_wheel_event( x:Float, y:Float, timestamp:Float, window_id:Int ) {\r\n\r\n        mouse_event.set(me_wheel, 0, 0, 0, 0, 0, x, y);\r\n        event.set_mouse(mouse_event, window_id, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.onmousewheel( x, y, timestamp, window_id );\r\n\r\n    } //dispatch_mouse_wheel_event\r\n\r\n        /** manually dispatch a touch down through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_touch_down_event( x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float ) {\r\n\r\n        if(!touches_down.exists(touch_id)) {\r\n            touch_count++;\r\n            touches_down.set(touch_id, true);\r\n        }\r\n\r\n        touch_event.set(te_down, touch_id, x, y, dx, dy);\r\n        event.set_touch(touch_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ontouchdown( x, y, dx, dy, touch_id, timestamp );\r\n\r\n    } //dispatch_touch_down_event\r\n\r\n        /** manually dispatch a touch up through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_touch_up_event( x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float ) {\r\n\r\n        touch_event.set(te_up, touch_id, x, y, dx, dy);\r\n        event.set_touch(touch_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ontouchup( x, y, dx, dy, touch_id, timestamp );\r\n\r\n        if(touches_down.remove(touch_id)) {\r\n            touch_count--;\r\n        }\r\n\r\n    } //dispatch_touch_up_event\r\n\r\n        /** manually dispatch a touch move through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_touch_move_event( x:Float, y:Float, dx:Float, dy:Float, touch_id:Int, timestamp:Float ) {\r\n        \r\n        touch_event.set(te_move, touch_id, x, y, dx, dy);\r\n        event.set_touch(touch_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ontouchmove( x, y, dx, dy, touch_id, timestamp );\r\n\r\n    } //dispatch_touch_move_event\r\n\r\n        /** manually dispatch a gamepad axis event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_gamepad_axis_event( gamepad:Int, axis:Int, value:Float, timestamp:Float ) {\r\n\r\n        assert(gamepad_axis_values.exists(gamepad), 'gamepad with id $gamepad not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?');\r\n\r\n            //update the axis value\r\n        gamepad_axis_values.get(gamepad).set(axis, value);\r\n\r\n        gamepad_event.set_axis(gamepad, axis, value);\r\n        event.set_gamepad(gamepad_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ongamepadaxis( gamepad, axis, value, timestamp );\r\n\r\n    } //dispatch_gamepad_axis_event\r\n\r\n        /** manually dispatch a gamepad button down event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_gamepad_button_down_event( gamepad:Int, button:Int, value:Float, timestamp:Float ) {\r\n\r\n        assert(gamepad_button_pressed.exists(gamepad), 'gamepad with id $gamepad not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?');\r\n        assert(gamepad_button_down.exists(gamepad), 'gamepad with id $gamepad not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?');\r\n\r\n            //flag it as released but unprocessed\r\n        gamepad_button_pressed.get(gamepad).set(button, false);\r\n            //flag it as down, because gamepadup removes it\r\n        gamepad_button_down.get(gamepad).set(button, true);\r\n\r\n        gamepad_event.set_button(ge_down, gamepad, button, value);\r\n        event.set_gamepad(gamepad_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ongamepaddown( gamepad, button, value, timestamp );\r\n\r\n    } //dispatch_gamepad_button_down_event\r\n\r\n        /** manually dispatch a gamepad button up event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_gamepad_button_up_event( gamepad:Int, button:Int, value:Float, timestamp:Float ) {\r\n\r\n        assert(gamepad_button_released.exists(gamepad), 'gamepad with id $gamepad not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?');\r\n        assert(gamepad_button_down.exists(gamepad), 'gamepad with id $gamepad not pre-inited? Is gamepad_init_count too low, or the gamepad id not sequential from 0?');\r\n\r\n            //flag it as released but unprocessed\r\n        gamepad_button_released.get(gamepad).set(button, false);\r\n            //flag it as down, because gamepadup removes it\r\n        gamepad_button_down.get(gamepad).remove(button);\r\n\r\n        gamepad_event.set_button(ge_up, gamepad, button, value);\r\n        event.set_gamepad(gamepad_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ongamepadup(gamepad, button, value, timestamp);\r\n\r\n    } //dispatch_gamepad_button_up_event\r\n\r\n        /** manually dispatch a gamepad device event through the system, delivered to the app handlers, internal and external */\r\n    public function dispatch_gamepad_device_event( gamepad:Int, id:String, type:GamepadDeviceEventType, timestamp:Float ) {\r\n\r\n        gamepad_event.set_device(gamepad, id, type);\r\n        event.set_gamepad(gamepad_event, timestamp);\r\n        app.dispatch_input_event(event);\r\n\r\n        app.host.ongamepaddevice(gamepad, id, type, timestamp);\r\n\r\n    } //dispatch_gamepad_device_event\r\n\r\n//Interal API\r\n //\r\n        /** Called when a system event is dispatched through the core */\r\n    function onevent( _event:SystemEvent ) {\r\n\r\n        if(_event.type == se_tick) {\r\n            _update_keystate();\r\n            _update_gamepadstate();\r\n            _update_mousestate();\r\n        }\r\n\r\n    } //onevent\r\n\r\n\r\n//internal\r\n //\r\n        /** update mouse pressed/released/down states */\r\n    function _update_mousestate() {\r\n\r\n        for(_code in mouse_button_pressed.keys()){\r\n\r\n            if(mouse_button_pressed.get(_code)){\r\n                mouse_button_pressed.remove(_code);\r\n            } else {\r\n                mouse_button_pressed.set(_code, true);\r\n            }\r\n\r\n        } //each mouse_button_pressed\r\n\r\n        for(_code in mouse_button_released.keys()){\r\n\r\n            if(mouse_button_released.get(_code)){\r\n                mouse_button_released.remove(_code);\r\n            } else {\r\n                mouse_button_released.set(_code, true);\r\n            }\r\n\r\n        } //each mouse_button_released\r\n\r\n    } //_update_mousestate\r\n\r\n        /** update gamepad pressed/released/down/axis states */\r\n    function _update_gamepadstate() {\r\n\r\n        for(_gamepad_pressed in gamepad_button_pressed){\r\n            for(_button in _gamepad_pressed.keys()) {\r\n\r\n                if(_gamepad_pressed.get(_button)){\r\n                    _gamepad_pressed.remove(_button);\r\n                } else {\r\n                    _gamepad_pressed.set(_button, true);\r\n                }\r\n\r\n            } //each _gamepad_pressed\r\n        } //each gamepad_button_pressed\r\n\r\n        for(_gamepad_released in gamepad_button_released){\r\n            for(_button in _gamepad_released.keys()) {\r\n\r\n                if(_gamepad_released.get(_button)){\r\n                    _gamepad_released.remove(_button);\r\n                } else {\r\n                    _gamepad_released.set(_button, true);\r\n                }\r\n\r\n            } //each _gamepad_released\r\n        } //each gamepad_button_released\r\n\r\n    } //_update_gamepadstate\r\n\r\n        /** update key pressed/released/down states */\r\n    function _update_keystate() {\r\n\r\n            //remove any stale key pressed value\r\n            //unless it wasn't alive for a full frame yet,\r\n            //then flag it so that it may be\r\n        for(_code in key_code_pressed.keys()){\r\n\r\n            if(key_code_pressed.get(_code)){\r\n                key_code_pressed.remove(_code);\r\n            } else {\r\n                key_code_pressed.set(_code, true);\r\n            }\r\n\r\n        } //each key_code_pressed\r\n\r\n            //remove any stale key released value\r\n            //unless it wasn't alive for a full frame yet,\r\n            //then flag it so that it may be\r\n        for(_code in key_code_released.keys()){\r\n\r\n            if(key_code_released.get(_code)){\r\n                key_code_released.remove(_code);\r\n            } else {\r\n                key_code_released.set(_code, true);\r\n            }\r\n\r\n        } //each key_code_released\r\n\r\n    //scans\r\n\r\n            //remove any stale key pressed value\r\n            //unless it wasn't alive for a full frame yet,\r\n            //then flag it so that it may be\r\n        for(_code in scan_code_pressed.keys()){\r\n\r\n            if(scan_code_pressed.get(_code)){\r\n                scan_code_pressed.remove(_code);\r\n            } else {\r\n                scan_code_pressed.set(_code, true);\r\n            }\r\n\r\n        } //each scan_code_pressed\r\n\r\n            //remove any stale key released value\r\n            //unless it wasn't alive for a full frame yet,\r\n            //then flag it so that it may be\r\n        for(_code in scan_code_released.keys()){\r\n\r\n            if(scan_code_released.get(_code)){\r\n                scan_code_released.remove(_code);\r\n            } else {\r\n                scan_code_released.set(_code, true);\r\n            }\r\n\r\n        } //each scan_code_released\r\n\r\n    } //_update_keystate\r\n\r\n\r\n\r\n        //this is the keycode based flags for keypressed/keyreleased/keydown\r\n    var key_code_down : MapIntBool;\r\n    var key_code_pressed : MapIntBool;\r\n    var key_code_released : MapIntBool;\r\n\r\n        //this is the scancode based flags for scanpressed/scanreleased/scandown\r\n    var scan_code_down : MapIntBool;\r\n    var scan_code_pressed : MapIntBool;\r\n    var scan_code_released : MapIntBool;\r\n\r\n        //this is the mouse button based flags for mousepressed/mousereleased/mousedown\r\n    var mouse_button_down : MapIntBool;\r\n    var mouse_button_pressed : MapIntBool;\r\n    var mouse_button_released : MapIntBool;\r\n\r\n        //this is the gamepad button based flags for gamepadpressed/gamepadreleased/gamepaddown\r\n    var gamepad_button_down : Map<Int, MapIntBool >;\r\n    var gamepad_button_pressed : Map<Int, MapIntBool >;\r\n    var gamepad_button_released : Map<Int, MapIntBool >;\r\n    var gamepad_axis_values : Map<Int, MapIntFloat >;\r\n\r\n        //:todo: touch state maps and count\r\n        //map of the touches currently down,\r\n    @:noCompletion public var touch_count : Int = 0;\r\n    @:noCompletion public var touches_down : MapIntBool;\r\n\r\n\r\n} //Input\r\n\r\n\r\n","package snow.systems.input;\r\n\r\n\r\n/** The keycode class, with conversion helpers for scancodes. The values below come directly from SDL header include files,\r\nbut they aren't specific to SDL so they are used generically */\r\n@:noCompletion class Keycodes {\r\n\r\n    /** Convert a scancode to a keycode for comparison */\r\n    public static inline function from_scan( scancode : Int ) : Int {\r\n\r\n        return (scancode | Scancodes.MASK);\r\n\r\n    } //from_scan\r\n\r\n        /** Convert a keycode to a scancode if possible.\r\n            NOTE - this will only map a large % but not all keys,\r\n            there is a list of unmapped keys commented in the code. */\r\n    public static function to_scan( keycode : Int ) : Int {\r\n\r\n            //quite a lot map directly to a masked scancode\r\n            //if that's the case, return it directly\r\n        if ((keycode & Scancodes.MASK) != 0) {\r\n            return keycode &~ Scancodes.MASK;\r\n        }\r\n\r\n            //now we translate them to the scan where unmapped\r\n\r\n        switch(keycode) {\r\n            case Keycodes.enter:         return Scancodes.enter;\r\n            case Keycodes.escape:        return Scancodes.escape;\r\n            case Keycodes.backspace:     return Scancodes.backspace;\r\n            case Keycodes.tab:           return Scancodes.tab;\r\n            case Keycodes.space:         return Scancodes.space;\r\n            case Keycodes.slash:         return Scancodes.slash;\r\n            case Keycodes.key_0:         return Scancodes.key_0;\r\n            case Keycodes.key_1:         return Scancodes.key_1;\r\n            case Keycodes.key_2:         return Scancodes.key_2;\r\n            case Keycodes.key_3:         return Scancodes.key_3;\r\n            case Keycodes.key_4:         return Scancodes.key_4;\r\n            case Keycodes.key_5:         return Scancodes.key_5;\r\n            case Keycodes.key_6:         return Scancodes.key_6;\r\n            case Keycodes.key_7:         return Scancodes.key_7;\r\n            case Keycodes.key_8:         return Scancodes.key_8;\r\n            case Keycodes.key_9:         return Scancodes.key_9;\r\n            case Keycodes.semicolon:     return Scancodes.semicolon;\r\n            case Keycodes.equals:        return Scancodes.equals;\r\n            case Keycodes.leftbracket:   return Scancodes.leftbracket;\r\n            case Keycodes.backslash:     return Scancodes.backslash;\r\n            case Keycodes.rightbracket:  return Scancodes.rightbracket;\r\n            case Keycodes.backquote:     return Scancodes.grave;\r\n            case Keycodes.key_a:         return Scancodes.key_a;\r\n            case Keycodes.key_b:         return Scancodes.key_b;\r\n            case Keycodes.key_c:         return Scancodes.key_c;\r\n            case Keycodes.key_d:         return Scancodes.key_d;\r\n            case Keycodes.key_e:         return Scancodes.key_e;\r\n            case Keycodes.key_f:         return Scancodes.key_f;\r\n            case Keycodes.key_g:         return Scancodes.key_g;\r\n            case Keycodes.key_h:         return Scancodes.key_h;\r\n            case Keycodes.key_i:         return Scancodes.key_i;\r\n            case Keycodes.key_j:         return Scancodes.key_j;\r\n            case Keycodes.key_k:         return Scancodes.key_k;\r\n            case Keycodes.key_l:         return Scancodes.key_l;\r\n            case Keycodes.key_m:         return Scancodes.key_m;\r\n            case Keycodes.key_n:         return Scancodes.key_n;\r\n            case Keycodes.key_o:         return Scancodes.key_o;\r\n            case Keycodes.key_p:         return Scancodes.key_p;\r\n            case Keycodes.key_q:         return Scancodes.key_q;\r\n            case Keycodes.key_r:         return Scancodes.key_r;\r\n            case Keycodes.key_s:         return Scancodes.key_s;\r\n            case Keycodes.key_t:         return Scancodes.key_t;\r\n            case Keycodes.key_u:         return Scancodes.key_u;\r\n            case Keycodes.key_v:         return Scancodes.key_v;\r\n            case Keycodes.key_w:         return Scancodes.key_w;\r\n            case Keycodes.key_x:         return Scancodes.key_x;\r\n            case Keycodes.key_y:         return Scancodes.key_y;\r\n            case Keycodes.key_z:         return Scancodes.key_z;\r\n\r\n\r\n                //These are unmappable because they are not keys\r\n                //but values on the key (like a shift key combo)\r\n                //and to hardcode them to the key you think it is,\r\n                //would be to map it to a fixed locale probably.\r\n                //They don't have scancodes, so we don't return one\r\n            // case exclaim:      ;\r\n            // case quotedbl:     ;\r\n            // case hash:         ;\r\n            // case percent:      ;\r\n            // case dollar:       ;\r\n            // case ampersand:    ;\r\n            // case quote:        ;\r\n            // case leftparen:    ;\r\n            // case rightparen:   ;\r\n            // case asterisk:     ;\r\n            // case plus:         ;\r\n            // case comma:        ;\r\n            // case minus:        ;\r\n            // case period:       ;\r\n            // case less:         ;\r\n            // case colon:        ;\r\n            // case greater:      ;\r\n            // case question:     ;\r\n            // case at:           ;\r\n            // case caret:        ;\r\n            // case underscore:   ;\r\n\r\n        } //switch(keycode)\r\n\r\n        return Scancodes.unknown;\r\n\r\n    } //to_scan\r\n\r\n        /** Convert a keycode to string */\r\n    public static function name( keycode : Int ) : String {\r\n\r\n        //we don't use to_scan because it would consume\r\n        //the typeable characters and we want those as unicode etc.\r\n\r\n        if ((keycode & Scancodes.MASK) != 0) {\r\n            return Scancodes.name(keycode &~ Scancodes.MASK);\r\n        }\r\n\r\n        switch(keycode) {\r\n\r\n            case Keycodes.enter:     return Scancodes.name(Scancodes.enter);\r\n            case Keycodes.escape:    return Scancodes.name(Scancodes.escape);\r\n            case Keycodes.backspace: return Scancodes.name(Scancodes.backspace);\r\n            case Keycodes.tab:       return Scancodes.name(Scancodes.tab);\r\n            case Keycodes.space:     return Scancodes.name(Scancodes.space);\r\n            case Keycodes.delete:    return Scancodes.name(Scancodes.delete);\r\n\r\n            default: {\r\n\r\n                var decoder = new haxe.Utf8();\r\n                    decoder.addChar(keycode);\r\n\r\n                return decoder.toString();\r\n\r\n            } //default\r\n\r\n        } //switch(keycode)\r\n\r\n    } //name\r\n\r\n    public static inline var unknown : Int              = 0;\r\n\r\n    public static inline var enter : Int                = 13;\r\n    public static inline var escape : Int               = 27;\r\n    public static inline var backspace : Int            = 8;\r\n    public static inline var tab : Int                  = 9;\r\n    public static inline var space : Int                = 32;\r\n    public static inline var exclaim : Int              = 33;\r\n    public static inline var quotedbl : Int             = 34;\r\n    public static inline var hash : Int                 = 35;\r\n    public static inline var percent : Int              = 37;\r\n    public static inline var dollar : Int               = 36;\r\n    public static inline var ampersand : Int            = 38;\r\n    public static inline var quote : Int                = 39;\r\n    public static inline var leftparen : Int            = 40;\r\n    public static inline var rightparen : Int           = 41;\r\n    public static inline var asterisk : Int             = 42;\r\n    public static inline var plus : Int                 = 43;\r\n    public static inline var comma : Int                = 44;\r\n    public static inline var minus : Int                = 45;\r\n    public static inline var period : Int               = 46;\r\n    public static inline var slash : Int                = 47;\r\n    public static inline var key_0 : Int                = 48;\r\n    public static inline var key_1 : Int                = 49;\r\n    public static inline var key_2 : Int                = 50;\r\n    public static inline var key_3 : Int                = 51;\r\n    public static inline var key_4 : Int                = 52;\r\n    public static inline var key_5 : Int                = 53;\r\n    public static inline var key_6 : Int                = 54;\r\n    public static inline var key_7 : Int                = 55;\r\n    public static inline var key_8 : Int                = 56;\r\n    public static inline var key_9 : Int                = 57;\r\n    public static inline var colon : Int                = 58;\r\n    public static inline var semicolon : Int            = 59;\r\n    public static inline var less : Int                 = 60;\r\n    public static inline var equals : Int               = 61;\r\n    public static inline var greater : Int              = 62;\r\n    public static inline var question : Int             = 63;\r\n    public static inline var at : Int                   = 64;\r\n\r\n       // Skip uppercase letters\r\n\r\n    public static inline var leftbracket : Int          = 91;\r\n    public static inline var backslash : Int            = 92;\r\n    public static inline var rightbracket : Int         = 93;\r\n    public static inline var caret : Int                = 94;\r\n    public static inline var underscore : Int           = 95;\r\n    public static inline var backquote : Int            = 96;\r\n    public static inline var key_a : Int                = 97;\r\n    public static inline var key_b : Int                = 98;\r\n    public static inline var key_c : Int                = 99;\r\n    public static inline var key_d : Int                = 100;\r\n    public static inline var key_e : Int                = 101;\r\n    public static inline var key_f : Int                = 102;\r\n    public static inline var key_g : Int                = 103;\r\n    public static inline var key_h : Int                = 104;\r\n    public static inline var key_i : Int                = 105;\r\n    public static inline var key_j : Int                = 106;\r\n    public static inline var key_k : Int                = 107;\r\n    public static inline var key_l : Int                = 108;\r\n    public static inline var key_m : Int                = 109;\r\n    public static inline var key_n : Int                = 110;\r\n    public static inline var key_o : Int                = 111;\r\n    public static inline var key_p : Int                = 112;\r\n    public static inline var key_q : Int                = 113;\r\n    public static inline var key_r : Int                = 114;\r\n    public static inline var key_s : Int                = 115;\r\n    public static inline var key_t : Int                = 116;\r\n    public static inline var key_u : Int                = 117;\r\n    public static inline var key_v : Int                = 118;\r\n    public static inline var key_w : Int                = 119;\r\n    public static inline var key_x : Int                = 120;\r\n    public static inline var key_y : Int                = 121;\r\n    public static inline var key_z : Int                = 122;\r\n\r\n    public static inline var capslock : Int             = from_scan(Scancodes.capslock);\r\n\r\n    public static inline var f1 : Int                   = from_scan(Scancodes.f1);\r\n    public static inline var f2 : Int                   = from_scan(Scancodes.f2);\r\n    public static inline var f3 : Int                   = from_scan(Scancodes.f3);\r\n    public static inline var f4 : Int                   = from_scan(Scancodes.f4);\r\n    public static inline var f5 : Int                   = from_scan(Scancodes.f5);\r\n    public static inline var f6 : Int                   = from_scan(Scancodes.f6);\r\n    public static inline var f7 : Int                   = from_scan(Scancodes.f7);\r\n    public static inline var f8 : Int                   = from_scan(Scancodes.f8);\r\n    public static inline var f9 : Int                   = from_scan(Scancodes.f9);\r\n    public static inline var f10 : Int                  = from_scan(Scancodes.f10);\r\n    public static inline var f11 : Int                  = from_scan(Scancodes.f11);\r\n    public static inline var f12 : Int                  = from_scan(Scancodes.f12);\r\n\r\n    public static inline var printscreen : Int          = from_scan(Scancodes.printscreen);\r\n    public static inline var scrolllock : Int           = from_scan(Scancodes.scrolllock);\r\n    public static inline var pause : Int                = from_scan(Scancodes.pause);\r\n    public static inline var insert : Int               = from_scan(Scancodes.insert);\r\n    public static inline var home : Int                 = from_scan(Scancodes.home);\r\n    public static inline var pageup : Int               = from_scan(Scancodes.pageup);\r\n    public static inline var delete : Int               = 127;\r\n    public static inline var end : Int                  = from_scan(Scancodes.end);\r\n    public static inline var pagedown : Int             = from_scan(Scancodes.pagedown);\r\n    public static inline var right : Int                = from_scan(Scancodes.right);\r\n    public static inline var left : Int                 = from_scan(Scancodes.left);\r\n    public static inline var down : Int                 = from_scan(Scancodes.down);\r\n    public static inline var up : Int                   = from_scan(Scancodes.up);\r\n\r\n    public static inline var numlockclear : Int         = from_scan(Scancodes.numlockclear);\r\n    public static inline var kp_divide : Int            = from_scan(Scancodes.kp_divide);\r\n    public static inline var kp_multiply : Int          = from_scan(Scancodes.kp_multiply);\r\n    public static inline var kp_minus : Int             = from_scan(Scancodes.kp_minus);\r\n    public static inline var kp_plus : Int              = from_scan(Scancodes.kp_plus);\r\n    public static inline var kp_enter : Int             = from_scan(Scancodes.kp_enter);\r\n    public static inline var kp_1 : Int                 = from_scan(Scancodes.kp_1);\r\n    public static inline var kp_2 : Int                 = from_scan(Scancodes.kp_2);\r\n    public static inline var kp_3 : Int                 = from_scan(Scancodes.kp_3);\r\n    public static inline var kp_4 : Int                 = from_scan(Scancodes.kp_4);\r\n    public static inline var kp_5 : Int                 = from_scan(Scancodes.kp_5);\r\n    public static inline var kp_6 : Int                 = from_scan(Scancodes.kp_6);\r\n    public static inline var kp_7 : Int                 = from_scan(Scancodes.kp_7);\r\n    public static inline var kp_8 : Int                 = from_scan(Scancodes.kp_8);\r\n    public static inline var kp_9 : Int                 = from_scan(Scancodes.kp_9);\r\n    public static inline var kp_0 : Int                 = from_scan(Scancodes.kp_0);\r\n    public static inline var kp_period : Int            = from_scan(Scancodes.kp_period);\r\n\r\n    public static inline var application : Int          = from_scan(Scancodes.application);\r\n    public static inline var power : Int                = from_scan(Scancodes.power);\r\n    public static inline var kp_equals : Int            = from_scan(Scancodes.kp_equals);\r\n    public static inline var f13 : Int                  = from_scan(Scancodes.f13);\r\n    public static inline var f14 : Int                  = from_scan(Scancodes.f14);\r\n    public static inline var f15 : Int                  = from_scan(Scancodes.f15);\r\n    public static inline var f16 : Int                  = from_scan(Scancodes.f16);\r\n    public static inline var f17 : Int                  = from_scan(Scancodes.f17);\r\n    public static inline var f18 : Int                  = from_scan(Scancodes.f18);\r\n    public static inline var f19 : Int                  = from_scan(Scancodes.f19);\r\n    public static inline var f20 : Int                  = from_scan(Scancodes.f20);\r\n    public static inline var f21 : Int                  = from_scan(Scancodes.f21);\r\n    public static inline var f22 : Int                  = from_scan(Scancodes.f22);\r\n    public static inline var f23 : Int                  = from_scan(Scancodes.f23);\r\n    public static inline var f24 : Int                  = from_scan(Scancodes.f24);\r\n    public static inline var execute : Int              = from_scan(Scancodes.execute);\r\n    public static inline var help : Int                 = from_scan(Scancodes.help);\r\n    public static inline var menu : Int                 = from_scan(Scancodes.menu);\r\n    public static inline var select : Int               = from_scan(Scancodes.select);\r\n    public static inline var stop : Int                 = from_scan(Scancodes.stop);\r\n    public static inline var again : Int                = from_scan(Scancodes.again);\r\n    public static inline var undo : Int                 = from_scan(Scancodes.undo);\r\n    public static inline var cut : Int                  = from_scan(Scancodes.cut);\r\n    public static inline var copy : Int                 = from_scan(Scancodes.copy);\r\n    public static inline var paste : Int                = from_scan(Scancodes.paste);\r\n    public static inline var find : Int                 = from_scan(Scancodes.find);\r\n    public static inline var mute : Int                 = from_scan(Scancodes.mute);\r\n    public static inline var volumeup : Int             = from_scan(Scancodes.volumeup);\r\n    public static inline var volumedown : Int           = from_scan(Scancodes.volumedown);\r\n    public static inline var kp_comma : Int             = from_scan(Scancodes.kp_comma);\r\n    public static inline var kp_equalsas400 : Int       = from_scan(Scancodes.kp_equalsas400);\r\n\r\n    public static inline var alterase : Int             = from_scan(Scancodes.alterase);\r\n    public static inline var sysreq : Int               = from_scan(Scancodes.sysreq);\r\n    public static inline var cancel : Int               = from_scan(Scancodes.cancel);\r\n    public static inline var clear : Int                = from_scan(Scancodes.clear);\r\n    public static inline var prior : Int                = from_scan(Scancodes.prior);\r\n    public static inline var return2 : Int              = from_scan(Scancodes.return2);\r\n    public static inline var separator : Int            = from_scan(Scancodes.separator);\r\n    public static inline var out : Int                  = from_scan(Scancodes.out);\r\n    public static inline var oper : Int                 = from_scan(Scancodes.oper);\r\n    public static inline var clearagain : Int           = from_scan(Scancodes.clearagain);\r\n    public static inline var crsel : Int                = from_scan(Scancodes.crsel);\r\n    public static inline var exsel : Int                = from_scan(Scancodes.exsel);\r\n\r\n    public static inline var kp_00 : Int                = from_scan(Scancodes.kp_00);\r\n    public static inline var kp_000 : Int               = from_scan(Scancodes.kp_000);\r\n    public static inline var thousandsseparator : Int   = from_scan(Scancodes.thousandsseparator);\r\n    public static inline var decimalseparator : Int     = from_scan(Scancodes.decimalseparator);\r\n    public static inline var currencyunit : Int         = from_scan(Scancodes.currencyunit);\r\n    public static inline var currencysubunit : Int      = from_scan(Scancodes.currencysubunit);\r\n    public static inline var kp_leftparen : Int         = from_scan(Scancodes.kp_leftparen);\r\n    public static inline var kp_rightparen : Int        = from_scan(Scancodes.kp_rightparen);\r\n    public static inline var kp_leftbrace : Int         = from_scan(Scancodes.kp_leftbrace);\r\n    public static inline var kp_rightbrace : Int        = from_scan(Scancodes.kp_rightbrace);\r\n    public static inline var kp_tab : Int               = from_scan(Scancodes.kp_tab);\r\n    public static inline var kp_backspace : Int         = from_scan(Scancodes.kp_backspace);\r\n    public static inline var kp_a : Int                 = from_scan(Scancodes.kp_a);\r\n    public static inline var kp_b : Int                 = from_scan(Scancodes.kp_b);\r\n    public static inline var kp_c : Int                 = from_scan(Scancodes.kp_c);\r\n    public static inline var kp_d : Int                 = from_scan(Scancodes.kp_d);\r\n    public static inline var kp_e : Int                 = from_scan(Scancodes.kp_e);\r\n    public static inline var kp_f : Int                 = from_scan(Scancodes.kp_f);\r\n    public static inline var kp_xor : Int               = from_scan(Scancodes.kp_xor);\r\n    public static inline var kp_power : Int             = from_scan(Scancodes.kp_power);\r\n    public static inline var kp_percent : Int           = from_scan(Scancodes.kp_percent);\r\n    public static inline var kp_less : Int              = from_scan(Scancodes.kp_less);\r\n    public static inline var kp_greater : Int           = from_scan(Scancodes.kp_greater);\r\n    public static inline var kp_ampersand : Int         = from_scan(Scancodes.kp_ampersand);\r\n    public static inline var kp_dblampersand : Int      = from_scan(Scancodes.kp_dblampersand);\r\n    public static inline var kp_verticalbar : Int       = from_scan(Scancodes.kp_verticalbar);\r\n    public static inline var kp_dblverticalbar : Int    = from_scan(Scancodes.kp_dblverticalbar);\r\n    public static inline var kp_colon : Int             = from_scan(Scancodes.kp_colon);\r\n    public static inline var kp_hash : Int              = from_scan(Scancodes.kp_hash);\r\n    public static inline var kp_space : Int             = from_scan(Scancodes.kp_space);\r\n    public static inline var kp_at : Int                = from_scan(Scancodes.kp_at);\r\n    public static inline var kp_exclam : Int            = from_scan(Scancodes.kp_exclam);\r\n    public static inline var kp_memstore : Int          = from_scan(Scancodes.kp_memstore);\r\n    public static inline var kp_memrecall : Int         = from_scan(Scancodes.kp_memrecall);\r\n    public static inline var kp_memclear : Int          = from_scan(Scancodes.kp_memclear);\r\n    public static inline var kp_memadd : Int            = from_scan(Scancodes.kp_memadd);\r\n    public static inline var kp_memsubtract : Int       = from_scan(Scancodes.kp_memsubtract);\r\n    public static inline var kp_memmultiply : Int       = from_scan(Scancodes.kp_memmultiply);\r\n    public static inline var kp_memdivide : Int         = from_scan(Scancodes.kp_memdivide);\r\n    public static inline var kp_plusminus : Int         = from_scan(Scancodes.kp_plusminus);\r\n    public static inline var kp_clear : Int             = from_scan(Scancodes.kp_clear);\r\n    public static inline var kp_clearentry : Int        = from_scan(Scancodes.kp_clearentry);\r\n    public static inline var kp_binary : Int            = from_scan(Scancodes.kp_binary);\r\n    public static inline var kp_octal : Int             = from_scan(Scancodes.kp_octal);\r\n    public static inline var kp_decimal : Int           = from_scan(Scancodes.kp_decimal);\r\n    public static inline var kp_hexadecimal : Int       = from_scan(Scancodes.kp_hexadecimal);\r\n\r\n    public static inline var lctrl : Int                = from_scan(Scancodes.lctrl);\r\n    public static inline var lshift : Int               = from_scan(Scancodes.lshift);\r\n    public static inline var lalt : Int                 = from_scan(Scancodes.lalt);\r\n    public static inline var lmeta : Int                = from_scan(Scancodes.lmeta);\r\n    public static inline var rctrl : Int                = from_scan(Scancodes.rctrl);\r\n    public static inline var rshift : Int               = from_scan(Scancodes.rshift);\r\n    public static inline var ralt : Int                 = from_scan(Scancodes.ralt);\r\n    public static inline var rmeta : Int                = from_scan(Scancodes.rmeta);\r\n\r\n    public static inline var mode : Int                 = from_scan(Scancodes.mode);\r\n\r\n    public static inline var audionext : Int            = from_scan(Scancodes.audionext);\r\n    public static inline var audioprev : Int            = from_scan(Scancodes.audioprev);\r\n    public static inline var audiostop : Int            = from_scan(Scancodes.audiostop);\r\n    public static inline var audioplay : Int            = from_scan(Scancodes.audioplay);\r\n    public static inline var audiomute : Int            = from_scan(Scancodes.audiomute);\r\n    public static inline var mediaselect : Int          = from_scan(Scancodes.mediaselect);\r\n    public static inline var www : Int                  = from_scan(Scancodes.www);\r\n    public static inline var mail : Int                 = from_scan(Scancodes.mail);\r\n    public static inline var calculator : Int           = from_scan(Scancodes.calculator);\r\n    public static inline var computer : Int             = from_scan(Scancodes.computer);\r\n    public static inline var ac_search : Int            = from_scan(Scancodes.ac_search);\r\n    public static inline var ac_home : Int              = from_scan(Scancodes.ac_home);\r\n    public static inline var ac_back : Int              = from_scan(Scancodes.ac_back);\r\n    public static inline var ac_forward : Int           = from_scan(Scancodes.ac_forward);\r\n    public static inline var ac_stop : Int              = from_scan(Scancodes.ac_stop);\r\n    public static inline var ac_refresh : Int           = from_scan(Scancodes.ac_refresh);\r\n    public static inline var ac_bookmarks : Int         = from_scan(Scancodes.ac_bookmarks);\r\n\r\n    public static inline var brightnessdown : Int       = from_scan(Scancodes.brightnessdown);\r\n    public static inline var brightnessup : Int         = from_scan(Scancodes.brightnessup);\r\n    public static inline var displayswitch : Int        = from_scan(Scancodes.displayswitch);\r\n    public static inline var kbdillumtoggle : Int       = from_scan(Scancodes.kbdillumtoggle);\r\n    public static inline var kbdillumdown : Int         = from_scan(Scancodes.kbdillumdown);\r\n    public static inline var kbdillumup : Int           = from_scan(Scancodes.kbdillumup);\r\n    public static inline var eject : Int                = from_scan(Scancodes.eject);\r\n    public static inline var sleep : Int                = from_scan(Scancodes.sleep);\r\n\r\n} //Keycodes\r\n\r\n\r\n/** The scancode class. The values below come directly from SDL header include files,\r\nbut they aren't specific to SDL so they are used generically */\r\n@:noCompletion class Scancodes {\r\n\r\n    /** Convert a scancode to a readable name */\r\n    public static function name( scancode : Int ) : String {\r\n\r\n        var res = null;\r\n\r\n        if (scancode >= 0 && scancode < scancode_names.length) {\r\n            res = scancode_names[scancode];\r\n        }\r\n\r\n        return res != null ? res : \"\";\r\n\r\n    } //name\r\n\r\n        //special value remains caps\r\n    public static inline var MASK:Int                      = (1<<30);\r\n\r\n    public static inline var unknown : Int                 = 0;\r\n\r\n       // Usage page 0x07\r\n       // These values are from usage page 0x07 (USB keyboard page).\r\n\r\n    public static inline var key_a : Int                   = 4;\r\n    public static inline var key_b : Int                   = 5;\r\n    public static inline var key_c : Int                   = 6;\r\n    public static inline var key_d : Int                   = 7;\r\n    public static inline var key_e : Int                   = 8;\r\n    public static inline var key_f : Int                   = 9;\r\n    public static inline var key_g : Int                   = 10;\r\n    public static inline var key_h : Int                   = 11;\r\n    public static inline var key_i : Int                   = 12;\r\n    public static inline var key_j : Int                   = 13;\r\n    public static inline var key_k : Int                   = 14;\r\n    public static inline var key_l : Int                   = 15;\r\n    public static inline var key_m : Int                   = 16;\r\n    public static inline var key_n : Int                   = 17;\r\n    public static inline var key_o : Int                   = 18;\r\n    public static inline var key_p : Int                   = 19;\r\n    public static inline var key_q : Int                   = 20;\r\n    public static inline var key_r : Int                   = 21;\r\n    public static inline var key_s : Int                   = 22;\r\n    public static inline var key_t : Int                   = 23;\r\n    public static inline var key_u : Int                   = 24;\r\n    public static inline var key_v : Int                   = 25;\r\n    public static inline var key_w : Int                   = 26;\r\n    public static inline var key_x : Int                   = 27;\r\n    public static inline var key_y : Int                   = 28;\r\n    public static inline var key_z : Int                   = 29;\r\n\r\n    public static inline var key_1 : Int                   = 30;\r\n    public static inline var key_2 : Int                   = 31;\r\n    public static inline var key_3 : Int                   = 32;\r\n    public static inline var key_4 : Int                   = 33;\r\n    public static inline var key_5 : Int                   = 34;\r\n    public static inline var key_6 : Int                   = 35;\r\n    public static inline var key_7 : Int                   = 36;\r\n    public static inline var key_8 : Int                   = 37;\r\n    public static inline var key_9 : Int                   = 38;\r\n    public static inline var key_0 : Int                   = 39;\r\n\r\n    public static inline var enter : Int                   = 40;\r\n    public static inline var escape : Int                  = 41;\r\n    public static inline var backspace : Int               = 42;\r\n    public static inline var tab : Int                     = 43;\r\n    public static inline var space : Int                   = 44;\r\n\r\n    public static inline var minus : Int                   = 45;\r\n    public static inline var equals : Int                  = 46;\r\n    public static inline var leftbracket : Int             = 47;\r\n    public static inline var rightbracket : Int            = 48;\r\n\r\n        // Located at the lower left of the return\r\n        // key on ISO keyboards and at the right end\r\n        // of the QWERTY row on ANSI keyboards.\r\n        // Produces REVERSE SOLIDUS (backslash) and\r\n        // VERTICAL LINE in a US layout, REVERSE\r\n        // SOLIDUS and VERTICAL LINE in a UK Mac\r\n        // layout, NUMBER SIGN and TILDE in a UK\r\n        // Windows layout, DOLLAR SIGN and POUND SIGN\r\n        // in a Swiss German layout, NUMBER SIGN and\r\n        // APOSTROPHE in a German layout, GRAVE\r\n        // ACCENT and POUND SIGN in a French Mac\r\n        // layout, and ASTERISK and MICRO SIGN in a\r\n        // French Windows layout.\r\n\r\n    public static inline var backslash : Int               = 49;\r\n\r\n        // ISO USB keyboards actually use this code\r\n        // instead of 49 for the same key, but all\r\n        // OSes I've seen treat the two codes\r\n        // identically. So, as an implementor, unless\r\n        // your keyboard generates both of those\r\n        // codes and your OS treats them differently,\r\n        // you should generate public static inline var BACKSLASH\r\n        // instead of this code. As a user, you\r\n        // should not rely on this code because SDL\r\n        // will never generate it with most (all?)\r\n        // keyboards.\r\n\r\n    public static inline var nonushash : Int          = 50;\r\n    public static inline var semicolon : Int          = 51;\r\n    public static inline var apostrophe : Int         = 52;\r\n\r\n        // Located in the top left corner (on both ANSI\r\n        // and ISO keyboards). Produces GRAVE ACCENT and\r\n        // TILDE in a US Windows layout and in US and UK\r\n        // Mac layouts on ANSI keyboards, GRAVE ACCENT\r\n        // and NOT SIGN in a UK Windows layout, SECTION\r\n        // SIGN and PLUS-MINUS SIGN in US and UK Mac\r\n        // layouts on ISO keyboards, SECTION SIGN and\r\n        // DEGREE SIGN in a Swiss German layout (Mac:\r\n        // only on ISO keyboards); CIRCUMFLEX ACCENT and\r\n        // DEGREE SIGN in a German layout (Mac: only on\r\n        // ISO keyboards), SUPERSCRIPT TWO and TILDE in a\r\n        // French Windows layout, COMMERCIAL AT and\r\n        // NUMBER SIGN in a French Mac layout on ISO\r\n        // keyboards, and LESS-THAN SIGN and GREATER-THAN\r\n        // SIGN in a Swiss German, German, or French Mac\r\n        // layout on ANSI keyboards.\r\n\r\n    public static inline var grave : Int              = 53;\r\n    public static inline var comma : Int              = 54;\r\n    public static inline var period : Int             = 55;\r\n    public static inline var slash : Int              = 56;\r\n\r\n    public static inline var capslock : Int           = 57;\r\n\r\n    public static inline var f1 : Int                 = 58;\r\n    public static inline var f2 : Int                 = 59;\r\n    public static inline var f3 : Int                 = 60;\r\n    public static inline var f4 : Int                 = 61;\r\n    public static inline var f5 : Int                 = 62;\r\n    public static inline var f6 : Int                 = 63;\r\n    public static inline var f7 : Int                 = 64;\r\n    public static inline var f8 : Int                 = 65;\r\n    public static inline var f9 : Int                 = 66;\r\n    public static inline var f10 : Int                = 67;\r\n    public static inline var f11 : Int                = 68;\r\n    public static inline var f12 : Int                = 69;\r\n\r\n    public static inline var printscreen : Int        = 70;\r\n    public static inline var scrolllock : Int         = 71;\r\n    public static inline var pause : Int              = 72;\r\n\r\n        // insert on PC, help on some Mac keyboards (but does send code 73, not 117)\r\n    public static inline var insert : Int             = 73;\r\n    public static inline var home : Int               = 74;\r\n    public static inline var pageup : Int             = 75;\r\n    public static inline var delete : Int             = 76;\r\n    public static inline var end : Int                = 77;\r\n    public static inline var pagedown : Int           = 78;\r\n    public static inline var right : Int              = 79;\r\n    public static inline var left : Int               = 80;\r\n    public static inline var down : Int               = 81;\r\n    public static inline var up : Int                 = 82;\r\n\r\n        // num lock on PC, clear on Mac keyboards\r\n    public static inline var numlockclear : Int       = 83;\r\n    public static inline var kp_divide : Int          = 84;\r\n    public static inline var kp_multiply : Int        = 85;\r\n    public static inline var kp_minus : Int           = 86;\r\n    public static inline var kp_plus : Int            = 87;\r\n    public static inline var kp_enter : Int           = 88;\r\n    public static inline var kp_1 : Int               = 89;\r\n    public static inline var kp_2 : Int               = 90;\r\n    public static inline var kp_3 : Int               = 91;\r\n    public static inline var kp_4 : Int               = 92;\r\n    public static inline var kp_5 : Int               = 93;\r\n    public static inline var kp_6 : Int               = 94;\r\n    public static inline var kp_7 : Int               = 95;\r\n    public static inline var kp_8 : Int               = 96;\r\n    public static inline var kp_9 : Int               = 97;\r\n    public static inline var kp_0 : Int               = 98;\r\n    public static inline var kp_period : Int          = 99;\r\n\r\n\r\n        // This is the additional key that ISO\r\n        // keyboards have over ANSI ones,\r\n        // located between left shift and Y.\r\n        // Produces GRAVE ACCENT and TILDE in a\r\n        // US or UK Mac layout, REVERSE SOLIDUS\r\n        // (backslash) and VERTICAL LINE in a\r\n        // US or UK Windows layout, and\r\n        // LESS-THAN SIGN and GREATER-THAN SIGN\r\n        // in a Swiss German, German, or French\r\n        // layout.\r\n    public static inline var nonusbackslash : Int     = 100;\r\n\r\n        // windows contextual menu, compose\r\n    public static inline var application : Int        = 101;\r\n\r\n        // The USB document says this is a status flag,\r\n        // not a physical key - but some Mac keyboards\r\n        // do have a power key.\r\n    public static inline var power : Int              = 102;\r\n    public static inline var kp_equals : Int          = 103;\r\n    public static inline var f13 : Int                = 104;\r\n    public static inline var f14 : Int                = 105;\r\n    public static inline var f15 : Int                = 106;\r\n    public static inline var f16 : Int                = 107;\r\n    public static inline var f17 : Int                = 108;\r\n    public static inline var f18 : Int                = 109;\r\n    public static inline var f19 : Int                = 110;\r\n    public static inline var f20 : Int                = 111;\r\n    public static inline var f21 : Int                = 112;\r\n    public static inline var f22 : Int                = 113;\r\n    public static inline var f23 : Int                = 114;\r\n    public static inline var f24 : Int                = 115;\r\n    public static inline var execute : Int            = 116;\r\n    public static inline var help : Int               = 117;\r\n    public static inline var menu : Int               = 118;\r\n    public static inline var select : Int             = 119;\r\n    public static inline var stop : Int               = 120;\r\n\r\n        // redo\r\n    public static inline var again : Int              = 121;\r\n    public static inline var undo : Int               = 122;\r\n    public static inline var cut : Int                = 123;\r\n    public static inline var copy : Int               = 124;\r\n    public static inline var paste : Int              = 125;\r\n    public static inline var find : Int               = 126;\r\n    public static inline var mute : Int               = 127;\r\n    public static inline var volumeup : Int           = 128;\r\n    public static inline var volumedown : Int         = 129;\r\n\r\n        // not sure whether there's a reason to enable these\r\n    //  public static inline var lockingcapslock = 130,\r\n    //  public static inline var lockingnumlock = 131,\r\n    //  public static inline var lockingscrolllock = 132,\r\n\r\n    public static inline var kp_comma : Int           = 133;\r\n    public static inline var kp_equalsas400 : Int     = 134;\r\n\r\n        // used on Asian keyboards; see footnotes in USB doc\r\n    public static inline var international1 : Int     = 135;\r\n    public static inline var international2 : Int     = 136;\r\n\r\n        // Yen\r\n    public static inline var international3 : Int     = 137;\r\n    public static inline var international4 : Int     = 138;\r\n    public static inline var international5 : Int     = 139;\r\n    public static inline var international6 : Int     = 140;\r\n    public static inline var international7 : Int     = 141;\r\n    public static inline var international8 : Int     = 142;\r\n    public static inline var international9 : Int     = 143;\r\n        // Hangul/English toggle\r\n    public static inline var lang1 : Int              = 144;\r\n        // Hanja conversion\r\n    public static inline var lang2 : Int              = 145;\r\n        // Katakana\r\n    public static inline var lang3 : Int              = 146;\r\n        // Hiragana\r\n    public static inline var lang4 : Int              = 147;\r\n        // Zenkaku/Hankaku\r\n    public static inline var lang5 : Int              = 148;\r\n        // reserved\r\n    public static inline var lang6 : Int              = 149;\r\n        // reserved\r\n    public static inline var lang7 : Int              = 150;\r\n        // reserved\r\n    public static inline var lang8 : Int              = 151;\r\n        // reserved\r\n    public static inline var lang9 : Int              = 152;\r\n        // Erase-Eaze\r\n    public static inline var alterase : Int           = 153;\r\n    public static inline var sysreq : Int             = 154;\r\n    public static inline var cancel : Int             = 155;\r\n    public static inline var clear : Int              = 156;\r\n    public static inline var prior : Int              = 157;\r\n    public static inline var return2 : Int            = 158;\r\n    public static inline var separator : Int          = 159;\r\n    public static inline var out : Int                = 160;\r\n    public static inline var oper : Int               = 161;\r\n    public static inline var clearagain : Int         = 162;\r\n    public static inline var crsel : Int              = 163;\r\n    public static inline var exsel : Int              = 164;\r\n\r\n    public static inline var kp_00 : Int              = 176;\r\n    public static inline var kp_000 : Int             = 177;\r\n    public static inline var thousandsseparator : Int = 178;\r\n    public static inline var decimalseparator : Int   = 179;\r\n    public static inline var currencyunit : Int       = 180;\r\n    public static inline var currencysubunit : Int    = 181;\r\n    public static inline var kp_leftparen : Int       = 182;\r\n    public static inline var kp_rightparen : Int      = 183;\r\n    public static inline var kp_leftbrace : Int       = 184;\r\n    public static inline var kp_rightbrace : Int      = 185;\r\n    public static inline var kp_tab : Int             = 186;\r\n    public static inline var kp_backspace : Int       = 187;\r\n    public static inline var kp_a : Int               = 188;\r\n    public static inline var kp_b : Int               = 189;\r\n    public static inline var kp_c : Int               = 190;\r\n    public static inline var kp_d : Int               = 191;\r\n    public static inline var kp_e : Int               = 192;\r\n    public static inline var kp_f : Int               = 193;\r\n    public static inline var kp_xor : Int             = 194;\r\n    public static inline var kp_power : Int           = 195;\r\n    public static inline var kp_percent : Int         = 196;\r\n    public static inline var kp_less : Int            = 197;\r\n    public static inline var kp_greater : Int         = 198;\r\n    public static inline var kp_ampersand : Int       = 199;\r\n    public static inline var kp_dblampersand : Int    = 200;\r\n    public static inline var kp_verticalbar : Int     = 201;\r\n    public static inline var kp_dblverticalbar : Int  = 202;\r\n    public static inline var kp_colon : Int           = 203;\r\n    public static inline var kp_hash : Int            = 204;\r\n    public static inline var kp_space : Int           = 205;\r\n    public static inline var kp_at : Int              = 206;\r\n    public static inline var kp_exclam : Int          = 207;\r\n    public static inline var kp_memstore : Int        = 208;\r\n    public static inline var kp_memrecall : Int       = 209;\r\n    public static inline var kp_memclear : Int        = 210;\r\n    public static inline var kp_memadd : Int          = 211;\r\n    public static inline var kp_memsubtract : Int     = 212;\r\n    public static inline var kp_memmultiply : Int     = 213;\r\n    public static inline var kp_memdivide : Int       = 214;\r\n    public static inline var kp_plusminus : Int       = 215;\r\n    public static inline var kp_clear : Int           = 216;\r\n    public static inline var kp_clearentry : Int      = 217;\r\n    public static inline var kp_binary : Int          = 218;\r\n    public static inline var kp_octal : Int           = 219;\r\n    public static inline var kp_decimal : Int         = 220;\r\n    public static inline var kp_hexadecimal : Int     = 221;\r\n\r\n    public static inline var lctrl : Int              = 224;\r\n    public static inline var lshift : Int             = 225;\r\n        // alt, option\r\n    public static inline var lalt : Int               = 226;\r\n        // windows, command (apple), meta, super\r\n    public static inline var lmeta : Int              = 227;\r\n    public static inline var rctrl : Int              = 228;\r\n    public static inline var rshift : Int             = 229;\r\n        // alt gr, option\r\n    public static inline var ralt : Int               = 230;\r\n        // windows, command (apple), meta, super\r\n    public static inline var rmeta : Int              = 231;\r\n\r\n        // Not sure if this is really not covered\r\n        // by any of the above, but since there's a\r\n        // special KMOD_MODE for it I'm adding it here\r\n    public static inline var mode : Int               = 257;\r\n\r\n        //\r\n        // Usage page 0x0C\r\n        // These values are mapped from usage page 0x0C (USB consumer page).\r\n\r\n    public static inline var audionext : Int          = 258;\r\n    public static inline var audioprev : Int          = 259;\r\n    public static inline var audiostop : Int          = 260;\r\n    public static inline var audioplay : Int          = 261;\r\n    public static inline var audiomute : Int          = 262;\r\n    public static inline var mediaselect : Int        = 263;\r\n    public static inline var www : Int                = 264;\r\n    public static inline var mail : Int               = 265;\r\n    public static inline var calculator : Int         = 266;\r\n    public static inline var computer : Int           = 267;\r\n    public static inline var ac_search : Int          = 268;\r\n    public static inline var ac_home : Int            = 269;\r\n    public static inline var ac_back : Int            = 270;\r\n    public static inline var ac_forward : Int         = 271;\r\n    public static inline var ac_stop : Int            = 272;\r\n    public static inline var ac_refresh : Int         = 273;\r\n    public static inline var ac_bookmarks : Int       = 274;\r\n\r\n        // Walther keys\r\n        // These are values that Christian Walther added (for mac keyboard?).\r\n\r\n    public static inline var brightnessdown : Int     = 275;\r\n    public static inline var brightnessup : Int       = 276;\r\n\r\n        // Display mirroring/dual display switch, video mode switch */\r\n    public static inline var displayswitch : Int      = 277;\r\n\r\n    public static inline var kbdillumtoggle : Int     = 278;\r\n    public static inline var kbdillumdown : Int       = 279;\r\n    public static inline var kbdillumup : Int         = 280;\r\n    public static inline var eject : Int              = 281;\r\n    public static inline var sleep : Int              = 282;\r\n\r\n    public static inline var app1 : Int               = 283;\r\n    public static inline var app2 : Int               = 284;\r\n\r\n    static var scancode_names:Array<String> = [\r\n        null, null, null, null,\r\n        \"A\",\r\n        \"B\",\r\n        \"C\",\r\n        \"D\",\r\n        \"E\",\r\n        \"F\",\r\n        \"G\",\r\n        \"H\",\r\n        \"I\",\r\n        \"J\",\r\n        \"K\",\r\n        \"L\",\r\n        \"M\",\r\n        \"N\",\r\n        \"O\",\r\n        \"P\",\r\n        \"Q\",\r\n        \"R\",\r\n        \"S\",\r\n        \"T\",\r\n        \"U\",\r\n        \"V\",\r\n        \"W\",\r\n        \"X\",\r\n        \"Y\",\r\n        \"Z\",\r\n        \"1\",\r\n        \"2\",\r\n        \"3\",\r\n        \"4\",\r\n        \"5\",\r\n        \"6\",\r\n        \"7\",\r\n        \"8\",\r\n        \"9\",\r\n        \"0\",\r\n        \"Enter\",\r\n        \"Escape\",\r\n        \"Backspace\",\r\n        \"Tab\",\r\n        \"Space\",\r\n        \"-\",\r\n        \"=\",\r\n        \"[\",\r\n        \"]\",\r\n        \"\\\\\",\r\n        \"#\",\r\n        \";\",\r\n        \"'\",\r\n        \"`\",\r\n        \",\",\r\n        \".\",\r\n        \"/\",\r\n        \"CapsLock\",\r\n        \"F1\",\r\n        \"F2\",\r\n        \"F3\",\r\n        \"F4\",\r\n        \"F5\",\r\n        \"F6\",\r\n        \"F7\",\r\n        \"F8\",\r\n        \"F9\",\r\n        \"F10\",\r\n        \"F11\",\r\n        \"F12\",\r\n        \"PrintScreen\",\r\n        \"ScrollLock\",\r\n        \"Pause\",\r\n        \"Insert\",\r\n        \"Home\",\r\n        \"PageUp\",\r\n        \"Delete\",\r\n        \"End\",\r\n        \"PageDown\",\r\n        \"Right\",\r\n        \"Left\",\r\n        \"Down\",\r\n        \"Up\",\r\n        \"Numlock\",\r\n        \"Keypad /\",\r\n        \"Keypad *\",\r\n        \"Keypad -\",\r\n        \"Keypad +\",\r\n        \"Keypad Enter\",\r\n        \"Keypad 1\",\r\n        \"Keypad 2\",\r\n        \"Keypad 3\",\r\n        \"Keypad 4\",\r\n        \"Keypad 5\",\r\n        \"Keypad 6\",\r\n        \"Keypad 7\",\r\n        \"Keypad 8\",\r\n        \"Keypad 9\",\r\n        \"Keypad 0\",\r\n        \"Keypad .\",\r\n        null,\r\n        \"Application\",\r\n        \"Power\",\r\n        \"Keypad =\",\r\n        \"F13\",\r\n        \"F14\",\r\n        \"F15\",\r\n        \"F16\",\r\n        \"F17\",\r\n        \"F18\",\r\n        \"F19\",\r\n        \"F20\",\r\n        \"F21\",\r\n        \"F22\",\r\n        \"F23\",\r\n        \"F24\",\r\n        \"Execute\",\r\n        \"Help\",\r\n        \"Menu\",\r\n        \"Select\",\r\n        \"Stop\",\r\n        \"Again\",\r\n        \"Undo\",\r\n        \"Cut\",\r\n        \"Copy\",\r\n        \"Paste\",\r\n        \"Find\",\r\n        \"Mute\",\r\n        \"VolumeUp\",\r\n        \"VolumeDown\",\r\n        null, null, null,\r\n        \"Keypad ,\",\r\n        \"Keypad = (AS400)\",\r\n        null, null, null, null, null, null, null, null, null, null, null, null,\r\n        null, null, null, null, null, null,\r\n        \"AltErase\",\r\n        \"SysReq\",\r\n        \"Cancel\",\r\n        \"Clear\",\r\n        \"Prior\",\r\n        \"Enter\",\r\n        \"Separator\",\r\n        \"Out\",\r\n        \"Oper\",\r\n        \"Clear / Again\",\r\n        \"CrSel\",\r\n        \"ExSel\",\r\n        null, null, null, null, null, null, null, null, null, null, null,\r\n        \"Keypad 00\",\r\n        \"Keypad 000\",\r\n        \"ThousandsSeparator\",\r\n        \"DecimalSeparator\",\r\n        \"CurrencyUnit\",\r\n        \"CurrencySubUnit\",\r\n        \"Keypad (\",\r\n        \"Keypad )\",\r\n        \"Keypad {\",\r\n        \"Keypad }\",\r\n        \"Keypad Tab\",\r\n        \"Keypad Backspace\",\r\n        \"Keypad A\",\r\n        \"Keypad B\",\r\n        \"Keypad C\",\r\n        \"Keypad D\",\r\n        \"Keypad E\",\r\n        \"Keypad F\",\r\n        \"Keypad XOR\",\r\n        \"Keypad ^\",\r\n        \"Keypad %\",\r\n        \"Keypad <\",\r\n        \"Keypad >\",\r\n        \"Keypad &\",\r\n        \"Keypad &&\",\r\n        \"Keypad |\",\r\n        \"Keypad ||\",\r\n        \"Keypad :\",\r\n        \"Keypad #\",\r\n        \"Keypad Space\",\r\n        \"Keypad @\",\r\n        \"Keypad !\",\r\n        \"Keypad MemStore\",\r\n        \"Keypad MemRecall\",\r\n        \"Keypad MemClear\",\r\n        \"Keypad MemAdd\",\r\n        \"Keypad MemSubtract\",\r\n        \"Keypad MemMultiply\",\r\n        \"Keypad MemDivide\",\r\n        \"Keypad +/-\",\r\n        \"Keypad Clear\",\r\n        \"Keypad ClearEntry\",\r\n        \"Keypad Binary\",\r\n        \"Keypad Octal\",\r\n        \"Keypad Decimal\",\r\n        \"Keypad Hexadecimal\",\r\n        null, null,\r\n        \"Left Ctrl\",\r\n        \"Left Shift\",\r\n        \"Left Alt\",\r\n        \"Left Meta\",\r\n        \"Right Ctrl\",\r\n        \"Right Shift\",\r\n        \"Right Alt\",\r\n        \"Right Meta\",\r\n        null, null, null, null, null, null, null, null, null, null, null, null,\r\n        null, null, null, null, null, null, null, null, null, null, null, null,\r\n        null,\r\n        \"ModeSwitch\",\r\n        \"AudioNext\",\r\n        \"AudioPrev\",\r\n        \"AudioStop\",\r\n        \"AudioPlay\",\r\n        \"AudioMute\",\r\n        \"MediaSelect\",\r\n        \"WWW\",\r\n        \"Mail\",\r\n        \"Calculator\",\r\n        \"Computer\",\r\n        \"AC Search\",\r\n        \"AC Home\",\r\n        \"AC Back\",\r\n        \"AC Forward\",\r\n        \"AC Stop\",\r\n        \"AC Refresh\",\r\n        \"AC Bookmarks\",\r\n        \"BrightnessDown\",\r\n        \"BrightnessUp\",\r\n        \"DisplaySwitch\",\r\n        \"KBDIllumToggle\",\r\n        \"KBDIllumDown\",\r\n        \"KBDIllumUp\",\r\n        \"Eject\",\r\n        \"Sleep\",\r\n    ]; //scancode names\r\n\r\n} //Scancodes\r\n\r\n","package snow.systems.io;\r\n\r\nimport snow.types.Types;\r\nimport snow.api.buffers.Uint8Array;\r\nimport snow.api.Promise;\r\nimport snow.api.Debug.*;\r\n\r\n@:allow(snow.Snow)\r\nclass IO {\r\n\r\n\r\n    @:noCompletion public var app : snow.Snow;\r\n\r\n    /** Access to the platform specific api, if any */\r\n    public var module : ModuleIO;\r\n\r\n    /** The string_save file name prefix. For example, the default being `slot.0`,\r\n        by changing this you can rename the save slots to `custom.0`.\r\n        Only the prefix will change, the slot index is always appended with `.` for predictability. */\r\n    public var string_save_prefix : String = 'slot';\r\n\r\n        /** Constructed internally, use `app.io` */\r\n    function new( _app:snow.Snow ) {\r\n\r\n        app = _app;\r\n        module = new ModuleIO(app);\r\n\r\n    } //new\r\n\r\n    public inline function app_path() : String {\r\n\r\n        return module.app_path();\r\n\r\n    } //app_path\r\n\r\n    public inline function app_path_prefs() : String {\r\n\r\n        return module.app_path_prefs();\r\n\r\n    } //app_path_prefs\r\n\r\n        /** Call this to open a url in the default browser */\r\n    public inline function url_open( _url:String ) {\r\n\r\n        module.url_open(_url);\r\n\r\n    } //url_open\r\n\r\n        /** Load bytes from the file path/url given.\r\n            On web a request is sent for the data */\r\n    public inline function data_load( _path:String, ?_options:IODataOptions ) : Promise {\r\n\r\n        return module.data_load( _path, _options );\r\n\r\n    } //data_load\r\n\r\n\r\n        /** Save bytes to the file path/url given.\r\n            On platforms where this doesn't make sense (web) this will do nothing atm */\r\n    public inline function data_save( _path:String, _data:Uint8Array, ?_options:IODataOptions ) : Bool {\r\n\r\n        return module.data_save( _path, _data, _options );\r\n\r\n    } //data_save\r\n\r\n        /** Returns a promise for data, optionally provided by the given provider, and optionally processed by the given processor. */\r\n    public function data_flow<T>( _id:String, ?_processor:Snow->String->T->Promise, ?_provider:Snow->String->Promise ) : Promise {\r\n\r\n        if(_provider == null) _provider = default_provider;\r\n\r\n        return new Promise(function(resolve, reject) {\r\n\r\n            _provider(app, _id).then(\r\n\r\n                function(data) {\r\n                    if(_processor != null) {\r\n                        _processor(app, _id, data).then(resolve, reject);\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                }\r\n\r\n            ).error(reject);\r\n\r\n        }); //promise\r\n\r\n    } //data_flow\r\n\r\n        /** The string slot <-> key:value pairs,\r\n            for the string sync API. */\r\n    var string_slots: Map<Int, Map<String, String> >;\r\n\r\n        /** Returns the path where string_save operates.\r\n            One targets where this is not a path, the path will be prefaced with `< >/`,\r\n            i.e on web targets the path will be `<localstorage>/` followed by the ID. */\r\n    public function string_save_path( _slot:Int = 0 ) : String {\r\n\r\n        return module.string_save_path(_slot);\r\n\r\n    } //string_save_path\r\n\r\n        /** Save a string value by key, with an optional slot.\r\n            To remove a saved key, pass value in as null.\r\n            Works on all targets as a simple save/load mechanism.\r\n            Data saved is plain text but obscured with basic encoding.\r\n            Any further obfuscation can be done on the value prior to saving.\r\n            Returns false if the save failed, errors being logged. */\r\n    public function string_save( _key:String, _value:String, _slot:Int = 0 ) : Bool {\r\n\r\n        var _string_map = string_slots_sync(_slot);\r\n\r\n        var _encoded_key = module.string_slot_encode(_key);\r\n\r\n            //if the value is null, we remove the key\r\n        if(_value == null) {\r\n\r\n            _debug('removing key $_key ($_encoded_key)');\r\n\r\n            _string_map.remove(_encoded_key);\r\n\r\n        } else {\r\n\r\n            var _encoded_value = module.string_slot_encode(_value);\r\n\r\n            _debug('storing key $_key:$_value as $_encoded_key:$_encoded_value');\r\n\r\n            _string_map.set(_encoded_key, _encoded_value);\r\n\r\n        }\r\n\r\n        var _contents = haxe.Serializer.run(_string_map);\r\n            _contents = module.string_slot_encode(_contents);\r\n\r\n        return module.string_slot_save(_slot, _contents);\r\n\r\n    } //string_save\r\n\r\n        /** Load a string value by key, with an optional slot.\r\n            Works on all targets as a simple save/load mechanism.\r\n            Returns the string or null if the key was invalid, or the slot was not found. */\r\n    public function string_load( _key:String, _slot:Int = 0 ) : String {\r\n\r\n        var _string_map = string_slots_sync(_slot);\r\n\r\n        var _encoded_key = module.string_slot_encode(_key);\r\n        var _encoded_value = _string_map.get(_encoded_key);\r\n\r\n        _debug('reading `$_key` as $_encoded_key:$_encoded_value');\r\n\r\n        if(_encoded_value == null) {\r\n            return null;\r\n        }\r\n\r\n        return module.string_slot_decode(_encoded_value);\r\n\r\n    } //string_load\r\n\r\n        /** Destroy a specific string slot, removing all values stored.\r\n            Does not ask for confirmation. Returns true if successful, false otherwise. */\r\n    public function string_destroy(_slot:Int = 0) : Bool {\r\n\r\n        if(string_slots == null) {\r\n            string_slots = new Map();\r\n        } else {\r\n            string_slots.remove(_slot);\r\n        }\r\n\r\n        return module.string_slot_destroy(_slot);\r\n\r\n    } //string_destroy\r\n\r\n//Internal string load/save\r\n\r\n        //check if the string map exists yet,\r\n        //if not, try to load it,\r\n        //if it doesn't exist yet, make it.\r\n        //returns a valid map for the slot\r\n    inline function string_slots_sync( _slot:Int = 0 ) {\r\n\r\n        //not loaded yet?\r\n        if(string_slots == null) {\r\n            string_slots = new Map();\r\n        }\r\n\r\n        var _string_map = string_slots.get(_slot);\r\n\r\n        if(_string_map == null) {\r\n\r\n            var _string = module.string_slot_load(_slot);\r\n            if(_string == null) {\r\n                _string_map = new Map();\r\n            } else {\r\n                _string = module.string_slot_decode(_string);\r\n                _string_map = haxe.Unserializer.run(_string);\r\n            }\r\n\r\n            string_slots.set(_slot, _string_map);\r\n\r\n        }\r\n\r\n        return _string_map;\r\n\r\n    } //string_slots_sync\r\n\r\n//Internal\r\n\r\n        /** The default data flow provider */\r\n    inline function default_provider(_app:Snow, _id:String) return data_load(_id);\r\n\r\n        /** Called by Snow when a system event happens. */\r\n    inline function onevent( _event:SystemEvent ) {\r\n\r\n        module.onevent( _event );\r\n\r\n    } //onevent\r\n\r\n        /** Destroy and clean up etc. */\r\n    function shutdown() {\r\n\r\n        module.shutdown();\r\n\r\n    } //shutdown\r\n\r\n\r\n} //IO\r\n","/*\n * Copyright (C)2005-2017 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\npackage;\n\n// Can't enable @:coreApi because some fields are now inline getters\n// @:coreApi\n@:keepInit\nextern class Math\n{\n\tstatic var PI(default,null) : Float;\n\n\tstatic var NEGATIVE_INFINITY(get, null) : Float;\n\t@:pure private static inline function get_NEGATIVE_INFINITY () : Float {\n\t\treturn -(untyped __js__(\"Infinity\"));\n\t}\n\n\tstatic var POSITIVE_INFINITY(get,null) : Float;\n\t@:pure private static inline function get_POSITIVE_INFINITY () : Float {\n\t\treturn (untyped __js__(\"Infinity\"));\n\t}\n\n\tstatic var NaN(get, null) : Float;\n\t@:pure private static inline function get_NaN () : Float {\n\t\treturn (untyped __js__(\"NaN\"));\n\t}\n\n\t@:pure static function abs(v:Float):Float;\n\t@:pure static function acos(v:Float):Float;\n\t@:pure static function asin(v:Float):Float;\n\t@:pure static function atan(v:Float):Float;\n\t@:pure static function atan2(y:Float, x:Float):Float;\n\t@:pure static function ceil(v:Float):Int;\n\t@:pure static function cos(v:Float):Float;\n\t@:pure static function exp(v:Float):Float;\n\t@:pure static function floor(v:Float):Int;\n\t@:pure static function log(v:Float):Float;\n\t@:pure static function max(a:Float, b:Float):Float;\n\t@:pure static function min(a:Float, b:Float):Float;\n\t@:pure static function pow(v:Float, exp:Float):Float;\n\tstatic function random() : Float;\n\t@:pure static function round(v:Float):Int;\n\t@:pure static function sin(v:Float):Float;\n\t@:pure static function sqrt(v:Float):Float;\n\t@:pure static function tan(v:Float):Float;\n\n\t@:pure static inline function ffloor( v : Float ) : Float {\n\t\treturn floor(v);\n\t}\n\n\t@:pure static inline function fceil( v : Float ) : Float {\n\t\treturn ceil(v);\n\t}\n\n\t@:pure static inline function fround( v : Float ) : Float {\n\t\treturn round(v);\n\t}\n\n\t@:pure static inline function isFinite( f : Float ) : Bool {\n\t\treturn (untyped __js__(\"isFinite\"))(f);\n\t}\n\n\t@:pure static inline function isNaN( f : Float ) : Bool {\n\t\treturn (untyped __js__(\"isNaN\"))(f);\n\t}\n\n\tstatic function __init__() : Void {\n\t\tuntyped __feature__(\"Type.resolveClass\", $hxClasses[\"Math\"] = Math);\n\t}\n}\n","package haxpression;\n\nclass Config {\n  // Set to true to enable pseudo-immutable expressions, that are deep-cloned\n  // before any modification is applied.  When false, no expressions are modified\n  // in-place, which is faster for now.\n  public static var useCloneForExpressions(default, default) = false;\n\n  // Set to true to enable pseudo-immutable expression groups, that are deep-cloned\n  // before any modification is applied.  When false, no expression groups are modified\n  // in-place, which is faster for now.\n  public static var useCloneForExpressionGroups(default, default) = false;\n}\n","package snow.types;\r\n\r\n\r\n#if macro\r\n    import haxe.macro.Expr;\r\n#end\r\n\r\n/**\r\n    The snow.types.Config class holds static variables \r\n    containing the currently configured modules and types\r\n    that are configured by snow.Set at the initialization macro context.\r\n*/\r\n@:noCompletion\r\nclass Config {\r\n    \r\n    public static var app_runtime : String #if (!macro && !display) = snow.types.Config.get_runtime() #end;\r\n    public static var app_config : String #if (!macro && !display) = snow.types.Config.get_config() #end;\r\n    public static var app_ident : String #if (!macro && !display) = snow.types.Config.get_ident() #end;\r\n    public static var app_main : String #if (!macro && !display) = snow.types.Config.get_main() #end;\r\n\r\n    public static var module_assets : String #if (!macro && !display) = snow.types.Config.get_module_assets() #end;\r\n    public static var module_audio : String #if (!macro && !display) = snow.types.Config.get_module_audio() #end;\r\n    public static var module_io : String #if (!macro && !display) = snow.types.Config.get_module_io() #end;\r\n\r\n    public static var extensions : Array<String> #if (!macro && !display) = snow.types.Config.get_extensions() #end;\r\n\r\n    #if (!display || !macro) \r\n        macro static function get_runtime():Expr return macro $v{snow.types.Config.app_runtime};\r\n        macro static function get_config():Expr return macro $v{snow.types.Config.app_config};\r\n        macro static function get_ident():Expr return macro $v{snow.types.Config.app_ident};\r\n        macro static function get_main():Expr return macro $v{snow.types.Config.app_main};\r\n\r\n        macro static function get_module_assets():Expr return macro $v{snow.types.Config.module_assets};\r\n        macro static function get_module_audio():Expr return macro $v{snow.types.Config.module_audio};\r\n        macro static function get_module_io():Expr return macro $v{snow.types.Config.module_io};\r\n\r\n        macro static function get_extensions():Expr return macro $v{ ${snow.types.Config.extensions} };\r\n    #end\r\n\r\n} //Config"],
"names":[],
"mappings":";;;;;;;;;WAyBe,gBACb;AAAA,UAAS,WAAe,EAAG,UAAU,UAAU;;;;;QAGzC,YAAoC;AAAA,EAC1C,EAAI,gBAAW;AAAA,sBAAc;;EAC7B,WAAM,YAAO;EACb,WAAM;EACN,OAAO,AAAC,YAAO;;WAGT,YACC;AAAA,IAAI,aAAO,QAAQ,KAAK,KAAK,IAAI,iBAAa;AAAA,mBAAI;SAAQ;AAAA,SAAM;;;gBAQjE,WAAiC;AAAA,EACvC,EAAI,aAAO,MAAO;AAAA,SAAM;;EACxB,SAAS,iBAAU,SAAI;EAChB,mCAAW,GAAG,kBAAW;;;;;;;;;;;;gBCPvB,sBALX;AAAA,CAGgB,AAHhB,SAGgB;CAIR,YAAY,cAAS,YAAS,eAAc,mBAAW,EAAG;;;;;OAGvD,eAEH;AAAA;;;;kBAWG,sBACP;AAAA,CACI,YAAY,cAAS,YAAS,eAAc,mBAAW,EAAG;CAC1D,cAAS;;;;;WAGN,mBACP;AAAA,EACI,aAAa;EACb,mBAA4B;;;;YC3BzB,WALX;AAAA,CAG+B,AAH/B,cAG+B;CAIvB,eAAe,oBAAY;CAC3B,wBAAwB;;;;;SAG5B,gCACA;AAAA,EACI,YAAY,mBAAmB,YAAa;EAC5C,iBAAY;EACZ,OAAO;;eAGX,WAEI;AAAA;YAAa;EAAb,WAAa,YAAb;AAAA,GAAI,YAAJ,AAAa,IAAb;;GAAqB,qBAAqB;;;iBAGvC,WACP;AAAA,EACI,iBAAiB,aAAa,GAAI,GAAK,YAAY;EACnD,uBAAuB,WAAa;AAAA;;;SAGjC,WAEH;AAAA;;;;gBDQG,WAFX;AAAA,CA2DoB,AA3DpB,iBA2DoB;CAvDZ;CAFG,qBAKiB;CALjB,qBAK0B;CAL1B,qBAKmC;CAGtC,sBAAsB,oBAAY;CAClC,wBAAwB;CAExB,cAAc,gBAAgB,IAAK,IAAK;CACxC,aAAa,gBAAgB,IAAK,IAAK;CACvC,aAAa,gBAAgB,IAAK,IAAK;CAGvC;CAGA;;;;;;eAGJ,WACA;AAAA,EAEI,YAAQ,WAAW;EAInB,gBAAgB,mBAAc,aAAU,eAAa,CAAC,IAAM;EAG5D,aAAa;EACb,SAAS;EACT,UAAU,KAAM,GAAI,GAAI,UAAU,GAAI,aAAS;EAC/C,UAAU,KAAM,EAAG,GAAI,UAAU,GAAI;EACrC,UAAU,KAAM,EAAG,GAAI,UAAU,GAAI,aAAS;EAC9C,UAAU,KAAM,EAAG,EAAG,UAAU,GAAI;EACpC,UAAU,KAAM,EAAG,EAAG,UAAU,GAAI,aAAS;EAC7C,UAAU,KAAM,EAAG,EAAG,UAAU,GAAI;EACpC,UAAU,KAAM,GAAI,EAAG,UAAU,GAAI,aAAS;EAC9C,UAAU,KAAM,GAAI,EAAG,UAAU,GAAI;;YAGzC,WACA;AAAA,EACI,oBAAe;EACf,qBAAgB;EAChB;;iBAIJ,WAEI;AAAA,sBAAoB,0BAAe,6BAAa,GAAI,CAAC,KAAM,CAAC,SAAS;;eAIzE,mBACA;AAAA,EACI,YAAY;EACZ,oBAAe,AAAQ,WAAR;EAEf,EAAG,aAAY,GACf;AAAA,GACI,wBAAa;GACb,qBAAgB,oBAAe;GAC/B;;EAGJ,EAAG,sBAAgB,GACnB;AAAA,GACI,wBAAa;GACb;;EAGJ,EAAG,qBAAe,GAClB;AAAA,GACI,wBAAa;GACb;;;OAQR,WACA;AAAA,EACI;EACA,eAAM,aAAN;;iBAGJ,cACA;AAAA,EACI,2BACI;AAAA,UAAO,WAAW,AAAW,IAAX,YAAa,eAAF,IAAX;;EAGtB,sBAAsB,eAAe,CAAE,qBAAqB,CAAC,MAAS,CAAC;EAEvE,kBAAkB,CAAC,sBAAsB,wBAAwB,CAAC;EAClE,eAAO,uBAAmB,4BAA1B;EAEA,iBAAiB;EACjB,gBAAgB;EAChB,oBAAoB;EAIpB,aAAa;EACb,KAAM,UAAS,KAAK,SAAS,cAA7B;AAAA,GAEI,eAAM,iBAAN;GACA,gBAAgB;GAChB,YAAY;GACZ,aAAa;GAEb;cAAe,wBAAf;AAAA,IAAI,cAAJ,AAAe,gBAAf;;IAEI;IACA,eAAe,AAAiB,WAAjB,QAAiB,iBAAjB,IAAiB,QAAjB,YAAiB,iBAAjB;IAEf,EAAG,aAAY,KACf;AAAA,KACI,2EAA+B;KAC/B,iDAAS;KACT,aAAa;KACb,aAAa;KACb;WAGJ;AAAA,KACI,aAAa;KACb,aAAa;;;GAGrB,eAAO,gBAAY,cAAnB;;EAIJ,UAAS,AAAC,gBAAgB;EAA1B,YAA+B,GAA/B;AAAA;GAEmB,UAAiB,gBAAgB;GAAhD,gBAAe;GACf,aAAa;GACb,aAAa;;EAGJ,WAAiB,gBAAgB;EAA9C,aAAa;EAGb,wCAEI;AAAA,cAAU;GAAV,UAAc;GAAd;;IAEI,QAAQ,MAAM,eAAe;IAC7B,SAAQ,eAAe;IACvB,KAAM,MAAI,GAAV;AAAA,KAEI,MAAM,MAAK,MAAM,KAAI;KACrB;;IAEJ,MAAM,MAAK;;;EAKnB,WAAgB;EAChB,YAAY;EAGZ,EAAI,YAAW,YACX;AAAA,aAAS;GAAT,YAAa,GAAb;AAAA;IACI,WAAW,aAAa;;;EAId,WAAiB,CAAC,EAAG,EAAG,EAAG;EAA7C,kBAAkB;EAClB,WAAW,MAAO;EAGlB,EAAG,YAAW,MAAM,GACpB;AAAA,GACI;GACA,WAAW,MAAO;;EAGtB,eAAO,iBAAa,kBAApB;EACA,eAAO,cAAU,OAAjB;EAEA,OAAO;;aAGJ,gBACP;AAAA,EADO;EAEH,0CACA;AAAA,GAEI,YAAY,WAAW;GAGvB;GAEA,cAAc;GACd,EAAG,gBAAe,KAClB;AAAA,IACI,eAAM,gBAAN;IAEA,+BACA;AAAA,KACI,qBAAqB;KACrB,aAAa,eAAe;KAC5B,gBAA0B,UAAS,aAAa;KAEhD,mBAAmB,mBAAmB;KACtC,eAAO,qBAAkB,mBAAzB;KAGA,EAAG,0BAAyB,GAAG;AAAA,aAAO;;KAGtC,KAAM,0BAAyB,KAAK,sBAAsB,KAA1D;AAAA,MAEI,oBAAoB;MACpB,eAAe,0BAA0B;;KAG7C,eAAO,4BAAyB,sBAAhC;KAGA;gBAAa,uBAAb;AAAA,MAAI,aAAJ,AAAa,eAAb;;MAEI,qBAAqB,gBAAe;MACpC,eAAO,oBAAiB,gBAAe,SAAvC;MACA,qBAAqB;;KAEzB,qBAAqB,eAAe,wBAAwB,QAAQ;KAGpE;KAEA,eAAM,gBAAN;KACA,eAAM,UAAN;KAEA,OAAO;;IAGX,mBAAmB,aAAa;IAChC,EAAG,8BAA6B,GAChC;AAAA,KACI,2EAA+B,wBAAwB;KACvD,aAAa;KAEb,EAAG,uDAAU,qBAET;AAAA,gBAAU;YAIV;AAAA;;;IAIR,kBAAkB,aAAa;IAC/B,EAAG,6BAA4B,GAC/B;AAAA,KACI,4EAA+B,uBAAuB;KACtD,cAAa;KAEb,EAAG,wDAAU,oBAET;AAAA,gBAAU;YAIV;AAAA;;;;GAQZ,EAAG,gBAAe,OAAS,CAAC,SAC5B;AAAA,IACI;IACA,oBAAa;;GAGjB,EAAI,EAAC,CAAC,eAAe,OAAS,CAAC,UAC/B;AAAA,IACI;IAEA,EAAG,mBAAkB,GACrB;AAAA,KACI,iBAAiB;KACjB,eAAe;KACf,WAAW;WAGf;AAAA,KACI,iBAAiB;KACjB,eAAe;KACf,WAAW;;;GAKnB,mCACA;AAAA,IACI,eAAM,gBAAN;IACA;IACA;eAAa;IAAb,YAAa,aAAb;AAAA,KAAI,aAAJ,AAAa,KAAb;;KAEI,EAAG,oBAAkB,GAEjB;AAAA;;;IAIR,yBAAc,cAAc,WAAU;AAAA,KAAE;KAAiB;;IAGzD,sBAAe,qBAAc;;GAGjC,EAAG,UAAS;AAAA;;;EAGhB,EAAG,kBAAiB,IAChB;AAAA;SAEC,EAAG,kBAAiB,YAErB;AAAA,mBAAgB;SAEf,EAAG,kBAAiB,YAErB;AAAA,mBAAgB;SAEf,EAAG,kBAAiB,YAErB;AAAA,mBAAgB;SAEf,EAAG,kBAAiB,YAErB;AAAA,mBAAgB;SAEf,EAAG,kBAAiB,KAErB;AAAA;;EAGJ,eAAM,WAAW,cAAmB,MAAM,WAAW,cAAsB,MAAM,WAAW,cAAqB,MAAM,WAAW,YAAlI;;;;YAsBG,sCAjBX;AAAA,CAiBW;;;CA6O2C,AA9PtD,wBA8PsD;CA1II,AApH1D,4BAoH0D;CATC,AA3G3D,6BA2G2D;CA5FpC,AAfvB,oBAeuB;CARG,AAP1B,gBAO0B;CAYlB,eAAe;CACf,gBAAU;CAGV,aAAa;CACb,UAAU;CAEV,YAAY;CACZ,EAAG,QAAM;AAAA,UAAQ;;CAGjB;;;;;;;;;CAAU,SAAW,6BAAuB,KAAK,aAAO,KAAK;CAAnD,SAA2D,6BAAuB,KAAK,aAAO,KAAK;CAAnG;;;;;;;;;;;;;;;;;;;;;;;;;;;CAGV,mBAAmB,yBAAwB;CAC3C,EAAG,SAAQ,KAAqB;AAAA,EAAf,eAAe,yBAAwB;;CACxD,EAAG,SAAQ,KAAsB;AAAA,EAAf,eAAe,yBAAwB;;CACzD,EAAG,SAAQ,KAAsB;AAAA,EAAf,eAAe,yBAAwB;;CACzD,WAAM,gBAAW,YACH,oBACJ,qDACE,aACE,iBACF,mBAAW,EAAG;CAG1B,mCACW;AAAA,MAAC,SAAQ,OAAQ,QAAQ,MAAS;AAAA,kBAAQ;SAA1C;AAAA;;;CAGX,EAAG,sBACH;AAAA,EACI,EAAG,SAAQ,KAAM;AAAA,uBAAgB;;EACjC,EAAG,SAAQ,KAAO;AAAA,uBAAgB;;EAClC,EAAG,SAAQ,KAAO;AAAA,uBAAgB;;EAElC,cAAc,yBAAwB,YAAS,oBAAa;EAI5D,sBAAiB,gBAAW,YACd,eACJ,mBAAW,aAAK,EAAG,aAAK,YACtB,aACE;EAGd;WAAkC;EAAlC;;;;;;ME9IJ;IF8II;;;;;;;;;;;;;;;;;;MEtGJ;IFsGI;;;;;;;;;;;;;CAIJ,eAAU,gBAAW,YACP,yBAAwB,iCAEzB,mBAAW,EAAG,YAChB,WACC,kBAAU,EAAG,EAAG,EAAG,cACjB;CAGd;WAA2B;CAA3B;;;;;;KE3JA;GF2JA;;;;;;;;;;;;;;;;;;KEnHA;GFmHA;;;;;;;;;;;;CAGY;CACJ;;CAAuB;CAD/B,iBAAY,QAAc,MAClB,UAAuB,+DACvB,gBACA,WACI,wBAAgB,kBAChB,YACC,mBAAW,aAAK,EAAG,cAClB;CAId,EAAG,EAAC,qBACJ;AAAA,EACI,kBAAa,WAAW,KAAM;EAC9B,6BAAsB,mBAAW,aAAK,EAAG,aAAK;EAC9C;YAAmC;EAAnC;;;;;;ME7KJ;IF6KI;;;;;;;;;;;;;;;;;;MErIJ;IFqII;;;;;;;;;;;;EACA,wCAAiC;EAEjC;;CAGJ,yBAAc,qBAAW,IAAK,MAAK,OAAM;;;;;4BAK7C,oBACA;AAAA,EACI,yBAAoB,WAAM;EAC1B;UAA6B,mBAAW,aAAK,EAAG,YAAU;EAA1D;;;;;;ME3LA;IF2LA;;;;;;;;;;;;ME3JA;IF2JA;;;;;EAEA,OAAO,6BAAwB;;4BAInC,mBACA;AAAA,EACI,yBAAoB,SAAU;EAC9B;UAA6B,mBAAW,WAAS,EAAG,aAAK;EAAzD;;;;;;MEpMA;IFoMA;;;;;;;;;;;;MEpKA;IFoKA;;;;;EAEA,OAAO,4BAAuB;;WAI3B,WACP;AAAA,EACI;YAAwB;EAAxB;;mBAAwB;;;EACxB;aAAwB;EAAxB;;oBAAwB;;;EAExB,wBAAa;EACb,yBAAc,qCAAqB,IAAK,MAAK,SAAQ,WAC3C,6CACE;;UAKT,WACP;AAAA,EADO;EAEH,sBAAsB;EAEtB,uCAAiC;AAAA,GAC7B,2BAAoB,WAAM;GAC1B;WAA6B,mBAAW,aAAK,EAAG,SAAO;GAAvD;;;;;;OE7NJ;KF6NI;;;;;;;;;;;;OE7LJ;KF6LI;;;;;;EAGJ,iCAEI;AAAA,KAAG,oBAAY,GACf;AAAA,IAEI,QAAQ;IAGR,gCAA8B,wBAAgB;IAK9C,yBAAc,oBAAqB,IAAK,MAAK,SAAU;UAI3D;AAAA,IACI,EAAG,kBAAiB,GAAG;AAAA;;IAGvB,yBAAc,oBAAqB,IAAK,MAAK,SAAU;IAKvD,gCAA8B,wBAAgB;;;EAMtD,WAAW,cAAS;EACpB,WAAW,UAAK;EAEhB,eAAO,aAAS,UAAE,WAAlB;EAEA,EAAG,kBAAY,GACf;AAAA,GAGI,yBAAc,mBAAe,IAAK,MAAK;GAInC,gCAAyB,yBAAwB,YAAS,oBAAa;GAM3E,EAAG,YAAW,KAAU,WAAW,GAE/B;AAAA,6BAAc,KAAM,IAAK,yBAAwB,WAAY;UAI7D;AAAA,6BAAc,KAAM,IAAK,0BAAyB,WAAY;;SAItE;AAAA,GACI,yBAAc,mBAAe,IAAK,MAAK;GAInC,gCAAyB,yBAAwB,YAAS,oBAAa;GAI3E,EAAG,YAAW,KAAU,WAAW,GAE/B;AAAA,6BAAc,KAAM,IAAK,yBAAwB,SAAU;UAI3D;AAAA,6BAAc,KAAM,IAAK,0BAAyB,SAAU;;;;UAKxE,WAEI;AAAA,2BAAc,qCAAqB,IAAK,MAAK;;QAG1C,WACP;AAAA,EACI,eAAe,IAAI,CAAa,KAAb;EACnB,YAAY,AAAa,OAAb;EACZ,cAAc,uCAAsB,2BAAqB;EACzD,yBAAc,mCAAmB,SAAU,MAAI;EAC/C,yBAAc,KAAM,SAAU,qBAAoB;EAElD,wBAAwB;EACxB,yBAAc,eAAgB,kBAAmB,MAAI;EACrD,EAAG,oBAAc,MACjB;AAAA,GACI,yBAAc,2BAAuB,kBAAmB,MAAI;GAC5D,yBAAc,6BAAyB,kBAAmB,MAAI;;EAGlE,EAAG,wBAAkB,MACjB;AAAA,4BAAc,0BAAsB,kBAAmB,MAAI;;;wBAInE,sBACA;AAAA,EACI;EAAyB;EAA8B,gCAAgB,EAAE,EAAE;EAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAvD,aAAyB,mBAA8B;EAAvD;;;;;;;;;;;;;EAEA,OAAO,wBAAmB;;SAEvB,WACP;AAAA,EACI,QAAQ;EACR,YAAY;EAEZ,yBAAc,KAAM,IAAE,EAAG,qBAAoB,aACnC;EAEV,yBAAc,KAAM,EAAG,qBAAoB,CAAC,OAAS,YAC3C,gDACC,IAAE;EAEb,yBAAc,KAAM,IAAE,EAAG,qBAAoB,GAAK,YACxC,gDACC,IAAI,IAAE;;wBAGd,WACP;AAAA,EAEI,EAAG,uBAAiB,eAAe,KAAK,kBAAa,eAAe,GAChE;AAAA,UAAO;;EACX,OAAO;;SAIX,gBAEI;AAAA,SAAO,CAAC,AAAC,IAAI,MAAO,OAAO;;gBAIhB,YACX;AAAA,SAAO,WAAK,WAAM,UAAG,IAAI,EAAG;;YAEjB,YACX;AAAA,SAAO,WAAK,WAAM,UAAG,IAAI,EAAG;;YAEzB,YACH;AAAA,SAAO,WAAK,WAAM,UAAO,EAAG;;QAEzB,YACH;AAAA,SAAO,WAAK,WAAM,UAAO,EAAG;;oBAEzB,YACH;AAAA,SAAO,oCAAa,EAAb;;gBAEJ,YACH;AAAA,SAAO,oCAAS,EAAT;;iBAEJ,YACH;AAAA,SAAO,oCAAa,EAAb;;aAEJ,YACH;AAAA,SAAO,oCAAS,EAAT;;;;;;;;sBGtsBP,YACN;AAAA,CAAQ;;MACR;EACC,QAAQ,QAAQ;EAChB,QAAuB,IAAQ;EACvB,EAAE,WAAW;EACb,EAAE,eAAe,EAAE;EACnB,EAAE,iBAAiB,EAAE;EACrB,EAAE,iBAAiB,EAAE;EAC7B,OAAO;MACR;EACC,SAAQ,QAAQ;EAChB,OAAO,SAAS,AAAK,GAAE,GAAG,AAAa,GAAE,KAAK,EAAE,AAAK,GAAE,GAAG,EAAE,EAAE;MAC/D;EACC,SAAQ,QAAQ;EAChB,QAAQ,GAAE,SAAS;EACnB,QAAQ,GAAE,SAAS;EACnB,OAAO,SAAS,AAAK,EAAE,GAAG,AAAa,EAAE,KAAK,EAAE,AAAK,EAAE,GAAG,AAAK,EAAE,GAAG,AAAK,EAAE,GAAG,AAAK,EAAE;;EAErF,MAAM,mDAA2B;;;kBAI5B,kBAAoD;AAAA,CAC1D,QAAQ,AAAM,aAAc;CAC5B,EAAI,MAAK,GACR;AAAA,SAAO;;CACR,OAAO;;qBAGD,oBAA8D;AAAA,CACpE,EAAI,QAAO,MACV;AAAA,QAAM;QACA,EAAI,OAAM,GAChB;AAAA,IAAI,QAAO,GACV;AAAA,SAAM,WAAW;SAEjB;AAAA,UAAO;;;CAWT,OAAO,SAAmB,IAAK;;qBAiCzB,gBAA4C;AAAA,CAClD,QAAQ,UAAU;CAClB,EAAI,MAAK,IAAK;AAAA,SAAO;;CACrB,SAAS,EAAE;CACX,OAAO;;mBAGD,YACN;AAAA,QAAO,QACA,SACA,aACI,WACT;AAAA,SAAO,WAAe;WAEhB,WACN;AAAA,SAAO,SAAa;;;;;;eC3FT,aAAiD;AAAA,CAC9D,QAAQ;CACC;;EAAT,SAAS;EACR,OAAO;;CACR,OAAO;;aA4EM,iBAAoD;AAAA,CACvD;;EAAV,SAAU;EACT,EAAI,OAAK,KACR;AAAA,UAAO;;;CACT,OAAO;;cA4CM,eACb;AAAA,CAAU;;EAAV,SAAU;EACT,EAAE;;;eA2CU,kBAAyD;AAAA,CACtE,QAAQ;CACR,EAAI,SAAQ,MACX;AAAA,EAAU;;GAAV,SAAU;GACT;;QAED;AAAA,EAAU;;GAAV,SAAU;GACT,EAAI,MAAK,KACR;AAAA;;;;CACH,OAAO;;cAqCM,eAA8D;AAAA,CACjE;;EAAV,SAAU;EACT,EAAG,GAAE,KAAI;AAAA,UAAO;;;CAEjB,OAAO;;WChOD,WACN;AAAA,eAAS;;;;;MAQH,eAAyB;AAAA,EAC/B,QAAQ,oBAAgB,KAAM;EAC9B,EAAI,WAAK,MACR;AAAA,YAAI;SAEJ;AAAA,iBAAS;;EACV,SAAI;EACJ;;QAQM,eAA0B;AAAA,EAChC,QAAQ,oBAAgB,KAAM;EAC9B,SAAI;EACJ,EAAI,WAAK,MACR;AAAA,YAAI;;EACL;;OA2BM,WAAyB;AAAA,EAC/B,EAAI,WAAK,MACR;AAAA,UAAO;;EACR,QAAQ;EACR,SAAI;EACJ,EAAI,WAAK,MACR;AAAA,YAAI;;EACL;EACA,OAAO;;UA8BD,YAAgC;AAAA,EACtC,WAAuB;EACvB,QAAQ;EACR,KAAO,MAAK,MAAZ;AAAA,GACC,EAAI,WAAU,GAAI;AAAA,IACjB,EAAI,SAAQ,MACX;AAAA,cAAI;WAEJ;AAAA,iBAAY;;IACb,EAAI,WAAK,GACR;AAAA,cAAI;;IACL;IACA,OAAO;;GAER,OAAO;GACP,IAAI;;EAEL,OAAO;;YAMM,WACb;AAAA,SAAO,wBAAoB;;;;sBA8FrB,oBAAuC;AAAA,CAC7C,YAAY;CACZ,YAAY;;;;;;;0BAWC,eACb;AAAA,aAAY;;;;;UAGC,WACb;AAAA,SAAO,aAAQ;;QAGF,WAAkB;AAAA,EAC/B,UAAU;EACV,YAAO;EACP,OAAO;;;;;;;;UChLS,wBACV;AAAA,sBAAgB,MAAO;;WAIb,wBACV;AAAA,QAAO,sBAAiB,MAAO;;YAId,eAEjB;AAAA,IAAU,QAAV;4BAAU;;;gBAKO,WAEjB;AAAA;;mBAKiB,gBAEjB;AAAA,6BAAqB;;gBAMX,WAA0C;AAAA,QAAO;;kBACjD,WAA0C;AAAA,QAAO;;gBACjD,WAA0C;AAAA,CAAO;;;mBACjD,WAA0C;AAAA,QAAO;;iBACjD,WAA0C;AAAA,QAAO;;cAEjD,WAA0C;AAAA,QAAO;;uBACjD,WAA0C;AAAA,QAAO;;4BACjD,WAA0C;AAAA,QAAO;;2BACjD,WAA0C;AAAA,QAAO;;uBACjD,WAA0C;AAAA,QAAO;;sBACjD,WAA0C;AAAA,QAAO;;2BACjD,WAA0C;AAAA,QAAO;;sBACjD,WAA0C;AAAA,QAAO;;qBACjD,WAA0C;AAAA,QAAO;;oBACjD,WAA0C;AAAA,QAAO;;qBACjD,WAA0C;AAAA,QAAO;;uBACjD,WAA0C;AAAA,QAAO;;0BACjD,WAA0C;AAAA,QAAO;;uBACjD,WAA0C;AAAA,QAAO;;4BACjD,WAA0C;AAAA,QAAO;;qBAEjD,eAA0C;AAAA,QAAO,sBAAiB;;uBAClE,eAA0C;AAAA,QAAO,wBAAmB;;uBACpE,eAA0C;AAAA,QAAO,wBAAmB;;0BACpE,eAA0C;AAAA,QAAO,2BAAsB;;2BACvE,eAA0C;AAAA,QAAO,4BAAuB;;4BACxE,eAA0C;AAAA,QAAO,6BAAwB;;gBC3IhF,WAAe;AAAA,CAElB,WAAM,gBAAgB;CACtB;;;;iBAVO,WAEH;AAAA;;;SAeD,kBAAoD;AAAA,SAAO;;SAE3D,WAAiB;AAAA;UAEjB,aAA0B;AAAA;aAG3B,WAAqB;AAAA;eAGrB,WAAuB;AAAA;YAEvB,WAAoB;AAAA;gBAEpB,WAAwB;AAAA;eAGxB,gBAAuC;AAAA;aAEvC,gBAAqC;AAAA;eAGrC,gBAAuC;AAAA;aAEvC,gBAAqC;AAAA;gBAErC,gBAAwC;AAAA;eAExC,gBAAuC;AAAA;aAGvC,gBAAmC;AAAA;WAEnC,gBAAiC;AAAA;eAEjC,gBAAsC;AAAA;eAGtC,gBAAuC;AAAA;aAEvC,gBAAqC;AAAA;eAErC,gBAAuC;AAAA;iBAGvC,gBAA2C;AAAA;iBAE3C,gBAA2C;AAAA;eAE3C,gBAAyC;AAAA;mBAEzC,gBAA6C;AAAA;iBAG7C,gBAA0C;AAAA;mBAE1C,gBAA4C;AAAA;iBAE5C,gBAA0C;AAAA;qBAE1C,gBAA8C;AAAA;oBAE9C,gBAA6C;AAAA;WAG7B,gBAAqD;AAAA;;;;WClF/E;AAAA;;;;;;SAYa,iBACT;AAAA,EACI,sBAAuB;EACvB,sBAAsB,WAAW;EACjC,uBAAuB,WAAW;EAClC,2BAA2B;EAC3B,6BAA6B;EAE7B,6BAA6B,OAAM;EACnC,6BAA6B,OAAM;EACnC,6BAA6B,OAAM;EACnC,6BAA6B,OAAM;EACnC,6BAA6B,OAAM;EACnC,6BAA6B,OAAM;EACnC,6BAA6B,OAAM;EACnC,6BAA6B,OAAM,oDAAiD;EACpF,6BAA6B,OAAM,qDAAkD;EACrF,6BAA6B,OAAM,qDAAkD;EACrF,6BAA6B,OAAM,sDAAmD;EACtF,6BAA6B,OAAM,qDAAkD;EACrF,6BAA6B,OAAM,sDAAmD;EACtF,6BAA6B,OAAM,kDAA+C;EAClF,6BAA6B,OAAM,sDAAmD;EACtF,6BAA6B,OAAM,mDAAgD;EACnF,6BAA6B,OAAM,uDAAoD;EACvF,6BAA6B,OAAM,mDAAgD;EACnF,6BAA6B,OAAM,oDAAiD;EACpF,0BAA0B,OAAM;EAEhC,OAAO;;SAOF,WACT;AAAA,EACI,qBAAmB,mBAAW,IAAK;EAGnC,4BAA4B,wBAAgB;EAC5C;gBAA8B;EAA9B;EAEA,YAAO;;aAIF,gBAEL;AAAA,mBAAkB,WAAW;;aAGxB,gBAEL;AAAA,mBAAkB,WAAW;;UAGxB,gBAEL;AAAA,mBAAkB,SAAS;;;;WCpExB,WAPX;AAAA,CA0KY,AA1KZ,SA0KY;CArKoB,AALhC,eAKgC;CADV,AAJtB,mBAIsB;CAD6B,AAHnD,eAGmD;CADlB,AAFjC,gBAEiC;CAKtB;CAGH,mBAAmB;CACnB,WAAW;CACX,UAAS;CAAT,SAAa,AAAQ,2BAAR;CAAb;;EAEI,EAAG,KAAE,gBAAgB,GACrB;AAAA,GACI;GAEA,UAAS;GAAT,UAAa,AAAQ,2BAAR;GAAb;;IAEI,EAAG,KAAE,gBAAgB,GACrB;AAAA,KACI,WAAW;KACX,EAAG,QAAK,KAAK,GAAG;AAAA,cAAQ,AAAQ,eAAa,IAArB;;KAExB,mBAAc,gBAAW,YACX,yBAAwB,6BAC7B,mBAAW,KAAM,YACf;;;;;CAQ3B,8BACA;AAAA,EAEI,aAAa;EACb,iBAAiB;EACjB,aAAa,eAAe,UAChB,cACA,cACA,WACD,wBAAgB,mBACd,CACL,mBAAW,EAAG,GACd,mBAAe,mBAAa,GAC5B,mBAAe,mBAAa,QAC5B,mBAAe,qBAAY,EAAG,SAAS,YACvC,mBAAW,EAAG;EAGtB;YAAyB;EAAzB;;mBAAyB;;;EACzB;aAAyB;EAAzB;;oBAAyB;;;EACzB;WAA4B;EAA5B;;;;;;EAEA,yBAAc,2BAAsB,EAAG,MAAG,WAAW;EAErD,OAAO;;CAGX,kBAAa,WAAW,CAAC;CACzB,kBAAa,WAAW;CACxB,kBAAa,WAAW;CACxB,kBAAa,WAAW,mBAAc;CACtC,kBAAa,WAAW,mBAAc;CACtC,kBAAa,WAAW,mBAAc;CA7DnC,aAgE8B;CAhE9B,aAgEkC;CAErC;CACA;;;;;SAKJ,WACA;AAAA,EACI,eAAM,SAAN;EACA,kBAAa,mBAAqB,WAAY;EAC9C,mBAAc,mBAAqB,SAAU;;YAGjD,WACA;AAAA,EACI,eAAM,WAAN;EACA,qBAAqB;EACrB,qBAAqB;;YAGzB,WACA;AAAA,EACI,QAAQ,6BAAuB;EAC/B,QAAQ;EAER,eAAU,CACN,SAAQ,kBAAe,cAAY,gBACnC,SAAQ,sBAAmB,cAAY,MACvC,SAAQ,mBAAgB,cAAY,MACpC,SAAQ,uBAAoB,cAAY;EAG5C;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GAEI,aAAa,gBAAW,YACV,yBAAwB,iBAAc,cAAY,eACvD,mBAAW,EAAG,YACZ;GAGX,KAAI;GAEJ,gBAAgB;;;YAKxB,WACA;AAAA,EACI;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GAEI,iBAAY;GACZ,yBAAc,wBAAmB,IAAK,MAAG,mCAA6B;GACtE,kBAAa;;EAGjB;;aAGJ,WACA;AAAA,EACI,iBAAY;EACZ;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GAEI,yBAAc,wBAAmB,IAAK,MAAG,aAAa;GACtD,kBAAa;;EAGjB;;aAGG,mBACP;AAAA,EACI,eAAM,YAAN;EACA,gBAAgB;EAGhB,EAAG,eAAc,MAAM;AAAA;;EAEvB,EAAO,mBAMH;AAAA,GACI;GACA;GACA,aAAa;SATd,eAEH;GACI;GACA;GACA,aAAa,oBAAoB,SAAU;SAK/C;AAAA,GACI;GACA;GACA,aAAa,oBAAoB,SAAU;;;aAMhD,gBACP;AAAA,EADO;EAEH;EACA,eAAM,gBAAgB,aAAtB;EACA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,cAAJ,AAAc,IAAd;;GAEI,eAAe,kCAAkC;GACjD,EAAG,oCAAgC,WACnC;AAAA,IACI,EAAG,gCAA4B,AAAC,iBAAgB,iBAAe,QAE3D;AAAA,8BAAc,2BAAsB;AAAA,wBAEhC;AAAA,wBAAU;;QAFsB;;IAMxC;;;;eAcL,WAEH;AAAA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI,yBAAc,2BAAsB,EAAG,MAAG,UAAU;;;eAGrD,WAEH;AAAA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI,yBAAc,2BAAsB,EAAG,MAAG,gCAA0B;;;aAGrE,WAEH;AAAA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI,yBAAc,2BAAsB,EAAG,MAAG,WAAW;;;YAG7D,gBACA;AAAA,EAEI;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GAEI;oBAA0B;GAA1B;;;;;;;EAGJ,iBAAiB,aAAQ,sBAAiB;EAC1C,EAAG,oCAA6B,0BAChC;AAAA,GACI;aAA6B,aAAQ,2BAAqB;GAA1D;;;;;;GACA;WAAkB;GAAlB,cAAe,EAAf;;;;;qBCzOD,WACP;AAAA,CACI;CAGA;CAGA,aAAa;CACb,QAAQ;CACR,QAAQ;CACR;WAAgB;CAAhB,WAAgB,YAAhB;AAAA,EAAI,eAAJ,AAAgB,IAAhB;;EAEI,WAAM,eAAgB,mBAAW,IAAK;EACtC,SAAI,EAAG;EACP,KAAK;EAEL;YAAW;EAAX,YAAW,YAAX;AAAA,GAAI,UAAJ,AAAW,IAAX;;GAEI,eAAM,IAAN;GACA,MAAQ;QACJ;IAAU,aADN;IAEA,eAAW,KAAC,SAAM,cAAc,mBAAW,IAAK;IAChD,KAAK;;QACT;IAAuB,WAJnB;IAIW,cAJX;IAKA,eAAW,KAAC,UAAM,uBAAoB,OAAK,IAAI,mBAAW,IAAK;IAC/D,KAAK;;QACT;IAAW,cAPP;IAQA,eAAW,KAAC,UAAM,iBAAiB,mBAAW,IAAK;IACnD,KAAK;;;;EAGjB,KAAK;;CAGT,UAAK,EAAG,OAAQ,IAAI;CAEpB,KAAK;CACL,UAAK,EAAG,EAAG;CACX,KAAK;CACL,UAAK,EAAG,EAAG;;;;;;OAGf,gBAEI;AAAA,gBAAc,MACN,IAAI,OACJ,OACA,QACA,WACI,wBAAgB,mBACd,sBACF;;OAIhB,cAEI;AAAA,mBAAiB,MACT,OACA,OACA,YACI,wBAAgB,mBACd,sBACF;;SAIhB,mBACA;AAAA,EACI,YAAY,WAAW,KAAM;EAC7B,qBAAmB;EACnB,mBAAiB;EACjB,qBAAmB,wBAAgB;EACnC,0BAAwB;EAExB;EAEA,OAAO;;aAGX,mBACA;AAAA,EACI,YAAY,WAAW,KAAM;EAC7B,qBAAmB;EACnB,mBAAiB;EACjB,qBAAmB,wBAAgB;EACnC,0BAAwB;EAExB;EAEA,OAAO;;;;;;;;;;;;;;;cCxFO,WAEpB;AAAA,QAAO,gBAAgB;;gBAIH,kBAEpB;AAAA,QAAO,OAAO,WAAW,AAAC,CAAC,KAAK,OAAO,KAAK;;kBAIxB,kBAEpB;AAAA,QAAO,OAAO,AAAC,CAAC,KAAK,QAAQ;;gBAKhB;AAAA;;;CAEb,UAAU;CACV,UAAU;CAAV,SAAc;CAAd;;EAEC,OAAO,uBAAuB,YAAc,yBAAyB,IAAvC;;CAE/B,OAAO;;cAIa,0BAEpB;AAAA,CAAsB,WAAM;CAArB,QAAe,QAA0B,mBAA1B;CAAf;;mBAIa,cAEb;AAAA,IAAC,OAAO,QAAQ,aAAa,GAAK;AAAA,aAAI,YAAO,aAAa,IAApB;QAA0B;AAAA;;;iBAK1D,cACd;AAAA,CACC,EAAI,QAAK,MACR;AAAA,YAAU;EAAV,SAAc;EAAd;;GACC,QAAQ,YAAO,aAAa,IAApB;GACR,QAAQ,IAAI;GACZ,QAAQ,IAAI;GACZ,IAAI,KAAK;GACT,IAAI,KAAK;;;CAGX,OAAO;;sBAIa,aAEb;AAAA,IAAC,MAAM,MAAQ;AAAA,YAAU,aAAa;EAAvB;;;;;QAA8B;AAAA;;;yBAIhC,YAEb;AAAA,IAAC,KAAG,MAAQ;AAAA,YAAU,AAAc;EAAxB;;;;;QAA8B;AAAA;;;;;;gBCpDpC,kBACb;AAAA,KAAI;AAAA,SAAe,EAAE;;EAA4B,OAAO;;;sBAO3C,kBAAsE;AAAA,CACnF;CACO,EAAI,MAAK,MAAO;AAAA,SAAyC;QAAW;AAAA,EAAI;uBAAoB;AAAA,GAAC,MAAI,iBAAiB,SAAO;GAAjD,OAAqB;SAArB;AAAA;;EAAJ,EAAI,OAA2D;AAAA,YAAE;SAAY;AAAA,YAAE;;;;sBAG7I,wBAAoF;AAAA,CACjG;CACI;sBAAoB;AAAA,EAAC,MAAI,iBAAiB,SAAO;EAAjD,OAAqB;QAArB;AAAA;;CAAJ,EAAI,OAA2D;AAAA,IAAE,KAAK;QAAY;AAAA,IAAE,SAAS,AAAyC;;;iBAOzH,YAA+C;AAAA,CAC5D,QAAQ;CACR,EAAI,MAAK,MAAc;AAAA,EACtB,qBAAqB;EACrB;EACA,EAAI,MAAK,YAAY,KAAK,oBAAoB,oBAAoB,EAAG,IAAK;AAAA,UAAO;;EACjF;;CAED,OAAO;;qBAGM,YACN;AAAA,iBAAuB,YAAc;AAAA,UAAC,CAAC,AAAgB,cAAM,AAAe;QAA5E;AAAA;;;sBA0BM,kBAAmE;AAAA,CAChF,EAAI,EAAC,qCAAS,EAAE,QAAS;AAAA,SAAO;;CAChC,OAAiB,EAAE;CACnB,OAAO;;qBClFE,WACP;AAAA,CACI;CAEA;CACA,kBAAkB,aAAa,GAAI,IAAM,YAAY;CACrD,wBAAwB,WAAa;AAAA,sBAAoB;;CAEzD,kBAAkB,SAAM,wBAAsB,sBAAoB;CAClE,iBAAiB,SAAM,uBAAqB,sBAAoB;CAGhE,QAAQ;CACR,cAAc;CACd,SAAS;CAAT,WAAa,GAAb;AAAA;EAEI,QAAQ,IAAI,MAAY;EAExB,EAAG,MAAK,GAAG;AAAA,iBAAc,EAAG,EAAG,WAAY;SACtC;AAAA,iBAAc,EAAG,EAAG,YAAa;;;;;;;;;;gBAQvC,2BAEH;AAAA,iBAAW,YACG,yBAAuB,uBAC3B,mBAAW,EAAG,cACV;;;;;;;;;;aCNP,YACb;AAAA,QAAe,qBAAqB,EAAE;;eAQzB,YAA4C;AAAA,CACzD,QAAgB,SAAmB,EAAG;CAEtC,EAAI,MAAK,KAAK,CAAC,kBAAa,MAAM,OAAY,kBAAa,MAAM,KAChE;AAAA,MAAY,SAAmB;;CAChC,EAAY,OAAgB,IAC3B;AAAA,SAAO;;CACR,OAAO,AAAK;;aAOC,YACN;AAAA,SAAK,GAAI;AAAA;QAAI;AAAA,oBAAW,gBAAc;;;gBCbhC,WACb;AAAA,UAAI;;;;;;;;;;yBCuIsC,kBAiBpC;AAAA,GAAE,aAAY,cAAgB;AAAA,8BAAS,EAAG,iBAAiB;QAA3D;AAAA;;;uBAWoC,gBAAqD;AAAA,CAmB/F,WAAW;CACX,WAAW;CACL,EAAE,SAAQ,MAAQ;AAAA,8BAAS,OAAO,KAAM,SAAS;QAAjD;AAAA;;;sBAaO,gBAAiD;AAAA,CAI9D,QAAQ,kBAAc;CACf,KAAC,IAAI,KAAK,IAAI,KAAO;AAAA,cAAK;QAA1B;AAAA;;;oBAYyB,YAAsC;AAAA,CAItE,QAAQ;CACR,QAAQ;CACR,KAAO,KAAI,KAAK,oBAAQ,EAAE,IACzB;CAED,EAAI,KAAI,GACP;AAAA,SAAO,qBAAS,EAAG,IAAE;QAErB;AAAA,SAAO;;;oBAawB,YAAsC;AAAA,CAItE,QAAQ;CACR,QAAQ;CACR,KAAO,KAAI,KAAK,oBAAQ,EAAE,IAAE,IAAE,IAC7B;CAED,EAAI,KAAI,GACP;AAAA,SAAO,qBAAS,EAAG,IAAE;QAErB;AAAA,SAAO;;;mBAUkC,YAM1C;AAAA,QAAO,kBAAM,kBAAM;;mBAsCN,gBAA0D;AAAA,CACvE,EAAI,aAAY,GACf;AAAA,SAAO;;CAER,KAAO,YAAW,GACjB,KAAQ;CAET,OAAO;;sBAcM,mBAYb;AAAA,QAAO,QAAQ,UAAU;;aCrXhB,wBACP;AAAA,CACI,aAAa;CACb,eAAe;CACf,YAAO,cAAS;;;;;WAGpB,gBAEI;AAAA,SAAO,cAAS,SACN,yBAAqB,iCACd,YACL,WACA,oBACQ,UACT,eACC,wBAAgB,oBACd;;cAIX,WACP;AAAA,EACI,cAAS,cAAS;EAClB;WAA0B;EAA1B;;;;;;MfiUA;IejUA;;;;;;;;;;;;;;;;;;MfyWA;IezWA;;;;;;;;;;;;EACA,sBAAe,kBAAU,EAAE,EAAE,EAAG;EAChC;mBAAgB;EAAhB;;;;;;EACA;mBAAgB;EAAhB;;;;;;EACA,sBAAe;EACf,2BAAoB;EACpB,sBAAe;EACf,+BAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBCQjB,YAAqD;AAAA,CAClE,QAAgC;CAChC,EAAI,MAAK,MACR;AAAA,SAAO;;CACR,OAAO,OAAO;;mBAGD,YAAmD;AAAA,CAChE,QAAgC;CAChC,OAAO,OAAO;;oBAGD,eAAgE;AAAA,CAC7E,SAA0B,WAAW;CAErC,EAAI,OAAM,QAAQ,CAAC,AAAgB,aAClC;AAAA,SAAO;;CACR,OAAO;;mBAGM,eAA8D;AAAA,CAC3E,QAAkB,WAAW;CAE7B,EAAI,MAAK,QAAQ,CAAC,AAAe,aAChC;AAAA,SAAO;;CACR,OAAO;;sBAGM,kBACb;AAAA,CAAQ;;MACR;EACC,OAAO,IAAQ;MAChB;EACC,OAAO,IAAQ,GAAG,KAAK;MACxB;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK;MAChC;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MACxC;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MAChD;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MACxD;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MAChE;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MACxE;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MAChF;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MACxF;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MAChG;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK;MACxG;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK;MACjH;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK;MAC1H;EACC,OAAO,IAAQ,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK;;EAElI,MAAM;;;2BAIM,aAA6D;AAAA,CAC1E;CACA,OAAO;;kBAGM,0BAAqF;AAAA,CAClG,QAAgB,cAAc,EAAE;CAChC,EAAI,MAAK,MAAO;AAAA,QAAM,iDAAuB;;CAC7C,EAAI,oBAAmB,IAAK;AAAA,EAC3B,EAAI,WAAU,MAAO;AAAA,SAAM,yCAAe,SAAO;;EACjD,OAAO,AAAqB,QAAF,EAAI;;CAE/B,EAAI,WAAU,QAAQ,iBAAiB,GACtC;AAAA,QAAM,yCAAe,SAAO;;CAC7B,OAAO;;iBAgCM,YACb;AAAA,CAAQ,gBAAiB;CAAjB;MACR;EAAgB,OAAO;MAiBvB;EACC,EAAI,CAAgB,cAAM,AAAe,aACxC;AAAA,UAAO;;EACR,OAAO;MAlBR;EAEC,EAAI,WAAU,MAAM,IAAE,cACrB;AAAA,UAAO;;EACR,OAAO;MACR;EACC,EAAI,MAAK,MACR;AAAA,UAAO;;EACR,QAAQ;EACR,EAAI,MAAK,MACR;AAAA,UAAO,gBAAM;;EACd,QAAQ,iBAAiB;EACzB,EAAI,MAAK,MACR;AAAA,UAAO,iBAAO;;EACf,OAAO;MAfR;EAAe,OAAO,iBAAO;MAoB7B;EACC,OAAO;;EAEP,OAAO;;;ejBhLC,4BACP;AAAA,CACI,cAAc,gBAAW,YACX,yBAAwB,YAAQ,cACpC,mBAAW,EAAG,YACb,aACG;CAGd,kBAAkB,mBAAoB,WAAW;;;;;aAGrD,gBACA;AAAA,EACI,eAAe,kCAAkC;EACjD,EAAG,+BAAyB,WAC5B;AAAA,GACI,qBAAqB;GACrB;;;;;;;;;;;;;;;;;0BkBWJ,YAA+C;AAAA,CACrD,EAAI,MAAK,MAAM;AAAA,SAAO;;CAEtB,eAAe;CACf,0BAAoC,0BAA4C;AAAA,EAC/E,YAAY;EACZ;aAAa,kBAAb;AAAA,GAAK,WAAL,AAAa,UAAb;;GACC,EAAI,gCAAgB,MAAM;AAAA,WAAO,4BAAa;;GAC9C,aAAa;GACb,eAAuB;GACvB,EAAI,aAAY,MAAM;AAAA,IACrB,UAAU,qBAAqB;IAC/B,EAAI,QAAO,GAAG;AAAA,KACb,gBAAgB,4BAAgB,EAAG;KACnC,iBAAiB,4BAAgB,MAAI,EAApB;KACjB,SAAS,sBAAO,UAAW;;;GAG7B,WAAW,uBAAQ,OAAQ,mBAAoB;;EAEhD,OAAO;;CAER,QAAQ,yBAAU;CAClB,0BAAoC;CACpC,OAAO;;2BAWM,WAeZ;AAAA,KACC;AAAA,QAAM;;;EAEN,QAAQ,wBAAS;EACjB;EACA,OAAO;;;2BA0KK,YA4Db;AAAA,GAAI,MAAK,MACR;AAAA,SAAO;QACD,EAAI,QAA2B,MAAM,UAAU;AAAA,EAErD,YAA4B,QAAQ;EACpC,EAAI,OAAM,MAAM,SAAU;AAAA;;EAC1B,QAAQ;EACR,YAAY;EACZ;aAAa,cAAb;AAAA,GAAK,WAAL,AAAa,MAAb;;GACC,EAAI,aAAY,OAAQ;AAAA,IACvB,WAAW,cAAc,SAAS;IAClC,WAAW;IACX,WAAW,cAAc;IACzB,YAAW,aAAa,cAAc;IACtC,OAAO,uBAAS,QAAQ,uBAAuB,iCAAkB,QAAQ,gBAAgB,OAAO,sBAAO,UAAU,KAAK,MAAO,KAAM;UAEnI;AAAA,WAAO,sBAAO,iBAAiB;;;EAEjC,OAAO;QAEP;AAAA,SAAO,AAAK;;;;;;;;;;;;iBC5SO,kBAiBZ;AAAA,iBAAgB,EAAE;;;;;0BCdd,eAA6C;AAAA,CAC1D;WAAU;CAAV,WAAU,YAAV;AAAA,EAAK,QAAL,AAAU,IAAV;;EACC,EAAI,WAAU,MAAO;AAAA,GAIpB,EAAI,UAAS,MAAO;AAAA,WAAO;;GAC3B,QAAwB,0BAA0B;GAClD,OAAO;;;CAGT,OAAO;;yBASM,eAAmD;AAAA,CAChE;WAAU;CAAV,WAAU,YAAV;AAAA,EAAK,QAAL,AAAU,IAAV;;EACC,EAAI,WAAU,MAAO;AAAA,GAIpB,EAAI,UAAS,MAAO;AAAA,WAAO,uBAAuB;;GAClD,OAAO,0BAA0B;;;CAGnC,OAAO;;sBCqBD,WAAe;AAAA,CACrB,WAAM;CACN,aAAQ;CACR,gBAAW;CACX,oBAAe;CACf,aAAQ;CACR,cAAS;;;;sBAicI,YAA4B;AAAA,CACzC,QAAQ;CACR,YAAY;CACZ,OAAO;;;WA3bD,WACC;AAAA;;mBAoCR,YAAuC;AAAA,EAC9B;EAAR,QAAQ,eAAU,MAAV,yBAAU,KAAV,QAAU;EAClB,EAAI,MAAK,MAAO;AAAA,GACf;GACA,cAAQ;GACR;;EAED;cAAY;EAAZ,kBAAU,MAAV;sBAAU,EAAV;;YAAU,KAAV;;EAKA;EACA,IAAI,mBAAsB;EAC1B,yBAAQ;EACR;EACA,cAAQ;;gBAGT,YAAyB;AAAA,EAExB,SAAiB,OAAiB;EAElC,UAAU;EAAV,SAAc;EAAd;;GAEC,SAAS,WAAM;GACf,EAAY,QAAiB,OAAO,MAAM,MAAM,GAAI;AAAA,IAInD;IACA,cAAQ;IACR,OAAO;;;EAGT,gBAAW;EACX,OAAO;;mBAoBR,YAA4B;AAAA,EAC3B;YAAU,eAAe;EAAzB,WAAU,YAAV;AAAA,GAAK,QAAL,AAAU,IAAV;;GACC,qBAAgB;GAChB,eAAU,cAAc,EAAE;;EAE3B;;aAaM,YACN;AAAA,EAAQ,wBAAY;EAAZ;OACR;GACC;;OACD;GACC,SAAc;GACd,EAAI,OAAK,GAAI;AAAA,IACZ;IACA;;GAED;GACA,cAAQ;;OACT;GACC,SAAgB;GAChB,EAAI,OAAW,KACd;AAAA;UACI,EAAI,EAAC,SAAc,KACvB;AAAA,kBAAQ,AAAI,KAAI,IAAI,MAAS;UACzB;AAAA,IACJ;IACA,cAAQ;;;OAEV;GACC,cAAQ,AAAI,IAAI,MAAS;;OAmJ1B;GACC,EAAI,sBAAO,EAAE,QAAQ;AAAA,IACpB,gBAAgB,kBAAkB;IAMlC;IACA,qBAAgB;UACV,EAAI,sBAAO,EAAE,OAAO;AAAA,IAC1B;IACA,qBAAgB,iBAAiB;UAC3B;AAAA,IACN,EAAI,kBAAY,kBAAa,IAC5B;AAAA;;IACD;IACA,qBAAgB;;;OAuGlB;GACC,MAAM;;OA3QP;GAAY,QAvBJ;GAwBP,EAAyC,MAAK,QAAc;AAAA,IAC3D,qBAAgB;IAChB;;GAED,EAAI,kBAAY,kBAAa,IAC5B;AAAA;;GACD,MAA8D;QAC9D;IACC,aAAa;IACb;IAIA,QAAgH,AAAW,EAAG;IAC9H,UAAU;IAAV,UAAc;IAAd;;KACC,EAAI,GAAE,MAAM,MACX;AAAA;YACI;AAAA,MACJ,EAAI,UAAS,GAAI;AAAA,OAChB,EAAI,WAAU,GACb;AAAA;cACI;AAAA,QACJ;QACA,cAAQ;;OAET,SAAS;;MAEV,eAAU,EAAE;;;IAGd,EAAI,UAAS,GACZ;AAAA,OAAI,WAAU,GACb;AAAA;YACI;AAAA,MACJ;MACA,cAAQ;;;IAGV;;QAOD;IACC,QAAe;IACf;IACA,yBAAQ;;QATT;IACC;IACA,SAAwB;IACxB,cAAU;IAAV;;;;KACC,eAAU;;IACX;;QAaD;IACC;IACA,SAAkC;IACxB;;KAAV,SAAU;KACT;KACA,cAAQ;KACR,eAAU,KAAM;;IAEjB;;QACD;IACC;IACA,SAA6C;IAClC;;KAAX,SAAW;KAEV,SAAS,cAAc,GAAG;KAC1B,oBAAoB,GAAG;KACvB,eAAU;KACV,AAAiB,GAAG,YAAU;KAI9B,eAAU,KAAM;;IAEjB;;QA/BD;IACC;IACA,SAAqC;IAC3B;;KAAV,SAAU;KACT,qBAAgB;KAChB,eAAU,eAAM,OAAN,sBAAM,MAAN,KAAM;;IAEjB;;QAyBD;IACC,SAAwB;IASxB;IACA,yBAAQ,UAAU,AAAC,YAAW,IAAK;IACnC;IAEA,SAAQ;IACR,UAAU,YAAW;IACrB,UAAU;IACV,EAAI,QAAO,MAAO;AAAA,KACX,aAAmB;KAAnB;KAAN,MAAM;KACN,WAAU;KAAV,UAAc;KAAd;;MACC,IAAI,MAAK,uCAAkB;;KAC5B,+BAAe;;IAEhB,KAAO,MAAI,KAAX;AAAA,KACC,SAAS,KAAM;KACf,SAAS,KAAM;KACf,SAAS,KAAM;KAEf,kCAAY,IAAI,MAAM;KACtB,kCAAY,IAAI,CAAC,AAAC,MAAM,IAAK,AAAC,MAAM,KAAM;KAC1C,kCAAY,IAAI,CAAC,AAAC,MAAM,IAAK,AAAC,MAAM,KAAM;KAC1C,kCAAY,IAAI,KAAK;;IAEtB,EAAI,OAAK,KAAM;AAAA,KACd,UAAS,KAAM;KACf,UAAS,KAAM;KACf,kCAAY,IAAI,OAAM;KACtB,kCAAY,IAAI,CAAC,AAAC,OAAM,IAAK,AAAC,OAAM,KAAM;KAC1C,kCAAY,IAAI,AAAC,OAAM,IAAK;WACtB,EAAI,OAAK,MAAM,GAAI;AAAA,KACzB,UAAS,KAAM;KACf,kCAAY,IAAI,OAAM;KACtB,kCAAY,IAAI,AAAC,OAAM,IAAK;;;;IAI7B,EAAI,gBAAW;AAAA;;IACf,EAA4M,kBAAiB,MAAa;AAAA,KACzO;KACA,qBAAgB,kBAAkB;KAClC,EAAI,gBAAW;AAAA,sBAAW;;KAC1B,cAAc;KACd;WACM;AAAA,KACN;KACA,qBAAgB,kBAAkB;KAClC,EAAI,gBAAW;AAAA,sBAAW;;KAI1B,qBAAgB;;;;OAuBnB;GAAW,QA5LH;GA6LP,EAAI,gBAAW;AAAA,IACd,EAAI,mBAAa,IAChB;AAAA;;IACD;;GAED,yBAAQ,oBAAa,MAAI;GACzB,qBAAgB,iBAAiB;GAkFjC,EAAI,oBAAe;AAAA,IAClB;IACA,yBAAQ,EAAE;UAEV;AAAA,yBAAgB,EAAE;;GACnB;GACA,SAAQ,AAAW,EAAG;GACtB,yBAAQ,KAAI;GACZ,WAAU;GAAV,UAAc;GAAd;;IACC,eAAU,EAAE;;GAEb,EAAI,gBAAW;AAAA,oBAAW;;;;GAW1B,MAAM,8CAAoB,WAAW;;;;;;;;0CCnDhC,WAAe;AAAA;;;;eACA,eAAkD;AAAA,SAAO,kBAAkB;;eAC3E,eAAgD;AAAA,SAAO,iBAAiB;;;;wBAxXtF,cAA6B;AAAA,CACnC,WAAW;CACX,cAAS;CACT,WAAM;CAIN,cAAS;CACT,aAAQ;CACT,QAAQ;CACR,EAAI,MAAK,MAAO;AAAA,EACf,IAAI;EACJ,qCAAmB;;CAEpB,gBAAW;;;;8BA9CL,WAAqB;AAAA,CAC3B,YAIE;CAEF,UAAU;CAAV,SAAc;CAAd;;EACC,MAAM,AAAuB,oCAAO,MAAM;;CAC3C,OAAO;;wBAkYM,YACb;AAAA,QAAO,sBAAiB;;;aA/TxB,WAAsB;AAAA,EACrB,QAAQ;EACR,QAAQ;EACR,WAAW;EACX,KAAO,OAAO;AAAA,GACb,QAAQ,oBAAI;GACb,EAAI,CAAkB,QACrB;AAAA;;GACA,EAAI,MAAK,IAAW;AAAA,IACnB,EAAI,aAAO,MACV;AAAA;;IACD,IAAI;IACJ;IACA;;GAED,EAAI,KAAI,MAAY,IAAI,IACvB;AAAA;;GACD,IAAI,IAAI,KAAK,CAAC,IAAI;GAClB;;EAED,EAAI,IACH;AAAA,QAAK;;EACN,OAAO;;aAGT,WAAqB;AAAA,EACpB,SAAS;EACR,KAAO,OAAO;AAAA,GACb,QAAQ,oBAAI;GACb,EAAI,CAAkB,QAAI;AAAA;;GAEzB,EAAI,CAAC,KAAK,MAAM,IAAI,MAAO,KAAK,OAAY,KAAK,IAChD;AAAA;UAEA;AAAA;;;EAEK,kBAAe,4BAAW,GAAG,WAAI;;qBAG1C,YAA8B;AAAA,EAC5B,KAAO,OAAO;AAAA,GACb,EAAI,aAAO,aACV;AAAA,UAAM;;GACP,EAAI,qBAAI,aAAQ,KACf;AAAA;;GACD,QAAQ;GACR,EAAI,CAAC,OAAO,MAAP,UACJ;AAAA,UAAM;;GACP,QAAQ;GACR,AAAiB,EAAE,KAAE;;EAEtB;;mBAGF,oBAAuC;AAAA,EACtC,EAAI,qBAAI,eAAU,IACjB;AAAA,SAAM;;EACP,YAAY;EACZ,EAAI,UAAS,GACZ;AAAA,UAAO,gBAAgB,MAAM;;EAC9B,WAAW;EACX,KAAO,WAAU,GAChB,UAAU;EACX,OAAO,gBAAgB,MAAM,IAAI;;eAuB1B,WAAiC;AAAA,EAC/B,6BAAI;EAAJ;OA8MT;GACC,WAAW;GACX,SAAS,2BAAsB;GAC/B,EAAI,OAAM,MACT;AAAA,UAAM,6CAAqB;;GAC5B,OAAO;OACR;GACC,YAAW;GACX,QAAQ,0BAAqB;GAC7B,EAAI,MAAK,MACR;AAAA,UAAM,4CAAoB;;GAC3B,OAAO;OAtBR;GACE,YAAW;GACZ,UAAS,2BAAsB;GAC/B,EAAI,QAAM,MACT;AAAA,UAAM,6CAAqB;;GAC5B,QAAkB,yBAAyB;GAC3C,gBAAW;GACX,gBAAgB;GAChB,EAAI,qBAAI,eAAU,KACjB;AAAA,UAAM;;GACP,OAAO;OA5ER;GACC,QAAQ;GACR,gBAAW;GACX,UAAU;GACV,KAAO,qBAAI,aAAQ,KAAnB;AAAA,IACC,QAAQ;IACR,MAAM,EAAE;;GAET;GACA,OAAO;OA7EP;GACA,QAAQ;GACR,EAAI,KAAI,KAAK,KAAK,oBACjB;AAAA,UAAM;;GACP,OAAO,YAAO;OArCd;GACA,WAAU;GACT,QAAQ;GAER,gBAAW;GACX,KAAO,OAAO;AAAA,IACb,QAAQ,oBAAI;IACZ,EAAI,MAAK,KAAW;AAAA,KACpB;KACC;;IAED,EAAI,MAAK,KAAW;AAAA,KACpB;KACC,SAAQ;KACR,EAAE,WAAS,KAAE,KAAK;WAElB;AAAA,YAAO;;;GAKT,OAAO;OAyDT;GACC,SAAQ;GACR,gBAAW;GACX,WAAU;GACV,KAAO,qBAAI,aAAQ,KAAnB;AAAA,IACC,SAAQ;IACR,YAAQ;IAAR,kBAAM,OAAN;oBAAM,GAAN;;UAAM,MAAN;;;GAED;GACA,OAAO;OA/CR;GACE,YAAW;GACZ,UAAS,2BAAsB;GAC/B,EAAI,QAAM,MACT;AAAA,UAAM,6CAAqB;;GAC5B,SAAQ,yBAAyB;GACjC,gBAAW;GACX,uBAAkB;GAClB,OAAO;OAjEP;GACC,OAAO;OAPR;GACC,OAAO;OAGR;GACC,OAAO;OA2ER;GACA,YAAW;GACX,YAAY,0BAAqB;GACjC,EAAI,UAAS,MACZ;AAAA,UAAM,4CAAoB;;GAC3B;GACA,YAAY;GACZ,UAAU,AAAuB,6BAAO;GACxC,EAAI,QAAO,MACV;AAAA,UAAM,gDAAsB,QAAK,MAAI;;GACtC,SAAQ,qBAAgB,MAAO;GAC/B,gBAAW;GACX,OAAO;OA3EP;GACC,OAAO;OA2ET;GACC,QAAQ;GACR,gBAAW;GACX,WAAU;GACV,KAAO,qBAAI,aAAQ,KAClB,MAAM;GACP;GACA,OAAO;OAjFP;GACC,OAAO;OAxBR;GACC,OAAO;OAiDR;GACC,SAAQ;GACR,gBAAW;GACZ,uBAAkB;GAClB,OAAO;OA7BP;GACC,OAAO;OAyFT;GACC,SAAQ;GACR,gBAAW;GACX,WAAU;GACV,SAAQ,oBAAI;GACZ,KAAO,OAAK,IAAZ;AAAA,IACC,QAAQ;IACR,aAAQ;IAAR,KAAM,KAAN;IACI,AAAJ,KAAI,oBAAI;;GAET,EAAI,OAAK,KACR;AAAA,UAAM;;GACP,OAAO;OAxEP;GACC,SAAQ;GACR,EAAI,MAAI,KAAK,MAAK,mBACjB;AAAA,UAAM;;GACP,OAAO,WAAM;OA8Fd;GACC,UAAU;GACX,WAAU;GACT,EAAI,qBAAI,eAAU,MAAY,cAAS,WAAM,KAC7C;AAAA,UAAM;;GAIP,YAAY;GACZ,EAAI,UAAS,MAAO;AAAA,IACnB,QAAQ;IACR,0BAAQ;;GAET,SAAQ;GACR,WAAW,MAAM;GACjB,WAAW,CAAC,OAAO,KAAK,IAAI,CAAC,AAAC,QAAQ,IAAK,OAAO,IAAI;GACtD,UAAU,KAAI,CAAC,MAAM;GACrB,YAAY,kCAAoB;GAChC,WAAW;GACX,KAAO,MAAI,KAAX;AAAA,IACC,UAAS,MAAM,gBAA2B;IAC1C,SAAS,MAAM,gBAA2B;IAC1C,QAAU,UAAV,AAAiB,CAAC,OAAM,IAAK,AAAC,MAAM,KAApC;IACA,SAAS,MAAM,gBAA2B;IAC1C,QAAU,UAAV,AAAiB,CAAC,MAAM,IAAK,AAAC,MAAM,KAApC;IACA,SAAS,MAAM,gBAA2B;IAC1C,QAAU,UAAV,AAAiB,CAAC,MAAM,IAAK,MAA7B;;GAED,EAAI,SAAQ,GAAI;AAAA,IACf,UAAS,MAAM,gBAA2B;IAC1C,UAAS,MAAM,gBAA2B;IAC1C,QAAU,UAAV,AAAiB,CAAC,OAAM,IAAK,AAAC,OAAM,KAApC;IACA,EAAI,SAAQ,GAAI;AAAA,KACf,UAAS,MAAM,gBAA2B;KAC1C,QAAU,UAAV,AAAiB,CAAC,OAAM,IAAK,AAAC,OAAM,KAApC;;;GAIF,YAAO;GACP,gBAAW;GACX,OAAO;OA/LP;GACC,OAAO;OAuIT;GACC;GACA,EAAI,qBAAI,aAAQ,MAAY,oBAAI,aAAQ,MACvC,oBAAI,WAAM,MAAM,MAAY,oBAAI,WAAM,MAAM,MAC5C,oBAAI,WAAM,MAAM,MAAY,oBAAI,WAAM,MAAM,MAC5C,oBAAI,WAAM,MAAM,MAAY,oBAAI,WAAM,MAAM,MAC5C,oBAAI,WAAM,MAAM,IACd;AAAA,IAEE,AAAJ,IAAI,oBAAgB,4BAAW,SAAI;IACnC,YAAO;UAEP;AAAA,IAAI,QAAc;IAAd,AAAJ,IAAI;;GACL,gBAAW;GACX,OAAO;OA5ER;GACC,YAAW;GACX,aAAY,0BAAqB;GACjC,EAAI,WAAS,MACZ;AAAA,UAAM,4CAAoB;;GAC3B,SAAQ,qBAAgB,OAAO;GAC/B,gBAAW;GACX,OAAO;OAlBP;GACA,+BAAM;;OAtDP;GACE,WAAU;GACV,EAAI,qBAAI,eAAU,MAAY,cAAS,WAAM,MAC5C;AAAA,UAAM;;GACR,SAAQ,4BAAW,SAAI;GACvB,YAAO;GACP,KAAI,mBAAsB,SAAtB;GACJ,iBAAY;GACZ,OAAO;OAdP;GACC,OAAO;;;EAoNR;EACA,MAAM,wBAAC,kBAAgB,gBAAW,YAAK,kBAAgB;;;;gBCpalD,eACN;AAAA,YAAM;;;;;;;oBCAP,eAA6B;AAAA,CAC5B,cAAc;CACd,SAAS,eAAuB;CAE/B,qBAAgB;CAChB,eAAe;CACf,aAAa;;;;sBAuJM,iBACpB;AAAA,QAAO,kBAAU,gBAAc;;yBAGlB,YAAwC;AAAA,CACrD,QAAQ;CAER,QAAQ;CACR,KAAO,KAAI,UAAX;AAAA,EACC,QAAc,aAAyB;EAEvC,EAAI,UAAU,KAAK,KAAK,OACpB;AAAA,OAAI,AAAC,IAAI,SAAU,KAAM,AAAC,aAAyB,OAAO;;EAC9D,EAAI,MAAK,KACR;AAAA,UAAO;SACH,EAAI,MAAK,MAAQ;AAAA,GACrB,OAAQ,MAAO,AAAC,KAAK;GACrB,OAAQ,MAAO,AAAC,IAAI;SACd,EAAI,MAAK,OAAS;AAAA,GACxB,OAAQ,MAAO,AAAC,KAAK;GACrB,OAAQ,MAAO,AAAC,AAAC,KAAK,IAAK;GAC3B,OAAQ,MAAO,AAAC,IAAI;SACd;AAAA,GACN,OAAQ,MAAO,AAAC,KAAK;GACrB,OAAQ,MAAO,AAAC,AAAC,KAAK,KAAM;GAC5B,OAAQ,MAAO,AAAC,AAAC,KAAK,IAAK;GAC3B,OAAQ,MAAO,AAAC,IAAI;;;CAGtB,OAAO,kBAAU,eAAuB;;uBAG3B,YAAyC;AAAA,CACtD,SAAiB;CACjB,EAAI,OAAM,MAAO;AAAA,SAAO;;CACxB,OAAO,kBAAU;;wBAGG,gBAEpB;AAAA,QAAe,QAAQ;;;YAlGjB,kBAAoD;AAAA,EAC1D,EAAI,OAAM,KAAK,MAAM,KAAK,MAAM,MAAM,aAAS;AAAA,SAAM;;EACrD,QAAQ;EACR,QAAQ;EACR,UAAU;EACV,QAAQ;EACR,UAAU,MAAI;EAEd,KAAO,KAAI,KAAX;AAAA,GACC,QAAQ,EAAE;GACV,EAAI,KAAI,KAAO;AAAA,IACd,EAAI,MAAK,GAAI;AAAA;;IACb,KAAK,IAAI;UACH,EAAI,KAAI,KACd;AAAA,SAAK,IAAK,AAAC,CAAC,IAAI,OAAS,IAAK,AAAC,EAAE,OAAO;UACpC,EAAI,KAAI,KAAO;AAAA,IACnB,SAAS,EAAE;IACX,KAAK,IAAK,AAAC,CAAC,IAAI,OAAS,KAAM,AAAC,CAAC,KAAK,QAAS,IAAK,AAAC,EAAE,OAAO;UACxD;AAAA,IACN,UAAS,EAAE;IACX,SAAS,EAAE;IACX,QAAQ,AAAC,CAAC,IAAI,OAAS,KAAM,AAAC,CAAC,MAAK,QAAS,KAAM,AAAC,CAAC,KAAK,QAAS,IAAK,AAAC,EAAE,OAAO;IAElF,KAAK,IAAK,CAAC,KAAK,MAAM;IACtB,KAAK,IAAK,AAAC,IAAI,OAAS;;;EAG1B,OAAO;;YASD,WACN;AAAA,SAAO,eAAU,EAAE;;;;;;;4BC/HN;AAAA;;;CACb,EAAI,aACH;AAAA,OAAO,qBAAe,aAAW,MAAM,IACtC,MAAM,uBAAW,EAAE;;CACrB,OAAO,yBAAa,sCAAmB,uBAAuB;;2BChBxD,eAAqC;AAAA,CAC3C,UAAU;CACV,YAAY;CACZ,KAAO,OAAM,KAAK,OACjB;CACD,EAAI,SAAQ,KAAK,OAAO,KAAK,OAC5B;AAAA,QAAM;;CACP,YAAY;CACZ,aAAa;;;;;YA+Bd,WAAqB;AAAA,EACpB,UAAU;EACV,SAAU;EAAV,WAAc,KAAd;AAAA;GACC,IAAI,KAAK;;EACV,UAAU;EAAV,UAAc;EAAd;;GACC,IAAI,YAAS,OAAM;;EACpB,WAAW;;eAGL,YAA0D;AAAA,EAIhE,YAAY;EACZ,WAAW;EACX,EAAI,aAAY,MAAO;AAAA;;EACvB,UAAU;EACV,WAAW,AAAC,WAAW,SAAU;EACjC,UAAU,kCAAoB;EAC9B,UAAU;EACV,cAAc;EACd,UAAU;EACV,WAAW;EACX,KAAO,QAAO,MAAd;AAAA,GACC,KAAO,WAAU,GAAjB;AAAA,IACC,WAAW;IACX,QAAQ;IACR,QAAQ,IAAI,IAAM;IAClB,EAAI,MAAK,IACR;AAAA,WAAM;;IACP,OAAO;;GAER,WAAW;GACX,MAAQ,UAAR,AAAe,AAAC,OAAO,UAAW,MAAlC;;EAED,OAAO;;;;sBClCR,WAAe;AAAA;;;yBA5CD,YAAuC;AAAA,CAMnD,QAAQ;CACR,QAAQ,WAAW,yBAAS;CAC5B,OAAO,MAAM;;2BAsGR,cAAiC;AAAA,CAEvC,WAAU,uBAAuB;CAEjC,WAAW,CAAC,AAAC,cAAa,KAAM,KAAK;CACrC,WAAW;CAGX,eAAe,OAAO;CAMtB,UAAU;CAAV,SAAc;CAAd;;EAAyB,KAAK,KAAK;;CAGnC,SAAQ;CACR,UAAU;CACV,QAAQ,MAAM;CACd,KAAO,MAAI,KAAX;AAAA,EACC,KAAK,MAAK,MAAgC,OAAQ,OAAgD,AAAC,AAAC,CAAC,IAAI,MAAK,IAAK;EACnH;;CAED,KAAK,MAAK,MAAM,OAAQ,AAAC,AAAC,CAAC,IAAI,MAAK,IAAK;CACzC,QAAQ,OAAO,KAAK;CACpB,KAAK,KAAK,AAAC,IAAI;CACf,KAAK,MAAM,CAAC,AAAC,MAAM,IAAK,QAAS;CACjC,KAAK,MAAM,CAAC,AAAC,MAAM,KAAM,QAAS;CAClC,KAAK,MAAM,CAAC,AAAC,MAAM,KAAM,QAAS;CAClC,OAAO;;;QA7FR,cAAoB;AAAA,EACnB,UAAU,AAAC,IAAI,IAAO,AAAC,IAAI;EAC3B,YAAY,AAAC,MAAM,IAAK,AAAC,MAAM;EAC/B,OAAO,AAAC,SAAS,IAAK;;UAGvB,cAAqB;AAAA,EACpB,UAAU,AAAC,IAAI,IAAO,AAAC,IAAI;EAC3B,YAAY,AAAC,MAAM,IAAK,AAAC,MAAM;EAC/B,OAAO,AAAC,SAAS,IAAK;;UAGvB,cAAqB;AAAA,EACpB,UAAU,AAAC,IAAI,IAAO,CAAC,IAAI;EAC3B,YAAY,AAAC,MAAM,IAAK,AAAC,MAAM;EAC/B,OAAO,AAAC,SAAS,IAAK;;SAGvB,cAAqB;AAAA,EACpB,UAAU,CAAC,IAAI,SAAQ,CAAC,IAAI;EAC5B,UAAU,CAAC,KAAK,MAAI,CAAC,KAAK,MAAI,CAAC,OAAO;EACtC,OAAO,AAAC,OAAO,KAAM,AAAC,MAAM;;OAG7B,YAA8B;AAAA,EAC7B,UAAU;EACV,cAAc;EACd;aAAY,UAAZ;AAAA,GAAK,UAAL,AAAY,EAAZ;;GACC,UAAU;GAAV,YAAc,GAAd;AAAA;IACC,OAAO,eAAe,AAAC,OAAO,AAAC,IAAI,IAAI,IAAM,MACzC,eAAe,AAAC,OAAO,AAAC,IAAI,IAAM;;;EACxC,OAAO;;OAiER,kBACC;AAAA,SAAO,AAAC,OAAO,MAAO,AAAC,QAAQ,AAAC,KAAK;;OAGtC,sBACC;AAAA,SAAO,WAAM,SAAI,AAAC,WAAM,WAAM,EAAG,GAAI,WAAM,EAAG,IAAM,GAAI;;MAGzD,wBACC;AAAA,SAAO,SAAI,WAAM,YAAO,EAAG,GAAI,YAAO,CAAE,EAAI,IAAK,EAAG,EAAG,EAAG,EAAG;;MAG9D,wBACC;AAAA,SAAO,SAAI,WAAM,YAAO,EAAG,GAAI,YAAO,EAAG,CAAE,IAAM,EAAG,EAAG,EAAG,EAAG;;MAG9D,wBACC;AAAA,SAAO,SAAI,YAAO,YAAO,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG;;MAGjD,wBACC;AAAA,SAAO,SAAI,YAAO,EAAG,WAAM,EAAG,CAAE,IAAM,EAAG,EAAG,EAAG,EAAG;;YAGnD,YAAiD;AAAA,EAEhD,QAAS;EACT,QAAQ;EACR,QAAQ;EACR,QAAS;EAET;EAEA,QAAQ;EACR,KAAO,KAAI,UAAX;AAAA,GACC,WAAW;GACX,WAAW;GACX,WAAW;GACX,WAAW;GAEX,OAAO;GACP,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAO,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAO,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAO,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,GAAO,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,EAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAE,IAAK,GAAI;GAChC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAK;GACjC,IAAI,QAAG,EAAG,EAAG,EAAG,EAAG,EAAE,IAAG,GAAI,GAAI;GAEhC,IAAI,WAAM,EAAG;GACb,IAAI,WAAM,EAAG;GACb,IAAI,WAAM,EAAG;GACb,IAAI,WAAM,EAAG;GAEb,KAAK;;EAEN,OAAO,CAAC,EAAE,EAAE,EAAE;;;;;;;;qBCjQD,WACb;AAAA,UAAI;;;;;;MAGS,oBACL;AAAA,SAAE,OAAO;;OAGJ,cACb;AAAA,SAAe,OAAE;;UAGJ,cACb;AAAA,SAAe,sBAAiB;;UAG1B,cAAoC;AAAA,EAC1C,EAAY,EAAC,sBAAiB,MAAO;AAAA,UAAO;;EACnC,OAAiB,OAAE;EAC5B,OAAO;;QAGD,WAAgC;AAAA,EACtC,QAAQ;EACA,gBAAoC,SAAG,EAAI,uBAAiB,MAAO;AAAA,UAAO,MAAI;;EACtF,OAAO;;YAGD,WACN;AAAA,SAAe,QACR,aACD,uBACK,WAAa;AAAA,UAAO;YACvB,WAAW;AAAA,GAAE,QAAQ;GAAoB,OAAO,SAAa;;;;;wBCrB/D,WACN;AAAA,UAAI,aAAY;;;;;6BAXH,cACb;AAAA,QAAe,aAAa,EAAE;;0BAGjB,cACb;AAAA,QAAe;;;MAST,oBAA0C;AAAA,EAChD,SAAe,AAAM,cAAQ,CAAS,aAAT;EAC7B,OAAE,MAAM;EACR,gBAAW,MAAM;;OAGJ,cACb;AAAA,SAAe,OAAE,AAAM;;UAGV,cACb;AAAA,SAAe,gBAAW,AAAM,eAAS;;UAGnC,cAAkC;AAAA,EACxC,SAAS,AAAM;EACf,EAAa,iBAAW,OAAO,MAAO;AAAA,UAAO;;EACpC,OAAiB,OAAE;EACnB,OAAiB,gBAAW;EACrC,OAAO;;QAGD,WAA8B;AAAA,EACpC,QAAQ;EAEP;EACC,EAAI,uBAAiB,MACpB;AAAA,UAAO,gBAAW;;EACpB;EAED,OAAO;;YAGD,WACN;AAAA,SAAe,QACR,aACD,uBACK,WAAa;AAAA,UAAO;YACvB,WAAW;AAAA,GAAE,QAAQ;GAAoB,OAAO,SAAa,AAAM;;;;;4CCrD9D,mBAAmD;AAAA,CAChE,WAAW;CACX,YAAY;CACZ,aAAa;CACb,aAAa;;;;;UAEA,WACb;AAAA,SAAO,aAAQ;;QAEF,WACb;AAAA,EAAO;YAAQ,UAAK;EAAb;;;;;;;;wBASM,WACb;AAAA,UAAI;;;;;;MAOS,oBACb;AAAA,IAAI,gBAAW,QAAX,MACH;AAAA,oBAAY,IAAK;SAEjB;AAAA,UAAE,AAAK,OAAO;;;OAGF,cAAuC;AAAA,EACpD,EAAI,gBAAW,QAAX,MACH;AAAA,UAAO,iBAAY;;EACpB,OAAO,OAAE,AAAK;;UAGD,cAAuC;AAAA,EACpD,EAAI,gBAAW,QAAX,MACH;AAAA,UAAO,oBAAe;;EACvB,OAAO,sBAAiB;;eAGzB,oBAAuD;AAAA,EACtD,EAAI,YAAM,MAAO;AAAA,aAAK;;EACtB,QAAG,AAAK,MAAI,OAAO;;eAGpB,cACQ;AAAA,gBAAM,MAAO;AAAA;SAAO;AAAA,kBAAG,AAAK,MAAI;;;kBAGxC,cAA+C;AAAA,EAC9C,EAAI,YAAM,MAAO;AAAA,UAAO;;EACxB,OAAe,uBAAkB,MAAI;;UAG/B,cACN;AAAA,IAAI,gBAAW,QAAX,MAAkB;AAAA,GACrB,MAAM,MAAM;GACZ,EAAI,YAAM,QAAQ,CAAC,uBAAkB,MAAO;AAAA,WAAO;;GAC3C,OAAiB,QAAG;GAC5B,OAAO;SACD;AAAA,GACN,EAAI,EAAC,sBAAiB,MACrB;AAAA,WAAO;;GACA,OAAiB,OAAE;GAC3B,OAAO;;;QAIF,WACC;AAAA;;aAGR,WAAqC;AAAA,EACpC,UAAU;EAET;EACC,EAAI,uBAAiB,MACpB;AAAA,YAAS;;EACX;EAED,EAAI,YAAM,MAAe;AAAA,GACxB;GACC,EAAI,gBAAe,MAAM,IACxB;AAAA,aAAS,WAAW;;GACtB;;EAED,OAAO;;YAGM,WACb;AAAA,SAAO,0CAAsB,KAAM;;;;;;;;;;;;;;;;;;;8BC/DtB,YAAuC;AAAA,CAqCnD,WAAW,IAAI,CAAC,AAAC,MAAM,MAAO;CAC9B,UAAU,AAAC,MAAM,KAAM;CACvB,UAAU,IAAI;CACd,EAAI,QAAO,KAAK,OAAO,GACtB;AAAA,SAAO;;CACR,OAAO,OAAK,CAAC,IAAI,SAAS,EAAG,OAAK,OAAO,SAAS,EAAG,MAAI;;8BAK7C,YAAuC;AAAA,CA8BnD,EAAI,MAAK,GAAI;AAAA,SAAO;;CACpB,SAAS,IAAI,IAAI,CAAC,IAAI;CACtB,UAAU,WAAW,SAAS,MAAM;CACpC,EAAI,OAAM,MAAO;AAAA,QAAM;QAAU,EAAI,OAAM,KAAM;AAAA,QAAM;;CACvD,UAAU,WAAW,CAAC,KAAK,SAAS,EAAG,OAAO,KAAK;CACnD,EAAI,QAAO,WAAY,MAAM,KAAK;AAAA,EACjC,MAAM;EACN;;CAED,OAAO,CAAC,IAAI,IAAI,cAAa,KAAK,AAAC,AAAC,MAAM,OAAQ,KAAM;;mBCxEnD,eAA8B;AAAA,CACpC,MAAQ;MACP;EACC,WAAM;EACN,YAAO;EACP;;CAEF,SAAS,iBAAiB;CAC1B,SAAS,iBAAiB;CAC1B,EAAI,MAAK,IAAK;AAAA,EACb,WAAM,wBAAY,EAAE;EACpB,OAAO,wBAAY,KAAG,EAAf;EACP,iBAAY;QACN,EAAI,MAAK,IAAK;AAAA,EACpB,WAAM,wBAAY,EAAE;EACpB,OAAO,wBAAY,KAAG,EAAf;QAEP;AAAA,aAAM;;CACP,SAAS,iBAAiB;CAC1B,EAAI,OAAM,IAAK;AAAA,EACd,WAAM,wBAAY,KAAG,EAAf;EACN,YAAO,wBAAY,EAAE;QACf;AAAA,EACN,WAAM;EACN,YAAO;;;;;yBA+CK,eAAoC;AAAA,CACjD,QAAQ,iBAAS;CACjB,EAAI,UAAS,MACZ;AAAA,SAAO;;CACR,OAAO;;yBAUM,eAAoC;AAAA,CACjD,QAAQ,iBAAS;CACjB,EAAI,UAAS,MACZ;AAAA,SAAO;;CACR,OAAO;;oBAwBM,gBAA4C;AAAA,CACzD,aAAY,aAAa,YAAmB;AAAA,UAAK,MAAQ;AAAA,eAAK;SAAlB;AAAA;;;CAC5C,EAAI,kBAAgB,GACnB;AAAA,SAAO;;CAER,WAAW,OAAM;CACjB,UAAU;CAAV,SAAc;CAAd;;EACC,OAAO,8BAAiB;EACxB,QAAQ,OAAM;;CAEf,OAAO,uBAAU;;yBAWJ,eAA2C;AAAA,CACxD,YAAY;CACZ,OAAO,WAAW,WAAW;CAC7B,EAAI,SAAQ,OAAO;AAAA,SAAO;;CAE1B,aAAa;CAEb;WAAc,WAAW;CAAzB,WAAc,YAAd;AAAA,EAAK,YAAL,AAAc,IAAd;;EACC,EAAG,UAAU,QAAO,gBAAgB,KAAK,OAAO,gBAAc,MAAM,MACnE;AAAA;SACM,EAAG,UAAU,KACnB;AAAA,eAAY;;;CAId,UAAU,YAAY;CACtB,cAAY;CACZ,aAAa,AAAc,YAAd,QAAmB,OAAM;CACtC,YAAU;CACV,YAAY;CACZ,cAAc;CACd,WAAU;CAAV,UAAc;CAAd;;EACS,0BAA4B;EAA5B;OAIP;KAAkB,EAAC,OAClB;AAAA,cAAU;UACX;AAAA,IAAK,SANE;IAON,QAAQ;IACR,EAAI,UAAS;AAAA,KACZ;KACA,UAAU;;IAEX,6BAAY;;;OAXb;GACC;GACA,QAAQ;;;GAGJ,SANE;GAON,QAAQ;GACR,EAAI,UAAS;AAAA,IACZ;IACA,UAAU;;GAEX,6BAAY;;;CAGf,OAAO;;gCAeM,eAAoD;AAAA,CACjE,EAAI,gBAAe,GAClB;AAAA,SAAO;;CACR,SAAS,iBAAiB;CAC1B,SAAS,iBAAiB;CACnB,EAAK,MAAK,IAChB;AAAA,IAAI,OAAM,cAAc,GAAG;AAAA,iBAAO;SAC7B;AAAA;;QAEL,EAAI,OAAM,cAAc,GAAG;AAAA,gBAAO;QAC7B;AAAA;;;;;;;;;yCCjQQ;AAAA,aACL;CADK;;gDAIA,gBACZ;AAAA,GAAG,UAAS,MACV;AAAA,yDAAO;QACJ,EAAG,QAAO,UAAP,cAAO,QAAP,OAAO,QACb;AAAA,SAAO,0CAAQ;QACZ,EAAG,QAAO,UAAP,UACN;AAAA,SAAO,4CAAU;QACd,EAAG,QAAO,UAAP,WACN;AAAA,SAAO,2CAAS;QACb,EAAG,QAAO,UAAP,UACN;AAAA,SAAO,6CAAW;QAEX;AAAA,QAAO,8CAAkB;;;kDAItB,oBACZ;AAAA,CAAO,YAAU;CAAV;;gDAIF,gBACL;AAAA,QAAO;;8CAIK,YACZ;AAAA,wDAAO,6BAAO;;4CAIF,YACZ;AAAA,wDAAO,2BAAK;;6CAIA,YACZ;AAAA,wDAAO,4BAAM;;+CAID,YAAwC;AAAA,CACpD,EAAI,uCAAa;AAAA,yDAAO;;CACxB,SAAS;CACF,EAAI,OAAM,iDAAe,MAAM,6CAAW;AAAA;QAC1C,EAAI,OAAM,6CAAW;AAAA;QACrB,EAAI,OAAM,+CAAa;AAAA,qFAAM;QAC7B,EAAI,OAAM,gDAAc;AAAA,qFAAM;QAC9B,EAAI,+CAAY,IAAI;AAAA,oFAAK,aAAa;QACtC,EAAI,iDAAc,IAAI;AAAA,sFAAO,WAAe;QAC5C;AAAA,uFAAQ;;;uCAGH,WACZ;AAAA,wDAAO;;uCAGK,WACZ;AAAA,wDAAO;;4CAIF,gBACE;AAAA,OAAO;MACZ;EAAY,QADA;EACK;MACjB;EAAU,SAFE;EAEG;MACf;EAAW,SAHC;EAGI,MAAM,8CAAW;;MACjC;EAAa,SAJD;EAIM,MAAM,8CAAW;;MACnC;EAAW,MAAM,8CAAW;;MAC5B;EAAW,MAAM,8CAAW;;;;0CAKzB,gBACE;AAAA,OAAO;MACZ;EAAY,QADA;EACK,OAAQ,IAAR;MACjB;EAAU,SAFE;EAEG;MACf;EAAW,SAHC;EAGI,MAAM,8CAAW;;MACjC;EAAa,SAJD;EAIM,MAAM,8CAAW;;MACnC;EAAW,MAAM,8CAAW;;MAC5B;EAAW,MAAM,8CAAW;;;;2CAKzB,gBACE;AAAA,OAAO;MACZ;EAAY,QADA;EACK,YAAK;MACtB;EAAU,SAFE;EAEG,aAAK;MACpB;EAAW,SAHC;EAGI;MAChB;EAAa,SAJD;EAIM,2BAAmB;MACrC;EAAW,MAAM,8CAAW;;MAC5B;EAAW,MAAM,8CAAW;;;;6CAKzB,gBACE;AAAA,OAAO;MACZ;EAAY,QADA;EACgB;;;;;;MAC5B;EAAU,SAFE;EAEc;;;;;;MAC1B;EAAW,SAHC;EAGI,OAAI;AAAA;SAAc;AAAA;;;MAClC;EAAa,SAJD;EAIM;MAClB;EAAW;MACX;EAAW;;;8CAIR,gBACE;AAAA,OAAO;MACZ;EAAY,QADA;EACK;MACjB;EAAU,SAFE;EAEG;MACf;EAAW,SAHC;EAGI;MAChB;EAAa,SAJD;EAIM;MAClB;EAAW;MACX;EAAW;;;0CAIR,qBACE;AAAA,GAAO,aACZ;EAAU,QADE;EACG,WAAQ,MAAQ;AAAA,kBAAQ;SAAxB;AAAA;;QACN;AAAA;;;4CAIN,qBACE;AAAA,GAAO,aACZ;EAAY,QADA;EACK,WAAQ,MAAQ;AAAA,kBAAQ;SAAxB;AAAA;;QACR;AAAA;;;2CAIN,qBACE;AAAA,GAAO,aACZ;EAAW,QADC;EACI,WAAQ,MAAQ;AAAA,kBAAQ;SAAxB;AAAA;;QACP;AAAA;;;6CAIN,qBACE;AAAA,GAAO,aACZ;EAAa,QADD;EACM,WAAQ,MAAQ;AAAA,kBAAQ;SAAxB;AAAA;;QACT;AAAA;;;8CAIN,qBACE;AAAA,OAAO;MACZ;EAAY,QADA;EACK,WAAQ,MAAQ;AAAA,kBAAQ;SAAxB;AAAA;;;MACjB;EAAU,SAFE;EAEG,WAAQ,MAAQ;AAAA,kBAAQ;SAAxB;AAAA;;;;EACP;;;yCAIL,gBACE;AAAA,GAAO,aACZ,GAAU;AAAA;QACF;AAAA;;;yCAIL,gBACE;AAAA,GAAO,aACZ,GAAU;AAAA;QACF;AAAA;;;2CAIL,gBACE;AAAA,oDAAU;AAAA;QAAV;AAAA;;;2CAGF,sBACL;AAAA,CAAqB;CAAN;MAAM;;OACnB;GAAa,YADA;GACe,aADT;GACmB,gBAAS;OAC/C;GAAa,aAFA;GAEa,aAFP;GAEiB,iBAAS;;GAU/B;;;MAZK;;OAKnB;GAAW,aALE;GAKa,aALP;GAKiB,iBAAS,CAAQ,SAAR;OAD7C;GAAW,aAJE;GAIW,aAJL;GAIe,iBAAS;;GAQ7B;;;MAZK;cAOnB;GAAY,aAPC;GAOa,aAPP;GAOiB,iBAAS;SAK/B;AAAA;;;MAZK;cAQnB;GAAc,aARD;GAQiB,aARX;GAQqB,iBAAS;SAInC;AAAA;;;MAZK;cASnB,GAAkB;AAAA;SAGJ;AAAA;;;MAZK;cAUnB,GAAkB;AAAA;SAEJ;AAAA;;;;;kDAIJ,gBAA8C;AAAA,CAC1D,EAAI,2CAAiB;AAAA,SAAO;;CAC5B,OAAO,mEAAmD;;gDAG9C,gBACZ;AAAA,QAAO,4BAAe;;;;;;;;;;;;;;wBChNjB,sCAAsE;AAAA,CAC3E,eAAe;CACf,kBAAkB;CAClB,gBAAgB;;;;;WAGX,WAAoB;AAAA,EACzB,qBAAqB,mBAAc,OAAQ,uBAAkB,kBAAU,OAAK;EAC5E,mBAAmB,iBAAY,OAAQ,mBAAe,gBAAY;EAClE,OAAQ,KAAE,eAAU,iBAAiB;;;;;;;wCCmBzB,8BACZ;AAAA,CAAO;CAAP,OAAO,gBAAQ,aAAR,yBAAQ,YAAR,QAAQ,qBAAoB,KAAM;;2CAG7B,wCACZ;AAAA;aAAkB,eACJ,wBACD,2CAAc;CAF3B;mBAAQ,aAAR;oBAAQ,SAAR;;UAAQ,YAAR;;;8CAMY,mBACZ;AAAA,yCAAW;;2CAGC,mBACZ;AAAA,CAAO;mBAAW,aAAX;8BAAW;QAAX;AAAA,gCAAW;;;8CAGN,WACZ;AAAA,oCAAM;;qDAGM,mBACZ;AAAA,CAAO;CAAP,OAAO,gBAAQ,aAAR,yBAAQ,YAAR,QAAQ;;oDAGH,WACZ;AAAA,QAAO,6GAA4B,wBAC1B;AAAA,kBAAa,WAAY;AAAA;SAAa;AAAA;;GAC5C;;6CAGE,oBACL;AAAA,QAAO,qBACE;AAAA,IAAI,iDAAe,+CAAc;AAAA,0DAAO;SACxC,EAAI,iDAAe,+CAAc;AAAA,0DAAO;SACxC;AAAA,oBAAU,KAAM;;;;;;;yCCvCb,iCACZ;AAAA;aAAgB,UAAS,mBAAkB,yCAAc,OAAQ,MAAO;CAAxE;mBAAQ,WAAR;oBAAQ,OAAR;;UAAQ,UAAR;;;4CAGY,iBACZ;AAAA,uCAAW;;yCAGC,iBACZ;AAAA,CAAO;mBAAW,WAAX;8BAAW;QAAX;AAAA,gCAAW;;;yCAGN,iBAA8D;AAAA,CAC1E,EAAI,EAAC,uCAAY,SACf;AAAA,QAAM,8CAAW,gDAA4C;;CAExD;CAAP,OAAO,gBAAQ,WAAR,yBAAQ,UAAR,QAAQ;;sCAGH,iBAAyC;AAAA,CACrD,EAAI,EAAC,uCAAY,SACf;AAAA,QAAM,8CAAW,gDAA4C;;CAExD;CAAP,OAAO,gBAAQ,WAAR,yBAAQ,UAAR,QAAQ;;yCAGH,4BAAgF;AAAA,CAC5F,EAAI,EAAC,uCAAY,SAAS;AAAA,SAAO;;CACjC,YAAY,oCAAS;CACrB,EAAI,UAAS,KAAK,SAAS,mBAAkB;AAAA,SAAO;;CACpD,OAAO;;4CAGK,WACZ;AAAA,kCAAM;;sCAGM,4BAAqE;AAAA,CACjF,gBAAgB,uCAAY;CAC5B,OAAO,UAAU;;2CAGZ,iCACL;AAAA,QAAO,qBAAoB;AAAA,EACzB,EAAI,UAAS,KAAK,qBAAoB,OACpC;AAAA,SAAM,8CAAW,cAAU,SAAM,sBAAkB,QAAK;;EAE1D,OAAO,UAAU;;;;;;;;;mDCpEP;AAAA,aACL;CADK;;iEAKA,yBACZ;AAAA,CAAO,YAAe;CAAf;;+DAIF,gBACL;AAAA,QAAO;;yDAIK,gBACZ;AAAA,QAAO,yBAAa;;gEAGR,gBACZ;AAAA,uEAAO,oCAAS,2FAAiB;;sDAGrB,gBACZ;AAAA,uEAAO,oCAAS,wFAAc;;wDAGlB,gBACZ;AAAA,uEAAO,oCAAS,0FAAgB;;uDAGpB,gBACZ;AAAA,uEAAO,oCAAS,yFAAe;;uDAG1B,gBACE;AAAA,OAAO;MACZ;EAAc,YADF;EACW,YAAU;EAAV;MACvB;EAAiB,WAFL;EAEa;MACzB;EAAsB,cAHV;EAGA,eAHA;EAGqB,YAAE,WAAW,4DAAU;MACxD;EAA6B,YAJjB;EAIW,WAJX;EAIC,gBAJD;EAI2B,aAAG,4DAAU,QAAM,MAAE,YAAQ,MAAG,4DAAU,SAAO;MACxF;EAAmB,iBALP;EAKD,aALC;EAKoB,YAAE,SAAO,MAAG,qEAAmB,WAAW,OAAK;MAC/E;EAAoC,gBANxB;EAMY,iBANZ;EAMM,WANN;EAMsC,aAAG,4DAAU,QAAM,QAAK,4DAAU,cAAY,QAAK,4DAAU,aAAW;MAC1H;EAAY,YAPA;EAOS,aAAG,qEAAmB,MAAO,OAAK;MACvD;EAAe,aARH;EAQW,4EAAmB,OAAO;;;wDAI9C,gBACE;AAAA,GAAO,aACZ;EAAc,YADF;EACW,YAAU;EAAV;QACd;AAAA;;;uDAIN,gBACE;AAAA,OAAO;MACZ;EAAc,YADF;EAGH,YAAU;EAFI,gBACf,mBACC;MAET;EAAiB,WALL;EAKa,gBACjB,qBACA;MAER;EAAsB,cATV;EASA,eATA;EASqB,gBACzB,oBACI,oBACD,oHAAC;MAEZ;EAA6B,YAdjB;EAcW,WAdX;EAcC,gBAdD;EAc0B,gBAC9B,qBACI,kBACJ,oHAAC,gBACA,oHAAC;MAEV;EAAmB,iBApBP;EAoBD,aApBC;EAoBmB,gBACvB,iBACE,sBACG;MAEb;EAAoC,gBAzBxB;EAyBY,iBAzBZ;EAyBM,WAzBN;EAyBoC,gBACxC,sBACA,oHAAC,qBACK,oHAAC,0BACF,oHAAC;MAEd;EAAY,YA/BA;EA+BS,gBACb,iBACC;MAET;EAAe,aAnCH;EAmCY,gBAChB,oBACC;;;2DAKN,gBACL;AAAA,QAAO,yEAAwB;;uEAG1B,qBACL;AAAA,QAAO,6FAAmB,mBACxB;AAAA,SAAO,gCAAoB;;;qEAIxB,qBACL;AAAA,QAAO,6FAAmB,mBACxB;AAAA,SAAO,4CAAkB;;;qEAItB,qBACL;AAAA,QAAO,6FAAmB,mBACxB;AAAA,SAAO,8BAAkB;;;iEAItB,0BACL;AAAA,QAAO,6FAAmB,mBACxB;AAAA,SAAO,4CAAmB;;;2DAIvB,wBAAkE;AAAA,CACvE,EAAI,YAAW,MAAM;AAAA,YAAU;;CAC/B,EAAI,iBAAgB,MAAM;AAAA,iBAAe;;CACzC,gBAAgB;CAChB,sEAAoB;CACpB,EAAI,eACF;AAAA,iBAAe,cAAe;AAAA,GAC5B,IAAI;GACJ,IAAI;GACG,EAAI,KAAI,GAAG;AAAA;UACX,EAAI,KAAI,GAAG;AAAA;UACX;AAAA;;;;CAGX,OAAO;;oDAGF,gBAA8B;AAAA,CACnC,EAAI,EAAC,2CACH;AAAA,wEAAO;;CAGF,MAAO;MACZ;EAAc,YADF;EACZ,sEACE,oCAAS;MACX;EAAiB,WAHL;EAGZ,sEACE,uCAAY;MACd;EAAsB,cALV;EAKA,eALA;EAKZ,sEACE,kCAAO,SAAU,8KAAC;MACpB;EAA6B,YAPjB;EAOW,WAPX;EAOC,gBAPD;EAOZ,sEACE,mCAAQ,UAAU,8KAAC,QAA4B,8KAAC;MAClD;EAAmB,iBATP;EASD,aATC;EASZ,sEACE,iCAAM,OAAQ;MAChB;EAAoC,gBAXxB;EAWY,iBAXZ;EAWM,WAXN;EAWZ,sEACE,wCAAa,8KAAC,QAA4B,8KAAC,cAAkC,8KAAC;MAChF;EAAY,YAbA;EAaZ,sEACE,kCAAO;MACT;EAAe,aAfH;EAeZ,sEACE,qCAAU;;;yDAIT,0BACE;AAAA,OAAO;MACZ;EAAc,YADF;EACZ,sEACE,oCAAS;MACX;EAAiB,WAHL;EAIV,kBAAiB,SAAjB,gCAAiB,QAAjB,2BAAiB,OAAQ;AAAA,gGAAc,SAAd,6BAAc,QAAd,YAAc;SAAuB;AAAA,gHAAY;;;MAC5E;EAAsB,iBALV;EAKA,eALA;EAKZ,sEACE,kCAAO,SAAU,mLAAC,YAAoC;MACxD;EAA6B,YAPjB;EAOW,WAPX;EAOC,gBAPD;EAOZ,sEACE,mCAAQ,UAAU,mLAAC,MAA8B,YAAY,mLAAC,OAA+B;MAC/F;EAAmB,iBATP;EASD,aATC;EASZ,sEACE,iCAAM,OAAQ,kDAAqB;MACrC;EAAoC,gBAXxB;EAWY,iBAXZ;EAWM,WAXN;EAWZ,sEACE,wCAAa,mLAAC,MAA8B,YAAY,mLAAC,YAAoC,YAAY,mLAAC,WAAmC;MAC/I;EAAY,YAbA;EAaZ,sEACE,kCAAO,6CAAiB;MAC1B;EAAe,aAfH;EAeZ,sEACE,kCAAO,8CAAiB;;;uDAIvB,gBACE;AAAA,OAAO;MACZ;EAAc,YADF;EACZ,sEACE,oCAAS;MACX;EAAiB,WAHL;EAGZ,sEACE,uCAAY;MACd;EAAsB,cALV;EAKA,eALA;EAMV,EAAI,wHAAC,WAAqC;AAAA,yEACxC,oCAAS,mFAAyB,SAAU,oHAAC;SACxC;AAAA,yEACL,kCAAO,SAAU,iLAAC;;;MAEtB;EAA6B,YAXjB;EAWW,WAXX;EAWC,gBAXD;EAYV,EAAI,wHAAC,UAAoC,uHAAC,SAAmC;AAAA,yEAC3E,oCAAS,oFAA0B,UAAU,oHAAC,OAA+B,oHAAC;SACzE;AAAA,yEACL,mCAAQ,UAAU,iLAAC,QAA+B,iLAAC;;;MAUvD;EAAmB,iBAzBP;EAyBD,aAzBC;EA0BV,EAAI,yDACF;AAAA,yEAAO,oCAAS,kFAAwB,OAAQ;SAC3C;AAAA,yEACL,iCAAM,OAAQ;;;MAZlB;EAAoC,gBAjBxB;EAiBY,iBAjBZ;EAiBM,WAjBN;EAkBV,EAAI,wHAAC,QACH;AAAA,mKAAC,SACC;AAAA,+HAAC;UACD;AAAA,+HAAC;;SACE;AAAA,yEACL,wCAAa,iLAAC,QAA+B,iLAAC,cAAqC,iLAAC;;;MAQxF;EAAY,YA/BA;EA+BZ,sEACE,kCAAO;MACT;EAAe,aAjCH;EAiCZ,sEACE,qCAAU;;;0DAIT,gBACE;AAAA,OAAO;MACZ;EAAc,YADF;EAEV;MACF;EAAiB,WAHL;EAIV;MACF;EAAsB,cALV;EAKA,eALA;EAMV,8HAAC;MACH;EAA6B,YAPjB;EAOW,WAPX;EAOC,gBAPD;EAQV,0HAAC,QAAoC;AAAA,iIAAC;SAAtC;AAAA;;;MACF;EAAmB,iBATP;EASD,aATC;EAUV,8CAA2B,OAAQ;MACrC;EAAoC,gBAXxB;EAWY,iBAXZ;EAWM,WAXN;EAYV,EAAI,EAAC,uHAAC,QACJ;AAAA;SAEA,gKAAC,SACC;AAAA,iIAAC;SACD;AAAA,iIAAC;;;MAEP;EAAY,YAnBA;EAoBV;MACF;EAAe,aArBH;EAsBV;;;uDAIC,0BAA2D;AAAA,CAChE,EAAI,cAAa,MAAM;AAAA,cAAY;;CAE5B,MAAO;MACZ;EAAc,YADF;EACZ,uDACE;MACF;EAAiB,WAHL;EAIV,EAAI,EAAC,gBAAiB,SAAjB,gCAAiB,QAAjB,2BAAiB,QACpB;AAAA,SAAM,8CAAW,qDAAiD;;EAEpE,sBAAc,SAAd,6BAAc,QAAd,YAAc;MAChB;EAAsB,cARV;EAQA,eARA;EASV,mBAAmB,oHAAC,SAA+B;EACnD,4CAAyB,SAAU;MACrC;EAA6B,YAXjB;EAWW,WAXX;EAWC,gBAXD;EAYV,gBAAgB,oHAAC,MAA4B;EAC7C,iBAAiB,oHAAC,OAA6B;EAC/C,6CAA0B,UAAU,UAAW;MACjD;EAAmB,iBAfP;EAeD,aAfC;EAgBV,2CAAwB,OAAQ,gDAAmB;MACrD;EAAoC,gBAjBxB;EAiBY,iBAjBZ;EAiBM,WAjBN;EAkBV,gKAAC,MAA4B,aAC3B;AAAA,8HAAC,YAAkC;SACnC;AAAA,8HAAC,WAAiC;;;MACtC;EAAY,YArBA;EAwBV,EAAI,iBAAgB,GAAG;AAAA;SAClB;AAAA,GACH,aAAa,2CAAe;GAC5B,cAAO,gBAAgB;;;MAE3B;EAAe,aA7BH;EAgCV,EAAI,kBAAgB,GAAG;AAAA;SAClB;AAAA,GACH,cAAa,4CAAe;GAC5B,eAAO,iBAAgB;;;;;wDAKxB,sBACL;AAAA,CAAmC;CAApB;;;OAAoB;eAEjC;IAAsB,QAFT;IAEqB,QAFD;IAEO,YAAK;UAGrC;AAAA;;;OALyB;eACjC;IAAoB,SADP;IACiB,SADG;IACG,aAAK;UAIjC;AAAA;;;OALyB;eAIjC;IAAqB,SAJR;IAImB,SAJC;IAIK,aAAK;UACnC;AAAA;;;OALyB;eAGjC;IAAuB,SAHV;IAGuB,SAHH;IAGS,aAAK;UAEvC;AAAA;;;;;;;;;;2DAIL,qBACL;AAAA,CAAc;aACZ;EAAiB,QADL;EACU,WAAQ,MAAO;AAAA,kBAAQ;SAAI;AAAA;;QACzC;AAAA;;;yDAIL,gBACL;AAAA,CAAc;aACZ,GAAoB;AAAA;QACZ;AAAA;;;kEAiBZ,0BACE;AAAA,OAAO;MACL;EAAc,YADT;;MAGL;EAAiB,WAHZ;EAKH,EAAI,mBAAkB,SAAS,IAAI;AAAA,kBAAe;;;MACpD;EAAsB,cANjB;EAMO,eANP;EAOH,+HAAC,SAA0C;;MAC7C;EAA6B,YARxB;EAQkB,WARlB;EAQQ,gBARR;EASH,+HAAC,MAAuC;EACxC,+HAAC,OAAwC;;MAC3C;EAAmB,iBAXd;EAWM,aAXN;EAYH,yCAAe,qBAAqB;AAAA,kIAAC,YAA6C;;;MACpF;EAAoC,gBAb/B;EAamB,iBAbnB;EAaa,WAbb;EAcH,+HAAC,MAAuC;EACxC,+HAAC,YAA6C;EAC9C,+HAAC,WAA4C;;MAC/C;EAAY,YAjBP;EAkBH,oCAAW,sBAAqB;AAAA,kIAAC,aAA6C;;;MAChF;EAAe,aAnBV;EAoBH,qCAAW,sBAAqB;AAAA,kIAAC,aAA6C;;;;;wDAIpF,+BACE;AAAA,QAAO,oHAAC;;iEAGV,0CAAkG;AAAA,CAChG,YAAa,KAAE,8BAAiB;CACL;CAA3B,OAAO,oBAAoB;AAAA;SAAgB;;;;;iECnXtC;AAAA,aACE;CADF;;uEAKO,iBACZ;AAAA,QAAO,+DAAsB;;2EAIjB,qBACZ;AAAA,6EAAO,oBAAK;;sEAIA,gBACZ;AAAA,6EAAO,qBAAM;;sEAID,gBACZ;AAAA,QAAO,oEAAU;;oEAIL,gBACZ;AAAA,QAAO,oEAAU;;uEAKL,2BACZ;AAAA,QAAO,yEAAe;;qEAIV,gBACZ;AAAA,QAAO,oEAAU;;qEAIZ,gBACL;AAAA,QAAO;;yEAIF,gBACE;AAAA,OAAO;MACZ;EAAU,iBADE;EACW;MACvB;EAAW,YAFC;EAEZ,sEAAmB,oCAAS;;;oEAKzB,gBACE;AAAA,OAAO;MACZ;EAAU,iBADE;EACW;MACvB;EAAW,YAFC;EAEO;;;sEAIhB,gBACE;AAAA,OAAO;MACZ;EAAU,iBADE;EACY;MACxB;EAAW,YAFC;EAEQ;;;;;;;;;;;;;;;;oCClEV,0BACZ;AAAA,QAAO,oBAAoB,yBACzB;AAAA,SAAO,8KAAC;;;6CAIE,0BACZ;AAAA,QAAO,6CAAoB,yBACzB;AAAA,SAAO,uHAAC;;;uCAIE,0BACZ;AAAA,QAAO,oBAAoB,yBACzB;AAAA,SAAO,iLAAC;;;uCAIE,oCACZ;AAAA,QAAO,oBAAoB,yBACzB;AAAA,SAAO,oHAAC,gBAAsC;;;yCAIpC,oCACZ;AAAA,QAAO,oBAAoB,yBACzB;AAAA,SAAO,mLAAC,gBAAwC;;;uCAItC,0BACZ;AAAA,QAAO,oBAAoB,yBACzB;AAAA,SAAO,oHAAC;;;;;;4CC7BE,sBACZ;AAAA,QAAO,gBAAgB,qBACrB;AAAA,SAAO;;;gCAIG,sBACZ;AAAA,QAAO,gBAAgB,qBACrB;AAAA,SAAO;;;mCAIG,gCACZ;AAAA,QAAO,gBAAgB,qBACrB;AAAA,SAAO,gEAAoB;;;mDAIjB,2BACZ;AAAA,QAAO,yCAAgB,qBACrB;AAAA,SAAO,gFAAoC;;;yBCf/C,sBAAmC;AAAA,CACjC,mBAAmB;CACnB,aAAa;CACb,cAAc;CACd,mBAAmB;;;;2BAGP,gBAA4C;AAAA,CACxD,aAAa,uBAAW;CACxB,OAAO;;;gBAGT,WAAsC;AAAA,EACpC,KAAO,cAAQ,aAAf;AAAA,GACE,eAAe,gBAAW;GAC1B,EAAI,aAAY,0CAAwB,YAAY,oCAClD;AAAA;UACK;AAAA,IACL,iBAAiB;IAEjB,EAAI,eAAc,MAChB;AAAA,2BAAiB;WACZ,EAAI,cAAQ,aACjB;AAAA,WAAM,8CAAW,iCAA6B,YAAO,cAAO,KAAI,iBAAa;;;;EAK5E,EAAI,4BAAsB,GAC/B;AAAA,2BAAY;SACP;AAAA,yEACL,qCAAU,qBAAgB,sBAAqB;AAAA,WAAO;;;;UAI1D,gBACE;AAAA,SAAO,wBAAmB;;cAG5B,gBACS;AAAA,0CAAuB;;gBAGhC,WAA+B;AAAA,EAC7B,eAAe,gBAAW;EAC1B,KAAO,cAAQ,eAAU,qCAAmB,WAC1C,WAAW,gBAAW,EAAE;;oBAI5B,WAAyC;AAAA,EACvC,iBAAiB;EACjB;EACA,EAAI,iBAAW,eAAU,4CAA0B;AAAA,GACjD;GACA,iBAAiB;GACjB,EAAI,eAAc,MAChB;AAAA,UAAM,8CAAW,0EAAwE,iBAAa;;GAExG;GACA,EAAI,iBAAW,eAAU,oCAAkB;AAAA,IACzC;IACA,gBAAgB;IAChB,EAAI,cAAa,MACf;AAAA,WAAM,8CAAW,0EAAwE,iBAAa;;IAExG,sEAAO,wCAAa,yEAAY,yEAAY;;;EAKhD,OAAO;;wBAGT,WAA+C;AAAA,EAC7C;EACA,cAAuB,oCAAmB,WAAO;EACjD,oBAA0B;EAC1B,KAAO,iBAAgB,GAAvB;AAAA,GACE,EAAI,0CAA6B,UAAU;AAAA,IACzC,cAAS;IACT,OAAO;;GAET;GACA,UAAU,2BAAe,EAAG;;EAE9B,OAAO;;0BAGT,WAA+C;AAAA,EAC7C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,YAAW;EACX,sBAAqB;EACrB,EAAI,oBAAkB,MACpB;AAAA,UAAO;;EAET,qBAAqB,aACT,8BACE,mDAAuC;EAErD,aAAY;EACZ,EAAI,WAAS,MACX;AAAA,SAAM,8CAAW,kDAA6C,kBAAc,KAAI,iBAAa;;EAK/F,aAA6B,CAAC,MAAM,mBAAoB;EAExD;GAAO,AAAC,kBAAiB;GAAzB,EAAO,GAAC,mBAA4C,OAApD;AAAA;;GACE,aAAa,mDAAuC;GAEpD,EAAI,eAAc,GAChB;AAAA;;GAGF,qBAAqB,aACT,8BACE;GAGd,KAAO,CAAC,gBAAe,KAAM,AAAC,cAAc,OAAM,gBAAe,eAAjE;AAAA,IACE,SAAQ;IACR,kBAAiB;IACjB,QAAO;IACP,kBAAiB,mCAAQ,gBAAgB,oEAAM;IAC/C,YAAW;;GAGb,aAAa;GACb,EAAI,eAAc,MAChB;AAAA,UAAM,8CAAW,kDAA6C,kBAAc,KAAI,iBAAa;;GAE/F,YAAW;GACX,YAAW;;EAGb,QAAQ,gBAAe;EACvB,aAAa,OAAM;EACnB,KAAO,KAAI,GAAX;AAAA,GACE,4EAAa,mCAAQ,OAAM,IAAI,YAAa,OAAM,IAAI,GAAI;GAC1D,KAAK;;EAGP,OAAO;;eAGT,WAA0C;AAAA,EACxC;EAEA,eAAe,gBAAW;EAG1B,EAAI,wCAAqB,aAAa,YAAY,qCAChD;AAAA,UAAO;SACF,EAAI,aAAY,6CAA2B,YAAY,2CAC5D;AAAA,UAAO;SACF,EAAI,2CAAwB,aAAa,YAAY,yCAC1D;AAAA,UAAO;SACF,EAAI,aAAY,2CACrB;AAAA,UAAO;SACF;AAAA,GAEL,cAAuB,oCAAmB,WAAO;GACjD,oBAA0B;GAC1B,KAAO,iBAAgB,GAAvB;AAAA,IACE,EAAI,yCAA4B,UAAU;AAAA,KACxC,cAAS;KACT,sEAAO,kCAAO,QAAS;;IAEzB;IACA,UAAU,2BAAe,EAAG;;GAI9B,OAAO;;;wBAIX,WAA6C;AAAA,EAC3C,mBAAmB;EACnB,KAAO,cAAQ,eAAU,uCAAqB,gBAAW,cACvD,gBAAgB,YAAO;EAGzB,EAAI,iBAAW,eAAU,qCAAmB;AAAA,GAC1C,gBAAgB,YAAO;GAEvB,KAAO,cAAQ,eAAU,uCAAqB,gBAAW,cACvD,gBAAgB,YAAO;;EAK3B,YAAW,YAAO;EAClB,EAAI,UAAQ,OAAO,SAAQ,KAAK;AAAA,GAC9B,gBAAgB,YAAO;GACvB,QAAO,YAAO;GACd,EAAI,UAAQ,OAAO,SAAQ,KACzB;AAAA,oBAAgB,YAAO;;GAGzB,KAAO,cAAQ,eAAU,uCAAqB,gBAAW,cACvD,gBAAgB,YAAO;GAGzB,EAAI,EAAC,uCAAqB,gBAAW,aAAQ,KAC3C;AAAA,UAAM,8CAAW,6CAAyC,eAAe,YAAO,cAAO,KAAI,iBAAa;;;EAI5G,EAAG,eAAS,aACV;AAAA,yEAAO,oCAAS,6BAAO,WAAe;;EAExC,eAAe,gBAAW;EAG1B,EAAI,2CAAwB,WAC1B;AAAA,SAAM,8CAAW,kDAA8C,eAAe,YAAO,cAAO,KAAI,iBAAa;SACxG,EAAI,aAAY,qCACrB;AAAA,SAAM,8CAAW,6CAAyC,eAAe,YAAO,cAAO,KAAI,iBAAa;;EAI1G,sEAAO,oCAAS,6BAAO,WAAe;;uBAGxC,WAA4C;AAAA,EAC1C,UAAU;EACV,YAAY,YAAO;EACnB,aAAa;EAEb,KAAO,cAAQ,aAAf;AAAA,GACE,YAAW,YAAO;GAClB,EAAI,UAAQ,OAAO;AAAA,IACjB,SAAS;IACT;UACK,EAAI,UAAQ,MAAM;AAAA,IACvB,QAAO,YAAO;IACd,MAAO;SACL;KAAU,OAAQ;;SAClB;KAAU,OAAQ;;SAClB;KAAU,OAAQ;;SAGlB;KAAU,OAAQ;;;UAGpB;AAAA,WAAO;;;EAIX,EAAI,EAAC,QACH;AAAA,SAAM,8CAAW,6BAAwB,MAAG,KAAI,iBAAa;;EAG/D,sEAAO,oCAAS,8BAAQ;;oBAG1B,WAAyC;AAAA,EACvC,eAAe,gBAAW;EAC1B,YAAY;EACZ;EAEA,EAAI,2CAAwB,WAC1B;AAAA;SAEA;AAAA,SAAM,8CAAW,gBAAa,YAAO,YAAU,iBAAa;;EAG9D,KAAO,cAAQ,aAAf;AAAA,GACE,WAAW,gBAAW;GACtB,EAAI,0CAAuB,WACzB;AAAA;UAEA;AAAA;;;EAIJ,aAAa,2BAAsB,MAAO;EAG5B;;OAEZ;yEAAe,oCAAS,4BAAM;OAG9B;yEAAY,oCAAS;OACrB;yEAAY,oCAAS;OAHrB;yEAAc,oCAAS;OAFvB;yEAAc,oCAAS,4BAAM;OAG7B;yEAAmB,oCAAS;;GAG5B,sEAAS,uCAAY;;;mBAIzB,8BAAwE;AAAA,EACtE,kBAAsC;EACtC,qBAAqB;EAErB,KAAO,cAAQ,aAAf;AAAA,GACE;GACA,eAAe,gBAAW;GAE1B,EAAI,aAAY,qBAAqB;AAAA,IACnC,iBAAiB;IACjB;IACA;UACK,EAAI,aAAY,oCACrB;AAAA;UACK;AAAA,IACL,iBAAiB;IACjB,EAAI,eAAc,QAAQ,oEACxB;AAAA,WAAM,8CAAW,mCAAmC,iBAAa;;IAEnE,iBAAiB;;;EAIrB,EAAI,EAAC,gBAAgB;AAAA,GACnB,YAAW,oBAAoB;GAC/B,MAAM,8CAAW,uCAAkC,QAAI,KAAI,iBAAa;;EAG1E,OAAO;;kBAGT,WAAuC;AAAA,EACrC,eAAe,gBAAW;EAC1B;EAEA,EAAI,aAAY,yCACd;AAAA,gBAAa;SAEb;AAAA,gBAAa;;EAGf;EAEA,EAAG,cAAQ,aAAQ;AAAA,GACjB,WAAW,gBAAW;GAEtB,KAAO,cAAQ,eAAU,CAAC,YAAY,uCAAqB,YAAY,6CAA2B,YAAY,0CAA9G;AAAA,IACE;IAEA,EAAI,aAAY,qCAEd;AAAA,WAAM,8CAAW,2DAAyD,iBAAa;WAClF,EAAI,aAAY,2CAErB;AAAA,WAAM,8CAAW,gEAA4D,iBAAa;WACrF,EAAI,aAAY,yCAAuB;AAAA,KAC5C;KAAoB;iBAClB;MAAiB,WADC;MAApB,SAC2B;YACjB;AAAA,YAAM,8CAAW,iEAAiE,iBAAa;;KAEzG,iBAAgB,qBAAgB,8CAC3B,sBAAqB;AAAA,aAAO;;KACjC,4EAAa,iCAAM,OAAQ;;IAE7B;IACA,WAAW,gBAAW;;;EAI1B,OAAO;;eAIT,WAAoC;AAAA,EAClC;EACA,iBAAiB;EAEjB,EAAI,iBAAW,eAAU,0CAAwB;AAAA,GAC/C;GACA,OAAO;SAEP;AAAA,SAAM,8CAAW,aAAa,iBAAa;;;eAI/C,WAAoC;AAAA,EAClC;EACA,YAAY,qBAAgB,gDACrB,qBAAqB;AAAA,UAAO;;EACnC,sEAAO,kCAAO;;;;;;;uCChYF,yBACZ;AAAA,CAAO;CAAP,OAAO,gBAAQ,aAAR,yBAAQ,YAAR,QAAQ,qBAAoB;;0CAGvB,6BACZ;AAAA;aAAkB,cACL,0CAAc;CAD3B;mBAAQ,aAAR;oBAAQ,SAAR;;UAAQ,YAAR;;;6CAKY,mBACZ;AAAA,wCAAW;;0CAGC,mBACZ;AAAA,CAAO;mBAAW,aAAX;8BAAW;QAAX;AAAA,gCAAW;;;6CAGN,WACZ;AAAA,mCAAM;;mDAGM,WACZ;AAAA,QAAO,4GAA4B,wBAC1B;AAAA,kBAAa,WAAY;AAAA;SAAa;AAAA;;GAC5C;;4CAGE,oBACL;AAAA,QAAO,gBACE;AAAA,IAAI,gDAAc;AAAA,0DAAO;SACzB,EAAI,gDAAc;AAAA,0DAAO;SACzB;AAAA,oBAAU;;;;;;;oCC7CP,qBACZ;AAAA,QAAO,cAAc,SAAS;;mCAGlB,gBACL;AAAA,aAAS,MAAQ;AAAA,yBAAgB;QAAjC;AAAA;;;kCAGK,gBACL;AAAA,aAAS,MAAQ;AAAA,wBAAe;QAAhC;AAAA;;;uCAGK,uBAAoE;AAAA,CAChF,EAAI,iBAAgB,KAAK,iBAAiB,GAAG;AAAA,SAAO;;CACpD,EAAI,iBAAgB,GAAG;AAAA,SAAO;;CAC9B,EAAI,kBAAiB,GAAG;AAAA,SAAO;;CAC/B,OAAO,6BAAI,OAAQ,gBACjB;AAAA,SAAO,kCAAS,MAAO;;;uCAIb,uBAAoE;AAAA,CAChF,EAAI,iBAAgB,KAAK,iBAAiB,GAAG;AAAA,SAAO;;CACpD,EAAI,iBAAgB,GAAG;AAAA,SAAO;;CAC9B,EAAI,kBAAiB,GAAG;AAAA,SAAO;;CAC/B,OAAO,6BAAI,OAAQ,gBACjB;AAAA,SAAO,kCAAS,MAAO;;;wCAIb,uBAAqE;AAAA,CACjF,EAAI,iBAAgB,KAAK,iBAAiB,GAAG;AAAA,SAAO;;CACpD,EAAI,iBAAgB,GAAG;AAAA,SAAO;;CAC9B,EAAI,kBAAiB,GAAG;AAAA,SAAO;;CAC/B,OAAO,CAAC,qCAAY,MAAO;;gCAGf,yBACL;AAAA,mBAAW;CAAlB;;gCAGY,yBAA6D;AAAA,CACzE;YAAa,cAAb;AAAA,EAAK,WAAL,AAAa,MAAb;;EACE,EAAI,UAAS,OACX;AAAA,UAAO;;;CAGX,OAAO;;+BAGK,sBACZ;AAAA,QAAO,kBAAW,UAAU;;+BAGhB,sBACZ;AAAA,QAAO,aAAa,iBAAiB;;kCAGzB,6BAA2G;AAAA,CACvH;YAAa,cAAb;AAAA,EAAK,WAAL,AAAa,MAAb;;EACE,MAAM,SAAS,IAAK;;CAEtB,OAAO;;;;;yCCzBK,mBACL;AAAA,gBAAY,IAAM;AAAA,qBAAY;QAA9B;AAAA;;;4CAGK,mBACL;AAAA,gBAAY,IAAM;AAAA,qBAAY;QAA9B;AAAA;;;4CAGK,mBACL;AAAA,gBAAY,IAAM;AAAA,qBAAY;QAA9B;AAAA;;;4CAGK,mBACL;AAAA,kBAAY,uCACjB,YAAY,2CACZ,0CAAkB,aAClB,0CAAkB,YAClB;AAAA,gGAAsC;QAJjC;AAAA;;;2CAOK,mBACL;AAAA,gDAAkB,aACvB,uCAAe,YACf;AAAA,+FAAqC;QAFhC;AAAA;;;uCAKK,mBACL;AAAA,kBAAY,oCACjB,YAAY,mCACZ,YAAY,kCACZ;AAAA,qBAAY;QAHP;AAAA;;;;;;uCC9DK,0BAAyD;AAAA,CACvD;;EAAd,aAAc;EACZ,EAAI,WAAS,QACX;AAAA,UAAO;;;CAGX,OAAO;;sCAGK,mBAA4C;AAAA,CACxD,aAAwB;CACV;;EAAd,aAAc;EACZ,YAAY;;CAEd,OAAO;;kCAGK,4BACZ;AAAA,QAAO,kDAAuB;;mCAGlB,4BACZ;AAAA,2DAAwB;;;;;qCC1BZ,sBACZ;AAAA,QAAO,eAAe,SAAS;;sCAGnB,sBACZ;AAAA,QAAO,6BAA6B,uBAAuB;;oCAG/C,gBACL;AAAA,aAAS,MAAQ;AAAA,kBAAS;QAA1B;AAAA;;;qCAGK,gBAAkD;AAAA,CAC9D,KAAK;CACL,KAAK;CACE,EAAI,MAAK,IAAI;AAAA;QACb,EAAI,MAAK,IAAI;AAAA;QACb;AAAA;;;0BCOH,cAAkC;AAAA,CACxC;CACA,WAAW,AAAwC;CACnD,eAAe,OAAO;CACtB,EAAI,0BAA4B;AAAA,0BAA2B,KAAM;;;;;2BAGpD,cACN;AAAA,GAAI,EAAe,eAAK,QAAW;AAAA;QAAS;AAAA,iCAAc;;;;;;;;;;mBAOnD,YACd;AAAA,QAAO,QAAQ,UAAU,eAAe,UAAU,cAAc,UAAU;;kBAG5D,cACN;AAAA,CACP,UAAU,AAAI,KAAK,OAAO,aAAW,MAAI,eAAa,OAAU;CAKhE,OAAO,qBAAa,EAAG;CACvB,EAAI,MAAK,QAAQ,kBAAkB,MAClC;AAAA;YAAU;EAAV,WAAU,YAAV;AAAA,GAAK,SAAL,AAAU,IAAV;;GACC,OAAO,MAAM,qBAAa,GAAG;;;CAC/B;CACI;WAAiB,aAAa,aAA9B;AAAA,EAA6C,AAAC,IAAI,wBAAwB;EAA1E,MAA6C,AAAC,KAA8C;QAA5F;AAAA;;CAAJ,EAAI,MACH;AAAA,iBAAe,iBAAS,OAAK;QACzB,EAAI,mBAA4B,eAAe,eAAyB,MAC5E;AAAA,cAAsB;;;mBAyBlB,YACN;AAAA,GAAI,EAAO,aAAG,UAAV,AAAO,cAAP,MACH;AAAA,SAAO;QACH;AAAA,EACJ,SAAiB,AAAuC;EACxD,EAAI,OAAM,MACT;AAAA,UAAO;;EACR,WAAW,0BAAkB;EAC7B,EAAI,SAAQ,MACX;AAAA,UAAO,6BAAqB;;EAC7B,OAAO;;;uBAKM,cACN;AAAA,CACP,EAAI,MAAK,MACL;AAAA,SAAO;;CACX,EAAI,aAAY,GACf;AAAA,SAAO;;CACR,QAAQ;CACR,EAAI,MAAK,cAAc,CAAC,AAAQ,cAAM,AAAO,cAC5C;AAAA,MAAI;;CACL,MAAQ;MAqDR;EACC,OAAO;MArDR;EACC,EAAI,qBAA+B;AAAA,GAClC,EAAI,aAAa;AAAA,IAChB,EAAI,aAAY,GACf;AAAA,YAAO,EAAE;;IACV,UAAU,EAAE,KAAG;IACf,KAAK;IACL,UAAU;IAAV,SAAc;IAAd;;KACC,EAAI,MAAK,GACR;AAAA,aAAO,MAAM,qBAAa,EAAE,GAAG;YAE/B;AAAA,aAAO,qBAAa,EAAE,GAAG;;;IAE3B,OAAO,MAAM;;GAEd,QAAQ;GACR;GACA,WAAU;GACV,KAAK;GACL,WAAU;GAAV,UAAc;GAAd;;IACC,QAAO,CAAK,KAAI,IAAG,MAAS,MAAI,qBAAa,EAAE,IAAG;;GACnD,QAAO;GACP,OAAO;;EAER;EACA,IACC;AAAA,WAAgB;;GAGhB,OAAO;;EAER,EAAI,UAAS,QAAQ,SAAS,mBAA6B,OAAW,UAAU,YAAa;AAAA,GAC5F,SAAS;GACT,EAAI,OAAM,mBACT;AAAA,WAAO;;;EAET,QAAiB;EACjB,WAAU;EACV,KAAK;EACL,WAAW,AAAC,oBAAoB;EAChC;EACC,EAAI,SAAQ,CAAC,iBAAiB,IAC7B;AAAA;;EACD,EAAI,MAAK,eAAe,KAAK,eAAe,KAAK,eAAe,KAAK,oBAAoB,KAAK,kBAC7F;AAAA;;EACD,EAAI,gBAAc,GACjB;AAAA,WAAO;;EACR,QAAO,IAAI,IAAI,QAAM,qBAAa,EAAE,GAAG;EACxC;EACA,IAAI,YAAY;EAChB,QAAO,OAAO,IAAI;EAClB,OAAO;MAGR;EACC,OAAO;;EAEP,OAAO,OAAO;;;uBAKF,gBAAiD;AAAA,CAC/D,EAAI,OAAM,MACT;AAAA,SAAO;;CACR,EAAI,OAAM,IACT;AAAA,SAAO;;CACR,WAAqB;CACrB,EAAI,SAAQ,MACX;AAAA,YAAU;EAAV,SAAc;EAAd;;GACC,SAAkB,KAAK;GACvB,EAAI,OAAK,MAAM,qBAAa,GAAE,KAC7B;AAAA,WAAO;;;;CAEV,OAAO,qBAAa,aAAa;;uBAGQ,eAAgD;AAAA,CACzF,EAAI,OAAM,MACT;AAAA,SAAO;;CACR,MAAQ;MASR;EACQ,yBAA4C;AAAA,wBAAc;SAA1D;AAAA;;;MALR;EACC,OAAO,OAA2B,MAAM;MAKzC;EACC,OAAO;MATR;EACC,OAAO,OAA2B,MAAM;MAHzC;EACQ,UAA2B,MAAM,UAAoB;AAAA;SAArD;AAAA;;;MAKR;EACC,OAAO,OAA2B,MAAM;;EAMxC,EAAI,MAAK,MAER;AAAA,KAAI,QAA2B,OAAO,YAAa;AAAA,IAClD,EAAY,kBACX;AAAA,YAAO;;IACR,EAAI,sBAAa,iBAAS,GAAG,KAC5B;AAAA,YAAO;;UAEJ,EAAK,QAA2B,OAAO,YAAY,sBAAc,KACrE;AAAA,MAAY,kBACX;AAAA,YAAO;;;SAGT;AAAA,UAAO;;EAGsB,EAAI,OAAM,QAAS,cAAc,OAA7B,OAAoC;AAAA,UAAO;;EAChD,EAAI,OAAM,OAAQ,eAAe,OAA7B,OAAoC;AAAA,UAAO;;EAC5E,OAAO,cAAc;;;iBAIkB,cACxC;AAAA,GAAI,sBAAa,EAAG,IAAI;AAAA,SAAO;QAC1B;AAAA,QAAM,yCAAgB,WAAW,KAAK,SAAQ,WAAW;;;4BAKxD,YAA6C;AAAA,CACnD,WAAmB,qBAAa,SAAS,EAAG;CAG5C,EAAI,SAAQ,YAAY,QAAQ,cAAc,QAAQ,UAAU,QAAQ,QACvE;AAAA,SAAO;;CACR,OAAO;;wBAID,YACN;AAAA,QAAO,0BAAkB,MAAM;;+BAIzB,eACN;AAAA,QAAe,QAAc;;;;;qDC7KhB,yBAA+D;AAAA,CAC5E;WAAa,CAAC,QAAS;CAAvB,WAAa,YAAb;AAAA,EAAK,WAAL,AAAa,IAAb;;EACC,UAAU,kBAAkB,KAAM;EAClC,EAAI,QAAO,MAAM;AAAA,UAAO;;;CAEzB,OAAO;;iCCpDD,YACN;AAAA,GAAI,EAAO,aAAE,UAAT,AAAO,cAAP,MAAkB;AAAA,EACrB,SAAS;EACT,kBAAa;QACP;AAAA,EACN,UAAgB;EAChB,SAAS;EACT,UAAU;EAAV,SAAc;EAAd;;GACC,OAAO,KAAK;;EACb,kBAAa;;;;;uCAQR,oBAA+B;AAAA,CACrC,QAAQ,eAAuB,KAAmB,MAAO,OAAO,OAAO,OAAO,MAAM;CACpF,aAAa,gBAAwB;CACrC,kBAAkB,eAAuB;CACzC,gBAAgB;CAChB,OAAO;;;QATD,oBACN;AAAA,SAAO,+BAAgB,aAAQ,MAAM;;;;;;;mCCb/B,6BAAyE;AAAA,CAC/E;CACA,EAAY,QAAW,SAAU,UAAU;AAAA,EAC1C,MAAM;EACN,UAAU;EAAV,SAAc;EAAd;;GACC,IAAI,KAAK;;EAET,iBAAiB,cAAc;EAC/B,iBAAiB;EACY,UAAiC;EAAhC,WAAU;EAAV,WAAc,cAAc;EAA5B;;GAAgC;;EAA9D,aAAa,+BAAgB;QAExB,EAAI,sBAAO,KAAK,6BAAe;AAAA,EACrC,aAA2B;EAC3B,EAAI,WAAU,MAAO;AAAA,YAAS;;EAC9B,EAAI,WAAU,MAAO;AAAA,YAAS,AAAC,oBAAoB,UAAW;;EAC9D,MAAM;EAEN,WAAU;EAAV,UAAc;EAAd;;GACC,UAAkB,SAAS,YAAY,AAAC,SAAS,aAAa,IAAK,AAAC,SAAS,aAAa,KAAM,AAAC,SAAS,aAAa;GACvH,SAAS,4BAA4B;;EAGrC,iBAAiB,cAAY;EAC7B,iBAAiB;EACjB,aAAa;QAER,EAAI,EAAO,gBAAM,UAAb,AAAO,iBAAP,MAAsB;AAAA,EAChC,MAAM,AAAC;EAEP,cAAa;EACb;cAAU,YAAV;AAAA,GAAK,QAAL,AAAU,IAAV;;GACC,SAAQ,4BAA4B;GACpC,aAAY,KAAE;GACd,aAAY,AAAC,MAAG,IAAG;GACnB,aAAY,AAAC,MAAG,KAAI;GACpB,aAAY,OAAI;;EAGhB,iBAAiB,cAAc;EAC/B,iBAAiB;EACjB,aAAa,+BAAgB;QAG9B;AAAA,QAAM,kCAAQ;;CAEd,eAAe;CACf,UAAU;CAEX,OAAO;;mCAGD,qBACN;AAAA,GAAI,sBAAO,WAAW,6BAAe;AAAA,EACpC,QAAqB;EACrB,EAAI,kBAAiB,SAAS,iBAC7B;AAAA,SAAM;;EACP,UAAU;EAAV,SAAc;EAAd;;GACC,KAAW,IAAI,UAAU,EAAE;;QACtB,EAAI,EAAO,eAAI,UAAX,AAAO,gBAAP,MAAoB;AAAA,EAC9B,SAAqB;EACrB,EAAI,aAAW,SAAS,iBACvB;AAAA,SAAM;;EACP,WAAU;EAAV,UAAc;EAAd;;GACC,KAAW,KAAI,UAAU,GAAE;;QAE5B;AAAA,QAAM;;;wCAGD,oBAA8C;AAAA,CACpD,QAAQ,iCAAK,WAAiB,MAAM;CACpC,eAAe,QAAQ;CACvB,OAAO;;;;;iCCvED,6BAAyE;AAAA,CAC/E;CACA,EAAY,QAAW,SAAU,UAAU;AAAA,EAC1C,MAAM;EACN,UAAU;EAAV,SAAc;EAAd;;GACC,IAAI,KAAK;;EAET,iBAAiB;EACjB,iBAAiB;EACjB,aAAa,+BAAgB;QAExB,EAAI,sBAAO,KAAK,6BAAe;AAAA,EACrC,aAA2B;EAC3B,EAAI,WAAU,MAAO;AAAA,YAAS;;EAC9B,EAAI,WAAU,MAAO;AAAA,YAAS,oBAAoB;;EAClD,EAAI,WAAU,GACb;AAAA,SAAM,AAAqB;SAI3B;AAAA,SAAM,AAAqB,eAAe,OAAQ,SAAO;;EAEzD,iBAAiB;EACjB,iBAAiB;EACjB,aAAa;QAER,EAAI,EAAO,gBAAM,UAAb,AAAO,iBAAP,MAAsB;AAAA,EAChC,MAAM,AAAC;EAEN,iBAAiB;EACjB,iBAAiB;EACjB,aAAa,+BAAgB;QAG9B;AAAA,QAAM,kCAAQ;;CAEd,eAAe;CACf,UAAU;CAEX,OAAO;;iCAGD,qBACN;AAAA,GAAI,sBAAO,WAAW,6BAAe;AAAA,EACpC,QAAqB;EACrB,EAAI,kBAAiB,SAAS,iBAC7B;AAAA,SAAM;;EACP,UAAU;EAAV,SAAc;EAAd;;GACC,KAAW,IAAI,UAAU,EAAE;;QACtB,EAAI,EAAO,eAAI,UAAX,AAAO,gBAAP,MAAoB;AAAA,EAC9B,SAAqB;EACrB,EAAI,aAAW,SAAS,iBACvB;AAAA,SAAM;;EACP,WAAU;EAAV,UAAc;EAAd;;GACC,KAAW,KAAI,UAAU,GAAE;;QAE5B;AAAA,QAAM;;;sCAGD,oBAA8C;AAAA,CACpD,QAAQ,+BAAK,WAAiB,MAAM;CACpC,eAAe;CACf,OAAO;;iBC5EL,gBAEI;AAAA,aAAO;;;;;KAMG,0BACV;AAAA,6BAAkB,OAAQ;;OAGhB,0BACV;AAAA,SAAO,4BAAmB,OAAQ;;QAGxB,yBACV;AAAA,+BAAoB,OAAQ;;QAGzB;AAAA;;;;;;EACH,OAAO,yBAAoB,QAAS,QAAS;;QAG1C;AAAA;;;;;;EACH,OAAO,yBAAoB,QAAS,QAAS;;SAGnC,kBACV;AAAA,4BAAqB;;WAGX,kBACV;AAAA,8BAAuB;;QAGb,kBACV;AAAA,2BAAoB;;UAGV,0BACV;AAAA,6BAAsB,QAAS;;OAGrB,uBACV;AAAA,0BAAmB,QAAS;;SAGlB,yBACV;AAAA,4BAAqB,QAAS;;YAGpB,4BACV;AAAA,+BAAwB,QAAS;;YAGvB,kBACV;AAAA,SAAO,6BAAwB;;WAGrB,kBACV;AAAA,SAAO,4BAAuB;;eAGpB,kBACV;AAAA,SAAO,gCAA2B;;aAGxB,kBACV;AAAA,SAAO,8BAAyB;;UAGtB,kBACV;AAAA,SAAO,2BAAsB;;YAGnB,kBACV;AAAA,SAAO,6BAAwB;;eAGrB,kBACV;AAAA,SAAO,gCAA2B;;WAGxB,WACV;AAAA;;UAGU,WACV;AAAA;;cAKG,WAAiC;AAAA,SAAO;;cACxC,eAAiC;AAAA,SAAO,6BAAwB;;QAIvE,WCqBiB;AAAA;WDfjB,WCeiB;AAAA;WDTjB,WAAmB;AAAA;;;;;;;;;;;;;;;mBEpGZ,WAVX;AAAA,CAyIoB,AAzIpB,iBAyIoB;CA7HZ,kBAAa;CACb,iBAAY;CAEZ,gBAAW;;;;;mBAIO,WAA4B;AAAA,EAC9C,KAAM,0BAAoB,GAA1B;AAAA,GACI,YAAY;GACZ,cAAc;GACd,gBAAgB;GAChB,QAAQ;;EAGZ,KAAM,yBAAmB,GAAzB;AAAA,GACI,aAAY;GACZ,eAAc;GACd,iBAAgB;GAChB,SAAQ;;EAGZ,kBAAa;EACb,iBAAY;EACZ,gBAAW;;QAKO,qBAAoF;AAAA,EAEtG,EAAG,kBAAY,MAAM;AAAA;;EAErB;EAEA,iBAAY;EAEZ,YAAY,gBAAa;EACzB,EAAG,UAAS,QAAQ,eAAe,GAC/B;AAAA;cAAe,cAAf;AAAA,IAAI,cAAJ,AAAe,MAAf;;IAEI,QAAQ;;;EAIhB,iBAAY;EAIZ;;MAMkB,wBAA0F;AAAA,EAE5G,EAAG,kBAAY,MAAM;AAAA;;EAErB;EAIA,EAAG,EAAC,+BAAgB,QAAQ;AAAA,GAExB,gBAAa,SAAO,CAAC;GACrB,oBAAe,YAAU,iBAAe;SAErC;AAAA,GACH,YAAY,gBAAa;GACzB,EAAG,eAAc,YAAY,IAAI;AAAA,IAC7B,WAAW;IACX,oBAAe,YAAU,iBAAe;;;;OAQ9B,wBAAkG;AAAA,EAEpH,EAAG,kBAAY,MAAM;AAAA,UAAO;;EAE5B;EAEA,eAAe;EAEf,EAAG,gCAAgB,QAAQ;AAAA,GAIvB,qBAAgB,UAAQ,iBAAe;GAEvC,cAAa;GAAb;;;;IACI,EAAG,gBAAe,SAAS,iBAAiB,SACxC;AAAA,2BAAiB;;;GAKzB,WAAW;;EAIf,OAAO;;eAIW,kBAA4C;AAAA,EAE9D,EAAG,mBAAa,MAAM;AAAA,UAAO;;EAE7B,YAAkC;EAElC,cAAa;EAAb;;;;GACI,EAAG,kBAAiB,SAChB;AAAA,eAAW;;;EAInB,OAAO;;UAMX,WAAkB;AAAA,EAEd,EAAG,mBAAa,mBAAc,MAC1B;AAAA;;EAGJ,iBAAY;EAEZ,EAAG,0BAAoB,GAAG;AAAA,GAEtB,cAAa;GAAb;;;;IAEI,YAAY,gBAAa;IAIzB,EAAG,UAAS,MAAM;AAAA,KAEd,yBAAc;KAGd,EAAG,iBAAgB,GACf;AAAA,2BAAgB;;;;GAO5B,kBAAa;GACb,kBAAa;;EAIjB,iBAAY;;;;mBCpKM,oBAP1B;AAAA,CAO0B;;;;;;CAFuB,AALjD,YAKiD;CAFF,AAH/C,UAG+C;CAMvC;CACA,cAAO;CACP,YAAK,OAAO,KAAK,wBAAwB;;;;;;WAM7C,gBAA4C;AAAA,SAAO,YAAO;;UAC1D,cAA4C;AAAA,SAAO,UAAK;;YACxD,WAA4C;AAAA,SAAO;;UACnD,WAA4C;AAAA,SAAO;;;;;kBC6F5C,mBAhHX;AAAA,CAoOgC,AApOhC,uBAoOgC;CA7M2B,AAvB3D,cAuB2D;CANC,AAjB5D,kBAiB4D;CAH5B,AAdhC,eAcgC;CAFD,AAZ/B,cAY+B;CAFG,AAVlC,iBAUkC;CAwG1B,uBAAO;CAGP;6BAAS,OAAE;CAEX,eAAU;CAIV,mBAAc,+BAAgB;CAC9B,gBAAW;CACX,cAAS;CAET,EAAG,iBAAW,QAAQ,0BAAqB,MACvC;AAAA,qBAAY;QAEZ;AAAA,qBAAY;;CAIhB;;;;0BAAqB;CACrB;;;;6BAAuB;CACvB;;;;8BAAwB;CACxB;;;;8BAAwB;CACxB;;;;gCAA0B;CAE1B,EAAG,iBAAW,MAAM;AAAA,EAIhB,GAAI,4BAAJ;GAAI,2BAAqB;;EAEzB,EAAG,sBAAgB,MAAM;AAAA,GACrB,cAAO;GACP,EAAG,2BACC;AAAA;kCAAS,OAAE;;;EAKnB,EAAG,qBAAe,MAAM;AAAA,GACpB,UAAmB;GACnB,aAAM;;EAGV,EAAG,uBAAiB,MAAM;AAAA,GACtB,UAAmB;GACnB,eAAQ;;EAOZ,kBAAuB;EAEvB,EAAG,0BAAoB,MACnB;AAAA,KAAG,0BAAoB,MACnB;AAAA,kBAAc;;;EAKtB,EAAG,wBAAkB,MAAM;AAAA,GAEvB,cAAc;GACd,gBAAS;;EAKb,EAAG,cAEC;AAAA,KAAG,uBAAiB,MAChB;AAAA,mBAAQ;UAGR;AAAA,mBAAQ;;;QAQhB;AAAA,iBAAQ;;CAQZ,EAAG,qBAAS,MAIR;AAAA,uBAAW;;;;;;;OAhKZ,WAAgB;AAAA;UAEhB,aAA0B;AAAA;iBAE1B,eAAmC;AAAA;WAGpB,WAAmB;AAAA;aAEnB,WAAqB;AAAA;WAGrB,gBAAmC;AAAA;aAEnC,gBAAqC;AAAA;eAErC,gBAAwC;AAAA;eAGxC,gBAAyC;AAAA;aAEzC,gBAAuC;AAAA;eAGvC,gBAAyC;AAAA;aAEzC,gBAAuC;AAAA;eAEvC,gBAAyC;AAAA;gBAEzC,gBAA0C;AAAA;eAG1C,gBAAyC;AAAA;aAEzC,gBAAuC;AAAA;eAEvC,gBAAyC;AAAA;eAGzC,gBAA2C;AAAA;iBAE3C,gBAA6C;AAAA;iBAE7C,gBAA6C;AAAA;mBAE7C,gBAA+C;AAAA;iBAGhD,gBAA4C;AAAA;mBAE5C,gBAA8C;AAAA;iBAE9C,gBAA4C;AAAA;qBAE5C,gBAAgD;AAAA;oBAEhD,gBAA+C;AAAA;OAyHtD,qBAA8C;AAAA,EACxD;EACA,OAAO,qBAAiB;;UAId,gBAAuC;AAAA,EACjD;EACA,OAAO,wBAAoB;;OAIjB;AAAA;;;EACV,OAAO,qBAAiB,MAAO;;WAIrB;AAAA;;;;;;EACV,OAAO,yBAAqB,MAAO,aAAc;;OAIvC,gBACV;AAAA,SAAO,qBAAiB;;SAQrB,WAAiB;AAAA,EAOpB;EAGA,UAAK;EAEL,EAAG,wBAAkB,GAEjB;AAAA;kBAAkB;;GAAlB;;IAEI;;;EAKR,EAAG,wBAAkB,GACjB;AAAA;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IAEI;;;EAKR,cAAS;;UAKN,YAAmB;AAAA,EAKtB;EAEA,UAAK;EAEL,EAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IAEI;;;EAKR,EAAG,wBAAkB,GACjB;AAAA;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IACI,cAAc;;;EAMtB,YAAuB;EAAvB;;;;;;;;EAGA,eAAU;;WAKP;AAAA;;;EAEH,GAAO,kBAAa,OAApB;AAAA,kFHzIsB,CAAC,QGyIK,qCAAgC,mBHzInB;;EG8IzC,EAAG,wBAAkB,GACjB;AAAA;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IAEI,eAAe;IACf,SAAS;;;EAIjB,EAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IAEI;IAEA;IACA,aAAa;;;EAIrB,gBAAW;EACX;EACA,mBAAc;EACd,uBAAkB;EAGlB,UAAK;EAEL;EAGA,EAAG,sBAAU,QAAQ,CAAC,cAElB;AAAA,mCAAqB;;EAIzB;;;;EAGA,iBAAY;EACZ,cAAS;EACT,eAAU;EAKV,EAAG,qBAAS,MACR;AAAA,2BAAa;;EAIjB,EAAG,gBAAU,MAAM;AAAA,GACf;GACA,cAAS;;EAGb,EAAG,yBAAa,MAAM;AAAA,GAClB;GACA,mBAAY;;EAGhB;EAEA,YAAK;;WAKF,aAA2B;AAAA,EAE9B,EAAG,iBAEC;AAAA;;EAGJ,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAMJ;;;;;;;EAGA,YAAO;EAEP,EAAG,gBAAU,MAET;AAAA;;EAIJ,EAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,kBAAkB;;;EAK1B,EAAG,kBAAY,QAAQ,uBAAkB,GACrC;AAAA;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IACI,eAAe;;;;iBAS3B,WAAyB;AAAA,EAErB,EAAG,iBACC;AAAA;;EAGJ,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,UAAK;EAEL,mBAAc;EAEd,EAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,yBAAyB;;;EAIjC,EAAG,wBAAkB,GACjB;AAAA;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IACI;;;;qBAQL;AAAA;;;EAEH,cAAc;EAEd,EAAG,qBAAS,MAER;AAAA,aAAU;SAEP,EAAG,sBAAU,MAAM;AAAA,GAEtB,eAAe;GACf,cAAc;GAEd,KAAM,WAGF,EAAG,wBAAiB,MAEhB;AAAA,MAAG,yBAAkB,MAAM;AAAA,KACvB,EAAG,EAAC,gBACA;AAAA,0CAAK,yEAAL;;KAEJ,WAAW;KACX;WAIA;AAAA,eAAU;;UAGX;AAAA,IAEH,UAAU;IACV,WAAW;IACX;;SAOR,EAAG,EAAC,gBACA;AAAA,uCAAK,yEAAL;;EAIR,OAAO;;WAKX;AAAA;;;EAUI,EAAI,EAAC,OACD;AAAA,WAAG,OAAQ;;EAGD;;GA3DV,UA2DU;;;;;;;KA3CE,WA2CF;;;KAtCE,UAsCF;;;IAjCF,UAiCE;IAhCF,WAgCE;;;;;;EAAd,eAAc;EAId,EAAG,aAAW,MACV;AAAA,SAAO;QAGH;IAA0B,YAAW,OAAQ;;QAD7C;IAA0B,YAAW,OAAQ;;QAE7C;IAA0B,YAAW,OAAQ;;QAY7C;IAA0B,YAAW,OAAQ;;QAD7C;IAA0B,YAAW,OAAQ;;QAT7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAE7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAO7C;IAA0B,YAAW,OAAQ;;QAF7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAE7C;IAA0B,YAAW,OAAQ;;QAE7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;QAC7C;IAA0B,YAAW,OAAQ;;;;;aAUzD;AAAA;;;EAEkB;;GAvGV,UAuGU;;;;;;KAvFE,WAuFF;;;KAlFE,UAkFF;;;IA7EF,UA6EE;IA5EF,WA4EE;;;;EAAd,eAAc;EAId,EAAG,EAAC,OACA;AAAA,YAAI,OAAQ;;EAGhB,EAAG,aAAW,MACV;AAAA,SAAO;QAGH;IAA0B,aAAY,OAAQ;;QAD9C;IAA0B,aAAY,OAAQ;;QAE9C;IAA0B,aAAY,OAAQ;;QAY9C;IAA0B,aAAY,OAAQ;;QAD9C;IAA0B,aAAY,OAAQ;;QAT9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAE9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAO9C;IAA0B,aAAY,OAAQ;;QAF9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAE9C;IAA0B,aAAY,OAAQ;;QAE9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;QAC9C;IAA0B,aAAY,OAAQ;;;;;iBAU1D,WAEI;AAAA,IAAG,qBAAS,MAAM;AAAA,GAEd,qBAAU,EAAU;GACpB,qBAAU,EAAY;GAGtB,qBAAU,GAAU;GACpB,qBAAU,GAAY;GACtB,qBAAU,GAAc;GACxB,qBAAU,GAAc;GACxB,qBAAU,GAAY;GACtB,qBAAU,GAAc;GACxB,qBAAU,GAAe;GACzB,qBAAU,GAAc;GACxB,qBAAU,GAAY;GACtB,qBAAU,GAAc;GACxB,qBAAU,GAAY;GACtB,qBAAU,GAAc;GACxB,qBAAU,GAAgB;GAC1B,qBAAU,GAAc;GACxB,qBAAU,GAAgB;GAC1B,qBAAU,GAAkB;GAC5B,qBAAU,GAAgB;GAC1B,qBAAU,GAAkB;GAC5B,qBAAU,GAAgB;GAC1B,qBAAU,GAAoB;GAC9B,qBAAU,GAAmB;;;iBAMrC,WAEI;AAAA,IAAG,qBAAS,MAAM;AAAA,GACd,oBAAS,EAAU;GACnB,oBAAS,EAAY;;;UAO7B,iBAAmC;AAAA,EAE/B,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,aAAQ;EACR,UAAK,GAAU;;YAInB,iBAAqC;AAAA,EAEjC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,eAAU;EACV,UAAK,GAAY;;cAIrB,iBAAwC;AAAA,EAEpC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;cAOvB,iBAAyC;AAAA,EAErC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;YAKvB,iBAAuC;AAAA,EAEnC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,eAAU;EACV,UAAK,GAAY;;eAIrB,iBAA0C;AAAA,EAEtC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,kBAAa;EACb,UAAK,GAAe;;cAIxB,iBAAyC;AAAA,EAErC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;cAKvB,iBAAyC;AAAA,EAErC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;YAIvB,iBAAuC;AAAA,EAEnC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,eAAU;EACV,UAAK,GAAY;;cAIrB,iBAAyC;AAAA,EAErC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;gBAKvB,iBAA6C;AAAA,EAEzC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,mBAAc;EACd,UAAK,GAAgB;;gBAIzB,iBAA6C;AAAA,EAEzC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,mBAAc;EACd,UAAK,GAAgB;;cAIzB,iBAA2C;AAAA,EAEvC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;kBAIvB,iBAA+C;AAAA,EAE3C,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,qBAAgB;EAChB,UAAK,GAAkB;;gBAM3B,iBAA4C;AAAA,EAExC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,mBAAc;EACd,UAAK,GAAgB;;kBAIzB,iBAA8C;AAAA,EAE1C,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,qBAAgB;EAChB,UAAK,GAAkB;;gBAI3B,iBAA4C;AAAA,EAExC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,mBAAc;EACd,UAAK,GAAgB;;oBAIzB,iBAAgD;AAAA,EAE5C,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,uBAAkB;EAClB,UAAK,GAAoB;;mBAI7B,iBAA+C;AAAA,EAE3C,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,sBAAiB;EACjB,UAAK,GAAmB;;cAM5B,iBAAyC;AAAA,EAErC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,iBAAY;EACZ,UAAK,GAAc;;YAIvB,iBAAuC;AAAA,EAEnC,EAAG,EAAC,qBAAU,CAAC,eAAU,CAAC,cACtB;AAAA;;EAKJ,eAAU;EACV,UAAK,GAAY;;kBAOd,WAEH;AAAA,SAAO;;kBAIJ,gBAA+C;AAAA,EAElD,kBAAa;EAEb,EAAG,eACC;AAAA;;;;MAAuB,SAAvB;+CAAuB;IAAvB;;;EAGJ,OAAO;;0BAIJ,WAEH;AAAA,IAAG,0BAAoB,MAAM;AAAA,GACzB;GACA,wBAAmB;;;yBAKpB,gBAA6F;AAAA,EAEhG;;;;EAKA,EAAG,UAAS,KAAK,qBAAU,QAAQ,CAAC,gBAAW;AAAA,GAC3C,wBAAmB,mBAAoB;GACvC,4BAAuB;;;kBAOxB,WACH;AAAA,SAAO;;cAMX,gBAAoC;AAAA,EAEhC,mBAAc;EAEd,qBAAmB;EAKnB,EAAG,sBAAe,MAEd;AAAA,kBAAe,yBAAoB;SAChC;AAAA,GAIH,EAAG,gBAAU,CAAC,cACV;AAAA,gDAAuC;;GAG3C,EAAG,iBAAW,CAAC,eACX;AAAA,iDAAwC;;;;iBAOpD,gBAEI;AAAA,mCAAgB;;0BAMpB,eAGI;AAAA,IAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,6BAA8B;;;;+BAM1C,oBAGI;AAAA,IAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,kCAAmC;;;;4BAM/C,iBAGI;AAAA,IAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,+BAAgC;;;;6BAM5C,kBAGI;AAAA,IAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,gCAAiC;;;;6BAM7C,kBAGI;AAAA,IAAG,wBAAkB,GACjB;AAAA;kBAAkB;;GAAlB;;IACI,gCAAiC;;;;WAQ7C,aAEI;AAAA,EAAO;cAAgB;EAAhB,GAAgB,MAAhB;;;;;;;;;;;;WAIX,WAEW;AAAA;;gBAMX,aAEI;AAAA,EAAO;mBAAqB;EAArB,GAAqB,MAArB;;;;;;;;;;;;;gBAIX,WAEW;AAAA;;aAMX,aAEI;AAAA,EAAO;gBAAkB;EAAlB,GAAkB,MAAlB;;;;;;;;;;;;aAIX,WAEW;AAAA;;cAMX,kBAEI;AAAA,EAAO;;;;;;;MvD7yBP;IuD6yBO;;;;;iBAAmB;EAAnB;;;;;;MvD7wBP;IuD6wBO;;;;;;;cAKX,WAEW;AAAA;;iBAMX,qBAEI;AAAA,SAAO,iBAAY;;iBAKvB,WAEI;AAAA,SAAO;;cAMX,gBAAoC;AAAA,EAEhC,GAAO,SAAS,MAAhB;AAAA,6EH39BsB,CAAC,QG29BA,mDH39BkB;;EGi+BzC,EAAG,sBAAU,MACT;AAAA,mCAAsB;;EAI1B,cAAS;EAIT,EAAG,sBAAU,MAAM;AAAA,GACf,6BAAkB;GAClB;YAAmB;GAAnB;;;;;;OvD51BJ;KuD41BI;;;;;;;;;;;;;;;;;;OvDpzBJ;KuDozBI;;;;;;;;;;;;SACG;AAAA,GACH;;;;;;;OvD91BJ;KuD81BI;;;;;;;;;;;mBAAmB;GAAnB;;;;;;OvDtzBJ;KuDszBI;;;;;;;;;;;;GACA,oBAAe;;EAGnB,OAAO;;cAIX,WAEI;AAAA,SAAO;;aAMX,iBAAiC;AAAA,EAE7B;EAEI,aAAQ;EAEZ;EAEA,OAAO;;aAIX,WAEI;AAAA,SAAO;;kBAIX,iBAAsC;AAAA,EAElC,kBAAa;EAEb;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI,sBAAoB;;EAGxB,OAAO;;YAMF,gBAAyC;AAAA,EAE9C,aAAa;EAEb,EAAG,WAAU,QAAQ,mBAAQ,MAAM;AAAA,GAC/B,uBAAuB;GACvB,0BAAgC,QAAhC;AAAA,uGAAgC,QAAhC;;GACA;qBAAoB,UAApB;sBAAoB,MAAO;UAA3B;AAAA,YAAoB,SAAO;;GAC3B,sBAAsB;;EAG1B,OAAO,YAAO;;cAMlB,kBAEI;AAAA,SAAO,cAAS;;cAIpB,WAEI;AAAA,SAAO;;YAMJ,WAAoB;AAAA,EACvB,EAAI,iBAAW;AAAA,UAAQ,kBAAc,kBAAI,wBAAoB;;EAG7D,YAAY;EAAc;;GAAV,UAAU;GAAmB,WAAW;;EACxD,OAAQ,kBAAc,kBAAI,QAAK,aAAa,+BAAY,kBAAe,WAAW,QAAM,aAAS;;;;;kBCvtC9F,mBAnCX;AAAA,CAsIqB,AAtIrB,kBAsIqB;CA1GiC,AA5BtD,qBA4BsD;CAFP,AA1B/C,eA0B+C;CAYvC,oBAAe;CACf,wBAAmB;CACnB,uBAAkB;CAClB,mBAAY;CAEZ,YAAa;CAEb,EAAG,aAAY,MACX;AAAA,IAAG,kBAAiB,MAAM;AAAA,GACtB,QAAQ;GACR,uBAAwB,KAAC,QAAK;;QAGlC;AAAA,aAAW,aACI;;CAKZ,GAAI,iBAAJ;EAAI,gBAAe,mBAAoB;;CAA9C,YAAW;CAGX,sBAAM,SACK,kBACI;;;;;;eAKnB,WACW;AAAA;;gBAGX,aACI;AAAA,SAAO,uBAAgB;;cAG3B,WACW;AAAA;;cAGX,aAA0C;AAAA,EAEtC,aAAM,mBAAW,OAAO,AAAC,wBAAW,EAAI,OAAO,AAAC,wBAAW;EAC3D,OAAO,qBAAc;;oBAIzB,WACI;AAAA,SAAO;;oBAGX,aACI;AAAA,SAAO,yBAAoB;;YAG/B,WACI;AAAA,SAAO;;YAGX,aAAsC;AAAA,EAGlC,mBAAY;EAGZ,EAAG,oBAAQ,MAAM;AAAA,GACb;mBAAgB,CAAC,IAAE;GAAnB;;;;;;GACA;oBAAgB,CAAC,IAAE;GAAnB;;;;;;;EAGJ,OAAO;;YAIX,WACI;AAAA,SAAO;;iBAGX,WACI;AAAA,SAAO;;iBAGX,aAAiD;AAAA,EAE7C,EAAG,yBAAa,MAAM;AAAA,GAClB,iBAAY;GACZ,EAAG,oBAAQ,MACP;AAAA,kBAAU;;;EAIlB,OAAO,iBAAY;;kBAKvB,iBACI;AAAA,IAAG,oBAAQ,MAAM;AAAA,GAGb,kBAAW,sBAAc,sBAAY,sBAAY,SAAU;GAC3D,cAAS;;;YAIjB,gBAA2C;AAAA,EAGvC,EAAI,UAAS,MAAO;AAAA,GAChB,gBAAS,mBAAW,wBAAW,EAAG,wBAAW;GAC7C,YAAO;GACP;GAAiB;cAAiB;GAAlC;GAAiB,sBAAjB;AAAA,SAAiB;;;qBAAiB;;IAAlC,KAAiB;;GAAjB;;;;;;GACA,cAAS;GACT,kBAAa;GACb,SAAS,GAAqB;GAC9B,OAAO;;EAGX,EAAG,EAAC,iBAAY;AAAA,GACZ,QAAQ,GAAqB;GAC7B,kBAAa;;EAOjB,eAAe,wBAAa;EAC5B,eAAe,wBAAa;EAC5B,gBAAgB,SAAU,SAAU;EACpC,eAAe,SAAU,SAAU;EAE5B;;OAEH;GACe,WAAW;GAAtB,WAAW;;OAGf;GACe,WAAW;GAAtB,WAAW;;OAGf;;;EAOJ;aAAiB;EAAjB;;oBAAiB;;;EACjB;aAAiB;EAAjB;;oBAAiB;;;EAEjB;YAAe,IAAE,CAAC,sBAAiB;EAAnC;;;;;;EACA;WAAe,IAAE,CAAC,sBAAiB;EAAnC;;;;;;EAGA,gBAAS,mBAAY,UAAQ,EAAG,UAAQ;EAGxC,OAAO,YAAO;;SAMX;AAAA;;;;EAEH,yBAAc,iBAAa,GAAI,MAAI,UAAQ,MAAQ,iBAClC,kBAAoB,iDACtB,WACP;AAAA;YAAqB;GAArB,SAAiC;GAAjC;;;;;;;;;;;;;;;;;;;;;;;yBAML,kBAEH;AAAA,SAAO,gCAA4B;;yBAKhC,4BAEH;AAAA,SAAO,gCAA4B,QAAS;;0BAKvC,eAA6C;AAAA,EAElD,UAAU;EACV,UAAU;EACV,WAAW,MAAI;EACf,WAAW,MAAI;EAEf,UAAU;EACV,UAAU;EAEV,EAAG,gBAAU,MAAM;AAAA,GACf,EAAG,OAAM,eAAiB;AAAA,UAAM;;GAChC,EAAG,OAAM,eAAiB;AAAA,UAAM;;GAChC,EAAG,OAAI,OAAO,gBAAS,KAAK;AAAA,UAAM,gBAAS,MAAI;;GAC/C,EAAG,OAAI,OAAO,gBAAS,KAAK;AAAA,UAAM,gBAAS,MAAI;;;EAGnD,YAAY;EACR,wBAAwB;EAC5B;;WAAY;EAAZ;;kBAAY;;;EAAZ,SAAiB;EAAjB;;kBAAiB;;;EAAjB;;;;;;;EACI,wBAAwB;EAE5B,uDAA6B;EAE7B;EAAW;WAAiB;EAAjB,SAAyB;EAAzB,SAAiC;EAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAX,YAAW;;+BAIN,oBAA2D;AAAA,EAEhE,4DAAkC;EAElC,EAAG,cAAQ,MACP;AAAA;oBAAgB;GAAhB,GAAgB,aAAhB;;;;;;;;;;;;;4BAKC,iBAAiD;AAAA,EAEtD,yDAA+B;EAE/B,EAAG,cAAQ,MACP;AAAA;iBAAa;GAAb,GAAa,UAAb;;;;;;;;;;;;SAMD,kBAA8B;AAAA,EAEjC,oBAAe;EACf,eAAU;;UAKiB,aAG3B;AAAA,IAAG,eAAS;AAAA,GAGR,oBAAe;GAGf;mBAAkB;GAAlB;;;;;;GACA;oBAAkB;GAAlB;;;;;;GACA;oBAAkB;GAAlB;;;;;;GAGA,qBAAgB;GAGhB,EAAG,sBAAgB,oBAAe;AAAA,IAC9B,oBAAe;IACf,eAAU;;GAId;GAAW;aAAiB,mCAAkB;GAAnC,UAAmD,mCAAkB;GAArE,UAAqF,mCAAkB;GAAvG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAX,YAAW;;;mBChTiD;AAAA;;wBAYA;AAAA;;;;;cHrC9C,oBAP1B;AAAA,CAO0B;;;;;;CAFK,AAL/B,YAK+B;CAIvB,YAAO;CACP,UAAK,OAAO,KAAK,wBAAwB;;;;;;;qBIqFtC,mBAA2C;AAAA,CAE9C,YAAY;CAEZ,EAAG,aAAY,MACX;AAAA,IAAG,kBAAiB,MAChB;AAAA,WAAQ;;;CAIhB,kBAAM,SAAS,KAAK,wBAAwB;;;;;;OA3EzC,WAAgB;AAAA;UAEhB,aAA0B;AAAA;WAG1B,WAAmB;AAAA;aAEnB,WAAqB;AAAA;iBAGN,eAAmC;AAAA;WAEnC,WAAmB;AAAA;aAEnB,WAAqB;AAAA;WAGrB,gBAAmC;AAAA;aAEnC,gBAAqC;AAAA;eAErC,gBAAwC;AAAA;eAGxC,gBAAyC;AAAA;aAEzC,gBAAuC;AAAA;eAGvC,gBAAyC;AAAA;aAEzC,gBAAuC;AAAA;eAEvC,gBAAyC;AAAA;gBAEzC,gBAA0C;AAAA;eAG1C,gBAAyC;AAAA;aAEzC,gBAAuC;AAAA;eAEvC,gBAAyC;AAAA;eAGzC,gBAA2C;AAAA;iBAE3C,gBAA6C;AAAA;iBAE7C,gBAA6C;AAAA;mBAE7C,gBAA+C;AAAA;iBAGhD,gBAA4C;AAAA;mBAE5C,gBAA8C;AAAA;iBAE9C,gBAA4C;AAAA;qBAE5C,gBAAgD;AAAA;oBAEhD,gBAA+C;AAAA;OAoB7D,oBACH;AAAA,EAAO;;+BAAY;;UAIhB,gBACH;AAAA,EAAO;;kCAAe;;OAInB;AAAA;;;EACI,yCAAY,MAAO;;WAIvB;AAAA;;;;;;EACI,6CAAgB,MAAO,YAAa;;OAIxC,gBACI;AAAA,2CAAY;;kBAOvB,WAEO;AAAA,iCAAU;;kBAMjB,WAEO;AAAA,iCAAU;;cAMjB,kBAAoC;AAAA,EAEhC;EAEI,cAAS;EAEb;EAEA,OAAO;;cAIX,WAEI;AAAA,SAAO;;WAMX,aACI;AAAA,EAAO;cAAuB;EAAvB,GAAuB,MAAvB;;;;;;;;;;;;WAGX,WACW;AAAA;;gBAGX,aACI;AAAA,EAAO;mBAA4B;EAA5B,GAA4B,MAA5B;;;;;;;;;;;;;gBAGX,WACW;AAAA;;aAGX,aACI;AAAA,EAAO;gBAAyB;EAAzB,GAAyB,MAAzB;;;;;;;;;;;;aAGX,WACW;AAAA;;cAGX,aACI;AAAA,EAAO;;;;;;;M1D0JP;I0D1JO;;;;;iBAA0B;EAA1B;;;;;;M1D0LP;I0D1LO;;;;;;;cAGX,WACW;AAAA;;iBAGX,aACI;AAAA,SAAO,gCAAmB;;iBAG9B,WACI;AAAA,SAAO;;qBAGW,eAA0C;AAAA;uBAC1C,iBAA8C;AAAA;0BAC9C,oBAAwD;AAAA;wBACxD,kBAAgD;AAAA;wBAChD,kBAAmD;AAAA;YAElE,WACH;AAAA,SAAQ,qBAAiB,YAAI,SAAM,+BAAY,YAAQ;;;;;iBC7K3D,eA9BJ;AAAA,CA6XkC,AA7XlC,wBA6XkC;CAjWA,AA5BlC,iBA4BkC;CADK,AA3BvC,oBA2BuC;CAPN,AApBjC,uBAoBiC;CADG,AAnBpC,0BAmBoC;CAHI,AAhBxC,wBAgBwC;CADD,AAfvC,uBAeuC;CADG,AAd1C,wBAc0C;CADN,AAbpC,kBAaoC;CAVW,AAH/C,eAG+C;CA6BvC,WAAM;;;;4BAqKH,uBAA8D;AAAA,CAEjE,GAAO,sBAAW,OAAlB;AAAA,+EPRsB,CAAC,QOQG,yEPRe;;COSzC,qBAAU;CAEN,WAAY,KAAC;CAEb,EAAG,UAAS,QAAQ,sBAAsB,MACtC;AAAA,UAAQ,AAAC,MAAK,wBAAyB;;CAM/B,YAAa,KAAE,iBAAe,OAAI,iBAAW,0DAAuB,IAAK,KAAG,MAAE;CAG1F,EAAG,EAAC,sBACA;AAAA;YAAiB;EAAjB,WAAiB,YAAjB;AAAA,GAAI,gBAAJ,AAAiB,IAAjB;;GACI,UAAU,OAAQ;;;CAI9B,qBAAU;;;WArLP,gBAAuC;AAAA,EAE1C;YAAY;EAAZ,WAAY,YAAZ;AAAA,GAAI,WAAJ,AAAY,IAAZ;;GAEI,EAAG,oBAAa,OACZ;AAAA,WAAO,AAAK;;;EAKpB,OAAO;;SAOA,qBAEC;AAAA,IAAG,EAAC,mBACA;AAAA,sCAAmC,MAAO;;;OAM/C,gBAEC;AAAA,IAAG,EAAC,mBACA;AAAA,oCAAiC;;;QAQjD,WAAgB;AAAA,EAEZ,mBAAQ;EAIJ,sBAAW,8BAA8B;EACzC,sBAAW,8BAA8B;EAEzC,sBAAW,iCAAiC;EAC5C,sBAAW,8BAA8B;EAEzC,oBAAe,iBAAM;EAIzB,iBAAiB;;wBAMrB,WAAgC;AAAA,EAAhC;EAIQ,oBAAO,GAAU;EACjB,oBAAO,GAAY;EACnB,oBAAO,GAAY;EACnB,oBAAO,GAAc;EACrB,oBAAO,GAAc;EACrB,oBAAO,GAAe;EACtB,oBAAO,GAAY;EACnB,oBAAO,GAAc;EACrB,oBAAO,GAAc;EAGrB,eAAU,oBAAa,kBAAe,gBAAgB,WAAW,SAAS,EAAG;EAC7E,4BAAqB;EAGrB,YAAO,mBAAW,gBAAe;EAEjC,oBAAe;EAEf;gBAAgB;EAAhB;EAEA,eAAU,kCAAiB,OAClB,qBACH,OAAK,OACJ,6BAAkB,iCACb,kBAAU,EAAE,EAAE,EAAE,cAChB,eACE,iBACA;EAGd,wBAAiB;EAGjB,eAAU,mBAAW,0BAAa,KAAK,0BAAa;EACpD,iBAAY,yBAAc,QAChB,mBAAW,eAAW,wBACrB,mBAAW,0BAAa,AAAC,iBAAU,EAAI,0BAAa,AAAC,iBAAU,cAC5D;EAId,2BAAsB;EAEtB,oBAAO,GAAgB,iBAA0C;AAAA,GAE7D,SAAS;GACT,SAAS;GAET;YAAe,KAAG;GAAlB,SAAuB,KAAG;GAA1B;;;;;;;;;;;;;;;;;;;;;GAEA,yBAAkB,GAAI;GACtB,yBAAgB,sBAAc,EAAG,EAAG,GAAI;GACxC,0BAAiB,mBAAW,KAAG,AAAC,mBAAU,EAAI,KAAG,AAAC,mBAAU;GAC5D,yBAAgB,mBAAW,iBAAW;GAEtC;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,mBAAmB;;;EAI3B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GACI;;;UAQZ,WAIQ;AAAA,IAAG,eAAS;AAAA,GAEY,WAAM;GAEtB;;;;;;;;;;;;;;;;;;;;;;GAEgB,SAAI;;;WA4CpC,YACI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,eAAe;;;;aAK3B,YACI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,iBAAiB;;;;aAK7B,YACI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,iBAAiB;;;;cAK7B,YACI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,kBAAkB;;;;WAK/B,YACK;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,eAAe;;;;aAK3B,YAmBI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,iBAAiB;;;;aAK7B,YACI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,iBAAiB;;;;SAK7B,YAEI;AAAA,IAAG,eACC;AAAA;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,aAAa;;;;WAgBzB,YAA6B;AAAA,EAEzB,EAAG,eAAc,IACb;AAAA,oBAAU,CAAC;;EAGf,EAAG,eAAS;AAAA,GAER,EAAG,cAAa,MAAa,cACzB;AAAA;;GAGJ;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI,eAAe;;;;WAiB3B,WAEI;AAAA,IAAG,sBAAgB,MACf;AAAA;;;eAMc,WAAuB;AAAA,EAGzC,uBAAkB;EAElB;EAGA,EAAG,2BAAqB,0BAAa,GACjC;AAAA,6BAAqB;;EAIzB,iBAAM;EAEN,oBAAe,iBAAM;EAGrB;;eAMJ,iBAAkC;AAAA,EAM9B,eAAU;EACV,yBAAkB;EAElB,EAAG,eAAS;AAAA,GAGR,wBAAmB;GACnB,gCAAyB;GAEzB;GACA;SAEG;AAAA,GAEH,EAAG,0BAAoB,OACnB;AAAA,oCAAyB;;GAG7B;GACA;;EAIJ,OAAO;;WAIX,WAAmB;AAAA,EAEf,qBAAQ,GAAU;EAClB,qBAAQ,GAAY;EACpB,qBAAQ,GAAY;EACpB,qBAAQ,GAAc;EACtB,qBAAQ,GAAc;EACtB,qBAAQ,GAAe;EAGvB,uBAAY;;WAIhB,WAAmB;AAAA,EAEf,yBAAoB;EACpB;EAEA,EAAG,0BAAoB,uBAAkB,GAAG;AAAA,GACxC,kBAAa,wBAAiB;GAC9B,wBAAmB;GACnB,wBAAmB;;EAGvB,EAAG,EAAC,cACA;AAAA;;EAIJ;EAAwB,iBAAG,+BAAkB;EAAoC,oBAA4B;EAAQ,qBAAuB;EAA5I,aAAwB,OAA2B,WAAW,IAAE,mBAAY,QAAK,CAAY,uBAAZ,aAA+B,QAAK,CAAY,kBAAZ;EAErH;YAAY;EAAZ,WAAY,YAAZ;AAAA,GAAI,WAAJ,AAAY,IAAZ;;GACI;;;;;;gBCnLR,gBAEI;AAAA,aAAO;;;;;OA9QJ,kBAAyC;AAAA,EAE5C,GAAW,cAAX;wFR2MsB,CAAC,QQ3MC,gDR2MiB;;EQ1MzC,GAAW,cAAX;wFR0MsB,CAAC,QQ1MC,gDR0MiB;;EQxMzC,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAEjB,OAAO,kCAAiB;;aAKzB,kBAAmD;AAAA,EAEtD,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,OAAO,uCAAsB;;OAK1B,kBAAuC;AAAA,EAE1C,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,OAAO,kCAAiB;;QAKrB,kBAAyC;AAAA,EAE5C,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,OAAO,kCAAiB;;UAKrB,kBAA6C;AAAA,EAEhD,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,OAAO,oCAAmB;;OAKvB,kBAAuC;AAAA,EAE1C,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,OAAO,iCAAgB;;QAKpB,kBAAoD;AAAA,EAEvD,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,aAAmB;EACnB,cAAsB;EACtB,aAAoB;EACpB,SAAiB;EACjB,SAAiB;EACjB,aAAqB;EAErB,EAAG,kBAAiB,MAChB;AAAA,YAAS;;EAGb,EAAG,cAAa,MAAQ;AAAA,aAAU;;EAClC,EAAG,cAAa,MAAQ;AAAA,QAAK;;EAC7B,EAAG,cAAa,MAAQ;AAAA,QAAK;;EAC7B,EAAG,kBAAiB,MAAQ;AAAA,YAAS;;EACrC,EAAG,kBAAiB,MAAQ;AAAA,YAAS;;EAErC,EAAG,EAAC,QACA;AAAA,4BAAyB;SAEzB;AAAA,4BAAyB;;EAG7B,gBAAgB,8BAAa;EAC7B,cAAsB,IAAI;EAC1B,qBAA6B,UAAU;EACvC,wBAAgC,UAAU;EAC1C,iBAAyB,AAAyB,SAAzB;EACzB,aAAa;EAEb,EAAG,SAEC;AAAA,iBAAe,4BAAY,mBAAY,GAAI,IAAM;;EAGrD,aAAmB,AAAC,UAAU,QAAS,SAAS,SAAO;EACvD,cAA4B;EAE5B,UAAS;EAAT,SAAe;EAAf;;GAEI,UAAY,AAAC,UAAU,SAAS,aAAa,iBAAmB,AAAC,IAAI;GACrE,UAAY,AAAC,UAAU,SAAS,aAAa,iBAAmB,AAAC,IAAI;GACrE,YAAY,mBAAY,KAAK,IAAK,KAAK,IAAK;GAE5C,cAAe,4BAAY,MAAO;GAElC,EAAG,EAAC,QACA;AAAA,MAAG,KAAI,GAAG;AAAA,KACN,YAAY,QAAQ,IAAI;KACxB,cAAe,4BAAY,MAAO;;;GAI1C,aAAa;;EAIjB,EAAG,EAAC,QACA;AAAA,iBAAe,4BAAY,QAAQ,GAAI;;EAG3C,OAAO;;QAOJ,kBAA4C;AAAA,EAE/C,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EACrB,GAAI,iBAAJ;GAAI,gBAAe;;EACnB,GAAI,iBAAJ;GAAI,gBAAe;;EAEnB,mBAAyB;EACzB,kBAAkB,AAAC,kBAAkB;EACrC,EAAG,EAAC,aAAa;AAAA,GAAe,GAAI,iBAAJ;IAAI,gBAAe;;GAAf,AAAnB,eAAmB;;EAEpC,EAAG,gBAAe;AAAA,GAEd,GAAI,0BAAJ;IAAI,yBAAwB;;GAE5B,gBAAgB,8BAAa;GAE7B,WAAW;GACX,SAAS;GACT;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IACI,aAAa,cAAc,eAAe,QAAQ;IAClD,cAAc,4BAAW,OAAQ;IACjC,EAAE;;GAGN,OAAO;SAEJ;AAAA,GAEH,GAAI,0BAAJ;IAAI,yBAAwB;;GAE5B,iBAAgB,8BAAa;GAE7B,YAAW;GACX,UAAS;GAET;cAAc;GAAd,YAAc,aAAd;AAAA,IAAI,cAAJ,AAAc,KAAd;;IACI,cAAa,cAAc,eAAe,SAAQ;IAClD,eAAc,4BAAW,QAAQ;IACjC,EAAG,SAAO,MAAG,GAAG;AAAA,KACZ,kBAAkB,cAAc,eAAe,QAAK,KAAK;KACzD,eAAc,4BAAW,eAAe,QAAK,GAAI;;IAErD,EAAE;;GAGN,EAAG,gBAAe;AAAA,IACd,YAAY,wBAAsB;IAClC,eAAc,cAAc,eAAe,KAAK;IAChD,cAAc,cAAc,eAAe,SAAS;IACpD,eAAc,4BAAW,eAAe,OAAQ;IAChD,eAAc,4BAAW,eAAe,GAAI;;GAGhD,OAAO;;;WAOR,kBAA+C;AAAA,EAElD,GAAI,cAAJ;GAAI,aAAa;;EACjB,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,SAAiB;EACjB,SAAiB;EACjB,SAAiB;EACjB,SAAiB;EAGjB,UAAgB;EAChB,UAAgB;EAEZ,EAAG,oBAAmB,MAAM;AAAA,GACxB,MAAM;GACN,MAAM;GAEN,EAAG,iBAAgB,MAAM;AAAA,IACrB,KAAK;IACL,KAAK;;;EAIb,EAAG,gBAAe,MAAM;AAAA,GACpB,KAAK;GACL,KAAK;;EAET,EAAG,iBAAgB,MAAM;AAAA,GACrB,KAAK;GACL,KAAK;;EAGT,GAAI,aAAJ;GAAI,YAAW;;EACf,GAAI,aAAJ;GAAI,YAAW;;EACf,GAAI,aAAJ;GAAI,YAAW;;EACf,GAAI,aAAJ;GAAI,YAAW;;EAEf,YAAY,kCAAiB;EAE7B,UAAkB;EAClB,UAAkB;EAClB,UAAkB;EAClB,UAAkB;EAElB,EAAG,eAAc,MAAM;AAAA,GACnB,MAAM;GACN,MAAM;GACN,MAAM;GACN,MAAM;;EAGV,YAAU,sBAAc,IAAK,IAAK,IAAK;EAAvC;;;;;;;;;;;;;;;;;;;;;;;;;GC9IA,aD8IA;;;;YC5IA;ID4IA,AC5JA,QD4JA;IC3JA,OD2JA;IC1JA,OD0JA;ICzJA,ODyJA;ICxJA,ODwJA;ICtJA,QDsJA;ICrJA,ODqJA;ICpJA,ODoJA;ICnJA,ODmJA;IClJA,ODkJA;;;ICtII,QDsIJ;ICrIQ,ODqIR;ICpIQ,ODoIR;IClII,QDkIJ;ICjIQ,ODiIR;IChIQ,ODgIR;IC7HI,QD6HJ;IC5HQ,OD4HR;IC3HQ,OD2HR;ICzHI,QDyHJ;ICxHQ,ODwHR;ICvHQ,ODuHR;;;ICjHI,QDiHJ;IChHQ,ODgHR;IC/GQ,OD+GR;IC7GI,QD6GJ;IC5GQ,OD4GR;IC3GQ,OD2GR;ICxGI,QDwGJ;ICvGQ,ODuGR;ICtGQ,ODsGR;ICpGI,QDoGJ;ICnGQ,ODmGR;IClGQ,ODkGR;;;;;;;;;;;;;;;;;;;;;;EAEJ,OAAO;;QAKJ,kBAA6C;AAAA,EAEhD,GAAI,mBAAJ;GAAI,kBAAiB;;EAErB,OAAO,kCAAiB;;;;eEnRhC;AAAA,CAsD4B,AAtD5B,iBAsD4B;CANY,AAhDxC,sBAgDwC;CAFE,AA9C1C,wBA8C0C;CAFH,AA5CvC,sBA4CuC;CAFF,AA1CrC,mBA0CqC;CALH,AArClC,gBAqCkC;CAFC,AAnCnC,iBAmCmC;CAHM,AAhCzC,uBAgCyC;CAFJ,AA9BrC,mBA8BqC;CAFK,AA5B1C,wBA4B0C;CAFL,AA1BrC,mBA0BqC;CAHD,AAvBpC,kBAuBoC;CAFK,AArBzC,uBAqByC;CAFL,AAnBpC,kBAmBoC;CALC,AAdrC,mBAcqC;CAFA,AAZrC,mBAYqC;CAFF,AAVnC,iBAUmC;;;;;SAkD/B,kBAA+C;AAAA,SAAO;;SAEtD,WAAiB;AAAA;UAEjB,aAA0B;AAAA;QAE1B,aAAwB;AAAA;aAExB,WAAqB;AAAA;WAErB,gBAAoC;AAAA;eAGpC,WAAuB;AAAA;aAEvB,WAAqB;AAAA;aAGrB,0DAAyG;AAAA;WAEzG,0DAAuG;AAAA;eAEvG,qDAA8G;AAAA;eAG9G,yCAA+E;AAAA;aAE/E,yCAA6E;AAAA;gBAE7E,kCAAwE;AAAA;eAExE,4CAAuF;AAAA;eAGvF,uCAA0F;AAAA;aAE1F,uCAAwF;AAAA;eAExF,uCAA0F;AAAA;iBAG1F,uCAA4E;AAAA;iBAE5E,yCAA8E;AAAA;eAE9E,yCAA4E;AAAA;mBAG5E,oCAA+F;AAAA;iBAG/F,WAAyB;AAAA,EAErB,gBAAW;EACX,wBAAmB;EAEN;EAAb,kBAAa;EACb,uBAAkB,kBAAa;EAC/B,kBAAa;EAEC;EAAd,mBAAc;EACd,wBAAmB,mBAAc;EACjC,mBAAc,iBAAY;;iBAI9B,WAAyB;AAAA,EAErB;EAEa;EAAb,kBAAa;EACb,kBAAa,AAAC,kBAAa;EAC3B,uBAAkB;EAEd,EAAG,sBACC;AAAA;;;;;;;;;;;;;;;;SAEA;AAAA;;EAGR,UAAK;EAEL;;yBASJ,WAAwC;AAAA,EAEpC,EAAG,qBAAe,GAAG;AAAA,GAEd;GAAH,EAAG,6EAAW,gBACV;AAAA;;GAGQ;GAAZ,iBAAY,4EAAW;;EAI3B,mBAAc;EACd,mBAAc,AAAC,mBAAc;EAC7B,wBAAmB;EAEnB,EAAG,oBAAc,sBACb;AAAA,sBAAc;;EAGlB,kBAAkB,AAAC,oBAAe,IAAK,mBAAc;EACrD,eAAe;EACf,iBAAY;EAEZ,iBAAY;EACZ,YAAO;;gCAIJ,WAA+C;AAAA,EAEpC;EAAd,mBAAc;EACd,mBAAc,AAAC,mBAAc;EAC7B,wBAAmB;EAEnB,iBAAY,mBAAc;EAC1B,EAAG,kBAAY,sBACX;AAAA,oBAAY;;EAGhB,uBAAkB;EAElB,aAAa,wBAAmB;EAChC,KAAM,wBAAkB,uBAAxB;AAAA,GAEI,YAAO;GACP,iBAAY;GACZ,uBAAkB;;EAItB,mBAAc,sBAAiB;;;;kBC5I5B,gBArCX;AAAA,CA0L8B,AA1L9B,mBA0L8B;CA1JZ,AAhClB,eAgCkB;CAFW,AA9B7B,mBA8B6B;CADH,AA7B1B,gBA6B0B;CADK,AA5B/B,cA4B+B;CADM,AA3BrC,oBA2BqC;CADC,AA1BtC,qBA0BsC;CAnBF,AAPpC,aAOoC;CADC,AANrC,eAMqC;CA+BD;CAE5B,YAAO;CAGP,eAAU;CAGV,YAAY;CACZ,aAAa,qBAAqB;;;;;;MAQ/B,WAAe;AAAA,EAElB,GAAO,gBAAW,OAAlB;AAAA;;EAEA,eAAU;EAEV,cAAc;;YAKX,WAAoB;AAAA,EAGvB,qBAAgB;EAGhB,WAAe;EAAf;;;;gBAKU,WAEV;AAAA,SAAQ,KAAE,aAAM,cAAW,6BAAU,WAAQ,cAAO,iBAAc;;MAM/D,wBACH;AAAA,kBAAW,MAAO;;OAKf,wBACH;AAAA,SAAO,iBAAY,MAAO;;QAKvB,qBACI;AAAA,oBAAa,MAAO;EAA3B;;SAKK,WAAiB;AAAA,EAAjB;EAQL,eAAU,wBAAyB;EAEnC,aAAQ,eAAU,wBAAyB;EAE3C,kCAAI,2HAAJ;EASI,gBAAW;EACX,EAAG,EAAC,eAAU;AAAA,GAEV,iBAAkB;GACA,YAAqB,uBAAuB;GAA9D,kBAAkB;GAClB,iBAAiB,+DAA4B,WAAY;GAEzD,gBAAgB,gBACZ;AAAA,gBAAK;YACA,gBAAgB;AAAA,IACrB,kCAAI,6EAAJ;IACA,YAAK;;SAGN;AAAA,GAEH,mBAAc;GACd,UAAK;;;aAQR,WAAqB;AAAA,EAE1B,qBAAgB;EAEhB,kCAAK,mBAAL;EAGA,kBAAa;EACb;EAGA,EAAG,kBAAY,MACX;AAAA;;EAGJ;EACA;EACA;EACA;EACA;EACA;EAGA,eAAU;EACV,aAAQ;EACR,aAAQ;EACR,cAAS;EACT,aAAQ;EACR,aAAQ;EACR,aAAa;EAGb,oBAAe;EAEf,kCAAK,WAAL;;QAMJ,gBAAgC;AAAA,EAM5B,aAAa,aAAQ,eAAU;EAC/B,UAAU,UAAK,YAAO;EAEtB,YAAU,cAAS;EACnB,aAAU,eAAU;EACpB,cAAU;EACV,aAAU,eAAU;EACpB,aAAU,eAAU;EACpB,eAAU,iBAAY;EAEtB,iBAAY;EACZ,iBAAiB;EAEjB,EAAG,EAAC,eAAU;AAAA,GACV,gBAAW,qBAAa,KAAM;GAC9B,gBAAgB;;EAGpB,gBAAgB;EAChB,gBAAgB;EAKE;EAAd,mBAAc;EACd,cAAS,gBAAgB,KAAM,WAAW,YAAU,kBAAc,WAAW,YAAU;EAG3F;EACG;EACH;EACA;EACA;EAEA,EAAG,EAAC,eACA;AAAA;;EAGJ;EAEA,aAAc;EACd,YAAc;EACd,cAAc;EACd,aAAc;EACd,aAAc;EAEd,EAAG,EAAC,eACA;AAAA,iBAAc,gBAAgB,SAAQ,yBAAsB;;EAGhE,eAAe;EAEf,aAAQ,eAAW;EACnB,aAAa;EAEb,EAAG,EAAC,eAAU;AAAA,GACV,eAAU;GACV;;EAGJ;;sBAIJ,WAEI;AAAA,IAAG,EAAC,eAAU;AAAA,GAKV,sBAAsB,gBAAW,OAChB,2BACD,wBACA,wCACA,wCACA,2CACA,2CACA,0CACA,2CACA,8CACA,4CACF,iBAAyB;AAAA,IAC/B,kCAAK,oCAAL;IACA,MAAM,+CAAY;;GAI1B;SAIA;AAAA,uBAAe;;;kBAMvB,YAA2B;AAAA,EAEvB,EAAG,EAAC,eAAU;AAAA,GAIN,iBAAY,gBAAY;GACxB,iBAAY,cAAU;;EAO9B;EAGA,EAAG,EAAC,oBAAe;AAAA,GAIf,kBAAa;GACb,cAAS;GAGT;;;WAQC,iBAAsD;AAAA,EAE3D,EAAG,kBAAiB,MAChB;AAAA,qBAAa;;EAGjB,kBAAa;;UAMR,iBAA8B;AAAA,EAEnC,EAAG,oBAAc;AAAA;;EACjB,EAAG,EAAC,aAAQ;AAAA;;EAKJ,eAAU;EACV,iBAAY;EAOpB;EAIA;EAIA;EAIA;EAKA;EAGwB,iBAAY;EACpC,kBAAa,EAAgB;EACL,eAAU;EAGV,iBAAY;EACpC,iBAAY;EACY,eAAU;EAIlC;;QAKK,iBAA4B;AAAA,EAEjC,EAAG,qBAAe;AAAA;;EAClB,EAAG,EAAC,aAAQ;AAAA;;EAGR,eAAU;EACV,iBAAY;EAGhB,EAAG,mBACC;AAAA;;;UAMD,WAAkB;AAAA,EAED,iBAAY;EAEhC;EAEA,kBAAa;EACb;EAEI,kBAAa;EACb;EACA;EAEJ,kBAAa;EACb;EAEoB,eAAU;EAE9B;;eAIK,WAEL;AAAA,IAAG,EAAC,mBACA;AAAA,qBAAa;;;aAKZ,WAEL;AAAA,IAAG,EAAC,mBACA;AAAA,qBAAa;;;gBAOrB,iBAA2D;AAAA,EAEvD,EAAG,qBAAe;AAAA;;EAClB,EAAG,EAAC,aAAQ;AAAA;;EAGZ,gBAAgB;EAChB,gBAAgB;EAIE;EAAd,mBAAc;EAIlB,WAAW,WAAW,YAAU;EAChC,WAAW,WAAW,YAAU;EAEhC,kBAAa,GAAgB;EAEtB;;OAEH;GACI,kBAAa,GAAqB;GAClC,wBAAmB;;OAGvB;GACI,6BAAwB,SAAU;GAClC,+BAA0B,UAAW;GACrC,kBAAa,GAAuB;GACpC,0BAAqB;;OAGzB;GACI,6BAAwB,SAAU;GAClC,+BAA0B,UAAW;GACrC,kBAAa,GAAqB;GAClC,wBAAmB;;OAGvB;GACI,kBAAa,GAAyB;GACtC,4BAAuB;;OAG3B;GACI,kBAAa,GAAwB;GACrC,2BAAsB;;;;EAO9B,SAAS;;eAaA,8CAAoF;AAAA,EAEzF,EAAG,EAAC,aAAQ;AAAA;;EAEP,AAAL,KAAK,AAAQ,KAAG,mBAAX;EACA,AAAL,KAAK,AAAQ,KAAG,mBAAX;EAEL;;iCAA2B,GAAI;EAA/B;EAEA,uBAAkB,GAAI,GAAI,QAAS,WAAY;;aAI1C,8CAAkF;AAAA,EAEvF,EAAG,EAAC,aAAQ;AAAA;;EAEP,AAAL,KAAK,AAAQ,KAAG,mBAAX;EACA,AAAL,KAAK,AAAQ,KAAG,mBAAX;EAEL;;iCAA2B,GAAI;EAA/B;EAEA,qBAAgB,GAAI,GAAI,QAAS,WAAY;;eAIxC,oDAA+F;AAAA,EAEpG,EAAG,EAAC,aAAQ;AAAA;;EAEP,AAAL,KAAK,AAAQ,KAAG,mBAAX;EACA,AAAL,KAAK,AAAQ,KAAG,mBAAX;EAEL;;iCAA2B,GAAI;EAA/B;EAEA,uBAAkB,GAAI,GAAI,OAAQ,OAAQ,WAAY;;gBAIjD,sCAA4E;AAAA,EAEjF,EAAG,EAAC,aAAQ;AAAA;;EAEZ,wBAAmB,GAAI,GAAI,WAAY;;aAMlC,gEAAsH;AAAA,EAE3H,EAAG,EAAC,aAAQ;AAAA;;EAEZ,qBAAgB,SAAU,UAAW,QAAS,KAAM,WAAY;;WAI3D,gEAAoH;AAAA,EAEzH,EAAG,EAAC,aAAQ;AAAA;;EAEZ,mBAAc,SAAU,UAAW,QAAS,KAAM,WAAY;;eAIzD,4DAAsI;AAAA,EAE3I,EAAG,EAAC,aAAQ;AAAA;;EAEZ,uBAAkB,MAAO,OAAQ,QAAS,OAAQ,WAAY;;eAMzD,6CAAgG;AAAA,EAErG,EAAG,EAAC,aAAQ;AAAA;;EAEZ,uBAAkB,GAAI,GAAI,IAAK,IAAK,UAAW;;aAI1C,6CAA8F;AAAA,EAEnG,EAAG,EAAC,aAAQ;AAAA;;EAEX,qBAAgB,GAAI,GAAI,IAAK,IAAK,UAAW;;eAIzC,6CAAgG;AAAA,EAErG,EAAG,EAAC,aAAQ;AAAA;;EAEZ,uBAAkB,GAAI,GAAI,IAAK,IAAK,UAAW;;eAM5C,oEAA2I;AAAA,EAE9I,EAAG,EAAC,aAAQ;AAAA;;EAEZ,uBAAkB,MAAO,WAAY,aAAc,aAAc;;aAI9D,oEAAyI;AAAA,EAE5I,EAAG,EAAC,aAAQ;AAAA;;EAEZ,qBAAgB,MAAO,WAAY,aAAc,aAAc;;iBAM1D,2CAAuF;AAAA,EAE5F,EAAG,EAAC,aAAQ;AAAA;;EAEZ,yBAAoB,SAAU,MAAO,OAAQ;;iBAIxC,6CAAyF;AAAA,EAE9F,EAAG,EAAC,aAAQ;AAAA;;EAEZ,yBAAoB,SAAU,QAAS,OAAQ;;eAI1C,6CAAuF;AAAA,EAE5F,EAAG,EAAC,aAAQ;AAAA;;EAEZ,uBAAkB,SAAU,QAAS,OAAQ;;mBAIxC,yCAA2G;AAAA,EAEhH,EAAG,EAAC,aAAQ;AAAA;;EAEZ,2BAAsB,SAAU,IAAK,OAAQ;;UAQ5C,kBAAiF;AAAA,EAEtF,EAAG,iBAAgB,MAAM;AAAA,kBAAe;;EAGxC,mBAAc,AAAK;EAGnB,gCAA4B;EAC5B,gCAA2B;EAC3B,iCAA4B;EAC5B,oCAA+B;EAC/B,qCAAsD;EACtD,qCAAsD;EAEtD,2BAAsB,UACN,YACA,YACA,eACA,YACA,cACA,aACA;EAIhB,mBAAc,iBAAa;EAG3B,OAAO,AAAK;;;;;;;kBCrsBF,WAXlB;AAAA,CAQ4B,AAR5B,yBAQ4B;CAMpB,yBAAoB;CACpB,mBAAc;CACd,qBAAgB;CAChB,mBAAc;CACd,uBAAkB;;;;;UAKf,WAEH;AAAA;;SAKG,WAAiB;AAAA,EAEJ;;;GAAhB,gBAAgB;GACZ;GACA,YAAW;;EAGG;;GAAlB,kBAAkB;GACd,8BAAyB;;EAGf;;GAAd,cAAc;GACV,0BAAqB;;EAGb;;GAAZ,YAAY;GACR,wBAAmB;;EAGvB,aAAa;EACb,KAAM,UAAS,GAAf;AAAA,GACI;GACA;;;qBAMD,yBAA4D;AAAA,EAE/D,uBAAqB;EACrB,oBAAoB,AAAwB,gBAAxB,iBAAkC;EACtD,oBAAoB,SAAS,cAAgB;EAE7C,OAAO,oBAAqB;;UAQzB,gCAAyE;AAAA,EAG5E,UAAU;EACV,kBAAkB,kCAAqB,IAAK,YAAa;EAGzD;oBAAuB,QAAvB;qBAAuB,IAAK;SAA5B;AAAA,WAAuB,OAAK;;EAK5B,iBAAiB;EACjB,EAAG,kBAAiB,cAAc;AAAA,GAG1B;GAAJ,EAAG,EAAC,gBAAqB,gBAArB,6BAAqB,eAArB,wBAAqB,eAErB;AAAA;gBAA+B;IAA/B,kBAAkB,gBAAlB;wBAAkB,YAAlB;;cAAkB,eAAlB;;;GAIJ;mBAAkB,gBAAlB,0BAAkB,eAAlB,SAAkB,mBAAmB;SAElC;AAAA,GAGC;GAAJ,EAAG,EAAC,gBAAmB,gBAAnB,6BAAmB,eAAnB,wBAAmB,eAEnB;AAAA;iBAA6B;IAA7B,kBAAgB,gBAAhB;wBAAgB,YAAhB;;cAAgB,eAAhB;;;GAIJ;mBAAgB,gBAAhB,0BAAgB,eAAhB,SAAgB,mBAAmB;;EAKvC,OAAO;;YAOJ,mBAEH;AAAA,EAAG;EAAH,EAAG,gBAAyB,aAAzB,4BAAyB,YAAzB,uBAAyB,WAAW;AAAA,GAEjB;GAAlB,kBAAkB,eAAsB,aAAtB,0BAAsB,YAAtB,SAAsB;GACtB,UAAgB;GAAhB;GAAlB,kBAAkB;GAElB,EAAG,gBAAe,MAAM;AAAA,IACpB,+BAAmB;IACnB,OAAO;UACJ;AAAA,IACiB,WAAkB;IAAlB;IAApB,oBAAoB;IACpB,EAAG,kBAAiB,MAAM;AAAA,KACtB,iCAAqB;KACrB,OAAO;WAEP;AAAA,YAAO;;;SAOf;AAAA,UAAO;;;SASR,gCAAmE;AAAA,EAEtE,UAAU;EAEN,sBAAiB,8BAAgB,IAAK,WAAY;EAEtD,OAAO;;WAKJ,mBAAqC;AAAA,EAGxC,WAAW;EACX,aAAa;EACb;GAEI,EAAG,kBAAY,YAAY,UAAU;AAAA,IACjC,wBAAmB,KAAM;IACzB,OAAO;;GAGX,EAAE;GAPN,EASQ,UAAO,SATf;AAAA;;;EAWA,OAAO;;WAMJ,WAAmB;AAAA,EAGtB,aAAa;EACb,KAAM,UAAS,GAAf;AAAA,GACI,aAAa;GACb,UAAK,YAAa;GAClB;;;QAUD;AAAA;;;EAEH,aAAa;EAGE;;;GAAf,eAAe;GAEX,EAAG,mBAAiB,GAAG;AAAA,IAEnB,mBAAmB,SAAQ;IAC3B,EAAG,wBAAkB,aAAc,cAAc;AAAA,KAE7C,EAAG,OACC;AAAA,oBAAc,oBAAe,YAAa,YAAa;;KAG3D;gBAAmB,iBAAnB;AAAA,MAAI,kBAAJ,AAAmB,SAAnB;;MACI,qBAAsB,AAAK;;KAG/B,SAAS;;;;EAOlB;EAAH,EAAG,gBAAoB,gBAApB,6BAAoB,eAApB,wBAAoB,cAAe;AAAA,GAGf;GAAnB,mBAAmB,eAAgB,gBAAhB,0BAAgB,eAAhB,SAAgB;GAEnC,EAAG,OACC;AAAA,kBAAc,oBAAe,YAAa,YAAa;;GAI3D;eAAkB,qBAAlB;AAAA,IAAI,iBAAJ,AAAkB,aAAlB;;IACI,oBAAqB,AAAK;;GAG9B,SAAS;;EAIb,OAAO;;YAQJ,qCAAkF;AAAA,EAErF,UAAmB;EAEwB;WAAU;EAAV,SAAsB;EAAtB;AAAA;;EAAvC,cAAa,oBAAoB,KAAM;EAEvC;oBAAqB,QAArB;qBAAqB,IAAK;SAA1B;AAAA,WAAqB,OAAK;;EAE9B,OAAO;;cAOJ,sBAAmD;AAAA,EAEnD;EAAH,EAAG,gBAAuB,gBAAvB,4BAAuB,eAAvB,uBAAuB,cAAc;AAAA,GAEvB;GAAb,aAAa,eAAoB,gBAApB,0BAAoB,eAApB,SAAoB;GAEjC;GAEA,4BAAuB;GAEvB,OAAO;;EAGX,OAAO;;kBAMX,mCAAsE;AAAA,EAElE,GAAI,eAAJ;GAAI,cAAa;;EAGjB,AAAiB,YAAa,kBAAe;EAE7C,AAAiB,YAAa,8BAA2B;EAEzD,OAAO;;;;oCAcJ,oCAA4E;AAAA,CAE/E,UAAK;CACL,gBAAW;CACX,kBAAa;;;;;;;gCAeV,4CAAyE;AAAA,CAE5E,UAAK;CACL,YAAO;CACP,kBAAa;;;;;;;cC/UjB,gBACI;AAAA,aAAO;;;;;WAcG,eAEV;AAAA,mCAAsB;;eAUZ;AAAA;;;EAEV,OAAO,6BAAwB,KAAM,OAAQ;;eAOnC;AAAA;;;EAEV,OAAO,6BAAwB,KAAM;;kBAM3B;AAAA;;;EAEV,OAAO,gCAA2B;;QAsBtC,WAAgB;AAAA;;;iBClDhB,gBAA6B;AAAA,CAEzB,YAAO;CAEP,iBAAY;CACZ,kBAAa;CACb,mBAAc;CACd,mBAAc;CACd,qBAAgB;CAChB,mBAAc;;;;;eAQX,iBACH;AAAA,EAAO;oBAA6B,WAA7B;+BAA6B;SAA7B;AAAA,iCAA6B;;;iBAIjC,iBACH;AAAA,EAAO;oBAA8B,WAA9B;+BAA8B;SAA9B;AAAA,iCAA8B;;;aAIlC,iBACH;AAAA,EAAO;oBAA0B,WAA1B;+BAA0B;SAA1B;AAAA,iCAA0B;;;cAM9B,gBACH;AAAA,SAAO,+BAA2B;;eAI/B,gBACH;AAAA,SAAO,gCAA4B;;WAIhC,gBACH;AAAA,SAAO,4BAAwB;;eAK5B,gBACH;AAAA,SAAO,gCAA4B;;gBAIhC,gBACH;AAAA,SAAO,iCAA6B;;YAIjC,gBACH;AAAA,SAAO,6BAAyB;;gBAM7B,kBACH;AAAA,SAAO,iCAA6B;;iBAIjC,kBACH;AAAA,SAAO,kCAA8B;;aAIlC,kBACH;AAAA,SAAO,8BAA0B;;kBAM9B,2BACH;AAAA,SAAO,mCAA+B,SAAU;;mBAI7C,2BACH;AAAA,SAAO,oCAAgC,SAAU;;eAI9C,2BACH;AAAA,SAAO,gCAA4B,SAAU;;eAI1C,yBACH;AAAA,SAAO,gCAA4B,SAAU;;YAO1C,qBAA0C;AAAA,EAExC;EAAL,EAAI,EAAC,gBAAoB,UAApB,4BAAoB,SAApB,uBAAoB,SACrB;AAAA;eAAwB;GAAxB;qBAAiB,UAAjB;uBAAiB,MAAjB;;aAAiB,SAAjB;;;EAGM;EAAV,UAAU,eAAiB,UAAjB,0BAAiB,SAAjB,SAAiB;EACvB,MAAQ,QAAM;;cAKf,qBAA4C;AAAA,EAE3C;EAAJ,EAAG,EAAC,gBAAoB,UAApB,4BAAoB,SAApB,uBAAoB,SAAQ;AAAA;;EAEtB;EAAV,UAAU,eAAiB,UAAjB,0BAAiB,SAAjB,SAAiB;EACvB,WAAW;;cAKZ,wBAAuD;AAAA,EAErD;EAAL,EAAI,EAAC,gBAAsB,UAAtB,4BAAsB,SAAtB,uBAAsB,SACvB;AAAA;eAA0B;GAA1B;qBAAmB,UAAnB;uBAAmB,MAAnB;;aAAmB,SAAnB;;;EAGM;EAAV,UAAU,eAAmB,UAAnB,0BAAmB,SAAnB,SAAmB;EACzB,MAAQ,WAAS;;gBAKlB,wBAAyD;AAAA,EAExD;EAAJ,EAAG,EAAC,gBAAsB,UAAtB,4BAAsB,SAAtB,uBAAsB,SAAQ;AAAA;;EAExB;EAAV,UAAU,eAAmB,UAAnB,0BAAmB,SAAnB,SAAmB;EACzB,WAAW;;gBAKZ,4CAAwF;AAAA,EAErF;EAAN,EAAK,EAAC,gBAAwB,UAAxB,4BAAwB,SAAxB,uBAAwB,SAC1B;AAAA;eAA4B;GAA5B;qBAAqB,UAArB;uBAAqB,MAArB;;aAAqB,SAArB;;;EAGM;EAAV,UAAU,eAAqB,UAArB,0BAAqB,SAArB,SAAqB;EAC3B,MAAQ,mBAAiB;;kBAK1B,wBAAmD;AAAA,EAElD;EAAJ,EAAG,EAAC,gBAAwB,UAAxB,4BAAwB,SAAxB,uBAAwB,SAAQ;AAAA;;EAE1B;EAAV,UAAU,eAAqB,UAArB,0BAAqB,SAArB,SAAqB;EAC3B,WAAW;;QAMnB,WAAgB;AAAA,EAEZ,oBAAe;EACf,sBAAiB;EACjB,wBAAmB;EAEnB,yBAAoB;EACpB,4BAAuB;EACvB,6BAAwB;;WAM5B,Wd9EiB;AAAA;WcoFjB,WAAmB;AAAA,EAMD;;GAAd,cAAc;GAEP;GAAH,EAAG,gBAAyB,YAAzB,yBAAyB,WAAzB,QAAyB,UACxB;AAAA,qCAA4B;UAE5B;AAAA;sBAAyB,YAAzB;wBAAyB,QAAQ;WAAjC;AAAA,cAAyB,WAAQ;;;;EAQ3B;;GAAd,cAAc;GAEP;GAAH,EAAG,gBAA0B,YAA1B,0BAA0B,WAA1B,SAA0B,UACzB;AAAA,sCAA6B;UAE7B;AAAA;sBAA0B,YAA1B;wBAA0B,QAAQ;WAAlC;AAAA,cAA0B,WAAQ;;;;;eAW1C,8CAAoF;AAAA,EAEhF,EAAG,0BAAoB;AAAA;;EAEvB,2BAAsB,GAAI,GAAI,QAAS,wBAAoB,WAAY;EAEvE,uBAAkB,iBAAa;EAE/B,uBAAU,GAAmB;EAE7B,2BAAsB;;aAI1B,8CAAkF;AAAA,EAE9E,EAAG,0BAAoB;AAAA;;EAEvB,2BAAsB,GAAI,GAAI,QAAS,sBAAkB,WAAY;EAErE,uBAAkB;EAElB,uBAAU,GAAiB;EAE3B,yBAAoB;;eAIxB,oDAA+F;AAAA,EAE3F,EAAG,0BAAoB;AAAA;;EAEvB,0BAAqB,GAAI,GAAI,OAAQ,OAAQ,WAAY;EAEzD,uBAAU,GAAmB;EAE7B,2BAAsB;;gBAI1B,sCAA4E;AAAA,EAExE,EAAG,0BAAoB;AAAA;;EAEvB,2BAAsB,GAAI,GAAI,WAAY;EAE1C,uBAAkB,iBAAa;EAE/B,uBAAU,GAAoB;EAE9B,4BAAuB;;aAM3B,gEAAsH;AAAA,EAElH,EAAG,0BAAoB;AAAA;;EAEvB,mBAAc,SAAU,UAAW,QAAS,KAAM,wBAAoB,WAAY;EAElF,sBAAiB,eAAW;EAE5B,uBAAU,GAAiB;EAE3B,yBAAoB;;WAIxB,gEAAoH;AAAA,EAEhH,EAAG,0BAAoB;AAAA;;EAEvB,mBAAc,SAAU,UAAW,QAAS,KAAM,sBAAkB,WAAY;EAEhF,sBAAiB;EAEjB,uBAAU,GAAe;EAEzB,uBAAkB;;eAItB,4DAAsI;AAAA,EAElI,EAAG,0BAAoB;AAAA;;EAEvB;EAAY,MAAO;OACf;GADJ,QACkB;;OACd;GAFJ,QAEmB;;;GACP;;EAGZ,oBAAe,MAAO,OAAQ,QAAS,MAAO,WAAY;EAE1D,uBAAU,GAAmB;EAE7B,2BAAsB;;eAM1B,6CAAuG;AAAA,EAEnG,EAAG,0BAAoB;AAAA;;EAEvB,qBAAgB,GAAI,GAAI,IAAK,IAAK,UAAW,wBAAoB;EAEjE,uBAAU,GAAmB;EAE7B,2BAAsB;;aAI1B,6CAAqG;AAAA,EAEjG,EAAG,0BAAoB;AAAA;;EAEvB,qBAAgB,GAAI,GAAI,IAAK,IAAK,UAAW,sBAAkB;EAE/D,uBAAU,GAAiB;EAE3B,yBAAoB;;eAIxB,6CAAuG;AAAA,EAEnG,EAAG,0BAAoB;AAAA;;EAEvB,qBAAgB,GAAI,GAAI,IAAK,IAAK,UAAW,wBAAoB;EAEjE,uBAAU,GAAmB;EAE7B,2BAAsB;;iBAM1B,2CAAuF;AAAA,EAEnF,EAAG,0BAAoB;AAAA;;EAEvB,4BAAuB,SAAU,MAAO,OAAQ;EAEhD,uBAAU,GAAqB;EAE/B,6BAAwB;;iBAI5B,6CAAyF;AAAA,EAErF,EAAG,0BAAoB;AAAA;;EAEvB,8BAAyB,SAAU,QAAS,OAAQ,wBAAoB;EAExE,iCAA4B,mBAAe;EAE3C,uBAAU,GAAqB;EAE/B,6BAAwB;;eAI5B,6CAAuF;AAAA,EAEnF,EAAG,0BAAoB;AAAA;;EAEvB,8BAAyB,SAAU,QAAS,OAAQ,sBAAkB;EAEtE,iCAA4B,mBAAe;EAE3C,uBAAU,GAAmB;EAE7B,2BAAsB;;mBAI1B,yCAA2G;AAAA,EAEvG,EAAG,0BAAoB;AAAA;;EAEvB;EAAY,MAAO;OACf;GADJ,QAC6B;;OACzB;GAFJ,QAE6B;;OACzB;GAHJ,QAG6B;;;GAH7B,QAI6B;;EAG7B,8BAAyB,SAAU,IAAK,MAAO;EAE/C,uBAAU,GAAuB;EAEjC,+BAA0B;;eAM9B,oEAA2I;AAAA,EAEvI,EAAG,0BAAoB;AAAA;;EAEvB,EAAG,eAAc,MACb;AAAA,4BAAoB,MAAO,wBAAoB;SAE9C,EAAG,iBAAgB,MACpB;AAAA,8BAAsB,MAAO,wBAAoB;SAEhD,EAAG,iBAAgB,MACpB;AAAA,8BAAsB,MAAO,wBAAoB;SAEhD,EAAG,mBAAkB,MACtB;AAAA,gCAAwB,MAAO,wBAAoB;SAGnD;AAAA,gCAAwB,MAAO;;EAGnC,uBAAU,GAAmB;EAE7B,2BAAsB;;aAI1B,oEAAyI;AAAA,EAErI,EAAG,0BAAoB;AAAA;;EAEvB,EAAG,eAAc,MACb;AAAA,4BAAoB,MAAO,sBAAkB;SAE5C,EAAG,iBAAgB,MACpB;AAAA,8BAAsB,MAAO,sBAAkB;SAE9C,EAAG,iBAAgB,MACpB;AAAA,8BAAsB,MAAO,sBAAkB;SAE9C,EAAG,mBAAkB,MACtB;AAAA,gCAAwB,MAAO,sBAAkB;SAGjD;AAAA,gCAAwB,MAAO;;EAGnC,uBAAU,GAAiB;EAE3B,yBAAoB;;oBAM5B;AAAA;;;EAEI,aAA6B;EAChB;;GAAb,aAAa;GAEA;GAAT,SAAS,eAAiB,WAAjB,yBAAiB,UAAjB,QAAiB;GAC1B,sBAAsB,SAAS;GAC/B,EAAG,qBAAU,cAAc,CAAC,iBACxB;AAAA,MAAI,EAAC,WAAW,OAAQ,SACpB;AAAA,iBAAY;;;;EAMxB;aAAU,eAAV;AAAA,GAAI,SAAJ,AAAU,OAAV;;GACI,EAAG,QAAO;AAAA,IAGN;sBAAyB,OAAzB;wBAAyB,GAAI;WAA7B;AAAA,cAAyB,MAAI;;IAE7B;sBAAsB,OAAtB;wBAAsB,GAAI;WAA1B;AAAA,cAAsB,MAAI;;IAE1B,iBAAY,GAAI;UAEb;AAAA,IAGH;sBAA0B,OAA1B;wBAA0B,GAAI;WAA9B;AAAA,cAA0B,MAAI;;IAE9B,8BAAyB;IAEzB,eAAU,GAAI;;;;qBAO1B;AAAA;;;EAEI,aAA6B;EAChB;;GAAb,aAAa;GAEA;GAAT,SAAS,eAAmB,WAAnB,yBAAmB,UAAnB,QAAmB;GAC5B,EAAG,qBAAU,WACT;AAAA,MAAI,EAAC,WAAW,OAAQ,SACpB;AAAA,iBAAY;;;;EAMxB;aAAU,eAAV;AAAA,GAAI,SAAJ,AAAU,OAAV;;GACI,EAAG,QAAO;AAAA,IAGN;sBAA0B,OAA1B;wBAA0B,GAAI;WAA9B;AAAA,cAA0B,MAAI;;IAE9B;sBAAuB,OAAvB;wBAAuB,GAAI;WAA3B;AAAA,cAAuB,MAAI;;IAE3B,iBAAY,GAAZ,KAAgB;UAEb;AAAA,IAGH;sBAA2B,OAA3B;wBAA2B,GAAI;WAA/B;AAAA,cAA2B,MAAI;;IAE/B,8BAA0B;IAE1B,eAAU,GAAV,KAAc;;;;+BAO1B;AAAA;;;EAEI,aAA6B;EACf;;GAAd,aAAc;GAED;GAAT,SAAS,eAAqB,WAArB,yBAAqB,UAArB,QAAqB;GAC9B,EAAI,qBAAU,WAAW;AAAA,IACrB,UAAU,KAAO;IACjB,wBAAwB,OAAO,QAAQ,OAAO;IAC9C,EAAK,EAAC,WAAW,OAAQ,WAAU,mBAC/B;AAAA,iBAAY;;;;EAKxB;aAAU,eAAV;AAAA,GAAI,SAAJ,AAAU,OAAV;;GACI,EAAI,QAAO;AAAA,IAGP;sBAA0B,OAA1B;wBAA0B,GAAI;WAA9B;AAAA,cAA0B,MAAI;;IAE9B;sBAAuB,OAAvB;wBAAuB,GAAI;WAA3B;AAAA,cAAuB,MAAI;;IAE3B,iBAAY,GAAZ,eAAgB;UAEb;AAAA,IAGH;sBAA2B,OAA3B;wBAA2B,GAAI;WAA/B;AAAA,cAA2B,MAAI;;IAE/B,8BAA0B;IAE1B,eAAU,GAAV,eAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAqEnB,WAAe;AAAA;;;;MAoBf,uEAA+H;AAAA,EAElI,WAAM;EACN,aAAQ;EACR,cAAS;EACT,eAAU;EACV,gBAAW;EACX,iBAAY;EACZ,iBAAY;;;;sBAST,WAEH;AAAA,YAAM;;;;;MAsBH,oDAA8G;AAAA,EAEjH,SAAI;EACJ,SAAI;EACJ,UAAK;EACL,UAAK;EACL,gBAAW;EACX,iBAAY;EACZ,aAAQ;EAER;;;YAAW;EAAX;;mBAAW;;;EAAX,UAAe;EAAf;;mBAAe;;;EAAf;;;;;;;;;;qBASG,WAAe;AAAA;;;;MAkBf,2DAA2G;AAAA,EAE9G,YAAO;EACP,aAAQ;EACR,cAAS;EACT,YAAO;EACP,iBAAY;EACZ,iBAAY;;;;;;;;;;;;;;;;;;;;;;;;wBA2BT,WAAe;AAAA;;;;WAsBf,2CAA2E;AAAA,EAE9E,UAAK;EACL,cAAS;EACT,YAAO;EACP,aAAQ;EACR,eAAU;EACV,iBAAY;EACZ,aAAQ;EACR,YAAO;;cAKJ,oDAAqG;AAAA,EAExG,UAAK;EACL,YAAO;EACP,aAAQ;EACR,aAAQ;EACR,cAAS;EACT,eAAU;EACV,iBAAY;EACZ,YAAO;;cAKJ,wCAAwF;AAAA,EAE3F,UAAK;EACL,YAAO;EACP,aAAQ;EACR,cAAS;EACT,YAAO;EACP,eAAU;EACV,iBAAY;EACZ,aAAQ;;;;sBASL,WAFX;AAAA,CAqB6C,AArB7C,aAqB6C;CAFA,AAnB7C,aAmB6C;CAFJ,AAjBzC,SAiByC;CAFA,AAfzC,SAeyC;CANQ,AATjD,iBASiD;CAFE,AAPnD,iBAOmD;CAJ3C,WAAM;;;;;YAuBH,qDAAgH;AAAA,EAEnH,SAAI;EACJ,SAAI;EACJ,aAAQ;EACR,aAAQ;EACR,aAAQ;EACR,cAAS;EACT,iBAAY;EACZ,iBAAY;EAEZ;;;YAAW;EAAX;;mBAAW;;;EAAX,UAAe;EAAf;;mBAAe;;;EAAf;;;;;;;;YAKG,oDAA4F;AAAA,EAE/F,SAAI;EACJ,SAAI;EACJ,aAAQ;EACR,aAAQ;EACR,aAAQ;EACR,cAAS;EACT,iBAAY;EACZ,iBAAY;EAEZ;;;YAAW;EAAX;;mBAAW;;;EAAX,UAAe;EAAf;;mBAAe;;;EAAf;;;;;;;;aAKG,sCAAyE;AAAA,EAG5E,SAAI,WAAW;EACf,SAAI,WAAW;EACf,aAAQ;EACR,aAAQ;EACR,aAAQ;EACR,cAAS;EACT,iBAAY;EACZ,iBAAY;;;;;;;;;;;;;;;;;;;;;sBAyBT,WAAe;AAAA;;;;UAoBf,kCAA0E;AAAA,EAC7E,gBAAW,MAAO,wBAAoB;EACtC,gBAAW,WAAY,KAAM,KAAM;;aAIhC,oCAAgF;AAAA,EACnF,gBAAW,MAAO,0BAAsB;EACxC,gBAAW,KAAM,aAAc,KAAM;;aAIlC,oCAAgF;AAAA,EACnF,gBAAW,MAAO,0BAAsB;EACxC,gBAAW,KAAM,KAAM,aAAc;;eAIlC,sCAAsF;AAAA,EACzF,gBAAW,MAAO,4BAAwB;EAC1C,gBAAW,KAAM,KAAM,KAAM;;eAI1B,uBAAyD;AAAA,EAC5D,gBAAW,MAAO,4BAAwB;EAC1C,gBAAW,KAAM,KAAM,KAAM;;cAGjC,6BAA8E;AAAA,EAC1E,YAAO;EACP,YAAO;EACP,aAAQ;;cAGZ,8DAAwH;AAAA,EACpH,iBAAY;EACZ,mBAAc;EACd,mBAAc;EACd,qBAAgB;;;;;;;;;;wBdxxBb,gBAAqC;AAAA,CAExC,cAAc;CAGd,oBAAoB,eAAe;CACnC,YAAkB,sBAAa;CAC/B,EAAG,SAAQ,GACP;AAAA,YAAS;EAAT,SAAe;EAAf;;GACI,WAAY;;;CAIpB,OAAO;;;;;;kBe9LJ,mBAnDX;AAAA,CA2QmD,AA3QnD,yCA2QmD;CAtJf,AArHpC,0BAqHoC;CArEA,AAhDpC,0BAgDoC;CA1BoB,AAtBxD,eAsBwD;CAJI,AAlB5D,aAkB4D;CAFD,AAhB3D,eAgB2D;CARA,AAR3D,cAQ2D;CA6CnD,GAAW,YAAX;qFf2JsB,CAAC,Qe3JD,qCf2JmB;;CevJzC,uBAAkB;CAClB,sBAAiB;CAGjB,sBAAO;CAGP,eAAQ;CACR,cAAO;CAGP,EAAG,yBAAmB,MAClB;AAAA,mBAAU;;CAGd,EAAG,wBAAkB,MACjB;AAAA,kBAAS;;CAGb,EAAG,uBAAiB,MAChB;AAAA,iBAAQ;;CAGZ,EAAG,uBAAiB,MAChB;AAAA,iBAAQ;;CAGZ,EAAG,yBAAmB,MAClB;AAAA,mBAAU;;CAMd,EAAG,sBAAgB,MAAM;AAAA,EAErB,cAAO;EAEP;QAKA,EAAG,iBAAW,MAAM;AAAA,EAEhB,cAAO,mBAAW,mBAAe;EACjC;QAEG;AAAA,EAGH,cAAO,mBAAW,GAAG;EACrB;;;;;;;mBASU,WAA4B;AAAA,EAG9C,EAAG,0BAAoB,MAEnB;AAAA,KAAG,6BAAuB,QAAQ,4BAAuB,OAAO;AAAA,IAE5D,0BAAqB;IAErB,eAAyB;IACzB,EAAG,gCAA0B,QAAQ,+BAA0B,OAC3D;AAAA,OAAG,yBAAmB,MAClB;AAAA,iBAAW;YAEX;AAAA,iBAAW;;;IAKR,4BAAQ;IAUH,WAAC,sBAAiB,OAAQ,IAAI;IAC5B,WAAC,wBAAmB,OAAQ,eAAU;IAZpD,kBAAW,kCAAiB,OACrB,SACD,OACA,OACA,iBACA,qBACK,mBAAW,EAAE,EAAE,cACZ,sBACF,qBACC,uBACC,kBACF,gBACE;IAGlB,0BAAqB;IAGrB;;SAMJ;AAAA,qBAAW;;EAKf,EAAG,kBAAY,MAAM;AAAA,GACH;GAAd,mBAAc,OAAO;GACG;GAAxB,6BAAwB,OAAO;;EAInC,EAAG,wBAAkB,MAAM;AAAA,GACvB,0BAAqB;GACrB,gBAAS;;EAIb,EAAG,4BAAsB,MACrB;AAAA,uBAAa;;;aAKL,WAAqB;AAAA,EAGjC,EAAG,kBAAY,QAAQ,qBACnB;AAAA,sBAAe;;EAInB,mBAAY;EACZ,eAAU;EACV,kBAAW;EACX,iBAAU;EACV,gBAAS;EACT,eAAQ;EACR,cAAO;EACP,mBAAY;EACZ,uBAAkB;EAClB,sBAAiB;;uBAIrB,WAA+B;AAAA;eAQ/B,aAA8B;AAAA,EAE1B,eAAU;EAGV,EAAG,kBAAY,MACX;AAAA,6BAAmB;;EAGvB,OAAO;;aAIX,aAA6B;AAAA,EAEzB,EAAG,kBAAY,MACX;AAAA,2BAAiB;;EAGrB,OAAO,aAAQ;;aAMnB,aAA6B;AAAA,EAEzB,EAAG,eAAS,QAAQ,iBAAY,MAC5B;AAAA,2BAAiB;;EAGrB,OAAO,aAAQ;;eAInB,aAAiC;AAAA,EAE7B,EAAG,kBAAY,QAAQ,+BAAoB,IACvC;AAAA,6BAAmB;;EAGvB,OAAO,eAAU;;cAGrB,aAA+B;AAAA,EAE3B,EAAG,kBAAY,QAAQ,8BAAmB,IACtC;AAAA,4BAAkB;;EAGtB,OAAO,cAAS;;gBAOpB,aAA8C;AAAA,EAG1C,EAAG,kBAAY,IACX;AAAA,UAAO;;EAIX,EAAG,kBAAY,MACX;AAAA;;EAIJ,gBAAW;EAGX,EAAG,kBAAY,MAAM;AAAA,GAGjB;YAA4B;GAA5B;;;;;;OnEgDJ;KmEhDI;;;;;;;;;;;;;;;;;;OnEwFJ;KmExFI;;;;;;;;;;;;GASQ,EAAG,4BAAsB,OAAO;AAAA,IAE5B,wBAAiB;IACjB,wBAAiB;IACjB,0BAAmB;IAGhB,WAAC;;;EASpB,OAAO;;6BAOF,kBAAwD;AAAA,EAE7D,0DAAiC;EAEjC,EAAG,kBAAY,MAEX;AAAA;YAA4B;GAA5B;;;;;;OnEUJ;KmEVI;;;;;;;;;;;;;;;;;;OnEkDJ;KmElDI;;;;;;;;;;;;;;+BAKC,oBAA6D;AAAA,EAElE,4DAAkC;EAGlC;YAAuC,cAAvC,AAAuC;EAAvC,UAAuC,cAAvC,AAAuC;EAAvC,UAAuC,cAAvC,AAAuC;EAAvC,UAAuC,cAAvC,AAAuC;EAAvC;;;;GC+bI,KD/bJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;oBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC;GAAvC,ACgcI,KDhcJ;GCicI,KDjcJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;;qBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC;GAAvC,ACmcI,KDncJ;GCocI,KDpcJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;GCqcI,KDrcJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;;qBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC;GAAvC,ACucI,KDvcJ;GCwcI,KDxcJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;GCycI,KDzcJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;;GC2cI,KD3cJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;qBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC;GAAvC,AC4cI,KD5cJ;GC6cI,KD7cJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;;GC+cI,KD/cJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;GCgdI,KDhdJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;qBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC;GAAvC,ACidI,KDjdJ;;GCmdI,KDndJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;GCodI,KDpdJ,gBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC,aAAvC;qBAAuC,cAAvC,AAAuC,cAAvC,AAAuC,cAAvC,AAAuC;GAAvC,ACqdI,KDrdJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,yBAAoB;;YAMxB,aAAwC;AAAA,EAEpC,YAAO;EAEP,EAAG,cAAQ,MACP;AAAA,aAAe;GAAf,eAAqB;GAArB;;;;EAEJ,OAAO;;sBAMJ,WAAqD;AAAA;;iBACrD,WAAoD;AAAA;;kBACpD,WAAoD;AAAA;;uBACpD,WAAoD;AAAA;;qBACpD,WAAoD;AAAA;;wBACpD,WAAoD;AAAA;;sBACpD,WAAoD;AAAA;;sBAEpD,cAAuC;AAAA,EAC1C,iCAA0B;EAC1B,OAAO;;iBAGJ,cAAuC;AAAA,EAC1C,kCAA2B;EAC3B,gCAAyB;EACzB,OAAO;;kBAGJ,cAAuC;AAAA,EAC1C,mCAA4B;EAC5B,iCAA0B;EAC1B,OAAO;;uBAGJ,cAA6C;AAAA,EAChD,kCAA2B;EAC3B,OAAO;;qBAGJ,cAA6C;AAAA,EAChD,gCAAyB;EACzB,OAAO;;wBAGJ,cAA6C;AAAA,EAChD,mCAA4B;EAC5B,OAAO;;sBAGJ,cAA6C;AAAA,EAChD,iCAA0B;EAC1B,OAAO;;kBAMX,WAEW;AAAA,SAAc,qBAAd;;kBAIX,mBAAkD;AAAA,EAE9C,iBAAU,AAAc,WAAd;EAEV,OAAO;;eAIX,aAAuC;AAAA,EAEnC;YAAoB;EAApB;;mBAAoB;;;EACpB,iCAA6B;EAE7B,kBAAW;EAEX,OAAO,eAAU;;eAIrB,WACI;AAAA,SAAO;;cAKX,aAAoC;AAAA,EAEhC,EAAG,kBAAY,MACX;AAAA,4BAAkB;;EAGtB,OAAO,cAAS;;iBAOpB,eAAqD;AAAA,EAEjD,EAAG,kBAAY,MACX;AAAA,+BAAqB;;EAGzB,OAAO,iBAAY;;gBAMvB,aAAoC;AAAA,gBAAe;;mBV/biB;AAAA;;;;;qBYe7D,mBAxBX;AAAA,CAiB6C,AAjB7C,aAiB6C;CAFK,AAflD,iBAekD;CADD,AAdjD,gBAciD;CAFlB,AAZ/B,cAY+B;CADG,AAXlC,gBAWkC;CADA,AAVlC,gBAUkC;CADA,AATlC,gBASkC;CADA,AARlC,gBAQkC;CADF,AAPhC,cAOgC;CADA,AANhC,cAMgC;CADD,AAL/B,aAK+B;CADA,AAJ/B,aAI+B;CADD,AAH9B,YAG8B;CADD,AAF7B,WAE6B;CAyBrB,cAAS;CAIT,EAAG,aAAY,MACX;AAAA,aAAW,gBACO;QAGlB;AAAA,yBAAuB;;CAG3B,yBAAoB;CAEpB,EAAG,qBAAoB,MACnB;AAAA,kBAAW;QAEX;AAAA,kBAAW;;CAIf,sBAAM;CAGN,EAAG,iBAAgB,MAAM;AAAA,aAAM;;CAC/B,EAAG,kBAAiB,MAAM;AAAA,cAAO;;CACjC,EAAG,mBAAkB,MAAM;AAAA,eAAQ;;CACnC,EAAG,oBAAmB,MAAM;AAAA,gBAAS;;CAErC,EAAG,sBAAqB,MAAQ;AAAA,kBAAW;;CAC3C,EAAG,sBAAqB,MAAQ;AAAA,kBAAW;;CAC3C,EAAG,sBAAqB,MACpB;AAAA,kBAAW;QAEX;AAAA,kBAAW;;CAGf,EAAG,sBAAqB,MACpB;AAAA,kBAAW;QAEX;AAAA,kBAAW;;CAGf,kBAAW;;;;;;OAIR,WACH;AAAA,IAAG,gBAAU,kBAAa,MACtB;AAAA,6BAAmB;;;SAIpB,WACH;AAAA,IAAG,gBAAU,kBAAa,MACtB;AAAA,4BAAkB;;;eAIJ,yBAAkD;AAAA,EAEpE,aAAQ;EACR,cAAS;EAET,gBAAW,SAAS,aAAQ,YAAO;EACnC,iBAAY,SAAS,cAAS,WAAM;EAGpC,YAAO,kBAAmB;EAC1B,YAAO,mBAAmB;EAC1B,YAAO,cAAc;EACrB,YAAO,cAAc;EACrB,wBAAO;EAAP;;YAAqB;EAArB;;mBAAqB;;;EAArB,UAAuB;EAAvB;;mBAAuB;;;EAAvB;;;;;;;EACA,YAAO,WAAW;EAClB,YAAO,YAAY;EAGnB,YAAO,kBAAmB,gBAAW,YAAO;EAC5C,YAAO,mBAAmB;EAC1B,YAAO,cAAc,gBAAS;EAC9B,YAAO,cAAc;EACrB,yBAAO;EAAP,SAAqB;EAArB;;;;;;;;aAA0B;EAA1B;;oBAA0B;;;EAA1B;;;;;;;EACA,YAAO,WAAW,aAAQ,YAAO;EACjC,YAAO,YAAY;EAGnB,YAAO,kBAAmB;EAC1B,YAAO,mBAAmB;EAC1B,YAAO,cAAc,gBAAU,CAAC,gBAAW;EAC3C,YAAO,cAAc;EACrB,yBAAO;EAAP,UAAqB,YAAO;EAA5B;;;;;;;;aAAqC;EAArC;;oBAAqC;;;EAArC;;;;;;;EACA,YAAO,WAAW;EAClB,YAAO,YAAY;EAInB,YAAO,kBAAmB;EAC1B,YAAO,mBAAmB,gBAAW,WAAM;EAC3C,YAAO,cAAc;EACrB,YAAO,cAAc,gBAAS;EAC9B,yBAAO;EAAP,SAAuB;EAAvB;;aAAqB;EAArB;;oBAAqB;;;EAArB;;;;;;;;;;;;;EACA,YAAO,WAAW;EAClB,YAAO,YAAY,cAAS,WAAM;EAGlC,YAAO,kBAAmB,gBAAW,YAAO;EAC5C,YAAO,mBAAmB,gBAAW,WAAM;EAC3C,YAAO,cAAc,gBAAS;EAC9B,YAAO,cAAc,gBAAS;EAC9B,yBAAO;EAAP,UAAqB;EAArB,UAA0B;EAA1B;;;;;;;;;;;;;;;;;;;;;EACA,YAAO,WAAW,aAAQ,YAAO;EACjC,YAAO,YAAY,cAAS,WAAM;EAGlC,YAAO,kBAAmB;EAC1B,YAAO,mBAAmB,gBAAW,WAAM;EAC3C,YAAO,cAAc,gBAAS,CAAC,gBAAW;EAC1C,YAAO,cAAc,gBAAS;EAC9B,yBAAO;EAAP,UAAqB,YAAO;EAA5B,UAAqC;EAArC;;;;;;;;;;;;;;;;;;;;;EACA,YAAO,WAAW;EAClB,YAAO,YAAY,cAAS,WAAM;EAIlC,YAAO,kBAAmB;EAC1B,YAAO,mBAAmB;EAC1B,YAAO,cAAc;EACrB,YAAO,cAAc,gBAAU,CAAC,gBAAW;EAC3C,yBAAO;EAAP,UAAuB,WAAM;EAA7B;;aAAqB;EAArB;;oBAAqB;;;EAArB;;;;;;;;;;;;;EACA,YAAO,WAAW;EAClB,YAAO,YAAY;EAGnB,YAAO,kBAAmB,gBAAW,YAAO;EAC5C,YAAO,mBAAmB;EAC1B,YAAO,cAAc,gBAAS;EAC9B,YAAO,cAAc,gBAAS,CAAC,gBAAW;EAC1C,yBAAO;EAAP,UAAqB;EAArB,UAA0B,WAAM;EAAhC;;;;;;;;;;;;;;;;;;;;;EACA,YAAO,WAAW,aAAQ,YAAO;EACjC,YAAO,YAAY;EAGnB,YAAO,kBAAmB;EAC1B,YAAO,mBAAmB;EAC1B,YAAO,cAAc,gBAAS,CAAC,gBAAW;EAC1C,YAAO,cAAc,gBAAS,CAAC,gBAAW;EAC1C,yBAAO;EAAP,UAAqB,YAAO;EAA5B,UAAsC,WAAM;EAA5C;;;;;;;;;;;;;;;;;;;;;EACA,YAAO,WAAW;EAClB,YAAO,YAAY;;OAID,yBAA0C;AAAA,EAE5D,EAAG,aAAO;AAAA,GACN;GACA,aAAQ;;EAIZ,mBAAc,EAAE;EAChB,aAAQ;EACR,cAAS;EAET,gBAAW,SAAS,aAAQ,YAAO;EACnC,iBAAY,SAAS,cAAS,WAAM;EAGpC,iBAAY,iBACQ,2BACA,qBACL,0BACA,qBACL,mBAAW,EAAE,YACX,oBACC,wBACK;EAGlB,iBAAY,iBACQ,gBAAW,YAAO,4BAClB,qBACL,gBAAS,sBACT,qBACL,mBAAW,UAAK,YACd,aAAQ,YAAO,qBACd,wBACK;EAGlB,iBAAY,iBACQ,4BACA,qBACL,gBAAU,CAAC,gBAAW,wBACtB,qBACL,mBAAW,YAAO,cAAS,YACzB,qBACC,wBACK;EAKlB,iBAAY,iBACQ,2BACA,gBAAW,WAAM,wBACtB,0BACA,gBAAS,gBACd,mBAAW,EAAE,mBACX,oBACC,cAAS,WAAM,2BACV;EAGlB,iBAAY,iBACQ,gBAAW,YAAO,4BAClB,gBAAW,WAAM,wBACtB,gBAAS,sBACT,gBAAS,gBACd,mBAAW,UAAK,mBACd,aAAQ,YAAO,qBACd,cAAS,WAAM,2BACV;EAGlB,iBAAY,iBACQ,4BACA,gBAAW,WAAM,wBACtB,gBAAS,CAAC,gBAAW,wBACrB,gBAAS,gBACd,mBAAW,YAAO,cAAS,mBACzB,qBACC,cAAS,WAAM,2BACV;EAKlB,iBAAY,iBACQ,2BACA,wBACL,0BACA,gBAAU,CAAC,gBAAW,oBAC3B,mBAAW,EAAE,WAAM,yBACjB,oBACC,2BACK;EAGlB,iBAAY,iBACQ,gBAAW,YAAO,4BAClB,wBACL,gBAAS,sBACT,gBAAS,CAAC,gBAAW,oBAC1B,mBAAW,UAAK,WAAM,yBACpB,aAAQ,YAAO,qBACd,2BACK;EAGlB,iBAAY,iBACQ,4BACA,wBACL,gBAAS,CAAC,gBAAW,wBACrB,gBAAS,CAAC,gBAAW,oBAC1B,mBAAW,YAAO,cAAU,WAAM,yBAChC,qBACC,2BACK;EAGlB,cAAS;;YAIJ,aAAiC;AAAA,EAEtC,EAAG,OAAM,MACL;AAAA,UAAO,yCAAe;;EAG1B,EAAG,EAAC,aACA;AAAA,UAAO,yCAAe;;EAI1B,iBAAY,KAAM;EAElB;YAAa;EAAb,WAAa,YAAb;AAAA,GAAI,YAAJ,AAAa,IAAb;;GACI,EAAG,mBAAa,MACZ;AAAA,+BAAsB,kBAAoB,sBAAe,YAAa,YAAa,YAAa;;;EAIxG,OAAO,yCAAe;;WAI1B;AAAA;;;EAEI,EAAG,EAAC,eAAU,QACV;AAAA,YAAI,GAAI;;EAGZ,aAAa;EAEb,iBAAY,sCAAqB,YACnB,sBACF,gBACA,wCACE,0CACA;EAGd;YAAa;EAAb,WAAa,YAAb;AAAA,GAAI,YAAJ,AAAa,IAAb;;GAEI,oBAAoB,wBAAmB,MAChC,iBACA,iBACA,iBACA,sBACI,mCACH,sBAAc,eAAgB,eAAgB,mBAAoB;;EAO/D,4BAAQ;EAAvB,oBAAe,MAAuB;EACtC,kBAAW;EACX,aAAM;EAEN,aAAQ;EACR,cAAS;;UAIN;AAAA;;;EAEH,EAAG,iBAAW,MACV;AAAA,gBAAQ,KAAK,GAAG,GAAG;;;mBZvWyC;AAAA;;wBAYA;AAAA;;;;kBa0D7D,mBA/BX;AAAA,CA6BkC,AA7BlC,wBA6BkC;CADC,AA5BnC,yBA4BmC;CADP,AA3B5B,kBA2B4B;CAZU,AAftC,oBAesC;CAkB9B,GAAI,YAAJ;EAAI,WAAU;;CACd,GAAI,mBAAJ;EAAI,kBAAiB;;CACrB,GAAI,eAAJ;EAAI,cAAa;;CAEjB,EAAG,wBAAuB,MAAc;AAAA,oBAAa;;CACrD,EAAG,wBAAuB,MAAc;AAAA,oBAAa;;CACrD,EAAG,sBAAqB,MAAgB;AAAA,kBAAW;;CAEnD,EAAG,+BAA8B,MAAO;AAAA,2BAAoB;;CAC5D,EAAG,8BAA6B,MAAQ;AAAA,0BAAmB;;CAE3D,aAAQ;CACR,cAAS;CACT,eAAU;CACV,cAAS;CACT,UAAK;CACL,YAAO;CAEH,EAAG,mBAAqB,MAAM;AAAA,oBAAgB;;CAC9C,EAAG,mBAAqB,MAAM;AAAA,oBAAgB;;CAC9C,EAAG,mBAAqB,MAAM;AAAA,oBAAgB;;CAC9C,EAAG,sBAAqB,MAAM;AAAA,uBAAgB;;CAC9C,EAAG,mBAAqB,MAAM;AAAA,oBAAgB;;CAC9C,EAAG,qBAAqB,MAAM;AAAA,sBAAgB;;CAC9C,EAAG,oBAAqB,MAAM;AAAA,qBAAgB;;CAElD,kBAAa;;;;;KAMH,qBAAkD;AAAA,kBAAW,GAAI;;OACjE,qBAAmD;AAAA,mBAAY,GAAI;;QACnE,kBAA2C;AAAA,oBAAa,GAAI;;aAI5D,cAAiC;AAAA,SAAO,oBAAe,QAAQ;;QAGtE,mBAAkC;AAAA,EAAlC;EAEH,kBAAa,EAAkB;EAE/B,aAAQ;EAER,oBAAoB,sBAAkB,WAAW;AAAA,GAEhC;;GAAb,oBAAa;GAEb,GAAI,YAAJ;IAAI,WAAU;;GAWd,EAAG,qMAAU,GAAG;AAAA,IAEZ;;;;;;;;IACA;;GAGJ,aAAa;GACb,kBAAkB;GAYd;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,cAAJ,AAAc,IAAd;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,iBAAV,IAAsB;AAAA,KAEtB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAE/C;AAAA,sBAAS;OAAT,AAAoB,yBAAmB,oBAAvC;AAAA;AAAA,oBAjB+B;SAiB/B;;;;oBAf+B;SAe/B;;;;QAF+C;WAMhD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,eAAU,oBAAnC;KACW;KAAqB,mCAAW;KAAY,WAAE;KAAzD,kBAAW,QAAW,SAAU,KAAuB,KAAU;;;GAOzE;cAAa;GAAb,YAAa,aAAb;AAAA,IAAI,aAAJ,AAAa,KAAb;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,gBAAV,IAAqB;AAAA,KAErB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAE/C;AAAA,uBAAS;OAAT,AAAmB,wBAAkB,mBAArC;AAAA;AAAA,oBAvC+B;SAuC/B;;;;oBArC+B;SAqC/B;;;;QAF+C;WAMhD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,cAAS,oBAAlC;KACW;KAAoB,mCAAW;KAAW,WAAE;KAAvD,kBAAW,OAAU,SAAU,KAAsB,KAAU;;;GAOvE;cAAa;GAAb,YAAa,aAAb;AAAA,IAAI,aAAJ,AAAa,KAAb;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,gBAAV,IAAqB;AAAA,KAErB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAE/C;AAAA,uBAAS;OAAT,AAAmB,wBAAkB,mBAArC;AAAA;AAAA,qBA7D+B;SA6D/B;;;;qBA3D+B;SA2D/B;;;;QAF+C;WAMhD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,cAAS,oBAAlC;KACW;KAAoB,oCAAW;KAAW,YAAE;KAAvD,kBAAW,OAAU,SAAU,MAAsB,MAAU;;;GAOvE;cAAgB;GAAhB,YAAgB,aAAhB;AAAA,IAAI,gBAAJ,AAAgB,KAAhB;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,mBAAV,IAAwB;AAAA,KAExB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAAW;AAAA,OAE1D,YAAY,2BAAqB,gBAAa,2BACnB,kDACZ,sCACA,mCACH,gCACA;OAGZ,gBAAQ;OAAR,AAAqB,WAArB;AAAA;AAAA,qBA3F+B;SA2F/B;;;;qBAzF+B;SAyF/B;;;;QAV+C;WAchD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,iBAAY,oBAArC;KACW;KAAuB,oCAAW;KAAc,YAAE;KAA7D,kBAAW,UAAa,SAAU,MAAyB,MAAU;;;GAO7E;cAAa;GAAb,YAAa,aAAb;AAAA,IAAI,aAAJ,AAAa,KAAb;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,gBAAV,IAAqB;AAAA,KAErB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAAW;AAAA,OAE1D,aAAY,wBAAkB,aAAU,iBACvB;OAGjB,gBAAQ;OAAR,AAAkB,YAAlB;AAAA;AAAA,qBArH+B;SAqH/B;;;;qBAnH+B;SAmH/B;;;;QAN+C;WAUhD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,cAAS,oBAAlC;KACW;KAAoB,oCAAW;KAAW,YAAE;KAAvD,kBAAW,OAAU,SAAU,MAAsB,MAAU;;;GAOvE;cAAe;GAAf,YAAe,aAAf;AAAA,IAAI,eAAJ,AAAe,KAAf;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,kBAAV,IAAuB;AAAA,KAEvB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAAW;AAAA,OAE1D,aAAY,0BAAoB,eAAY,YAC/B,+BACA;OAGb,gBAAQ;OAAR,AAAoB,YAApB;AAAA;AAAA,qBAhJ+B;SAgJ/B;;;;qBA9I+B;SA8I/B;;;;QAP+C;WAWhD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,gBAAW,oBAApC;KACW;KAAsB,oCAAW;KAAa,YAAE;KAA3D,kBAAW,SAAY,SAAU,MAAwB,MAAU;;;GAO3E;cAAc;GAAd,YAAc,aAAd;AAAA,IAAI,cAAJ,AAAc,KAAd;;IAEI,EAAE;IAEF,EAAG,CAAC,sBAAU,iBAAV,IAAsB;AAAA,KAEtB,mBAAY;KACZ,oBAAoB,2BAAkB,YAAa;AAAA,wBAAW;AAAA,OAE1D,aAAY,yBAAmB,cAAW,cAC3B;OAGf,gBAAQ;OAAR,AAAmB,YAAnB;AAAA;AAAA,qBA1K+B;SA0K/B;;;;qBAxK+B;SAwK/B;;;;QAN+C;WAUhD;AAAA,KACH,oCAAK,MAAC,YAAE,oBAAiB,eAAU,oBAAnC;KACW;KAAqB,oCAAW;KAAY,YAAE;KAAzD,kBAAW,QAAW,SAAU,MAAuB,MAAU;;;;;UAW9E;AAAA;;;;EAEH,kBAAa,EAAoB;EAQjC;YAAY;EAAZ,WAAY,YAAZ;AAAA,GAAI,WAAJ,AAAY,IAAZ;;GAA4B,UAAQ;GAAR;;;EAC5B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,WAAQ;GAAR;;;EAC5B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,WAAQ;GAAR;;;EAC5B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,WAAQ;GAAR;;;EAC5B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,WAAQ;GAAR;;;EAC5B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,WAAQ;GAAR;;;EAC5B;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,WAAQ;GAAR;;;EAE5B,EAAG,cAAa;AAAA,GACZ,YAAO;GACP,YAAO;;EAGX,aAAQ;;aAIL,uBAA2C;AAAA,EAE9C,GAAW,gBAAX;;;EAEA,EAAG,uBAAsB,MAAM;AAAA,GAC3B,aAAgC,AAAK;GACrC;cAAY,eAAZ;AAAA,IAAI,WAAJ,AAAY,OAAZ;;IACI,EAAG,SAAQ,MAAM;AAAA,KACb,GAAW,QAAX;;;KACA,GAAW,WAAX;;;KAEA,qBAAgB;;;;EAK5B,EAAG,sBAAqB,MAAM;AAAA,GAC1B,aAA+B,AAAK;GACpC;eAAY,eAAZ;AAAA,IAAI,YAAJ,AAAY,OAAZ;;IACI,EAAG,UAAQ,MAAM;AAAA,KACb,GAAW,SAAX;;;KACA,GAAW,YAAX;;;KAEA,qBAAgB;;;;EAK5B,EAAG,sBAAqB,MAAM;AAAA,GAC1B,aAA+B,AAAK;GACpC;eAAY,eAAZ;AAAA,IAAI,YAAJ,AAAY,OAAZ;;IACI,EAAG,UAAQ,MAAM;AAAA,KACb,GAAW,SAAX;;;KACA,GAAW,YAAX;;;KAEA,qBAAgB;;;;EAK5B,EAAG,0BAAyB,MAAM;AAAA,GAC9B,gBAAiC,AAAK;GACtC;eAAY,kBAAZ;AAAA,IAAI,YAAJ,AAAY,UAAZ;;IACI,GAAW,SAAX;;;IACA,GAAW,YAAX;;;IAuBA;IACQ;IACQ,mBAAY;IAAZ;;;;;;;;;;;;;;;;;;IACA,oBAAY;IAAZ;;;;;;;;;;;;;;;;;;IACH,kBAAW;IAAX;;;;;;;;;;;;;;;;;;;;;IACA,mBAAW;IAAX;;;;;;;;;;;;;;;;;;;;;IALb,SAAmB,OACX,oBACQ,mBACA,gBACH,gBACA,+BACe;;;EAMpC,EAAG,uBAAsB,MAAM;AAAA,GAC3B,aAAqC,AAAK;GAC1C;eAAY,eAAZ;AAAA,IAAI,YAAJ,AAAY,OAAZ;;IACI,EAAG,UAAQ,MAAM;AAAA,KACb,GAAW,SAAX;;;KACA,GAAW,YAAX;;;KAEA,qBAAgB;;;;EAK5B,EAAG,yBAAwB,MAAM;AAAA,GAC7B,eAAmC,AAAK;GACxC;eAAY,iBAAZ;AAAA,IAAI,YAAJ,AAAY,SAAZ;;IACI,EAAG,UAAQ,MAAM;AAAA,KACb,GAAW,SAAX;;;KACA,GAAW,YAAX;;;KACA,GAAW,iBAAX;;;KACA,GAAW,iBAAX;;;KAEA,uBAAkB;;;;EAK9B,EAAG,wBAAuB,MAAM;AAAA,GAC5B,cAAiC,AAAK;GACtC;eAAY,gBAAZ;AAAA,IAAI,YAAJ,AAAY,QAAZ;;IACI,EAAG,UAAQ,MAAM;AAAA,KACb,GAAW,SAAX;;;KACA,GAAW,YAAX;;;KAIA,sBAAiB;;;;;cASjC,oDAAoG;AAAA,EAIhG,aAA4B,OACpB,oBACK,qBACC,mBACH,gBACA;EAGX,kBAAa,EAAsB;EAEnC,EAAG,oBAAc,MACb;AAAA,mBAAW;;EAGf,EAAG,WAAU,QACT;AAAA;;;;;;;;;cAKR,iDAAgG;AAAA,EAI5F,aAA4B,OACpB,oBACK,kBACF,gBACA,gBACA;EAGX,kBAAa,EAAoB;EAEjC,EAAG,kBAAY,MACX;AAAA,iBAAS;;;cAMV,WAAsC;AAAA,EACzC,cAAc;EAEd;YAAY;EAAZ,WAAY,YAAZ;AAAA,GAAI,WAAJ,AAAY,IAAZ;;GAA4B,aAAa;;EACzC;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,aAAa;;EACzC;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,aAAa;;EACzC;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,aAAa;;EACzC;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,aAAa;;EACzC;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,aAAa;;EACzC;aAAY;EAAZ,YAAY,aAAZ;AAAA,GAAI,YAAJ,AAAY,KAAZ;;GAA4B,aAAa;;EAEzC,OAAO;;cAGJ,WACH;AAAA,SACI,yBACA,yBACA,yBACA,4BACA,2BACA,yBACA;;eAID,mBAAwC;AAAA,EAE3C,aAAQ;EACO;EAAf,oBAAe,4EAAY;EAI3B,kBAAa,EAAsB;EAEnC,EAAG,oBAAc,MACb;AAAA,mBAAW;;;cAKnB,WACI;AAAA,SAAO,UACG,YACA,YACA,eACG,YACH,cACE,aACD;;;;;mBC1jBR,gBAxBX;AAAA,CAiBoC,AAjBpC,kBAiBoC;CAFa,AAfjD,iBAeiD;CAWzC,YAAO;CACP,eAAU;;;;;OAIP,WAEH;AAAA,iBAAU;;SAYP,WAAiB;AAAA,EAGpB,EAAG,eAAS,MAAM;AAAA,GACd;GACA,aAAQ;;EAGZ,EAAG,mBAAa,GAGZ;AAAA,gBAAQ,oBAAqB,eAAW,8BAAc;;;gBAS9D,WAAwB;AAAA,EAEI,iBAAiB;EAGzC,kBAAK,EAAiB,kBAAa;EAEnC;EAEA,kBAAK,EAAsB,kBAAa;EAEhB,eAAe;;cAKpC,qBAA6D;AAAA,EAEhE,uBAAuB,oBAAqB,KAAM,CAAE;EACpD,sBAAsC,AAAK;EAG3C;EAGA,kBAAc;EAGd,OAAO;;UAKJ,WACH;AAAA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI;;;WAID,WACH;AAAA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI;;;UAID,WACH;AAAA;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI;;;WAID,WAAmB;AAAA,EAEtB,EAAG,eAAS,MACR;AAAA;;EAGJ,aAAQ;EAER;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI;;;MAOM,0BACV;AAAA,kBAAW,OAAQ;;OAGT,0BACV;AAAA,SAAO,iBAAY,OAAQ;;QAGjB,wBACV;AAAA,oBAAa,OAAQ;;iBAMzB,gBAAsC;AAAA,EAGlC,iBAAY;EACZ,kBAAa;EAGb;EAEA,OAAO;;;;;yBA8BJ,WARX;AAAA,CAM+C,AAN/C,YAM+C;CAFE,AAJjD,cAIiD;CAFjB,AAFhC,YAEgC;CAQxB,iBAAU,mBAAW,EAAG,KAAM;CAC9B,QAAQ,GAAW;;;;;OAIhB,WAAgB;AAAA;WAIvB,YAEI;AAAA;;WAIG,WAAmB;AAAA;UAInB,WAAkB;AAAA;UAIlB,WAAkB;AAAA;WAIlB,WAAmB;AAAA;cAM1B,WAEI;AAAA,SAAO;;cAIX,iBAEI;AAAA,SAAO,cAAS;;YAIpB,WAEI;AAAA,SAAO;;YAIX,gBAEI;AAAA,SAAO,YAAO;;eAIlB,WAEI;AAAA,SAAO;;eAIX,mBAEI;AAAA,SAAO,eAAU;;;;;qBChPd,WAAe;AAAA,CAClB,eAAU;CACV,eAAU;CACV,aAAQ;CACR,aAAQ;;;;;QAKL,iBAA8B;AAAA,EAEjC,GAAW,UAAX;;;EACA,GAAO,qBAAgB,WAAW,IAAlC;AAAA;;EAEA,kBAAa;EACb,UAAK,GAA6B;;WAI/B,iBAAgC;AAAA,EAEnC,GAAW,UAAX;;;EAEA,eAAe,gCAAe;EAE9B,EAAG,WACC;AAAA,aAAK,GAA+B;;;OAQrC,mBAAgC;AAAA,EAE3B,UAAa;EAAb;EAAR,IAAO,EAAC,0FAAR;AAAA;;EAEA,WAAU;EAAV;;2BAAuB;SAAvB;AAAA,oBAAuB;;EAEvB,UAAK,EAAsB;EAE3B,SAAa;EAAb;;yBAAuB;;OAAvB;uBAAuB;;OAAvB;uBAAuB;;OAAvB;uBAAuB;;OAAvB;0BAAuB;;OAAvB;qBAAuB;;OAAvB;uBAAuB;;OAAvB;yBAAuB;;OAAvB;wBAAuB;;;EAAvB,oBAAuB;;UAKpB,mBAA0F;AAAA,EAEtF,UAAa;EAAb;EAAP,IAAO,yFAAP;AAAA;;EAEA,UAAK,EAAwB;EAE7B,SAAa;EAAb;;yBAAuB;;OAAvB;uBAAuB;;OAAvB;uBAAuB;;OAAvB;uBAAuB;;OAAvB;0BAAuB;;OAAvB;qBAAuB;;OAAvB;uBAAuB;;OAAvB;yBAAuB;;OAAvB;wBAAuB;;;EAAvB,oBAAuB;EAEhB,yBAAa;;WAKjB;AAAA;;;EAEH,gBAAgB,eAAI;EAEpB,EAAG,cAAa,MAAM;AAAA,UAAO;;EAE7B,kBAAkB;EAElB,OAAO;;cAKJ,cAAuC;AAAA,EAE1C,gBAAgB,eAAI;EAEpB,EAAG,cAAa,MAAM;AAAA,UAAO;;EAE7B;EAEA,OAAO;;MAMJ,qBAEH;AAAA,kBAAW,GAAI;;OAIZ,qBAEH;AAAA,mBAAY,GAAI;;QAIb,kBAA2C;AAAA,EAE9C,kBAAa,EAAmB;EAChC,kBAAa,GAAI;;cAOd,cAA0C;AAAA,EAE7C,GAAW,OAAX;;;EAEA,gBAAgB,eAAM;EAEtB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAK3B,YAAY,gCAAkB,OACtB,cACI,cACD;EAGX,SAAI;EAEJ,OAAO;;aAIJ,cAAyC;AAAA,EAE5C,GAAW,OAAX;;;EAEA,gBAAgB,eAAK;EAErB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAK3B,YAAY,+BAAiB,OACrB,cACI,cACD;EAGX,SAAI;EAEJ,OAAO;;aAIJ,cAAyC;AAAA,EAE5C,GAAW,OAAX;;;EAEA,gBAAgB,eAAK;EAErB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAK3B,YAAY,+BAAiB,OACrB,cACI,cACD;EAGX,SAAI;EAEJ,OAAO;;gBAIJ,uBAA0E;AAAA,EAE7E,GAAW,OAAX;;;EAEA,gBAAgB,eAAQ;EAExB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAOvB,kBAAkB;EAClB,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,mBAAmB;EAEnB,EAAG,aAAY,MAAM;AAAA,GACjB,cAAe;GACf,cAAe;GACf,WAAe;GACf,WAAe;GACf,eAAe;;EAGvB,YAAY,oBAAY,OAChB,cACI,mBACI,0BACA,uBACH,oBACA,mCACe;EAG5B,SAAI;EAEJ,OAAO;;aAIJ,uBAAoE;AAAA,EAEvE,GAAW,OAAX;;;EAEA,gBAAgB,eAAK;EAErB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAK3B,oBAAoB;EACpB,EAAG,aAAY,MACX;AAAA,mBAAgB;;EAGpB,YAAY,uBAAe,OACnB,cACI,qBACM;EAGlB,SAAI;EAEJ,OAAO;;eAIJ,uBAAuE;AAAA,EAE1E,GAAW,OAAX;;;EAEA,gBAAgB,eAAO;EAEvB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAK3B,YAAY,mBAAW,OACf,cACI,gBACC,4BACA;EAGb,SAAI;EAEJ,OAAO;;cAKJ,uBAAsE;AAAA,EAEzE,GAAW,OAAX;;;EAEA,gBAAgB,eAAM;EAEtB,EAAG,cAAa,MAAM;AAAA,GAElB;;;GACA,OAAO,yBAAgB;;EAK3B,iBAAiB;EACjB,EAAG,aAAY,MACX;AAAA,gBAAa;;EAGjB,YAAY,gCAAkB,OACtB,cACI,cACD,kBACI;EAGf,SAAI;EAEJ,OAAO;;OAMG,cAAgD;AAAA,EAAO;oBAAa,QAAb;+BAAa;SAAb;AAAA,iCAAa;;;OACpE,cAAgD;AAAA,SAAO,eAAM;;SAC7D,cAAgD;AAAA,SAAO,eAAM;;QAC7D,cAAgD;AAAA,SAAO,eAAM;;QAC7D,cAAgD;AAAA,SAAO,eAAM;;WAC7D,cAAgD;AAAA,SAAO,eAAM;;QAC7D,cAAgD;AAAA,SAAO,eAAM;;UAC7D,cAAgD;AAAA,SAAO,eAAM;;SAC7D,cAAgD;AAAA,SAAO,eAAM;;SAIpE,cACH;AAAA,EAAY;EAAZ,OAAO,AAAK,eAAU,QAAV,yBAAU,OAAV,QAAU;;gBAGnB,uBAAkD;AAAA,EAE9C;;OACH;GAAoC,sBAAmB;;OAEvD;GAAoC,oBAAmB;;OACvD;GAAoC,oBAAmB;;OAFvD;GAAoC,oBAAmB;;OAGvD;GAAoC,uBAAmB;;OACvD;GAAoC,kBAAmB;;OACvD;GAAoC,oBAAmB;;OACvD;GAAoC,sBAAmB;;OACvD;GAAoC,qBAAmB;;;EAG3D,oBAAe;;;;yBAyFZ,WAbX;AAAA,CAW+B,AAX/B,eAW+B;CADD,AAV9B,cAU8B;CADD,AAT7B,aAS6B;CADA,AAR7B,aAQ6B;CADA,AAP7B,aAO6B;CADE,AAN/B,eAM+B;CADJ,AAL3B,WAK2B;CADK,AAJhC,gBAIgC;CADH,AAH7B,aAG6B;CADA,AAF7B,aAE6B;;;;;WAezB,WAEI;AAAA,SACI,AAAC,0BACA,eAAc,aAAS,OACvB,iBAAgB,gBAAY,QAAO,KACnC,wBAAuB,WAAO,QAC9B,cAAa,aAAS,OACtB,gBAAe,eAAW,OAC1B,cAAa,aAAS,OACtB,cAAa,aAAS,OACtB,eAAc,aAAS,OACvB,gBAAe,cAAU,OACzB,iBAAgB;;SAIlB,WAAiB;AAAA,EAEpB,aAAQ;EACR,aAAQ;EACR,gBAAW;EACX,WAAM;EACN,eAAU;EACV,aAAQ;EACR,aAAQ;EACR,aAAQ;EACR,cAAS;EACT,eAAU;;;;iBCtdP,gBA3BX;AAAA,CA2BW;;;CAiEkB,AA5F7B,oBA4F6B;CArEA,AAvB7B,oBAuB6B;CAZK,AAXlC,iBAWkC;CAFO,AATzC,cASyC;CAFT,AAPhC,eAOgC;CAFD,AAL/B,cAK+B;CAwBvB,uBAAM;CAEN,gBAAW;CAEX,8BAAyB;CACzB,+BAA0B;CAE1B,qBAAa,EAAS;CACtB,qBAAa,EAAY;CACzB,qBAAa,EAAW;CAExB,qBAAa,EAAc;CAC3B,qBAAa,GAAe;CAC5B,qBAAa,GAAW;CAExB,qBAAa,GAAY;CACzB,qBAAa,GAAU;CACvB,qBAAa,GAAc;CAE3B,qBAAa,GAAY;CACzB,qBAAa,GAAc;CAE3B,qBAAa,GAAY;CACzB,qBAAa,GAAc;CAC3B,qBAAa,GAAc;CAC3B,qBAAa,GAAe;CAE5B,qBAAa,GAAY;CACzB,qBAAa,GAAc;CAC3B,qBAAa,GAAc;CAE3B,qBAAa,GAAc;CAC3B,qBAAa,GAAgB;CAC7B,qBAAa,GAAgB;CAC7B,qBAAa,GAAkB;CAE/B,qBAAa,GAAgB;CAC7B,qBAAa,GAAkB;CAC/B,qBAAa,GAAgB;CAC7B,qBAAa,GAAoB;CACjC,qBAAa,GAAmB;CAGhC,EAAG,mBACC;AAAA,YAAK;;CAGT,YAAsC,yBAA0B;CAChE,EAAG,UAAS,MACR;AAAA,kBAAgB;;;;;;;2BAMjB,gBACH;AAAA,EAAG;EAAH,EAAG,gBAAgB,UAAhB,4BAAgB,SAAhB,uBAAgB,QACf;AAAA,uCAAK,MAAE,kBAAK,qCAAiC,QAAK,wGAAlD;;;OAOD,iBAA0E;AAAA,EAE7E,GAAW,UAAX;oFrB6HsB,CAAC,QqB7HF,uDrB6HoB;;EqBzHzC,YAAyB;EAAzB;;;EAEA,iBAAe;EACf,sBAAoB;EACpB;YAAc;EAAd;;yBAA2B;SAA3B;AAAA,kBAA2B;;EAC3B;EAGI,EAAG,cAEC;AAAA,oCAA4B;;EAGhC,EAAG,eAEC;AAAA,qCAA6B;;EAGrC,oBAAe;;UAKZ,iBAAwC;AAAA,EAE3C,GAAW,UAAX;oFrBgGsB,CAAC,QqBhGF,4DrBgGoB;;EqB9FzC,oBAAe;EAEf,EAAG,uBAAgB,MAAM;AAAA,GAGrB,iBAAe;GACf;GACO,4BAAiB;SAErB;AAAA,GAEH,oCAAM,+BAA2B,oBAAY,yBAAqB,kBAAI,6CAAtE;GACA,OAAO;;;OAQD,gBAEV;AAAA,EAAY;EAAZ,OAAO,AAAK,eAAa,UAAb,yBAAa,SAAb,QAAa;;SAStB,WAIH;AAAA,IAAG,qBAAe,GAUV;AAAA,GAAc;;;IAAd,cAAc;IACV,EAAG,YAAU,QAAQ,WAAU,aAAa;AAAA,KAExC;KACA,UAAS;;;;;kBAkBtB,qBAA2D;AAAA,EAE9D,EAAG,qBAAe,GAAG;AAAA,GACjB,cAAqB,SAAS,AAAC,UAAS,QAAS,WAAY;GAC9C;;;IAAf,eAAe;IACX,EAAI,eAAc,sBACd;AAAA,eAAU;;;;EAKtB,OAAO;;UAMX,YAEI;AAAA,YAAK;;aAIT,YAEI;AAAA,YAAK;;cAIT,YAEI;AAAA,YAAK;;WAMT,YAII;AAAA,YAAK,GAAY;;SAIrB,YAII;AAAA,YAAK,GAAU;;aAInB,YAII;AAAA,YAAK,GAAc;;aAMvB,YAII;AAAA,YAAK,GAAc;;cAIvB,YAII;AAAA,YAAK,GAAe;;WAIxB,YAII;AAAA,YAAK,GAAY;;aAIrB,YAII;AAAA,YAAK,GAAc;;aAMvB,gBAEI;AAAA,YAAK,GAAc;;WAIvB,gBAEI;AAAA,YAAK,GAAY;;aAIrB,gBAEI;AAAA,YAAK,GAAc;;eAMvB,gBAEI;AAAA,YAAK,GAAgB;;aAIzB,gBAEI;AAAA,YAAK,GAAc;;eAIvB,gBAEI;AAAA,YAAK,GAAgB;;iBAIzB,gBAEI;AAAA,YAAK,GAAkB;;eAO3B,gBAEI;AAAA,YAAK,GAAgB;;iBAIzB,gBAEI;AAAA,YAAK,GAAkB;;eAI3B,gBAEI;AAAA,YAAK,GAAgB;;mBAIzB,gBAEI;AAAA,YAAK,GAAoB;;kBAI7B,gBAEI;AAAA,YAAK,GAAmB;;aAM5B,iBAEI;AAAA,YAAK,GAAc;;WAIvB,iBAEI;AAAA,YAAK,GAAY;;YAMrB,YAEI;AAAA;;WAIG,WAAmB;AAAA,EAEtB,GAAO,kBAAa,OAApB;AAAA,kFrB3LsB,CAAC,QqB2LK,qCAAgC,kBAAI,OrB3LvB;;EqB+LzC,iBAAY;EAEZ,sBAAc,EAAS;EACvB,sBAAc,EAAY;EAC1B,sBAAc,EAAW;EAEzB,sBAAc,EAAc;EAC5B,sBAAc,GAAe;EAC7B,sBAAc,GAAW;EAEzB,sBAAc,GAAY;EAC1B,sBAAc,GAAU;EACxB,sBAAc,GAAc;EAE5B,sBAAc,GAAY;EAC1B,sBAAc,GAAc;EAE5B,sBAAc,GAAY;EAC1B,sBAAc,GAAc;EAC5B,sBAAc,GAAc;EAC5B,sBAAc,GAAe;EAE7B,sBAAc,GAAY;EAC1B,sBAAc,GAAc;EAC5B,sBAAc,GAAc;EAE5B,sBAAc,GAAc;EAC5B,sBAAc,GAAgB;EAC9B,sBAAc,GAAgB;EAC9B,sBAAc,GAAkB;EAEhC,sBAAc,GAAgB;EAC9B,sBAAc,GAAkB;EAChC,sBAAc,GAAgB;EAC9B,sBAAc,GAAoB;EAClC,sBAAc,GAAmB;EAEjC,UAAK;EAEL,YAAwC,yBAA0B;EAClE,EAAG,UAAS,MACR;AAAA,sBAAmB;;;YAK3B,WAA2B;AAAA,EAEvB,oBAAoB;EAEpB,EAAG,qBAAe,GACd;AAAA,GAAc;;;IAAd,cAAc;IACV,EAAG,YAAU,MACT;AAAA,OAAG,EAAC,gBAEA;AAAA;;;;;;;;;;;;;;;;UlB5JZ;QkB4JY;;;;;;;;EAMhB,mBAAmB;EAEnB,OAAO,iBAAiB;;QAMrB,YAAiB;AAAA,EAEpB,kBAAkB;EAElB,KAAM,cACF,cAAc;EAGlB,cAAS;EAET,UAAK;EAEL;;SAKG,WAAiB;AAAA,EAEpB,eAAU;EAEN,UAAK;EAET,eAAU;;UAId,aAA0B;AAAA,EAEF,sBAAsB,AAAC,WAAU;EAGrD;EAEA,UAAK,EAAW;EAGhB,EAAG,qBAAe,GACd;AAAA,GAAc;;;IAAd,cAAc;IACV,EAAG,YAAU,MACT;AAAA;;;;;;;;;sBAAe;OAAf;;;;;;;;;2BAAe;;;OAAf;;;;;WlB1DR;SkB0DQ,eAAe;;;;;;;;EAKP,oBAAoB,AAAC,WAAU;;4BAIvD,WAAoC;AAAA,EAE7B,gDAAiC,KAAK,uCAAkC;EAI3E,EAAG,sCAAgC,GAAG;AAAA,GAClC;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IACI,EAAG,mBAAkB;AAAA;;IACrB,EAAG,EAAC,eAEA;AAAA;;;;;;;;;;;;;;;;SlBtOR;OkBsOQ;;;;;;GAKR,8BAAyB;GACzB,8BAAyB;;EAG7B,EAAG,uCAAiC,GAAG;AAAA,GACnC;cAAc;GAAd,YAAc,aAAd;AAAA,IAAI,cAAJ,AAAc,KAAd;;IACI,EAAG,oBAAkB;AAAA;;IAErB;;;;;;;;;;;;;;;;QlBrNJ;MkBqNI,eAAc;;;IAAd;;;;;;;;;;;GAEJ,+BAA0B;GAC1B,+BAA0B;;;cAKlC,WAEI;AAAA,SAAO,aAAa;;YAIxB,WAEI;AAAA,SAAQ,iBAAa,kBAAI,QAAI,oBAAM,qBAAiB;;;;;kBCzfxD,sBAA2C;AAAA,CAEvC,YAAO;CACP,cAAS,gBAAW;CAEpB,aAAQ;CACR,cAAS;;;;;WAIb,WACI;AAAA,SAAQ,qBAAiB,eAAC,SAAK,eAAC;;gBAM7B,aAAmC;AAAA,EAEtC,EAAI,QAAO,GAAK;AAAA,UAAO;;EACvB,EAAI,QAAO,GAAK;AAAA,UAAO;;EACvB,EAAI,QAAO,YAAS;AAAA,UAAO;;EAC3B,EAAI,QAAO,aAAU;AAAA,UAAO;;EAE5B,OAAO;;mBAKJ,gBAA+C;AAAA,EAElD,EAAI,MAAK,GAAK;AAAA,UAAO;;EACrB,EAAI,MAAK,GAAK;AAAA,UAAO;;EACrB,EAAI,MAAK,YAAS;AAAA,UAAO;;EACzB,EAAI,MAAK,aAAU;AAAA,UAAO;;EAE1B,OAAO;;oBAMX,gBAA8C;AAAA,EAE1C,aAAQ;EACR,cAAS;;WAQb,WAA4B;AAAA,SAAO,mBAAY,WAAW,eAAE,GAAI,WAAW,eAAE;;YAC7E,WAA6B;AAAA,SAAO,mBAAY,aAAG;;cACnD,WAAkC;AAAA,SAAO,sBAAe,EAAG,EAAG,aAAG;;SACjE,WAA8B;AAAA,SAAQ,aAAR;;SAC9B,WAA8B;AAAA,SAAQ,cAAR;;0BAC9B,WAAkC;AAAA,EAAO;;;;;;;;;;kBAwBzC,kBAfJ;AAAA,CAYwB,AAZxB,cAYwB;CANsB,AAN9C,YAM8C;CAWtC,cAAS;CACT,WAAM;;;;;eAKH,gBAA0C;AAAA,EAO7C,cAAS;EAEL,WAAM,mBAAgB,GAAI;EAE9B,cAAS;;YAMb,WAEI;AAAA,SAAO;;YAIX,gBAAuC;AAAA,EAEnC,yCAAoC;EAEpC,OAAO,YAAO;;WAIlB,WAEI;AAAA,SAAO;;;;;kBC5JJ,kBAXX;AAAA,CAK4D,AAL5D,aAK4D;CADA,AAJ5D,aAI4D;CADA,AAH5D,gBAG4D;CAUpD,YAAK;CAEL,GAAW,WAAX;oFvByMsB,CAAC,QuBzMF,qCvByMoB;;CuBtMzC,EAAG,qBAAoB,MACnB;AAAA,oBAAW;;CAIf,EAAG,kBAAiB,MAChB;AAAA,iBAAQ;;CAIZ,EAAG,kBAAiB,MAChB;AAAA,iBAAQ;;CAIZ,sBAAO;;;;;;sBAIF,WAA+B;AAAA,EAEpC;EAEA,EAAG,iBAAW,MAAM;AAAA,GAIX,GAAI,mBAAJ;IAAI,kBAAY,sBAAc,EAAE,EAAE,mBAAc;;GAArD,YAAS;GAGT,EAAG,+BAAyB,GACxB;AAAA,mBAAQ;;;EAMhB,kBAAW,CAAC,EAAC;EAEb,eAAQ,CAAC,EAAC;EACV,eAAQ,CAAC,EAAC;;gBAIL,aAAqC;AAAA,EAE1C,qBAAgB,AAAK;EACrB,OAAO,6CAAmB;;aAId,WAAqB;AAAA,EAEjC,YAAK;EACL,qBAAgB;EAEhB;;gBAQG,aAA0C;AAAA,EAE7C,EAAG,kBAAY,MAAM;AAAA,UAAO;;EAE5B,OAAO,sCAAsC,GAAI;;qBAK9C,aAA6C;AAAA,EAEhD,EAAG,mBAAO,MAAM;AAAA,UAAO;;EACvB,EAAG,cAAQ,MAAM;AAAA,UAAO;;EAGxB,WAAW,cAAS;EACpB,WAAW,cAAS;EAEpB,EAAG,gBAAU;AAAA,GACT,UAAU,OAAO;GACjB,UAAU,OAAO;GACjB,EAAG,QAAO,mBAAQ,KAAK;AAAA,WAAO;;GAC9B,EAAG,QAAO,mBAAQ,KAAK;AAAA,WAAO;;GAC9B,EAAG,QAAO,mBAAM,OAAO,KAAK;AAAA,WAAO;;GACnC,EAAG,QAAO,mBAAM,OAAO,KAAK;AAAA,WAAO;;SAChC;AAAA,GACH,EAAG,QAAO,kBAAO;AAAA,WAAO;;GACxB,EAAG,QAAO,kBAAO;AAAA,WAAO;;GACxB,EAAG,QAAO,mBAAM,MAAM;AAAA,WAAO;;GAC7B,EAAG,QAAO,mBAAM,MAAM;AAAA,WAAO;;;EAGjC,OAAO;;UASX,cAA2C;AAAA,EAEvC,EAAG,QAAO,MAAM;AAAA,UAAO,UAAK;;EAE5B,EAAG,uBAAiB,MAChB;AAAA;;;;aAAiB,QAAjB;aAAiB,QAAjB;aAAiB,QAAjB;aAAiB,QAAjB;;;;;;;;;;;;;;;;;;;IdVA,acUA;;;;adRA;KcQA,AdxBA,QcwBA;KdvBA,OcuBA;KdtBA,OcsBA;KdrBA,OcqBA;KdpBA,OcoBA;KdlBA,QckBA;KdjBA,OciBA;KdhBA,OcgBA;KdfA,OceA;KddA,OccA;;;KdFI,QcEJ;KdDQ,OcCR;KdAQ,OcAR;KdEI,QcFJ;KdGQ,OcHR;KdIQ,OcJR;KdOI,QcPJ;KdQQ,OcRR;KdSQ,OcTR;KdWI,QcXJ;KdYQ,OcZR;KdaQ,OcbR;;;KdmBI,QcnBJ;KdoBQ,OcpBR;KdqBQ,OcrBR;KduBI,QcvBJ;KdwBQ,OcxBR;KdyBQ,OczBR;Kd4BI,Qc5BJ;Kd6BQ,Oc7BR;Kd8BQ,Oc9BR;KdgCI,QchCJ;KdiCQ,OcjCR;KdkCQ,OclCR;;;;;;;;;;;;;;;;;;;;;;;EAGJ,UAAK;EAEL,yBAAkB,QAAI;EAEtB,OAAO;;aAKX,aAA4B;AAAA,EAExB,EAAG,OAAM,YACL;AAAA,UAAO;;EAGX,EAAG,uBAAiB,MAChB;AAAA,gCAAsB;;EAG1B,OAAO,aAAQ;;aAInB,aAA4B;AAAA,EAExB,EAAG,OAAM,YACL;AAAA,UAAO;;EAGX,EAAG,uBAAiB,MAChB;AAAA,gCAAsB;;EAG1B,OAAO,aAAQ;;YAMV,aAAwC;AAAA,EAI7C,EAAG,uBAAiB,MAAM;AAAA,GAEtB;;;;;;;;;;GAAsB,SAAY;GAAZ,SAAkB;GAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAtB;GAGA,EAAG,EAAC,yBACA;AAAA,MAAG,gBAEC;AAAA,KAAS;0BAAwB;KAAxB,qBAAwB;KAAxB,oBAAwB;KAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAT,gBAAS;;;;EAOrB,OAAO,yCAAe;;gBAM1B,aAAsC;AAAA,EAGlC,EAAG,cAAQ,MACP;AAAA,KAAG,KACC;AAAA,oBAAS,mBAAW,cAAO,EAAG,cAAO;UAErC;AAAA,oBAAS;;;EAIjB,OAAO,gBAAW;;cAMtB,aAAgC;AAAA,cAAY;;mBlB/LwB;AAAA;;;;;gBmBgD7D,mBAAwF;AAAA,CAG3F,oBAAe;CACf,mBAAc;CAEd,eAAyB;CACzB,EAAG,4BAA2B,QAAQ,2BAA2B,OAC7D;AAAA,IAAG,qBAAoB,MACnB;AAAA,cAAW;SAEX;AAAA,cAAW;;;CAKnB,YAAO,kCAAiB,YAGX,kBACD,0BACE,8BACE,4BAOJ,yBACC,2BACC,yBAEJ,sBACA,4BACM,oCACE,wCACE,kCAEP,+BACK,8BACN,iCACS,+BAEZ,2BACO,iCACD,8BAEF,kCACM,yCAEC,uCACH,mCACD;CAIhB,qBAAgB,EAA4B;CAE5C,oBAAoB;CACpB,kBAAkB;CAGlB,sBAAM;CAEN;;;;;;;EA6CI,MA7CJ;EA8CI,MA9CJ;EA+CI,KA/CJ;EAgDI,KAhDJ;;;;;;;;;;;;;EAkDI,MAlDJ;;;;;;;;;;;;;EAwDI,MAxDJ;;;;;;;;;;;;;;EAgEI,MAhEJ;;;;;;;;;;;;;EAsEI,MAtEJ;;;;;;;;WA9HI,WAAoB;AAAA,SAAO;;YAC3B,aAAsB;AAAA,SAAO,mBAAY;;YAEzC,WAAoB;AAAA,SAAO;;YAC3B,aAAsB;AAAA,SAAO,mBAAY;;kBAEzC,WAA0B;AAAA,SAAO;;kBACjC,aAA4B;AAAA,SAAO,yBAAkB;;sBAErD,WAA8B;AAAA,SAAO;;sBACrC,aAAgC;AAAA,SAAO,6BAAsB;;oBAE7D,WAA4B;AAAA,SAAO;;oBACnC,aAA8B;AAAA,SAAO,2BAAoB;;cAGzD,WAAsB;AAAA,SAAO;;cAC7B,aAAwB;AAAA,SAAO,qBAAc;;mBAE7C,WAA2B;AAAA,SAAO;;mBAClC,aAA6B;AAAA,SAAO,0BAAmB;;aAGvD,WAAqB;AAAA,SAAO;;aAC5B,aAAuB;AAAA,SAAO,oBAAa;;sBAE3C,WAA8B;AAAA,SAAO;;sBACrC,aAAgC;AAAA,SAAO,6BAAsB;;WAK7D,WAAmB;AAAA,SAAO;;WAC1B,aAAqB;AAAA,SAAO,gBAAW;;kBAGvC,WAA0B;AAAA,SAAO;;kBACjC,aAA4B;AAAA,SAAO,yBAAkB;;iBAErD,WAAyB;AAAA,SAAO;;iBAChC,aAA2B;AAAA,SAAO,wBAAiB;;eAGnD,WAAuB;AAAA,SAAO;;eAC9B,aAAyB;AAAA,SAAO,sBAAe;;qBAE/C,WAA6B;AAAA,SAAO;;qBACpC,aAA+B;AAAA,SAAO,4BAAqB;;sBAG3D,WAA8B;AAAA,SAAO;;sBACrC,aAAgC;AAAA,SAAO,6BAAsB;;mBAE7D,WAA2B;AAAA,SAAO;;mBAClC,aAA6B;AAAA,SAAO,0BAAmB;;kBAEvD,WAA0B;AAAA,SAAO;;kBACjC,aAA4B;AAAA,SAAO,yBAAkB;;gBA2EtD,YAAkC;AAAA,EAErC;;;;;;;GAqCI,MArCJ;GAsCI,MAtCJ;GAuCI,KAvCJ;GAwCI,KAxCJ;;;;;;;;;;;;;GA0CI,MA1CJ;;;;;;;;;;;;;GAgDI,MAhDJ;;;;;;;;;;;;;;GAwDI,MAxDJ;;;;;;;;;;;;;GA8DI,MA9DJ;;;EACA,OAAO,8BAAyB;;0BAM3B,aAA6C;AAAA,EAElD,uDAA6B;EAC7B;;;;;;;GA2BI,MA3BJ;GA4BI,MA5BJ;GA6BI,KA7BJ;GA8BI,KA9BJ;;;;;;;;;;;;;GAgCI,MAhCJ;;;;;;;;;;;;;GAsCI,MAtCJ;;;;;;;;;;;;;;GA8CI,MA9CJ;;;;;;;;;;;;;GAoDI,MApDJ;;;EACA,wBAAmB;;uBAWvB,YACI;AAAA;;;;;;;GAcI,MAdJ;GAeI,MAfJ;GAgBI,KAhBJ;GAiBI,KAjBJ;;;;;;;;;;;;;GAmBI,MAnBJ;;;;;;;;;;;;;GAyBI,MAzBJ;;;;;;;;;;;;;;GAiCI,MAjCJ;;;;;;;;;;;;;GAuCI,MAvCJ;;;;kBAIG,WAA0B;AAAA,EAE7B,SAAS;EACT,SAAS;EACT,UAAU;EACV,UAAU;EACV,UAAU;EACV,UAAU;EAEV,EAAG,sBAAU,MAAM;AAAA,GACf,MAAM;GACN,MAAM;GACN,KAAK;GACL,KAAK;GAEQ;GAAP;GAAO;QAET;IAFE,MAEU;;QADZ;IADE,MACW,MAAI;;;IADf,MAGM;;GAHZ,MAAM;GAMO;GAAP;GAAO;QACT;IADE,MACW,AAAC,MAAI,IAAG,AAAC,MAAI;;QAC1B;IAFE,MAEW,MAAM;;;IAFjB,MAGM;;GAHZ,MAAM;SAMH;AAAA,GAEU;GAAP;GAAO;QAET;IAFE,MAEU;;QADZ;IADE,MACW,MAAI;;;IADf,MAGM;;GAHZ,MAAM;GAMO;GAAP;GAAO;QACT;IADE,MACW,MAAI;;QACjB;IAFE,MAEW;;;IAFX,MAGM;;GAHZ,MAAM;;EAQV,qBAAiB,GAAI,GAAI,IAAK;;aAKlB,WAAqB;AAAA,EAEjC,YAAO;EACP,oBAAe;EACf,mBAAc;EAEd;;mBnB1MgE;AAAA;;;;;iBoBrB9C,gBAA6B;AAAA,CAC/C,YAAO;CACP,cAAS;;;;;OAGS,WzBuHL;AAAA;WyBjHK,WAElB;AAAA;;WAKkB,WAAmB;AAAA;SAKlC,WAAiB;AAAA,EAEpB;YAAU;EAAV,WAAU,YAAV;AAAA,GAAK,QAAL,AAAU,IAAV;;GACI;GACA,IAAI;;EAGR,cAAS;EACT,cAAS;;YAIN;AAAA;;;;EAEH,QAAQ,mBAAoB;EAE5B,QAAQ,WAAY;AAAA,GAChB,EAAG,EAAC,QAAQ;AAAA,IACR;IACA,iCAAc;;GAElB;;EAGJ,iBAAY;EAEZ,OAAO;;;;iCC9CJ,kBAA+B;AAAA,CAElC,WAAW;CACX,kBAAa,wDAAe;CAC5B,cAAS;;;;;UAIN,WAAmB;AAAA,EAEtB,sBAAiB;EACjB,kBAAa;EACb,cAAS;;OAIN,qBAA8C;AAAA,EAEjD,EAAG,eAAc,MAAM;AAAA,GACnB,eAAO,sCAAmC,uBAA1C;GACA,OAAO;;EAGX,sBAAoB;EAEpB;YAAgB;EAAhB;;;oBAAiC;EAKjC;EAIA,EAAG,qBAEC;AAAA;;EAGJ,EAAG,sBAEC;AAAA;;EAGJ,OAAO;;UAIJ,gBAAuC;AAAA,EAG1C,EAAG,EAAC,2BAAkB,QAAQ;AAAA,GAC1B,eAAO,uBAAmB,QAAK,WAAQ,yBAAY,iEAAnD;GACA,OAAO;;EAKX,iBAAiB,wBAAgB;EAC7B;EAGA,sBAAoB;EAEjB;sBAAkB,QAAlB;AAAA,yCAAkB;SAAlB;AAAA;;;OAIJ;AAAA;;;EAIH,EAAG,EAAC,aAEA;AAAA,UAAO,AAAK,wBAAe;SAExB;AAAA,GAGH,qBAAqB,wBAAgB;GACrC,EAAI,mBAAkB,MAClB;AAAA,WAAO,AAAK;;GAMhB;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IAII,YAAgB,uBAAY,MAAO;IAEnC,EAAG,UAAS,MACR;AAAA,YAAO,AAAK;;;GAKpB,OAAO;;;WAQR;AAAA;;;;;;EAIH,cAAyB;EAEzB,EAAG,EAAC,aAEA;AAAA,UAAO,CAAC,AAAK,wBAAe;SAEzB;AAAA,GAEH,qBAAqB,wBAAgB;GACrC,EAAI,mBAAkB,MAClB;AAAA,MAAG,aACC;AAAA,YAAO,CAAC,AAAK;WAEb;AAAA,kBAAc,AAAK;;;GAO3B;aAAc;GAAd,WAAc,YAAd;AAAA,IAAI,aAAJ,AAAc,IAAd;;IAII,YAAuB,2BAAgB,MAAO,KAAM;IAEpD,EAAG,UAAS,MAGR;AAAA,OAAG,eAAc,eAAe,GAC5B;AAAA,aAAO,CAAC,AAAK,MAAM;YAEnB;AAAA,qBAAe;;;;;EAS/B,OAAO;;OAIJ,gBACI;AAAA,oCAAkB;;;;2BChKtB,iBALX;AAAA,CAGgC,AAHhC,eAGgC;CAGxB;CACA,aAAQ;;;;;;UAGL,WAAmB;AAAA;WACnB,WAAmB;AAAA;eACnB,YAAmC;AAAA;aACnC,YAAiC;AAAA;eACjC,YAAmC;AAAA;eACnC,YAAmC;AAAA;aACnC,YAAiC;AAAA;eACjC,YAAmC;AAAA;gBACnC,YAAoC;AAAA;aACpC,YAA+B;AAAA;WAC/B,YAA6B;AAAA;iBAC7B,YAAsC;AAAA;UACtC,WAAkB;AAAA;QAClB,WACH;AAAA,iBAAU;;QAEP,WACH;AAAA,iBAAU;;;;2BCXP,mBAA+C;AAAA,CAElD,cAAO,mBAAW,AAAQ,2BAAc,MAAtB,EAA4B,AAAQ,2BAAc,MAAtB;CAC9C,aAAM,mBAAW,AAAC,2BAAc,IAAK,AAAC,cAAO,EAAI,AAAC,2BAAc,IAAK,AAAC,cAAO;CAG7E,eAAU;CAEV,EAAG,aAAY,MAAM;AAAA,EAEjB,EAAG,qBAAoB,MAAM;AAAA,kBAAU;;EACvC,EAAG,kBAAiB,MAAM;AAAA,iBAAO;;EACjC,EAAG,iBAAgB,MAAM;AAAA,gBAAM;;;;;;;UAMhC,WAAmB;AAAA,EAEtB,EAAG,gBAAU,MACT;AAAA;;EAGJ,EAAG,mBAAa,MACZ;AAAA;;;QAKD,WAAgB;AAAA,EACnB;EACA,wBAAiB;EACjB,uBAAgB;EAChB,yBAAkB;;QAGf,WAAgB;AAAA,EACnB,wBAAiB;EACjB,uBAAgB;EAChB,yBAAkB;;YAGtB,gBAAgC;AAAA,EAE5B,EAAG,UAAS,QAAQ,eAAU,MAAM;AAAA,GAChC,qBAAc;GACd,+BAAwB;;EAG5B,EAAG,iBAAW,MACV;AAAA,wBAAc,mBAAY,aAAM,CAAC,UAAQ,IAAK,aAAM;;EAGxD,OAAO,YAAO;;WAIlB,eAA8B;AAAA,EAE1B,EAAG,SAAQ,QAAQ,eAAU,MAAM;AAAA,GAC/B,oBAAa;GACb,+BAAwB;;EAG5B,EAAG,eAAS,MACR;AAAA,sBAAY,mBAAY,SAAO,GAAI,SAAO;;EAG9C,EAAG,iBAAW,MACV;AAAA,wBAAc,mBAAY,SAAO,CAAC,cAAO,IAAK,SAAO;;EAGzD,OAAO,WAAM;;iBAIjB,WAAyB;AAAA,EAErB,cAAS,gBAAW,SACT,0BACE,yBACC,cACH,iBACE,eACF,wBAAgB,qBACb,cACJ,iBACD;EAGT,aAAQ,cAAS,SACN,yBACE,yBACC,cACH,iBACE,eACF,wBAAgB,iBAClB,mBAAY,aAAM,GAAI,aAAM,WAE1B,0BACK,YACL;EAKE;EAIF,mCAAgB;EAClB,8BAAY,aAAM,CAAC,cAAO,IAAK,aAAM;EAEjC;EATb,eAAU,cAAS,SACR,2BACE,gBACC,cACH,iBACE,eACF,YACF,aAEE,KAAE,6IACG,YACL;EAGX,uBAAgB;EAChB,0BAAsB;EACtB,yBAAqB;EACrB,2BAAuB;;;;;oBC7HpB,sBAZX;AAAA,CAYW;;;;;;;;;;;;CAFiB,AAV5B,kBAU4B;CADJ,AATxB,cASwB;CADA,AARxB,cAQwB;CAFG,AAN3B,SAM2B;CAFuB,AAJlD,SAIkD;CADA,AAHlD,SAGkD;CADA,AAFlD,SAEkD;CAY1C,WAAI;CACJ,WAAI;CACJ,WAAI;CACJ,SAAI;;;;uBAmDM;AAAA;;;CACV,OAAO,kBAAU,cAAe,cAAe,cAAe,iBAAiB,gBAAgB;;;QAhDnG,aAAyB;AAAA,EACrB,SAAI;EAEJ,EAAG,EAAC,iBACA;AAAA,KAAG,cAAQ;AAAA,IACP,eAA0B,AAAK;IAC/B,mBAAmB;UAChB,EAAG,cAAQ;AAAA,IACd,eAA0B,AAAK;IAC/B,mBAAmB;;;EAI3B,OAAO;;SAEX,aAAyB;AAAA,EACrB,SAAI;EAEJ,EAAG,EAAC,iBACA;AAAA,KAAG,cAAQ;AAAA,IACP,eAA0B,AAAK;IAC/B,mBAAmB;UAChB,EAAG,cAAQ;AAAA,IACd,eAA0B,AAAK;IAC/B,mBAAmB;;;EAI3B,OAAO;;SAEX,aAAyB;AAAA,EACrB,SAAI;EAEJ,EAAG,EAAC,iBACA;AAAA,KAAG,cAAQ;AAAA,IACP,eAA0B,AAAK;IAC/B,mBAAmB;UAChB,EAAG,cAAQ;AAAA,IACd,eAA0B,AAAK;IAC/B,mBAAmB;;;EAI3B,OAAO;;OAQJ,sBAA2E;AAAA,EAE9E,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,YAAY;EAGZ,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EAEvB,WAAI;EACJ,WAAI;EACJ,WAAI;EACJ,SAAI;EAEJ,OAAO;;UAGJ,WACH;AAAA,SAAO,SAAS,OAAG,SAAS,OAAG;;UAG5B,WACH;AAAA,SAAO,SAAS,OAAG,SAAS,OAAG;;SAG5B;AAAA;;;;;;EAEH,EAAG,yBAAwB,MAAM;AAAA,GAE7B,cAAc;GACd,cAAc;GACd,cAAc;GACd,cAAc;GAEd,gBAAgB;GAChB,gBAAgB;GAChB,gBAAgB;GAChB,gBAAgB;GAEhB,EAAG,sBAAO,qBAAsB,gBAAQ;AAAA,IAEpC,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IAEV,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,YAAY;UAET;AAAA,IAEH,EAAG,2BAA0B,MAAM;AAAA,KAAE,UAAU;KAAwB,YAAY;;IACnF,EAAG,2BAA0B,MAAM;AAAA,KAAE,UAAU;KAAwB,YAAY;;IACnF,EAAG,2BAA0B,MAAM;AAAA,KAAE,UAAU;KAAwB,YAAY;;IACnF,EAAG,2BAA0B,MAAM;AAAA,KAAE,UAAU;KAAwB,YAAY;;;GAIvF,kBAA4B;GAE5B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAE9B,OAAO,yBAAe,KAAM,iBAAkB,YAAa;SAG3D;AAAA,SAAM;;;SAKP,WACH;AAAA,SAAO,kBAAU,OAAE,OAAE,OAAE;;OAGpB;AAAA;;;EACH,cAAS;EACT,OAAO;;cAGJ,WACH;AAAA,SAAO,iCAAyB;;cAG7B,WACH;AAAA,SAAO,iCAAyB;;gBAG7B,qBAA6C;AAAA,EAEhD,QAAc,AAAC,eAAa,MAAO;EAEnC,EAAI,KAAI,GACJ;AAAA,QAAK;;EAGT,SAAa,WAAW;EACxB,SAAa,KAAK;EAClB,QAAc,IAAI;EAElB,QAAc;EACd,QAAc,eAAe,CAAC,IAAI;EAClC,QAAc,eAAe,CAAC,IAAI,IAAI;EACtC,QAAc,eAAe,CAAC,IAAI,CAAC,IAAI,KAAK;EAE5C,MAAO;OACH;GAAU,WAAI;GAAG,WAAI;GAAG,WAAI;;OAC5B;GAAU,WAAI;GAAG,WAAI;GAAG,WAAI;;OAC5B;GAAU,WAAI;GAAG,WAAI;GAAG,WAAI;;OAC5B;GAAU,WAAI;GAAG,WAAI;GAAG,WAAI;;OAC5B;GAAU,WAAI;GAAG,WAAI;GAAG,WAAI;;OAC5B;GAAU,WAAI;GAAG,WAAI;GAAG,WAAI;;;EAGhC,SAAI;;gBAID,qBAAqD;AAAA,EAExD,QAAc;EAEd,EAAI,gBAAe,KACf;AAAA,OAAI,eAAe,CAAC,IAAI;SAExB;AAAA,OAAI,eAAe,eAAe,AAAC,eAAe;;EAGtD,QAAc,IAAI,eAAe;EACjC,SAAe,AAAC,eAAe,MAAO;EAEtC,SAAe,KAAK;EACpB,SAAe;EACf,SAAe,KAAK;EAEpB,SAAsB,CAAE,GAAI,GAAI;EAE5B,UAAU;EAAV,SAAc;EAAd;;GAEI,QAAc,GAAG;GAEjB,EAAI,KAAI,GAAG;AAAA;;GACX,EAAI,KAAI,GAAG;AAAA;;GAEX,GAAG,KAAK,AAAI,IAAI,sBACZ,IAAI,AAAC,CAAC,IAAI,KAAK,IAAI,IAChB,AAAI,IAAI,MACX,IACG,AAAI,IAAI,sBACX,IAAI,AAAC,CAAC,IAAI,KAAK,IAAI,CAAC,sBAAQ,KAE5B;;EAMZ,WAAI,GAAG;EACP,WAAI,GAAG;EACP,WAAI,GAAG;EAEP,SAAI;EAEJ,OAAO;;YAKX,WACI;AAAA,SAAO,SAAO,SAAE,UAAQ,SAAE,UAAQ,SAAE,UAAQ,SAAE;;YAGlD,aAA0B;AAAA,EAEtB,SAAS,MAAM;EACf,SAAS,MAAM,IAAI;EACnB,SAAS,KAAK;EAGd,WAAI,KAAK;EACT,WAAI,KAAK;EACT,WAAI,KAAK;;;;;mCClPN,iBAhBX;AAAA,CAyIwB,AAzIxB,cAyIwB;CAnDD,AAtFvB,oBAsFuB,CAAE,QAAS,KAAM,KAAM,KAAM;CADlC,AArFlB,eAqFkB;CADH,AApFf,YAoFe;CADI,AAnFnB,gBAmFmB;CADE,AAlFrB,kBAkFqB;CAzDJ,AAzBjB,cAyBiB;CAPT,+BAAM;CAEN,cAAQ;CACR,qCAAQ;;;;0CAsHE,sBAAgD;AAAA,CAC9C;CAAZ,YAAY,eAAU,QAAV,yBAAU,OAAV,QAAU;CACJ;CAAlB,kBAAkB,eAAU,YAAV,0BAAU,WAAV,SAAU;CAC5B,EAAG,UAAS,QAAQ,eAAe,MAC/B;AAAA,qBAAmB;QAChB;AAAA,EACH,eAAM,mBAAmB,MAAM,SAAS,QAAxC;EACA,eAAM,oBAAQ,QAAQ,wBAAtB;;;yCAIM,cAA+B;AAAA,CAC7B;CAAZ,YAAY,eAAU,QAAV,yBAAU,OAAV,QAAU;CACtB,EAAG,UAAS,MAAM;AAAA,EACd,eAAe;EACf;;;yCAIM,cAA+B;AAAA,CAC7B;CAAZ,YAAY,eAAU,QAAV,yBAAU,OAAV,QAAU;CACtB,EAAG,UAAS,MAAM;AAAA,EACd,eAAe;EACf;;;qCAIM,mBAAwC;AAAA,CAEtC;CAAZ,YAAY,eAAU,QAAV,yBAAU,OAAV,QAAU;CAEtB,EAAG,UAAS,MAAM;AAAA,EAEd,QAAQ,iDAAkB,IAAK,+CAAgB,IAAK,KAAM,wBAAgB;EAC1E,kBAAgB,mBAAW,uBAAqB,EAAE,AAAC,uBAAqB,IAAK,AAAC,aAAa,sCAAS;EACpG;oBAAU,QAAV;sBAAU,IAAK;SAAf;AAAA,YAAU,OAAK;;;CAGL;CAAd,cAAc;;mCAIJ,cAAyB;AAAA,CAEvB;CAAZ,YAAY,eAAU,QAAV,yBAAU,OAAV,QAAU;CAEtB,EAAG,UAAO,MACN;AAAA;QAEA;AAAA,QAAM,4DAAoC,MAAM;;;;;SAlK/C,WAAkB;AAAA;gBA8D3B,oBAAsD;AAAA,EAElD,kBAAkB,WAAY,SAAS,OAAO,SAAS;EACvD,kBAAkB,AAAE,MAAM,SAAS,KAAM;EAEzC,EAAG,eAAc,WACb;AAAA,eAAO,UAAU,cAAc,AAAC,cAAY;;EAGhD,EAAG,eAAc,cACb;AAAA,kBAAU,WAAW,cAAc,AAAC,cAAY;;EAGpD,EAAG,cAAa,WACZ;AAAA,iBAAY;;EAGH,oBAAwB;EAArC,eAAa,CAAY,cAAZ;;WAIR,WAAmB;AAAA;QAoFZ,WAAgB;AAAA,EAEf;;;GAAb,aAAa;GACT,EAAG,EAAC,eACA;AAAA;;;EAYR,EAAG,EAAC,aAKA;AAAA,iBAAS;;;QAKD,WAEZ;AAAA,EAAa;;;GAAb,aAAa;GACT;;;;;mDA2BD,qBAZH;AAAA,CAUgB,AAVhB,aAUgB;CADF,AATd,aASc;CADS,AARvB,cAQuB;CADJ,AAPnB,WAOmB;CAFI,AALvB,aAKuB;CAQvB,YAAO;CAAO,WAAM;CACpB,eAAU;CACV,eAAU;;;;;MAGP,WAAe;AAAA,EAET;EAAT,SAAS,4EAAY;EAGrB;YAAe;EAAf,WAAe,YAAf;AAAA,GAAI,cAAJ,AAAe,IAAf;;GACI,MAAM,gBAAgB,yBAAuB;;EAIjD,kBAAa;EAEb,EAAG,uBAAiB,UAChB;AAAA;;EAGJ;EAEA,EAAG,eAAS,UAAK;AAAA,GACb,UAAU,aAAQ;GAClB,mBAAY;GACZ,aAAQ;GACR,aAAQ;;EAGZ,cAAS;EAET,EAAG,mBACC;AAAA,GAAsB,oBAAoB;GAA1C,kBAAW,WAAW,CAAY,KAAG,OAAf;;;;;mDA4BvB,oBArBH;AAAA,CAqBG;;;CATmB,AAZtB,eAYsB;CADD,AAXrB,eAWqB;CADI,AAVzB,eAUyB;CADD,AATxB,cASwB;CADD,AARvB,aAQuB;CAFX,AANZ,UAMY;CAiBZ,UAAK;CACL,YAAO;CACP,aAAQ;CACF,oBAA2B;CAAjC,aAAM,CAAY,qBAAZ;;;;;SAIH,WAAkB;AAAA,EAErB,eAAU,AAAC,aAAM;EACjB,eAAU,cAAO;EAEjB,EAAG,UACC;AAAA,2BAAmB,cAAc,UACrB,wBAAgB,kBAChB,iBACE,wBACR,OAAK,OAAK,aAAM,kBAAW;;EAIrC,sBAAiB,8BAAa,UAClB,oBACA,kBACE;EAGd,UAAS;EAAT,SAAe;EAAf;;GACI,SAAS,4BAAW,mBAAW,eAAQ,EAAG,cAAU;GACpD,wBAAoB;;EAGxB,uCAAgC;EAEhC;;WAMJ,aAA2B;AAAA,EAEvB,aAAa;EACb,WAAM;EAEN,EAAG,wBAAkB,MAAM;AAAA,GACvB,YAAY;GACZ,EAAG,WAAU,GACT;AAAA,YAAQ,SAAO;;GAEnB;aAAS;GAAT,WAAS,YAAT;AAAA,IAAI,QAAJ,AAAS,IAAT;;IACI,EAAG,MAAK,MAAM;AAAA,KAEV,SAAS,MAAM,AAAC,UAAU;KAE1B,SAAS,KAAK;KAEd,KAAK,KAAK;KAEV;cAAU,eAAQ,CAAC,MAAI;KAAvB;;;;;;;;;EAKZ,OAAO;;YAGX,aAA4B;AAAA,EAEd,oBAAe;EAAzB,UAAU,CAAY,KAAZ;EACV,SAAS,MAAI;EAGb,UAAS;EAAT,SAAe;EAAf;;GAEI,QAAQ,6BAAwB;GAChC,EAAG,KAAI,AAAC,eAAQ,GAAI;AAAA,IAChB,SAAS,6BAAwB,IAAE;IACnC,EAAG,OAAM,MAAM;AAAA,KACX;cAAU,WAAW;KAArB;;;;;;KACA,UAAU;;;;EAKjB,GAAY,KAAI;GAArB,KAAqB;SAAhB,GAAY,KAAW;GAA5B,KAA4B;SAAX;AAAA,GAAjB,KAAiB;;EAEjB,EAAG,MAAK,GACJ;AAAA,gCAAwB,eAAQ,WAAW;SACxC,EAAG,MAAK,KACX;AAAA,gCAAwB,eAAQ,WAAW;SAE3C;AAAA,gCAAwB,eAAQ,WAAW;;EAG/C,0CAAwB,eAAQ;EAAhC,UAA2C,WAAW,AAAC,AAAC,eAAS,CAAC,MAAI;EAAtE;;;;;;EAEA,OAAO,YAAO;;QAIX,WAAgB;AAAA,EACnB,eAAU;EACV,gCAAyB;EACzB,EAAG,0BAAoB,MAAM;AAAA,qCAA2B;;;QAGrD,WAAgB;AAAA,EACnB,eAAU;EACV,gCAAyB;EACzB,EAAG,0BAAoB,MAAM;AAAA,qCAA2B;;;WAG5D,aAA4B;AAAA,EAExB,EAAG,0BAAoB,MAAM;AAAA;YAAyC;GAAzC,SAAyC;GAAzC,SAAyC;GAAzC,SAAyC;GAAzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAC7B;YAAuC;EAAvC,UAAuC;EAAvC,UAAuC;EAAvC,UAAuC;EAAvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,OAAO,WAAM;;;;;iDAuBV,4BAjBH;AAAA,CAWqB,AAXrB,WAWqB;CADG,AAVxB,cAUwB;CADF,AATtB,eASsB;CAUtB,YAAO;CAEP,aAAQ,iDAAkB;CAC1B;CACA,EAAG,SAAQ,MAAM;AAAA,qBAAY;;CAE7B,iBAAY,cAAS,aACN,aACJ,AAAC,mBAAkB,aACpB,mBAAW,EAAE,YACX,qBACK,cAAO,aACZ,cACD,cACG;CAGd,mBAAc,cAAc,UAChB,wBAAgB,iBAChB,iBACE,wBACR,OAAK,OAAK,sBAAe;CAG/B,oBAAe,cAAc,UACjB,gBACA,kBACE,wBACR,OAAK,OAAK,mBAAY,OAAK,oBAAa;CAG9C;;;;;OAIG,WAAgB;AAAA,EACnB,eAAU;EACV,8BAAuB;EACvB,6BAAsB;EACtB,2BAAoB;EACpB;;QAGG,WAAgB;AAAA,EACnB,eAAU;EACV,8BAAuB;EACvB,6BAAsB;EACtB,2BAAoB;EACpB;;aAGJ,aAA6B;AAAA,EAEzB,oBAAa,KAAK;EAElB,EAAG,EAAC,cAAc;AAAA,UAAO,aAAQ;;EAEvB,oBAAoB;EAA9B,UAAU,CAAY,KAAG,OAAf;EACV,SAAS,MAAI;EAER,GAAY,KAAI;GAArB,KAAqB;SAAhB,GAAY,KAAW;GAA5B,KAA4B;SAAX;AAAA,GAAjB,KAAiB;;EAEjB,EAAG,MAAK,GACJ;AAAA,+BAAqB;SAClB,EAAG,MAAK,MACX;AAAA,+BAAqB;SAErB;AAAA,+BAAqB;;EAGzB,SAAS,CAAC,mBAAY,KAAK;EAC3B,4BAAuB,GAAI,oBAAa;EAExC,OAAO,aAAQ;;WAInB,aAA4B;AAAA,EACxB;cAA4B;EAA5B,GAA4B,MAA5B;;;;;;;;;;EACA;WAAkC,OAAK;EAAvC,SAA0C,OAAK;EAA/C;;;;;;;;;;;;;;;;;;;;;EACA;YAAqB,OAAK,AAAC,mBAAY,IAAG;EAA1C,UAA8C,OAAK;EAAnD;;;;;;;;;;;;;;;;;;;;;EACA;EAAY;uBAAmB,oBAAY;EAA/B,qBAAkC,EAAC,oBAAa;EAAhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAZ,YAAY;EACZ,OAAO,WAAM;;YAGjB,aAA6B;AAAA,EACzB,wBAAkB,KAAC,YAAI,OAAI,iBAAU,WAAQ,KAAG;EAChD,OAAO,YAAO;;;;;gCC9hBX,iBAJX;AAAA,CAqE0B,AArE1B,gBAqE0B;CAvDN,AAdpB,iBAcoB;CADH,AAbjB,cAaiB;CAPT,+BAAM;CAEN,cAAQ;CACR,cAAS;;;;;;SAMG,WAAkB;AAAA,EAE9B,YAAY;EAMA,4BAAU,EAAE,EAAE,EAAE,OAAO;EACzB,8BAAW,EAAE;EACZ;EACA;;;;;KAoFP;GApFO;GAuFH,WAvFG;GAwFH,WAxFG;GAyFH,WAzFG;;;;;;;;;;aAoDX;KApDW,AAoDQ,OApDR;;;;;;;IAiEX,SAjEW;;;;;;;;;;eAoDX;MApDW,AAoDQ,QApDR;;KAsEP,SAtEO;;;;;;OAyEX;KAzEW,AA0EP,QA1EO;;IA2FC,UA3FD;;;EAPX,kBAAa,cAAc,SAChB,4BACC,kBACG,cACH,WACF,aACC,aACA,sBACM,0BACH,yBACA;EAGd,8BAA0B;EAE1B;;aAMG,iBAA6C;AAAA,EAEhD,GAAO,oBAAe,WAAW,IAAjC;AAAA;;EAEA,iBAAY;;gBAIT,iBAAgD;AAAA,EAGnD,GAAO,oBAAe,WAAW,IAAjC;AAAA;;EAEA,cAAc,+BAAc;EAE5B;EAEA,OAAO;;aAIK,YAEZ;AAAA,IAAG,cAAa,MAAa,cACzB;AAAA;;;cAMR,WAAsB;AAAA,EAClB,gBAAW,CAAC;EACZ;;QAIG,aAAsB;AAAA,EACzB,UAAU;EACV,UAAS;EAAT,SAAe;EAAf;;GAAmB,OAAQ;;EAC3B,OAAO;;eAGJ;AAAA;;;EAEH,cAAc,AAAC,iBAAY,KAAM;EACjC;EAAW,GAAC,UAAU,GAAK;AAAA;;YAAK;GAAL;YAP3B;IAO2B,AAPR,OAOQ;;GAA3B,OAA2B;SAA3B;AAAA,GAA0C;;aAAK;GAAL;aAP1C;IAO0C,AAPvB,QAOuB;;GAA1C,OAA0C,OAAc;;EACxD,UAAU,gBAAW,KAAK;EAC1B,kBAAkB,aAAa;EAC/B,YAAY,AAAC,SAAQ;EACrB,cAAe,OAAI;EAEnB,SAAU,KAAE,OAAM,MAAG,MAAG,eAAO,MAAE,UAAO,MAAE,QAAK,MAAE,UAAO;EAE3C;;GAAb,aAAa;GACT,WAAW,iCAAiB;GAC5B,eAAe,gBAAW,KAAK,AAAC,MAAG;GAC1B;;aAAK,SAAO;GAAZ;aAlBb;IAkBa,AAlBM,QAkBN;;GAAT,SAAS,OAAkB,SAAI,WAAQ,MAAG,YAAU;;EAGxD;aAAc;EAAd,YAAc,aAAd;AAAA,GAAI,aAAJ,AAAc,KAAd;;GACI,QAAQ,iBAAY,MAAO,OAAQ,SAAO;;EAG9C,OAAO;;YAGJ,WAA6B;AAAA,EAEhC,cAAc;EAEV;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI,UAAU,gBAAW,KAAM,KAAE,kBAAU;GAEvC,WAAW;GACX,WAAY,KAAE,oBAAY;GAC1B,WAAY,OAAI,sBAAc;GACf;;;IAAf,eAAe;IACD,YAAY;IAAZ,cAAqB,wBAArB;;;;;aAvCtB;KAuCsB,AAvCH,OAuCG;;;oCAAqB;IAArB,+BAAqB;IAArB;yBAAqB;IAArB,AA1BtB,SA0BsB,yBAAqB,sBAArB;iCAAqB;IAArB;;gBAAqB,wCAArB;;;;;;eAvCtB;MAuCsB,AAvCH,QAuCG;;KArBlB,SAqBkB;;;eAAqB;IAArB;;OAlBtB;KAkBsB,AAjBlB,QAiBkB;;IAAV,UAAU;;;EAItB,OAAO;;WAIK,WAEZ;AAAA;EAAkB;;;;;KAjBd;GAiBc;GAdV,WAcU;GAbV,WAaU;GAZV,WAYU;;;;;;;;;;aAjDlB;KAiDkB,AAjDC,OAiDD;;;;;;;IApClB,SAoCkB;;;;;;;;;;eAjDlB;MAiDkB,AAjDC,QAiDD;;KA/Bd,SA+Bc;;;;;;OA5BlB;KA4BkB,AA3Bd,QA2Bc;;IAVN,UAUM;;;EAAlB,aAAkB;;WAIN,WAAmB;AAAA,EAE/B,EAAG,EAAC,cAAS;AAAA;;EAEb,mBAAmB;EAEnB;YAAc;EAAd,WAAc,YAAd;AAAA,GAAI,aAAJ,AAAc,IAAd;;GACI,EAAG,sBAAqB;AAAA,IACpB,eAAe;IACf,sBAAsB;;;EAI9B,EAAG,eAEC;AAAA;;;gBAQC,YAAoC;AAAA,EACzC,QAAQ;EACR,SAAS,8BAA8B;EACvC,WAAW,IAAI;EAEf,YAAY;EACZ,YAAY,uBAAsB,AAAC,cAAO;EAC1C,YAAY;EAEZ,EAAG,QAAO,GACN;AAAA,WAAQ,AAAC,QAAQ,CAAC,OAAK,AAAC,cAAO;;EAGnC,SAAS,AAAC,cAAO,IAAK;EACd,GAAY,QAAO;GAA3B,QAA2B;SAAnB,GAAY,QAAc;GAAlC,QAAkC;SAAd;AAAA,GAApB,QAAoB;;EACpB;YAAmB;EAAnB;;mBAAmB;;;;QAKP,WAAgB;AAAA,EAE5B;EACA;EACA,4BAAqB;;QAIT,WAAgB;AAAA,EAE5B;EACA,4BAAqB;;UAMzB,WAAkB;AAAA,EAEd,YAAY;EAEZ,eAAe,sBACX,wBAAwB,AAAC,cAAO,EAChC,wBAAwB,AAAC,cAAO,IAChC,yBAAyB,YACzB,yBAAyB,cAAS,AAAC,cAAO;EAG9C,WAAW,kBAAkB;EAC7B,UAAU,kBAAiB,AAAC,cAAO;EAEnC,EAAG,oBAAc,MAAM;AAAA,GACnB,wBAAiB,mBAAW,KAAM;GAClC,8BAAuB;;;iBAItB,YAAsC;AAAA;;;;gCCnMxC,iBAbX;AAAA,CAkFiB,AAlFjB,cAkFiB;CA3EgB,AAPjC,iBAOiC;CADW,AAN5C,4BAM4C;CADC,AAL7C,6BAK6C;CAUrC,+BAAM;CAEN,cAAQ;CAER,0BAAqB,aACN,oBACM,2BACO,0BACD,mBACP,gBACH,gBACA;CAGjB,qBAAgB,aACD,oBACM,2BACO,0BACD,mBACP,gBACH,gBACA;;;;;;4BAKd,WAEH;AAAA,SAAO,WAAY;;oBAIhB,YAA6C;AAAA,EAChD,SAAU,OAAI,SAAO,eAAY,gDAAU,aAAU,UAAQ;EACzD,MAAM,AAAC,iBAAgB,CAAC,YAAY,OAAQ,SAAQ,eAAgB;EACpE,MAAO,0BAAuB,cAAY;EAC1C,MAAO,uBAAoB,kBAAgB;EAC3C,MAAO,gBAAa,eAAa;EACjC,MAAO,qBAAkB,eAAa;EACtC,MAAO,kBAAe,0BAAwB;EAC9C,MAAO,iBAAc,yBAAuB;EAChD,OAAO;;2BAGJ,WAAmC;AAAA,EAEtC,UAAU;EAEV;YAAS;EAAT,WAAS,YAAT;AAAA,GAAI,QAAJ,AAAS,IAAT;;GACI,EAAG,iBAAgB,GACf;AAAA,IAAO,gBAAiB,SAAjB,gBAAiB,aAAjB,qBAAiB,aAAjB,aAAiB,UAAjB;IAhBX,MAgBW,kBAAiB,YAAjB,gBAAiB,eAAjB;IAfX,MAeW,0BAAiB,cAAjB;IAdX,MAcW,uBAAiB,kBAAjB;IAbX,MAaW,gBAAiB,eAAjB;IAZX,MAYW,qBAAiB,eAAjB;IAXX,MAWW,kBAAiB,0BAAjB;IAAP,OAAO,AAVX,MAUW,iBAAiB,yBAAjB;;;EAIf,OACI,AAAC,4BACA,sBAAqB,oCAAgC,OACrD,wBAAuB,mCAA+B,OACtD,2BAA0B,2CAAuC,OACjE,0BAAyB,0CAAsC,OAC/D,wBAAuB,gCAA4B,OACnD,wBAAuB,gCAA4B,OACnD,gBAAe,8BAA0B,OAC1C;;UAKQ,WAAkB;AAAA,EAAlB;EAEZ,YAAY;EAEZ,yBAAoB,cAAc,SACxB,8BACE,kBACG,cACH,kBAAU,EAAE,EAAE,EAAE,OAAO,iBACzB,mBAAW,EAAE,WACZ,2BACA,6CACM,0BACH,yBACA;EAGd,0BAAqB,cAAc,SACzB,gCACE,kBACG,cACH,kBAAU,EAAE,EAAE,EAAE,OAAO,iBACzB,mBAAW,EAAE,WACZ,2BACA,YACC,gBACK,iBAAU,eACb,yBACA;EAGd,qCAAiC;EACjC,qCAAiC;EAEjC;EAEA,kBAAkB,EAAmB,YAAY;AAAA,KAAG,iBAAS;AAAA;;;;UAIjE,WAAkB;AAAA,EAEd,EAAI,4BAAsB,QACtB,0BAAqB,MACrB;AAAA;;EAGJ,YAAY;EAEZ,eAAe,sBACX,wBAAwB,AAAC,cAAO,EAChC,wBAAwB,AAAC,cAAO,IAChC,yBAAyB,YACzB,yBAAyB,cAAS,AAAC,cAAO;EAG9C,WAAW,kBAAkB;EAC7B,YAAY,kBAAkB,yBAAyB;EACvD,UAAU,kBAAiB,AAAC,cAAO;EACnC,eAAe;EACf,eAAe;EAEf,EAAG,4BAAsB,MAAM;AAAA,GAC3B,gCAAyB,mBAAW,MAAO;GAC3C,sCAA+B;;EAGnC,EAAG,2BAAqB,MAAM;AAAA,GAC1B,+BAAwB,mBAAW,KAAM;GACzC,qCAA8B;;EAGlC;;iBAIK,YAAsC;AAAA;;WAE/B,WAAmB;AAAA,EAE/B,kBAAkB;EAClB,iBAAiB;EACjB,iBAAiB;EACjB,oBAAoB;EACpB,gBAAgB;EAChB,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;EAElB,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;EAkBjB,yBAAiC;AAAA,GAC7B,SAAS;GACT,EAAG,eAAc,MAAM;AAAA,IACnB,MAAM,4BAA6B,eAAc;IACjD,MAAO,MAAG,SAAO,UAAO,UAAQ;IAChC,EAAG,oBAAmB,QAAQ,CAAC,2BAA2B;AAAA,KACtD,MAAO,MAAG,2BAA2B;KACrC,cAAc;;IAElB,EAAG,oBAAmB,MAAM;AAAA,KACxB,MAAO,MAAG,2BAAyB;KACzB,oBAAiD;KAA3D,MAAO,MAAG,CAAuB,uBAAqB,OAA5C,aAAoD;KACpD;;;;;;;;;;;;;;;;;;;;;;;;;KAAV,MAAO,MAAG;KACA,YAAuB;KAAvB,qBAA6C;KAAvD,MAAO,MAAG,wBAAgD;;IAE9D,MAAO;UAEP;AAAA,UAAO,KAAE,SAAO,UAAO,UAAQ;;GAGnC,OAAO;;EAGA;;;GAAX,WAAW;GACA;;QAEH;IAAkD,WAAK,AAAK;IAAV;IAtCtD,cAsCsD;IAAd,cAAc;;QAClD;IAAoC,cAAc,KAAK,UAAL,UAAK,WAAL;;QAFlD;IAAoC,eAAe,KAAK,UAAL,UAAK,WAAL;;QAGnD;IAAqD,UAAK,AAAK;IAAV;KAnCrD,cAmCqD;;KAjCrD,cAiCqD;;IAAjB,iBAAiB;;QACrD;IAAiD,WAAK,AAAK;IAAV;KApCjD,cAoCiD;;KAlCjD,cAkCiD;;IAAb,aAAa;;QACjD;IAAoC,cAAc,KAAK,UAAL,UAAK,WAAL;;QAClD;IAAoD,WAAK,AAAK;IAA1B,gBAAgB;;QACpD;IAAoC,eAAe,KAAK,AAAK;;;;;EAOrE,cAAc;EACd,cAAc;EACd,cAAc;EACd,cAAc;EAEd,YAAa,oBAAiB,6BAA2B,WAAQ,2BAA2B,cAAY;EAEpG,SAAU,YAAS,6BAA2B;EAC1C,SAAS,AAAQ,eAAR,eAAQ;EACrB,SAAU,aAAS,6BAA2B,WAAQ,2BAA2B,cAAY;EACzF,SAAS,AAAQ,cAAR,eAAQ;EACrB,SAAU,aAAS,6BAA2B;EAC1C,SAAS,AAAQ,cAAR,eAAQ;EACrB,SAAU,gBAAY,gCAA8B,WAAQ,2BAA2B,cAAY;EAC/F,SAAS,AAAQ,iBAAR,eAAQ;EACrB,SAAU,sBAAkB,2BAAyB,WAAQ,2BAA2B,cAAY;EAChG,SAAS,AAAQ,aAAR,eAAQ;EACrB,SAAU,aAAS,6BAA2B;EAC1C,SAAS,AAAQ,cAAR,eAAQ;EACrB,SAAU,eAAW,+BAA6B;EAC9C,SAAS,AAAQ,gBAAR,eAAQ;EACrB,SAAU,cAAU,8BAA4B,WAAQ,2BAA2B,cAAY;EAC3F,SAAS,AAAQ,eAAR,eAAQ;EAEzB,iCAA0B;EAE1B,EAAG,qCAA+B,MAC9B;AAAA,8CAAoC;;EAGxC;;WAIY,WAAmB;AAAA,EAE/B,EAAG,EAAC,cAAS;AAAA;;EAEb,YAAY;EAGZ;EAEA,EAAG,qCAA+B,6BAC9B;AAAA,GAAE,QAAQ;GAAM,mCAA8B;;EAClD,EAAG,2CAAqC,mCACpC;AAAA,GAAE,QAAQ;GAAM,yCAAoC;;EACxD,EAAG,kDAA4C,0CAC3C;AAAA,GAAE,QAAQ;GAAM,gDAA2C;;EAC/D,EAAG,iDAA2C,yCAC1C;AAAA,GAAE,QAAQ;GAAM,+CAA0C;;EAC9D,EAAG,0CAAoC,kCACnC;AAAA,GAAE,QAAQ;GAAM,wCAAmC;;EACvD,EAAG,uCAAiC,+BAChC;AAAA,GAAE,QAAQ;GAAM,qCAAgC;;EACpD,EAAG,uCAAiC,+BAChC;AAAA,GAAE,QAAQ;GAAM,qCAAgC;;EAEpD,EAAG,QACC;AAAA;;;gBAOC,YAAoC;AAAA,EAEzC,wBAAa;EACb,wBAAa;EAET,SAAS,8BAA8B;EACvC,YAAY,uBAAsB,AAAC,cAAO;EAC1C,YAAY;EAEhB,SAAS,UAAQ;EACjB,EAAG,MAAK,KAAK;AAAA,GAGT,QAAQ;GACR,WAAW,IAAI;GACf,YAAY;GAEZ,EAAG,QAAO,GACN;AAAA,YAAQ,AAAC,QAAQ,CAAC,OAAK,AAAC,cAAO;;GAGnC,SAAS,AAAC,cAAO,IAAK;GACd,GAAY,QAAO;IAA3B,QAA2B;UAAnB,GAAY,QAAc;IAAlC,QAAkC;UAAd;AAAA,IAApB,QAAoB;;GACpB;aAA2B;GAA3B;;oBAA2B;;;GAC3B,2CAAoC;SAEjC;AAAA,GAGH,SAAQ;GACR,YAAW,KAAI;GACf,aAAY;GAEZ,EAAG,SAAO,GACN;AAAA,YAAQ,AAAC,QAAQ,CAAC,QAAK,AAAC,cAAO;;GAGnC,UAAS,AAAC,cAAO,IAAK;GACd,GAAY,SAAO;IAA3B,SAA2B;UAAnB,GAAY,SAAc;IAAlC,SAAkC;UAAd;AAAA,IAApB,SAAoB;;GACpB;cAA0B;GAA1B;;qBAA0B;;;GAC1B,0CAAmC;;;aAO3B,YAEZ;AAAA,IAAG,cAAa,MAAa,cACzB;AAAA,KAAG,kCAA4B,GAC3B;AAAA,sCAA2B;UAE3B;AAAA,sCAA2B;;;;QAMvB,WAAgB;AAAA,EAE5B;EACA;EACA,mCAA4B;EAC5B,oCAA6B;;QAIjB,WAAgB;AAAA,EAE5B;EACA,mCAA4B;EAC5B,oCAA6B;EAC7B,wBAAa;EACb,wBAAa;;eAIjB,WAAuB;AAAA,EAAvB;EAEI,wBAAa;EACb,wBAAa;EAEb,SAAS,8BAA8B;EACvC,cAAc,uBAAsB,AAAC,cAAO;EAE5C,QAAQ;EACR,WAAW,IAAI;EACf;YAA2B;EAA3B;;mBAA2B;;;EAE3B,EAAG,QAAO,GAAG;AAAA,GACT,YAAY,AAAC,UAAU,CAAC,OAAK,AAAC,cAAO;GACrC,yBAAc,kCAAwB,EAAG,MAAI,uBAAwB,kBAAkB,kDAC7E,WAAY;AAAA,iDAAoC;;;EAG9D,IAAI;EACJ,OAAO,IAAI;EACX;aAA0B;EAA1B;;oBAA0B;;;EAE1B,EAAG,QAAO,GAAG;AAAA,GACT,aAAY,AAAC,UAAU,CAAC,OAAK,AAAC,cAAO;GACrC,yBAAc,iCAAuB,EAAG,MAAI,wBAAwB,kBAAkB,kDAC5E,WAAY;AAAA,gDAAmC;;;;wBAK3D,WAAgC;AAAA,EAElC,EAAG,EAAC,cACA;AAAA;;EAGJ,gCAAyB;EAEzB,kCAA2B;EAE3B,EAAG,oCAA8B,MAC7B;AAAA,6CAAmC;;;uBAKpC,WAA+B;AAAA,EAElC,8BAAyB;EACzB,oCAA+B;EAC/B,mCAA8B;EAC9B,2CAAsC;EACtC,0CAAqC;EACrC,gCAA2B;EAC3B,gCAA2B;;;;gCChbxB,iBAPX;AAAA,CAoFoC,AApFpC,2BAoFoC;CA/EH,AALjC,iBAKiC;CAIzB,+BAAM;CAEN,cAAQ;CAER,gCAAgC;CAEhC,cAAS;CAEgB;CAAzB,cAAU,kBAAe;;;;;;WAKtB,gBAEH;AAAA,gBAAU,eAAgB,MAAK,iBAAkB,MAAK;;UAI1C,WAAkB;AAAA,EAE9B,kBAAkB,sBAAoB,uBAAgB,GAAI,uBAAgB,GAAI,2BAAc,AAAC,uBAAgB,IAAG,GAAI,2BAAc,AAAC,uBAAgB,IAAG;EAEtJ,aAAQ,cAAc,SACV,6BACG,cACH,eACA,wBAAgB,mBACf,2BACK,aACP,2BACA,qBACU,gBACJ,cACH,8BACA;EAGd,EAAG,wBAAkB,MAAM;AAAA,GACvB,kCAA2B;GAC3B,+BAAwB;GACxB,yBAAqB;;;iBAIpB,YAAsC;AAAA,EAC3C,YAAY;EACZ,kBAAkB,sBAAoB,kBAAgB,GAAI,kBAAgB,GAAI,2BAAc,AAAC,kBAAgB,IAAG,GAAI,2BAAc,AAAC,kBAAgB,IAAG;EACtJ,sBAAe;EACf,yBAAkB;EAElB,EAAG,wBAAkB,MAAM;AAAA,GACvB,+BAAwB;GACxB,8BAAuB;;;YAIxB,aAA6B;AAAA,EAEhC,EAAG,gBAAU,MACT;AAAA;;EAIJ,iBAAY;EAGZ,EAAG,EAAC,cACA;AAAA;;EAGJ;;iBAKJ,WAAyB;AAAA,EAErB,EAAG,6BAAuB,oBACtB;AAAA;;EAMJ,aAAa;EAEb,EAAG,uBAAiB,gBAChB;AAAA;aAAa;GAAb,WAAa,YAAb;AAAA,IAAI,YAAJ,AAAa,IAAb;;IACI,UAAU,QAAS;;SAEpB;AAAA,GACH,aAAa,qBAAgB;GAC7B,aAAa;GACb,WAAS;GAAT,UAAoB;GAApB;;IACI,aAAY,YAAO;IACnB,UAAU,SAAS;;;EAI3B,oBAAa;EAEb,EAAG,wBAAkB,MAAM;AAAA,GACvB,+BAAwB;GACxB,8BAAuB;;EAG3B,2BAAsB;;WAKV,WAAmB;AAAA;WAInB,WAAmB;AAAA;QAInB,WAAgB;AAAA,EAC5B;EACA;EACA,uBAAgB;;QAGJ,WAAgB;AAAA,EAC5B;EACA,uBAAgB;;;;;;;mDCrIF,qBAAqD;AAAA,CAE/D,EAAG,sBAAqB,GACpB;AAAA,QAAM;;CAGV,YAA6B,SAClB,cACC,mCACK,eAAe,gBACf,iBAAiB,WACtB,eAAe;CAG3B,aAA6B,iBAAiB;CAE9C,EAAG,kBAAiB,GAChB;AAAA,QAAM;;CAGV,aAAa,OAAO;CACpB,EAAG,sCAAkB,QAAe,EAAG,MAAO,QAC1C;AAAA,QAAM;;CAGV;YAAa,eAAb;AAAA,EAAI,YAAJ,AAAa,OAAb;;EACI,cAAc,YAAY;EAC1B;cAAgB,gBAAhB;AAAA,GAAI,eAAJ,AAAgB,QAAhB;;GACI,uDAAY,SAAU,QAAS;;EAEnC,UAAU;;CAGd,SAAS;CAET,OAAO;;yDAMJ,+BAAmF;AAAA,CAGtF;CAEA,aAAa,yDAAc;CAE3B,MAAQ;MAuBJ;EAEI,YAAwB,OACf,aAAa,eAAO,SAAP,0BAAO,QAAP,SAAO,YACrB,WAAe,eAAO,QAAP,0BAAO,OAAP,SAAO,WACtB,WAAe,eAAO,QAAP,0BAAO,OAAP,SAAO,eAClB,WAAe,eAAO,YAAP,0BAAO,WAAP,SAAO,oBACrB,WAAe,eAAO,aAAP,0BAAO,YAAP,SAAO,sBACrB,WAAe,eAAO,cAAP,0BAAO,aAAP,SAAO,uBACtB,WAAe,eAAO,cAAP,0BAAO,aAAP,SAAO,wBACrB,WAAe,eAAO,eAAP,0BAAO,cAAP,SAAO,qBAC1B,aAAa,eAAO,WAAP,0BAAO,UAAP,SAAO;EAG/B,gBAAgB,SAAU;;MAlB9B;EACI,mBAAmB,aAAa,eAAO,YAAP,0BAAO,WAAP,SAAO;;MAb3C;EACI,oBAAoB,WAAe,eAAQ,iBAAR,0BAAQ,gBAAR,SAAQ;EAC3C,kBAAkB,WAAe,eAAQ,WAAR,0BAAQ,UAAR,SAAQ;;MAP7C;EACiB,SAAQ,eAAQ,WAAR,0BAAQ,UAAR,SAAQ;EAAhB;GA8EjB,KA9EiB;;EAAb,aAAa;EACb,mBAAmB,WAAe,eAAQ,WAAR,0BAAQ,UAAR,SAAQ;;MAqC9C;EAEI,aAAa,aAAa,eAAO,YAAP,0BAAO,WAAP,SAAO;EACjC,cAAc,aAAa,eAAO,aAAP,0BAAO,YAAP,SAAO;EAClC,cAAc,WAAe,eAAO,aAAP,0BAAO,YAAP,SAAO;EAEpC,WAAW,mBAAmB;EAC9B,EAAG,SAAQ,MAAM;AAAA,GACb,OAAO;GACP,mBAAmB,OAAQ;;EAG/B,OAAS,WAAS;;MAzCtB;EACI;EACS,uBAAa,eAAQ,SAAR,0BAAQ,QAAR,SAAQ;EACd,UAAQ,eAAQ,WAAR,0BAAQ,UAAR,SAAQ;EAAhB;GAkEpB,MAlEoB;;EAFhB,YAAiB,OACR,YACE,iBAAK;;;;CA6CxB,SAAS;;2DAIN,kBAAgD;AAAA,CAEnD,gBAAsC;CAElC;YAAc,gBAAd;AAAA,EAAI,aAAJ,AAAc,QAAd;;EACI,aAAa,aAAa;EAC1B,UAAe,OAAO;EAAtB,YAA0B,OAAO;EAAjC;;;;;EACA,SAAS;;CAGjB,OAAO;;kDAIG,aAA2B;AAAA,QAAO,iBAAiB;;qDACnD,aAA4B;AAAA,CACtC,EAAG,YAAY,SAAO,IAClB;AAAA,OAAK,oBAAoB,GAAI,KAAI;;CACnC,OAAO;;;;;mCCtFV,eAiBH;AAAA,QAAO;;;;;6BCtCJ,mBArBX;AAAA,CAmByC,AAnBzC,WAmByC;CAIjC,GAAW,YAAX;;;CACA,GAAW,eAAX;;;CAEA,GAAI,mBAAJ;EAAI,kBAAiB;;CACrB,GAAI,0BAAJ;EAAI,yBAAwB;;CAE5B,UAAK;CACL,cAAS;CACT,qBAAgB;CAChB,eAAQ;CACR,aAAM;;;;;UAQH;AAAA;;;EAEH,GAAO,cAAS,GAAhB;AAAA;;EAEA,EAAG,EAAC,QAAQ;AAAA,GACR,GAAO,YAAM,GAAb;AAAA;;GACA;;;GACA,GAAO,WAAO,GAAd;AAAA;;;EAKJ,EAAG,aAAO,KAAK,QAAQ;AAAA,GAEnB;GACA,eAAQ;GACR,mBAAc;GACd,iBAAY,EAAW;;;cAQxB,WAA6B;AAAA,EAEhC,GAAO,cAAS,GAAhB;AAAA;;EAEA;EACA,eAAQ;EACR,iBAAY,EAAa;;UAMtB,WACH;AAAA,SAAO;;cAMJ,WACH;AAAA,SAAO;;WAKX,eAA6B;AAAA,EAEzB,UAAU;EACV,WAAM;EAEN,EAAG,YAAM,KACL;AAAA,oBAAY,EAAyB;SAClC,EAAG,YAAM,KACZ;AAAA,oBAAY,GAA2B;;EAG3C,OAAO;;aAIX,iBAA2C;AAAA,EAEvC,aAAQ;EAED;;OACH;GACI,iBAAY,EAAuB;;OACvC;GACI,iBAAY,EAAsB;;OACtC;GACI,iBAAY,EAAsB;;;;EAI1C,OAAO;;SAKX,WAAwB;AAAA;gBAKxB,WACI;AAAA,EAAc;;OACV;GAAiC;OACjC;GAAiC;OACjC;GAAiC;OACjC;GAAiC;OACjC;GAAiC;OACjC;GAAiC;;GACA;;;eAIzC,WACI;AAAA,EAAc;;OAEV;GAA6B;OAC7B;GAA6B;OAF7B;GAA6B;OAG7B;GAA6B;OAE7B;GAA6B;OAD7B;GAA6B;;GAEpB,YAAC;;;YAIlB,WACI;AAAA,SAAQ,eAAW,UAAE,QAAK,qBAAc,OAAI,sBAAe;;;;;kCAWxD,mBAA8C;AAAA,CAEjD,GAAW,YAAX;;;CAEA,yBAAyB;CAEzB,iCAAO;CAEP,aAAQ;;;;;;SAIH,WAA4B;AAAA,EAA5B;EAEL,GAAO,cAAS,GAAhB;AAAA;;EAEA;EAEA,OAAO,qBAAY,yBAA0B;AAAA,GAEzC,iBAAQ;GAER,UAAU,yDAAuB;GAEjC,SAAS,iBAA4B;AAAA,IAEjC,eAAQ;IACR,iBAAQ;IACR,QAAQ;;GAIZ,UAAU,iBAAiB;AAAA,IAEvB,iBAAQ;IACR,OAAO;;;;SAQV,WAEL;AAAA,IAAG,eAAS,MAAM;AAAA,GACd;GACA,aAAQ;;;cAKP,WAAsB;AAAA,EAE3B,EAAG,eAAS,MAAM;AAAA,UAAO;;EAEzB,OAAO;;;;iCAUJ,mBAA6C;AAAA,CAEhD,GAAW,YAAX;;;CAEA,yBAAyB;CAEzB,iCAAO;CAEP,aAAQ;;;;;;SAIH,WAA4B;AAAA,EAA5B;EAEL,GAAO,cAAS,GAAhB;AAAA;;EAEA;EAEA,OAAO,qBAAY,yBAA0B;AAAA,GAEzC,iBAAQ;GAER,UAAU,wDAAsB;GAEhC,SAAS,iBAA2B;AAAA,IAEhC,eAAQ;IACR,iBAAQ;IACR,QAAQ;;GAIZ,UAAU,iBAAiB;AAAA,IAEvB,iBAAQ;IACR,OAAO;;;;SAQV,WAEL;AAAA,IAAG,eAAS,MAAM;AAAA,GACd;GACA,aAAQ;;;cAKP,WAAsB;AAAA,EAE3B,EAAG,eAAS,MAAM;AAAA,UAAO;;EAEzB,OAAO;;;;iCAUJ,mBAA6C;AAAA,CAEhD,GAAW,YAAX;;;CAEA,yBAAyB;CAEzB,iCAAO;CAEP,aAAQ;;;;;;SAIH,WAA4B;AAAA,EAA5B;EAEL,GAAO,cAAS,GAAhB;AAAA;;EAEA;EAEA,OAAO,qBAAY,yBAA0B;AAAA,GAEzC,iBAAQ;GAER,UAAU,wDAAsB;GAEhC,SAAS,iBAA2B;AAAA,IAEhC,eAAQ;IACR,iBAAQ;IACR,QAAQ;;GAIZ,UAAU,iBAAiB;AAAA,IAEvB,iBAAQ;IACR,OAAO;;;;SAQV,WAEL;AAAA,IAAG,eAAS,MAAM;AAAA,GACd;GACA,aAAQ;;;;;kCAcT,mBAPX;AAAA,CAK0B,AAL1B,iBAK0B;CAIlB,GAAW,YAAX;;;CAEA,yBAAyB;CAEzB,iCAAO;CAEP,aAAQ;CACI,GAAI,sBAAJ;EAAI,qBAAmB;;CAAnC,iBAAgB;CAEhB,EAAG,eAAS,MACR;AAAA,gBAAS,mCAAgB,cAAW;;;;;;;SAKnC,WAA4B;AAAA,EAA5B;EAEL,GAAO,cAAS,GAAhB;AAAA;;EAEA;EAEA,OAAO,qBAAY,yBAA0B;AAAA,GAEzC,iBAAQ;GAER,UAAU,yDAAuB,UAAI;GAErC,SAAS,iBAA4B;AAAA,IAEjC,eAAQ;IACR,gBAAS,mCAAgB,cAAW;IACpC,iBAAQ;IACR,QAAQ;;GAIZ,UAAU,iBAAiB;AAAA,IAEvB,iBAAQ;IACR,OAAO;;;;SAQV,WAAiB;AAAA,EAEtB,EAAG,eAAS,MAAM;AAAA,GACd;GACA,aAAQ;;EAGZ,EAAG,gBAAU,MAAM;AAAA,GACf;GACA,cAAS;;;;;kCC9YV,2BAEH;AAAA,gBAAU;;;;;OAOA,WAEV;AAAA,EAAO,YAAW;EAAX;;;;;;SAKG,WAEV;AAAA,SAAO,gBAAW;;UAKR,sBAAoC;AAAA,EAE9C,YAAO,iBAAa,UAAM,KAAM;EAChC,kBAAa;;YAKV,eAGH;AAAA,SAAO,UAAK,SAAS;;QAKlB,eAEH;AAAA,SAAO,eAAW,UAAM;;QAMrB,eAEH;AAAA,SAAO,eAAU,KAAM;;UAMpB,gBAAiC;AAAA,EAEpC,YAAY,iBAAY,UAAK;EAE7B,EAAG,UAAS,MACR;AAAA,UAAO;SAEP;AAAA,UAAO;;;YAMR,WAAwB;AAAA,EAE3B,YAAY,mBAAc;EAE1B,EAAG,UAAS,MACR;AAAA,UAAO;SAEP;AAAA,UAAO;;;WAMT,WAAuB;AAAA,EAEzB,YAAY,kBAAa;EAEzB,EAAG,UAAS,MACR;AAAA,UAAO;SAEP;AAAA,UAAO;;;UAMR,eAAiC;AAAA,EAEhC;EAAC,YAAO;EAAR,IAAC,+CAAD;AAAA,GAAuB,aAAO;GAA9B,MAAsB,CAAC;SAAvB;AAAA;;EAAJ,EAAI,MACA;AAAA,qBAAa;;EAGjB,EAAG,EAAC,cAAS,OACT;AAAA,UAAO;;EAGX,YAAO,iBAAY,UAAM;EAEzB,EAAI,cAAQ,MACR;AAAA,qBAAa;;EAGjB,OAAO;;mBAKJ,WAA2B;AAAA,EAE1B;EAAC,YAAO;EAAR,IAAC,+CAAD;AAAA,GAAuB,aAAO;GAA9B,MAAsB,CAAC;SAAvB;AAAA;;EAAJ,EAAI,MACA;AAAA,qBAAa;;EAGjB,YAAO,0BAAqB;EAE5B,EAAG,cAAQ,MACP;AAAA,qBAAa;;EAGjB,OAAO;;kBAKJ,WAA0B;AAAA,EAGzB;EAAC,YAAO;EAAR,IAAC,+CAAD;AAAA,GAAuB,aAAO;GAA9B,MAAsB,CAAC;SAAvB;AAAA;;EAAJ,EAAI,MACA;AAAA,qBAAa;;EAGjB,YAAO,yBAAoB;EAE3B,EAAG,cAAQ,MACP;AAAA,qBAAa;;EAGjB,OAAO;;SAKJ,eAAmC;AAAA,EAEtC,YAAY,gBAAW,UAAM;EAE7B,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,OAAO;;QAKJ,eAAkC;AAAA,EAErC,YAAY,eAAW,UAAM;EAE7B,EAAI,UAAS,MACT;AAAA,UAAO;;EAGX,OAAO;;WAKJ,WAA8B;AAAA,EAEjC,QAAiB;EAEjB,mBAAe,UAAM,uDAAc,gBAC/B;AAAA,UAAQ;;EAGZ,OAAO;;QAKJ,WAA2B;AAAA,EAE9B,QAAiB;EAEjB,mBAAe,UAAM,uDAAc,gBAC/B;AAAA,UAAQ;;EAGZ,OAAO;;YAMJ,WAEH;AAAA,SAAO,wCAA6B;;iBAKjC,qCAEH;AAAA,IAAI,UAAS,MAET;AAAA,SAAO;QAEH;IACI,aAAa;IACb,mBAAc,WAAY,QAAS;IACnC,mBAAc,YAAa,QAAS;;QAExC;IACI,mBAAc,WAAY,QAAS;IACnC,aAAa;IACb,mBAAc,YAAa,QAAS;;QAExC;IACI,mBAAc,WAAY,QAAS;IACnC,mBAAc,YAAa,QAAS;IACpC,aAAa;;;;;aAW7B,WAEI;AAAA,SAAO,aAAQ;;cAKnB,gBAAmD;AAAA,EAE/C,EAAI,UAAS,MACT;AAAA,UAAO;;EAGX,eAAe,SACE,gBAAW,YACX,gBAAW;EAG5B,OAAO,IAAI,CAAS,WAAT;;cAKR,gBAEI;AAAA,cAAS,MAAO;AAAA;SAAI;AAAA;;;eAK/B,4BAA4F;AAAA,EAExF,EAAG,UAAS,MAER;AAAA,UAAO,oCAAyB,KAAM,OAAQ,EAAG;;EAIjD,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,cAAa,GAEZ;AAAA,gBAAa,iBAAY,WAAY,KAAM;SAExC,EAAG,cAAa,GAEnB;AAAA,iBAAc,iBAAY,YAAa,KAAM;SAI7C;AAAA,iBAAc;;EAIf;eAAO;EAAP;GAAwB,aAAO;GAA/B,MAAuB,CAAC;SAAxB;AAAA;;EAAH,EAAG,MACC;AAAA,WAAQ,iBAAY;;EAGrB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,WAAsB;UAAtB;AAAA,WAAsB;;SAAtB;AAAA;;EAAH,EAAG,OACC;AAAA,WAAQ,kBAAa;;EAGtB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,WAAsB;UAAtB;AAAA,WAAsB;;SAAtB;AAAA;;EAAH,EAAG,OACC;AAAA,mBAAW;;EAGf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEJ,OAAO;;qBAKJ,gBAAyD;AAAA,EAE1C,aAAW;EAAc,aAAW;EAAtD,kBAAkB,0CAAyB,0CAA0B;EAErE,OAAO;;aAKX,qBAA6D;AAAA,EAEzD,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,iBAAiB,aAAS,KAAM;EAEhC,EAAG,cAAa,GACZ;AAAA,UAAO,eAAU,WAAY;SAC1B,EAAG,cAAa,GACnB;AAAA,UAAO,eAAU,YAAa;SAE9B;AAAA,UAAO;;;aAMf,qBAA+D;AAAA,EAE3D,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,cAAa,GACZ;AAAA,UAAO,eAAU,KAAM;SACpB,EAAG,cAAa,GACnB;AAAA,GAAW,aAAW;GAAtB,OAAO,IAAI,0CAAyB,eAAW,KAAM;SAErD;AAAA,GAAO,aAAW;GAAX;;;;;;;eAMf,sBAAqF;AAAA,EAEjF,EAAG,UAAS,MACR;AAAA,UAAO;;EAGF,aAAW;EAApB,SAAS;EAET,EAAG,MAAK,OACJ;AAAA,UAAO,iBAAY,WAAY;SAC5B,EAAG,MAAK,OACX;AAAA,UAAO,iBAAY,YAAa,QAAQ,KAAK;SAE7C;AAAA,UAAO;;;iBAMf,gBAA4E;AAAA,EAExE,EAAG,eAAc,MACb;AAAA,UAAO;;EAGX,OAAO,mBAAe;;gBAK1B,gBAEI;AAAA,IAAI,gBAAe,MACf;AAAA,UAAO;SAEP;AAAA,UAAO,kBAAa;;;cAM5B,qBAAgF;AAAA,EAE5E,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,eAAc,GACb;AAAA,UAAO;SACJ,EAAG,cAAa,GACnB;AAAA,UAAO,gBAAW,WAAY;;EAGlC,SAAS,gBAAW,YAAa;EAEjC,EAAG,OAAM,MACL;AAAA,UAAO;SAEP;AAAA,UAAO;;;aAMf,qBAAiF;AAAA,EAE7E,EAAI,UAAS,MACT;AAAA,UAAO;;EAGX,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,eAAc,GAEb;AAAA,UAAO;SAEJ,EAAG,cAAa,GAAG;AAAA,GAEtB,SAAS,eAAU,WAAY;GAE/B,EAAI,OAAM,MACN;AAAA,WAAO;UAEP;AAAA,WAAO;;;EAKf,OAAO,eAAU,YAAa;;wBAKlC,gBAAmF;AAAA,EAE/E,EAAG,eAAc,MACb;AAAA,UAAO;;EAGP;EAAC,aAAO;EAAR,IAAC,iDAAD;AAAA,GAAwB,aAAO;GAA/B,MAAuB,CAAC;SAAxB;AAAA;;EAAJ,EAAI,MACA;AAAA,GAAQ,aAAe;GAAf;;;;IA8IR,SA9IQ;;GAAR,QAAQ;;EAGZ,aAAa,0BAAqB;EAClC,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEO,aAAQ;EAAR;;GA4JH,SA5JG;;;;;;;;;;;;;;;GAgKH,SAhKG;;;;;;;;;;;;;;;;;;;;;;uBAKX,gBAAkF;AAAA,EAE1E,aAAO;EAAX,EAAI,gDACA;AAAA,WAAQ,kBAAa;;EAGzB,EAAI,gBAAe,MACf;AAAA,UAAO;;EAGP;EAAC,aAAO;EAAR,IAAC,iDAAD;AAAA,GAAyB,aAAO;GAAhC,MAAwB,CAAC;SAAzB;AAAA;;EAAJ,EAAI,MACA;AAAA,GAAQ,aAAe;GAAf;;;IAmIR,SAnIQ;;GAAR,QAAQ;;EAGZ,cAAc,yBAAoB;EAClC,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEO,aAAQ;EAAR;;GAsIH,SAtIG;;;;;;;;;;;;;;;GA0IH,SA1IG;;;;;;;;;;;;;;;;;;;;;;eAKX,qBAAkF;AAAA,EAE9E,iBAAiB,aAAS,KAAM;EAEhC,EAAI,cAAa,GAAK;AAAA,GAEd;GAAC,aAAO;GAAR,IAAC,iDAAD;AAAA,IAAwB,aAAO;IAA/B,MAAuB,CAAC;UAAxB;AAAA;;GAAJ,EAAI,MACA;AAAA,IAAQ,aAAc;IAAd;;;;KAsGZ,SAtGY;;IAAR,QAAQ;;GAGZ,aAAa,iBAAY,WAAY;SAElC;AAAA,GAEC,aAAO;GAAX,EAAI,gDACA;AAAA,YAAQ,kBAAa;;GAGzB,kBAAiB,aAAS,KAAM;GAEhC,EAAI,CAAC,eAAc,KAAM,AAAC,eAAe,MACrC;AAAA,WAAO;;GAGP;GAAC,aAAO;GAAR,IAAC,iDAAD;AAAA,IAAyB,aAAO;IAAhC,OAAwB,CAAC;UAAzB;AAAA;;GAAJ,EAAI,OACA;AAAA,IAAQ,aAAe;IAAf;;;KA+FZ,SA/FY;;IAAR,QAAQ;;GAGZ,kBAAiB,aAAS,KAAM;GAChC,EAAG,gBAAc,GAAG;AAAA,IAEhB,SAAS,mBAAc;IACnB,YAAY;IACZ,cAAc;IAElB,cAAc,0BAAqB;UAGnC;AAAA,kBAAc,iBAAY,YAAa;;;EAKxC,cAAQ;EAAR;;GAsFH,UAtFG;;;;;;;;;;;;;;;GA0FH,UA1FG;;;;;;;;;;;;;;;;;;;;;;UAIJ,gBAA8C;AAAA,EAEjD,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,OAAO,eAAe;;eAIJ,gBAAmD;AAAA,EAErE,SAAS;EAGL,WAAW;EACX,cAAc;EAEd,cAAc;EACd,UAAU;EAGV,eAAe;EACf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEJ,OAAO;;gBAIW,gBAAoD;AAAA,EAEtE,SAAS;EAGL,WAAW;EACX,cAAc;EAEd,aAAa;EACb,WAAW;EAGX,eAAe;EACf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEJ,OAAO;;cAIW,gBAAkD;AAAA,EAEpE,cAAc,CAAC;EACf,mBAAmB,CAAC;EACpB,oBAAoB,CAAC;;iBAIlB,gBAA4E;AAAA,EAE/E,gBAAW;EAEP,aAAO;EAAX,EAAI,gDAA2B;AAAA,GAC3B,cAAc,kBAAa;GAC3B,QAAQ,iBAAY;;EAGxB,OAAO;;kBAGJ,gBAA6E;AAAA,EAEhF,gBAAW;EAEP,aAAO;EAAX,EAAI,gDACA;AAAA,WAAQ,kBAAa;;EAGzB,OAAO;;WAGJ,gBAAsE;AAAA,EAErE,aAAO;EAAX,EAAI,gDACA;AAAA,WAAQ,iBAAY;;EAGpB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,UAAsB;UAAtB;AAAA,UAAsB;;SAAtB;AAAA;;EAAJ,EAAI,MACA;AAAA,WAAQ,kBAAa;;EAGrB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,WAAsB;UAAtB;AAAA,WAAsB;;SAAtB;AAAA;;EAAJ,EAAI,OACA;AAAA,mBAAW;;EAGf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEA,OAAO;;;;;0CAcG,gBAAqC;AAAA,CAE/C,EAAG,UAAS,MAAM;AAAA;;CAClB,EAAG,eAAc,MAAM;AAAA;;CAEvB,YAAO;CACG,YAAK;CAAL,0BA+CgB,QA/ChB;CAAV,eAAU;CACC,aAAK;CAAL,4BAsDgB,SAtDhB;CAAX,gBAAW;;;;;UAID,WAAwB;AAAA,EAElC,EAAG,iBAAW,QAAQ,iBAAY,MAAM;AAAA,UAAO;;EAE/C,OAAO,kBAAa,iBAAa,sBAAiB;;QAIxC,WAAgB;AAAA,EAC1B,YAAY;EACF;;;;;6BAgCgB,QAhChB;;;;;;;;KAeE,QAfF;KAgBE,SAhBF;;KAkBE,SAlBF;;;;;;;;EAAV,eAAU;EACV,OAAO;;eAGJ,WAAuB;AAAA,EAE1B,EAAG,EAAC,sHAAW;AAAA,UAAO;;EACtB,EAAG,uBAAe,MAAM;AAAA,GAAO,YAAK;GAAL,0BAyBL,QAzBK;;;EAE3B,YAAY;EACZ,YAAY;EACZ,KAAM,UAAS,MAAf;AAAA,GAEI,YAAY,kBAAa,iBAAa;GACtC,EAAG,SAAQ,GAAG;AAAA,IACV,QAAQ;IACR,QAAQ;UACL,EAAG,SAAQ,GACd;AAAA,YAAQ;UACL;AAAA,IACH,eAAU;IACV;;;EAKZ,OAAO;;QAIJ,gBAA0C;AAAA,EAE7C,KAAM,eAAc,MAAM,QAAQ;EAElC,OAAO;;QAIJ,gBAA0C;AAAA,EAE7C,KAAM,gBAAe,MAAM,QAAQ;EAEnC,OAAO;;;;;;;sCAiCJ,yCAA+D;AAAA,CAElE,YAAO;CACP,aAAQ;CAER,WAAM;CACN,aAAQ;CAER,iBAAY;CACZ,aAAQ;;;;;;;;;;;;;;;;;;uGAzGE,gBAAqC;AAAA,CAE/C,EAAG,UAAS,MAAM;AAAA;;CAClB,EAAG,eAAc,MAAM;AAAA;;CAEvB,YAAO;CACG,YAAK;CAAL,0BA+CgB,QA/ChB;CAAV,eAAU;CACC,aAAK;CAAL,4BAsDgB,SAtDhB;CAAX,gBAAW;;;;;UAID,WAAwB;AAAA,EAElC,EAAG,iBAAW,QAAQ,iBAAY,MAAM;AAAA,UAAO;;EAE/C,OAAO,kBAAa,iBAAa,sBAAiB;;QAIxC,WAAgB;AAAA,EAC1B,YAAY;EACF;;;;;6BAgCgB,QAhChB;;;;;;;;KAeE,QAfF;KAgBE,SAhBF;;KAkBE,SAlBF;;;;;;;;EAAV,eAAU;EACV,OAAO;;eAGJ,WAAuB;AAAA,EAE1B,EAAG,EAAC,sHAAW;AAAA,UAAO;;EACtB,EAAG,uBAAe,MAAM;AAAA,GAAO,YAAK;GAAL,0BAyBL,QAzBK;;;EAE3B,YAAY;EACZ,YAAY;EACZ,KAAM,UAAS,MAAf;AAAA,GAEI,YAAY,kBAAa,iBAAa;GACtC,EAAG,SAAQ,GAAG;AAAA,IACV,QAAQ;IACR,QAAQ;UACL,EAAG,SAAQ,GACd;AAAA,YAAQ;UACL;AAAA,IACH,eAAU;IACV;;;EAKZ,OAAO;;QAIJ,gBAA0C;AAAA,EAE7C,KAAM,eAAc,MAAM,QAAQ;EAElC,OAAO;;QAIJ,gBAA0C;AAAA,EAE7C,KAAM,gBAAe,MAAM,QAAQ;EAEnC,OAAO;;;;mGAiCJ,yCAA+D;AAAA,CAElE,YAAO;CACP,aAAQ;CAER,WAAM;CACN,aAAQ;CAER,iBAAY;CACZ,aAAQ;;;;;;;+FApvBL,2BAEH;AAAA,gBAAU;;;;;OAOA,WAEV;AAAA,EAAO,YAAW;EAAX;;;;;;SAKG,WAEV;AAAA,SAAO,gBAAW;;UAKR,sBAAoC;AAAA,EAE9C,YAAO,iBAAa,UAAM,KAAM;EAChC,kBAAa;;YAKV,eAGH;AAAA,SAAO,UAAK,SAAS;;QAKlB,eAEH;AAAA,SAAO,eAAW,UAAM;;QAMrB,eAEH;AAAA,SAAO,eAAU,KAAM;;UAMpB,gBAAiC;AAAA,EAEpC,YAAY,iBAAY,UAAK;EAE7B,EAAG,UAAS,MACR;AAAA,UAAO;SAEP;AAAA,UAAO;;;YAMR,WAAwB;AAAA,EAE3B,YAAY,mBAAc;EAE1B,EAAG,UAAS,MACR;AAAA,UAAO;SAEP;AAAA,UAAO;;;WAMT,WAAuB;AAAA,EAEzB,YAAY,kBAAa;EAEzB,EAAG,UAAS,MACR;AAAA,UAAO;SAEP;AAAA,UAAO;;;UAMR,eAAiC;AAAA,EAEhC;EAAC,YAAO;EAAR,IAAC,+CAAD;AAAA,GAAuB,aAAO;GAA9B,MAAsB,CAAC;SAAvB;AAAA;;EAAJ,EAAI,MACA;AAAA,qBAAa;;EAGjB,EAAG,EAAC,cAAS,OACT;AAAA,UAAO;;EAGX,YAAO,iBAAY,UAAM;EAEzB,EAAI,cAAQ,MACR;AAAA,qBAAa;;EAGjB,OAAO;;mBAKJ,WAA2B;AAAA,EAE1B;EAAC,YAAO;EAAR,IAAC,+CAAD;AAAA,GAAuB,aAAO;GAA9B,MAAsB,CAAC;SAAvB;AAAA;;EAAJ,EAAI,MACA;AAAA,qBAAa;;EAGjB,YAAO,0BAAqB;EAE5B,EAAG,cAAQ,MACP;AAAA,qBAAa;;EAGjB,OAAO;;kBAKJ,WAA0B;AAAA,EAGzB;EAAC,YAAO;EAAR,IAAC,+CAAD;AAAA,GAAuB,aAAO;GAA9B,MAAsB,CAAC;SAAvB;AAAA;;EAAJ,EAAI,MACA;AAAA,qBAAa;;EAGjB,YAAO,yBAAoB;EAE3B,EAAG,cAAQ,MACP;AAAA,qBAAa;;EAGjB,OAAO;;SAKJ,eAAmC;AAAA,EAEtC,YAAY,gBAAW,UAAM;EAE7B,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,OAAO;;QAKJ,eAAkC;AAAA,EAErC,YAAY,eAAW,UAAM;EAE7B,EAAI,UAAS,MACT;AAAA,UAAO;;EAGX,OAAO;;WAKJ,WAA8B;AAAA,EAEjC,QAAiB;EAEjB,mBAAe,UAAM,uDAAc,gBAC/B;AAAA,UAAQ;;EAGZ,OAAO;;QAKJ,WAA2B;AAAA,EAE9B,QAAiB;EAEjB,mBAAe,UAAM,uDAAc,gBAC/B;AAAA,UAAQ;;EAGZ,OAAO;;YAMJ,WAEH;AAAA,SAAO,qGAA6B;;iBAKjC,qCAEH;AAAA,IAAI,UAAS,MAET;AAAA,SAAO;QAEH;IACI,aAAa;IACb,mBAAc,WAAY,QAAS;IACnC,mBAAc,YAAa,QAAS;;QAExC;IACI,mBAAc,WAAY,QAAS;IACnC,aAAa;IACb,mBAAc,YAAa,QAAS;;QAExC;IACI,mBAAc,WAAY,QAAS;IACnC,mBAAc,YAAa,QAAS;IACpC,aAAa;;;;;aAW7B,WAEI;AAAA,SAAO,aAAQ;;cAKnB,gBAAmD;AAAA,EAE/C,EAAI,UAAS,MACT;AAAA,UAAO;;EAGX,eAAe,SACE,gBAAW,YACX,gBAAW;EAG5B,OAAO,IAAI,CAAS,WAAT;;cAKR,gBAEI;AAAA,cAAS,MAAO;AAAA;SAAI;AAAA;;;eAK/B,4BAA4F;AAAA,EAExF,EAAG,UAAS,MAER;AAAA,UAAO,iGAAyB,KAAM,OAAQ,EAAG;;EAIjD,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,cAAa,GAEZ;AAAA,gBAAa,iBAAY,WAAY,KAAM;SAExC,EAAG,cAAa,GAEnB;AAAA,iBAAc,iBAAY,YAAa,KAAM;SAI7C;AAAA,iBAAc;;EAIf;eAAO;EAAP;GAAwB,aAAO;GAA/B,MAAuB,CAAC;SAAxB;AAAA;;EAAH,EAAG,MACC;AAAA,WAAQ,iBAAY;;EAGrB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,WAAsB;UAAtB;AAAA,WAAsB;;SAAtB;AAAA;;EAAH,EAAG,OACC;AAAA,WAAQ,kBAAa;;EAGtB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,WAAsB;UAAtB;AAAA,WAAsB;;SAAtB;AAAA;;EAAH,EAAG,OACC;AAAA,mBAAW;;EAGf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEJ,OAAO;;qBAKJ,gBAAyD;AAAA,EAE1C,aAAW;EAAc,aAAW;EAAtD,kBAAkB,0CAAyB,0CAA0B;EAErE,OAAO;;aAKX,qBAA6D;AAAA,EAEzD,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,iBAAiB,aAAS,KAAM;EAEhC,EAAG,cAAa,GACZ;AAAA,UAAO,eAAU,WAAY;SAC1B,EAAG,cAAa,GACnB;AAAA,UAAO,eAAU,YAAa;SAE9B;AAAA,UAAO;;;aAMf,qBAA+D;AAAA,EAE3D,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,cAAa,GACZ;AAAA,UAAO,eAAU,KAAM;SACpB,EAAG,cAAa,GACnB;AAAA,GAAW,aAAW;GAAtB,OAAO,IAAI,0CAAyB,eAAW,KAAM;SAErD;AAAA,GAAO,aAAW;GAAX;;;;;;;eAMf,sBAAqF;AAAA,EAEjF,EAAG,UAAS,MACR;AAAA,UAAO;;EAGF,aAAW;EAApB,SAAS;EAET,EAAG,MAAK,OACJ;AAAA,UAAO,iBAAY,WAAY;SAC5B,EAAG,MAAK,OACX;AAAA,UAAO,iBAAY,YAAa,QAAQ,KAAK;SAE7C;AAAA,UAAO;;;iBAMf,gBAA4E;AAAA,EAExE,EAAG,eAAc,MACb;AAAA,UAAO;;EAGX,OAAO,mBAAe;;gBAK1B,gBAEI;AAAA,IAAI,gBAAe,MACf;AAAA,UAAO;SAEP;AAAA,UAAO,kBAAa;;;cAM5B,qBAAgF;AAAA,EAE5E,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,eAAc,GACb;AAAA,UAAO;SACJ,EAAG,cAAa,GACnB;AAAA,UAAO,gBAAW,WAAY;;EAGlC,SAAS,gBAAW,YAAa;EAEjC,EAAG,OAAM,MACL;AAAA,UAAO;SAEP;AAAA,UAAO;;;aAMf,qBAAiF;AAAA,EAE7E,EAAI,UAAS,MACT;AAAA,UAAO;;EAGX,iBAAiB,aAAQ,KAAM;EAE/B,EAAG,eAAc,GAEb;AAAA,UAAO;SAEJ,EAAG,cAAa,GAAG;AAAA,GAEtB,SAAS,eAAU,WAAY;GAE/B,EAAI,OAAM,MACN;AAAA,WAAO;UAEP;AAAA,WAAO;;;EAKf,OAAO,eAAU,YAAa;;wBAKlC,gBAAmF;AAAA,EAE/E,EAAG,eAAc,MACb;AAAA,UAAO;;EAGP;EAAC,aAAO;EAAR,IAAC,iDAAD;AAAA,GAAwB,aAAO;GAA/B,MAAuB,CAAC;SAAxB;AAAA;;EAAJ,EAAI,MACA;AAAA,GAAQ,aAAe;GAAf;;;;IA8IR,SA9IQ;;GAAR,QAAQ;;EAGZ,aAAa,0BAAqB;EAClC,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEO,aAAQ;EAAR;;GA4JH,SA5JG;;;;;;;;;;;;;;;GAgKH,SAhKG;;;;;;;;;;;;;;;;;;;;;;uBAKX,gBAAkF;AAAA,EAE1E,aAAO;EAAX,EAAI,gDACA;AAAA,WAAQ,kBAAa;;EAGzB,EAAI,gBAAe,MACf;AAAA,UAAO;;EAGP;EAAC,aAAO;EAAR,IAAC,iDAAD;AAAA,GAAyB,aAAO;GAAhC,MAAwB,CAAC;SAAzB;AAAA;;EAAJ,EAAI,MACA;AAAA,GAAQ,aAAe;GAAf;;;IAmIR,SAnIQ;;GAAR,QAAQ;;EAGZ,cAAc,yBAAoB;EAClC,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEO,aAAQ;EAAR;;GAsIH,SAtIG;;;;;;;;;;;;;;;GA0IH,SA1IG;;;;;;;;;;;;;;;;;;;;;;eAKX,qBAAkF;AAAA,EAE9E,iBAAiB,aAAS,KAAM;EAEhC,EAAI,cAAa,GAAK;AAAA,GAEd;GAAC,aAAO;GAAR,IAAC,iDAAD;AAAA,IAAwB,aAAO;IAA/B,MAAuB,CAAC;UAAxB;AAAA;;GAAJ,EAAI,MACA;AAAA,IAAQ,aAAc;IAAd;;;;KAsGZ,SAtGY;;IAAR,QAAQ;;GAGZ,aAAa,iBAAY,WAAY;SAElC;AAAA,GAEC,aAAO;GAAX,EAAI,gDACA;AAAA,YAAQ,kBAAa;;GAGzB,kBAAiB,aAAS,KAAM;GAEhC,EAAI,CAAC,eAAc,KAAM,AAAC,eAAe,MACrC;AAAA,WAAO;;GAGP;GAAC,aAAO;GAAR,IAAC,iDAAD;AAAA,IAAyB,aAAO;IAAhC,OAAwB,CAAC;UAAzB;AAAA;;GAAJ,EAAI,OACA;AAAA,IAAQ,aAAe;IAAf;;;KA+FZ,SA/FY;;IAAR,QAAQ;;GAGZ,kBAAiB,aAAS,KAAM;GAChC,EAAG,gBAAc,GAAG;AAAA,IAEhB,SAAS,mBAAc;IACnB,YAAY;IACZ,cAAc;IAElB,cAAc,0BAAqB;UAGnC;AAAA,kBAAc,iBAAY,YAAa;;;EAKxC,cAAQ;EAAR;;GAsFH,UAtFG;;;;;;;;;;;;;;;GA0FH,UA1FG;;;;;;;;;;;;;;;;;;;;;;UAIJ,gBAA8C;AAAA,EAEjD,EAAG,UAAS,MACR;AAAA,UAAO;;EAGX,OAAO,eAAe;;eAIJ,gBAAmD;AAAA,EAErE,SAAS;EAGL,WAAW;EACX,cAAc;EAEd,cAAc;EACd,UAAU;EAGV,eAAe;EACf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEJ,OAAO;;gBAIW,gBAAoD;AAAA,EAEtE,SAAS;EAGL,WAAW;EACX,cAAc;EAEd,aAAa;EACb,WAAW;EAGX,eAAe;EACf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEJ,OAAO;;cAIW,gBAAkD;AAAA,EAEpE,cAAc,CAAC;EACf,mBAAmB,CAAC;EACpB,oBAAoB,CAAC;;iBAIlB,gBAA4E;AAAA,EAE/E,gBAAW;EAEP,aAAO;EAAX,EAAI,gDAA2B;AAAA,GAC3B,cAAc,kBAAa;GAC3B,QAAQ,iBAAY;;EAGxB,OAAO;;kBAGJ,gBAA6E;AAAA,EAEhF,gBAAW;EAEP,aAAO;EAAX,EAAI,gDACA;AAAA,WAAQ,kBAAa;;EAGzB,OAAO;;WAGJ,gBAAsE;AAAA,EAErE,aAAO;EAAX,EAAI,gDACA;AAAA,WAAQ,iBAAY;;EAGpB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,UAAsB;UAAtB;AAAA,UAAsB;;SAAtB;AAAA;;EAAJ,EAAI,MACA;AAAA,WAAQ,kBAAa;;EAGrB;eAAO;EAAP,kDAAsB;AAAA,gBAAO;GAAP,mBAAtB;AAAA,WAAsB;UAAtB;AAAA,WAAsB;;SAAtB;AAAA;;EAAJ,EAAI,OACA;AAAA,mBAAW;;EAGf,aAAkB;EAAlB,aAAkB;EAAlB,AAAkB,kBAAlB;EAEA,OAAO;;;;;yCCroBG,eALlB;AAAA,CAGsB,AAHtB,aAGsB;CAGd,WAAM;;;;;UACI,WACV;AAAA,SAAO,aAAQ;;QACL,WACH;AAAA,0BAAS,eAAU;;;;iCAahB,eARlB;AAAA,CAGc,AAHd,WAGc;CAMP,aAAQ;CACR,WAAM;;;;;;MAGK,oBAA6B;AAAA,EACvC,EAAI,EAAC,gBAAW,MAAM;AAAA,mBAAW;;EACjC,aAAI,IAAO;;YAGD,WAAoB;AAAA,EAC9B,WAAW;EAAI,WAAW;EAAG,WAAW;EACxC;YAAS;EAAT,WAAS,YAAT;AAAA,GAAI,QAAJ,AAAS,IAAT;;GAAgB,QAAS,KAAC,gBAAC,SAAM,wBAAQ,MAAK,CAAC,SAAO,OAAK,IAAE,OAAK;;EAClE,OAAQ,MAAE,OAAI;;YAGJ,WAA6B;AAAA,SAAO,uCAA4B;;UAChE,cAAoC;AAAA,qBAAW,MAAQ;AAAA,wCAAa;SAAhC;AAAA;;;UACpC,cAAoC;AAAA,yBAAW;;OAC/C,cAAoC;AAAA,sBAAQ;;QAC5C,WAAoC;AAAA;;;;kEAtCpC,eALlB;AAAA,CAGsB,AAHtB,aAGsB;CAGd,WAAM;;;;;UACI,WACV;AAAA,SAAO,aAAQ;;QACL,WACH;AAAA,0BAAS,eAAU;;;;0DAahB,eARlB;AAAA,CAGc,AAHd,WAGc;CAMP,aAAQ;CACR,WAAM;;;;;;MAGK,oBAA6B;AAAA,EACvC,EAAI,EAAC,gBAAW,MAAM;AAAA,mBAAW;;EACjC,aAAI,IAAO;;YAGD,WAAoB;AAAA,EAC9B,WAAW;EAAI,WAAW;EAAG,WAAW;EACxC;YAAS;EAAT,WAAS,YAAT;AAAA,GAAI,QAAJ,AAAS,IAAT;;GAAgB,QAAS,KAAC,gCAAC,SAAM,wBAAQ,MAAK,CAAC,SAAO,OAAK,IAAE,OAAK;;EAClE,OAAQ,MAAE,OAAI;;YAGJ,WAA6B;AAAA,SAAO,gEAA4B;;UAChE,cAAoC;AAAA,qBAAW,MAAQ;AAAA,wCAAa;SAAhC;AAAA;;;UACpC,cAAoC;AAAA,yBAAW;;OAC/C,cAAoC;AAAA,sBAAQ;;QAC5C,WAAoC;AAAA;;;;;;;;;;2CCpB3C,qCAzBX;AAAA,CA0LmC,AA1LnC,kBA0LmC;CA/J3B,oBAAe;CACf,cAAS;CACT,gBAAW;CACX,eAAU;CACV,gBAAW;CACX,sBAAiB;CACjB,iBAAY;CACZ,eAAU;CAEV,cAAc;CACd,kBAAkB;CAClB,gBAAgB;CAEhB,aAAQ;;;;;;QAKL,WAEH;AAAA;YAAU,eAAgB;EAA1B,WAAU,YAAV;AAAA,GAAK,QAAL,AAAU,IAAV;;GAEI,EAA4B,sCAAkB,YAAQ,IAElD;AAAA,IAAkB,YAAQ,KAAG,cAAe,gBAAY;UAIxD;AAAA,wBAAqB,YAAQ,EAAG,cAAe,gBAAY;;;;eAchE,gBAA0D;AAAA,EAE7D,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,oBAAe;EAEf,OAAO;;cAKJ,wBAA2E;AAAA,EAE9E,EAAI,WAAU,MAEV;AAAA,YAAS;;EAsBb,OAAO,AAA4B,aAAR,OAAgB;;UAK/C,WAEI;AAAA,IAAI,mBAAa,MAEb;AAAA,gBAAY;GAAZ,aAAuB;GAAvB;IA/BA,SA+BA;;;;;YAOR;AAAA;;;EAEI,EAAI,YAAW;AAAA,GAEX;GAEA,EAAI,qBAAe,MAEf;AAAA,iBAAY;IAAZ,aAAyB;IAAzB;KA9CJ,SA8CI;;;;;EAMR,0BAAgB;;SAUb,mBAAiD;AAAA,EAEpD,cAAS;EAET,OAAO;;QAUJ,iBAAgD;AAAA,EAEnD,aAAQ;EAER,OAAO;;QAKJ,WAAsB;AAAA;aActB;AAAA;;;EACH,kBAAa;EACb,OAAO;;cASJ,6BAA0F;AAAA,EAE7F,mBAAc;EAEd,EAAI,eAAc,MAEd;AAAA,4BAAoB;SAIpB;AAAA,4BAAoB;;EAIxB,EAAI,kBAAY,GAEZ;AAAA;;EAIJ,OAAO;;YAWJ,6BAAwF;AAAA,EAE3F,iBAAY;EAEZ,EAAI,eAAc,MAEd;AAAA,0BAAkB;SAIlB;AAAA,0BAAkB;;EAItB,OAAO;;YAWJ,6BAAwF;AAAA,EAE3F,iBAAY;EAEZ,EAAI,eAAc,MAEd;AAAA,0BAAkB;SAIlB;AAAA,0BAAkB;;EAItB,OAAO;;SAKJ,WAAuB;AAAA;WAYvB,gBAAsD;AAAA,EAEzD,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,gBAAW;EACX,eAAU;EAEV,OAAO;;UAUJ,gBAAoD;AAAA,EAEvD,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,eAAU;EAEV,OAAO;;UAKJ,WAAwB;AAAA;WAYxB,gBAAsD;AAAA,EAEzD,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,gBAAW;EACX,eAAU;EAEV,OAAO;;iBAUJ,gBAA4D;AAAA,EAE/D,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,sBAAiB;EACjB,eAAU;EAEV,OAAO;;YAUJ,gBAAuD;AAAA,EAE1D,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,iBAAY;EACZ,eAAU;EAEV,OAAO;;QAKJ,wCAAuE;AAAA;;;0CC3WvE,qCAzBX;AAAA,CAuB0C,AAvB1C,gCAuB0C;CAIlC,cAAS;CACT,uBAAkB;CAClB,kBAAa;CACb,cAAS;CACT,oBAAe;CACf,mBAAc;CACd,kBAAa;CACb,qBAAgB;CAEJ;CAAZ,iBAAY;CAEZ,+CAAO,OAAQ,SAAU;CAEzB,EAAI,EAAC,gDAAY;AAAA,EAEb,iDAAa;EACb,QAAQ,EAAmB;;;;;yDAyY5B,YAAsC;AAAA,CAEzC,oDAAgB;CACD;CAAf,mDAAe;CAEf,kBAAkB;CAElB;CAEA,QAAY;CACZ,cAAc;CAEd,UAAU;CAAV,SAAc;CAAd;;EAEI,WAAW,8CAAU;EAErB,EAAI,aAAY,QAAQ,iBAAiB;AAAA,GAEvB,wBAAsB;AAAA,IAApC,cAAoC;UAAe;AAAA,IAAnD,cAAmD;;GAEnD,EAAG,wBAAuB,CAAC,mCAAmC;AAAA,IAC1D,oCAAoC;IACpC,qBAAqB;IACrB,sBAAsB;;GAG1B,EAAG,eAAc,qBACb;AAAA,oBAAiB;;GAGrB;SAEG;AAAA,GAEH,qDAAkB,EAAG;GACrB,EAAE;;;;;;cAlaE,gBAA0D;AAAA,EAEtE,EAAI,UAAS,MAET;AAAA,WAAQ;;EAIZ,oBAAe;EAEf,EAAI,EAAC,OAAO;AAAA,GAER,qBAAgB;GAEhB,EAAI,kBAEA;AAAA,iBAAU;IAAV,aAA6B;IAA7B,+CAAkB,YAAlB;AAAA,YAAkB,aAAlB;;gCAAkB,UAAlB;;;;EAMR,OAAO;;SAQK,mBAAiD;AAAA,EAE7D,cAAS;EACT,kBAAa,iBAAY;EAEzB,OAAO;;YAKJ,8BAAgE;AAAA,EAGnE,YAAY;EAEZ,EAAI,sCAAkB,OAAQ,eAE1B;AAAA,WAAQ,cAAe,OAAQ;SAI/B;AAAA,WAAQ,oBAAqB,OAAQ;;EAIzC,OAAO;;cAKX,WAA4B;AAAA,EAExB;EACA;EAEA;YAAU,eAAgB;EAA1B,WAAU,YAAV;AAAA,GAAK,QAAL,AAAU,IAAV;;GAEI,cAAc;GAEd,EAAK,sCAAkB,YAAQ,MACZ,CAAC,CAAC,8BAAiC,CAAC,2BAAsB,SAAS,KAGlF;AAAA,YAAQ,cAAe,YAAQ;UAE5B;AAAA,IAEH,UAAU;IACV,QAAQ,oBAAqB,YAAQ;;GAKzC,EAAI,QAAQ,UAAR,UAAuB;AAAA,IAEQ;IAAkB,aAAU;IAAV;mDAAsB,IAAtB;AAAA,KAtCrD,QAsCqD,qBAAsB;WAAtB;AAAA,KAlCrD,QAkCqD,2BAAsB;;IAAvE,UAAU,yCAAqB,SAAQ,EAAG,MAAO,QAA2B,MAAO;IACvF,0BAAsB;;;EAM1B,qBAAgB;EAChB,mBAAc;;QAKF,WAAsB;AAAA,EAElC,qBAAgB,AAAC,qCAAkB,gBAAY,YAAY,qCAAkB,gBAAY;EAErF;2BAAiB,yBAAoB,GAArC;AAAA,GAA2C,aAAU;GAAV;kDAAkB,YAAlB;AAAA,IAvD3C,QAuD2C,qBAAkB;UAAlB;AAAA,IAnD3C,QAmD2C,2BAAkB;;GAA7D,MAA0C,CAAC;SAA3C;AAAA;;EAAJ,EAAI,MAAyE;AAAA,GAEzE,kBAAa;GACE,cAAU;GAAV;mDAAkB,YAAlB;AAAA,IA1Df,SA0De,sBAAkB;UAAlB;AAAA,IAtDf,SAsDe,4BAAkB;;GAAjC,oBAAe;GACf,cAAU;GAAV,gDAAkB,YAAlB;AAAA,YAAkB,aAAW;UAA7B;AAAA,gCAAkB,UAAW;;;EAIjC,kBAAa;EACb,mDAAgB;EAChB,EAAE;;YAQU,6BAAwF;AAAA,EAEpG,iBAAY;EAEZ,EAAI,eAAc,MAEd;AAAA,0BAAkB;SAItB;AAAA,0BAAkB;;EAIlB,kBAAa;EAEb,OAAO;;SAKK,WAAuB;AAAA,EAEnC,cAAS;EAET,iBAAY,kBAAa,mDAAe;;UAK5B,WAEZ;AAAA,IAAI,cAAQ;AAAA,GAER,cAAS;GAET,mBAAc,AAAE,CAAC,kBAAa,mDAAe,oDAAgB;;;YAQ9D,oCAEH;AAAA,IAAI,sCAAkB,OAAQ,eAE1B;AAAA,GAAkB,OAAQ,gBAAc;SAIxC;AAAA,uBAAqB,OAAQ,aAAc;;;eAO5C,wBAEH;AAAA,IAAI,kBAEA;AAAA,uBAAqB,eAAgB,qBAAsB;SAI3D;AAAA,uBAAqB,eAAgB,qBAAsB;;;QAOnD,wCAEZ;AAAA,IAAI,cAAQ;AAAA,GAER,EAAI,eAAc,MAAM;AAAA,IAEpB,cAAS;IAET,EAAI,WAEA;AAAA;;IAIJ,cAAe;IACf;;GAIJ;aAAU,eAAgB;GAA1B,WAAU,YAAV;AAAA,IAAK,QAAL,AAAU,IAAV;;IAEI,EAAI,sCAAkB,gBAAiB,IAAI;AAAA,KAEvC,cAAS;KAET,EAAI,WAEA;AAAA;;KAIJ,cAAe;KACf;;;;;UAUhB,sBAGI;AAAA,IAAI,EAAC,aAAQ;AAAA,GAET;GACA;GACA;GAEA,oBAA0B,CAAC,cAAc,mBAAc;GAEvD,EAAI,iBAAgB,GAEhB;AAAA,oBAAgB;;GAIpB,EAAI,EAAC,kBAED;AAAA;;GAIJ,EAAI,EAAC,cAAS;AAAA,IAEV,SAAS,qBAAiB;IAE1B,UAAU;IAAV,SAAc;IAAd;;KAEI,UAAU,qBAAgB;KAC1B,YAAsB,gBAAgB,AAAC,iBAAiB;KAAxD,GAAa,iBAAb;AAAA,0BAAa,eAAb,AAAa,qBAAb;;0BAAa,eAAb,AAAa,qBAAb;;;UAID;AAAA,IAEH,EAAI,EAAC,eAED;AAAA,cAAS,qBAAiB;WAI1B;AAAA,cAAS,qBAAiB,IAAI;;IAIlC;IAEA,WAAU;IAAV,UAAc;IAAd;;KAEI,UAAU,qBAAgB;KAE1B,EAAI,wBAAkB,CAAC,wBAAwB,cAAc,wBAAwB,eAAe,wBAAwB,eAAe,wBAAwB,cAAc;AAAA,MAE7K,eAAqB,iBAAiB;MAEtC,EAAI,YAAW,KAEX;AAAA,mBAAY;aAET,EAAI,YAAW,MAElB;AAAA,mBAAY;;MAIhB,WAAW,gBAAgB,WAAW;YAItC;AAAA,iBAAW,gBAAgB,AAAC,iBAAiB;;KAIjD,EAAI,EAAC,gBAED;AAAA,SAAa,iBAAb;AAAA,2BAAa,eAAb,AAAa,qBAAS;aAAtB;AAAA,2BAAa,eAAb,AAAa,qBAAS;;YAItB;AAAA,mBAAsB,WAAY;MAAlC,GAAa,iBAAb;AAAA,2BAAa,eAAb,AAAa,qBAAb;;2BAAa,eAAb,AAAa,qBAAb;;;;;GAQZ,EAAI,kBAAiB,GAEjB;AAAA,MAAI,iBAAW,GAAG;AAAA,KAEd,cAAS;KAEL;;MAAiB,aAAU;MAAV;qDAAkB,UAAlB;AAAA,OA3R7B,SA2R6B,qBAAkB;aAAlB;AAAA,OAvR7B,SAuR6B,2BAAkB;;MAAnC,MAAiB,UAA8B;YAA/C;AAAA;;KAAJ,EAAI,MAEA;AAAA,oBAAU;MAAV,gDAAkB,YAAlB;AAAA,eAAkB,aAAW;aAA7B;AAAA,mCAAkB,UAAW;;;KAIjC,cAAU;KACV;WAEG;AAAA,KAEH,EAAI,mBAAa,MAEb;AAAA,mBAAY;MAAZ,aAAuB;MAAvB;ODvTZ,SCuTY;;;;KAIJ,EAAI,gBAEA;AAAA,sBAAW,CAAC;;KAIhB,iBAAY;KACZ,kBAAa,iBAAY;KAEzB,EAAI,gBAAU,GAEV;AAAA;;;;GAQZ,EAAI,kBAEA;AAAA;;;;;;;;;;oCCpaL,WAEH;AAAA,QAAO;;uCAKJ,WAEH;AAAA,QAAO;;qCAKJ,WAEH;AAAA,QAAO;;;;;;;;oCAuEJ,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,CAAC,IAAI,CAAC,IAAI;;QAKd,kBAEH;AAAA,SAAO,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK;;;;;;;2BC5FvB,2CAAoH;AAAA,CAE9H,wBAAM,OAAQ;CAEd,EAAI,mBAAkB,MAElB;AAAA,mBAAiB;;CAIrB,eAAe,oBAAqB,eAAgB,CAAE,OAAQ,EAAG;CACjE;CAEA,OAAO;;gCAKJ;AAAA;;;CAEH,EAAI,CAAC,8CAAwB,kBAAxB,QAAmC,eAEpC;AAAA,yCAAqB,OAAQ;;CAI1B,4CAAqB;;gCAalB;AAAA;;;CAEV,OAAO,yBAAO,OAAQ,SAAU,WAAY,UAAW;;2BAU7C,iBAEV;AAAA,GAAI,sBAAQ,OAAQ,uCAEhB;AAAA,kBAAM;QAEH;AAAA,EAEH,cAAsC,8BAAY,OAAQ;EAE1D,EAAI,YAAW,MAEf;AAAA;cAAiB,gBAAjB;AAAA,IAAK,eAAL,AAAiB,QAAjB;;IAEI;;;;;8BAWE,WAEV;AAAA,CAAgB;;EAAhB,eAAgB;EAEZ;aAAiB,iBAAjB;AAAA,GAAK,eAAL,AAAiB,SAAjB;;GAEI;;;;2BAYE,WAAuB;AAAA,CAEjB;;EAAhB,eAAgB;EAEZ,QAAQ,kBAAiB;EACzB,KAAO,MAAK,GAAZ;AAAA,GACI,SAAQ,QAAS,KAAM,MAAO;GAC9B;;;CAKR,qCAAkB;;4BASR,iBAEV;AAAA,GAAI,sBAAQ,OAAQ,uCAEhB;AAAA,kBAAM;QAEH;AAAA,EAEH,cAAsC,8BAAY,OAAQ;EAE1D,EAAI,YAAW,MAEf;AAAA;cAAiB,gBAAjB;AAAA,IAAK,eAAL,AAAiB,QAAjB;;IAEI;;;;;+BAWE,WAEV;AAAA,CAAgB;;EAAhB,eAAgB;EAEZ;aAAiB,iBAAjB;AAAA,GAAK,eAAL,AAAiB,SAAjB;;GAEI;;;;0BAgBE;AAAA;;;;;;CAEV,EAAI,WAAU,MAEV;AAAA,IAAI,sBAAQ,OAAQ,uCAEhB;AAAA,mBAAM,qDAA+B,KAAM,SAAU;SAElD;AAAA,GAEH,cAAsC,8BAAY,OAAQ;GAE1D,EAAI,YAAW,MAAM;AAAA,IAErB,EAAI,QAAQ,eAAR,UAA6B;AAAA,KAE7B,WAAW;KACX,AAAkB,KAAM,cAAY;KACpC,aAAa;WAEV,EAAI,EAAQ,sBAAY,UAApB,AAAQ,uBAAR,MAA4B;AAAA,KAEnC,YAAW;KAEX;eAAiB,eAAM;KAAvB,WAAiB,YAAjB;AAAA,MAAK,eAAL,AAAiB,IAAjB;;MAEI,AAAkB,MAAM,YAAU;;KAItC,aAAa;;IAIjB,QAAQ,iBAAiB;IACzB,KAAO,MAAK,GAAZ;AAAA,KACI,QAAQ,QAAS,WAAY,SAAU;KACvC;;;;;;2BAmBF,kCAEV;AAAA,QAAO,yBAAO,oCAAgB,GAAI,SAAU,oCAAgB,GAAI,MAAO;;2BAgB7D;AAAA;;;CAEV,EAAI,WAAU,MAEV;AAAA,IAAI,YAAW,GAAG;AAAA,GAEd,EAAI,mBAAkB,MAElB;AAAA,qBAAiB;;GAIrB,eAAe,oBAAqB,eAAgB,CAAE,OAAQ,SAAU;GACxE,cAAc,8BAAY;GAE1B,EAAI,YAAW;AAAA,IAEX,QAAQ,iBAAiB;IAEzB,KAAO,MAAK,GAAZ;AAAA,KACI,QAAQ,QAAS,oBAAqB,MAAO;KAC7C;;IAGJ,UAAU,8BAAY;;GAI1B,aAAc;GACd;GAeA,OAAO;SAIP;AAAA,UAAO,yBAAO,OAAQ,WAAY;;;CAM1C,OAAO;;4BAKG,mBAAgD;AAAA,CAE1D,aAAa;CAEb,EAAI,+CAAwB,kBAAxB,MAAiC;AAAA,EAEjC,wDAAqB,eAAgB;EAErC,EAAI,sCAAqB,yBAAkB,GAEvC;AAAA,6CAAwB;;;;4BAmBtB;AAAA;;;CAEV,iBAAyB,UAAS,aAAY;CAE9C,OAAO,yBAAO,OAAQ,SAAU,WAAY,UAAW;;sCAgBpD,mBAEH;AAAA,iBAAgB;;;;;;;4BCpWb,WAAgB;AAAA,CAEnB,UAAK;CACL,UAAK;CAEL,iBAAY;;;;;SAcT;AAAA;;;EAEH,gBAAY,0BAAgB,EAAG,SAAU;EACzC,gBAAY,0BAAgB,EAAG,SAAU;EAEzC,OAAO;;QAYJ;AAAA;;;EAEH,gBAAY,0BAAgB,EAAG;EAC/B,gBAAY,0BAAgB,EAAG;EAE/B,OAAO;;gBAYX,WAAsC;AAAA,EAElC,EAAI,mBAAa,MAEb;AAAA,oBAAY,4BAAkB,QAAI;;EAItC,OAAO;;SAKX,WAEI;AAAA,SAAO;;SAKX,WAEI;AAAA,SAAO;;;;;;;;;;;;+BAkBJ,WAAgB;AAAA,CAEnB,aAAQ;CACR,aAAQ;CACR,qBAAgB;;;;;;UAKb,eAAwC;AAAA,EAE3C,gBAAY;EACZ,sBAAiB;;aAKd,YAAmC;AAAA,EAEtC,EAAI,sBAAgB,GAEhB;AAAA,UAAO,WAAM,aAAc,WAAO;SAE/B;AAAA,GAEH,YAAY,IAAI;GAChB,cAAc;GAEd;aAAa;GAAb,WAAa,YAAb;AAAA,IAAK,WAAL,AAAa,IAAb;;IAEI,EAAI,SAAQ,eAAe;AAAA,KAEvB,SAAS;KACT,UAAU;WAIV;AAAA,YAAO,eAAgB,QAAS,QAAQ;;;;EAQpD,OAAO;;WAWX,WAEI;AAAA,IAAI,qBAAe,GAAG;AAAA,GAElB,WAAW,WAAM,oBAAe;GAChC,OAAO;SAIP;AAAA,UAAO;;;;;;4BA8BR,+BAAwD;AAAA,CAE3D,WAAW;CACX,eAAe;CACf,gBAAgB;;;;;YAKb,kBAEH;AAAA,SAAO,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,KAAK,IAAI,eAAU,IAAI,IAAI;;;;4BAWpE,uBAEH;AAAA,iCAAO,IAAK,EAAG;;;;;;YAKH,kBAEZ;AAAA,SAAO,QAAQ,IAAI,CAAC,WAAM;;;;8BAoBvB,cAZX;AAAA,CAOe,AAPf,YAOe;CAOP,UAAK;CACL,UAAK;CAEL,cAAS;CAET,aAAQ,eAAW;;;;;;YAKhB,YAAmC;AAAA,EAEtC,SAAS,kBAAc,KAAK,kBAAc,IAAI;EAC9C,SAAS,kBAAc,KAAK,kBAAc,IAAI;EAE9C,YAAY,WAAW,GAAI,MAAM,CAAC,MAAM;EACxC,QAAQ,CAAC,QAAQ,eAAU;EAE3B,OAAO;;WAYJ,WAEH;AAAA,SAAO,eAAW;;;;;0CCtRf,qCAAkE;AAAA,CAErE,yBAAoB;CACpB,uBAAkB;CAElB,8CAAO,OAAQ,SAAU;CAEzB,EAAI,EAAC,qCAAkB,WAAY,UAE/B;AAAA,0BAAwB;;CAI5B,EAAI,EAAC,qCAAkB,WAAY,QAE/B;AAAA,wBAAsB;;CAI1B,UAAU;CAAV,SAAc;CAAd;;EAEI,4BAAwB;;;;;;;QAOhB,WAEZ;AAAA,eAAY;EAAZ,aAAoB;EAApB;GL0DI,SK1DJ;;;;YAKK;AAAA;;;EAEL,UAAU;EAAV,SAAc;EAAd;;GAEI,uBAAkB,KAAK,cAAe,qBAAiB,UAAU;;EAIrE,aAAY;EAAZ,aAAoB;EAApB;GL6CI,SK7CJ;;;EAEA,iEAAgB;;cAKX,WAA4B;AAAA,EAEjC;EACA;EACA;EAEA,UAAU;EAAV,SAAc;EAAd;;GAEI,eAAe,UAAU;GACzB,QAAQ,sBAAiB;GAEzB,AAAkB,qBAAiB,gBAAc;GAEjD,EAAI,QAAQ,UAAR,YAAyB,OAAQ,UAAR,cAAQ,QAAR,OAAQ,QAAa;AAAA,IAE9C,UAAU,yCAAqB,qBAAiB,aAAc,MAAO,oBAAe,KAAK;IACzF,0BAAsB;;;EAM9B,qBAAgB;EAChB,mBAAc;;UAKT,sBAAyC;AAAA,EAE9C,+DAAc;EAEd,EAAI,cAAQ;AAAA,GAER,UAAU;GAAV,SAAc;GAAd;;IAEI,uBAAkB,KAAK,cAAe,qBAAiB,UAAU;;GAIrE,aAAY;GAAZ,aAAoB;GAApB;ILFA,SKEA;;;;;;;8CC5FD,qCAEH;AAAA,+CAAO,OAAQ,SAAU;;;;;;QAKb,WAEZ;AAAA;YAAqB,eAAgB;EAArC,WAAqB,YAArB;AAAA,GAAK,mBAAL,AAAqB,IAArB;;GAEI,EAA4B,sCAAkB,YAAQ,eAElD;AAAA,IAAkB,YAAQ,gBAA1B,AAAwC,gBAAM,cAAe,gBAAY;UAIzE;AAAA,wBAAqB,YAAQ,aAAc,gBAAM,cAAe,gBAAY;;;;cAS/E,WAA4B;AAAA,EAEjC;EACA;EAEA;YAAqB,eAAgB;EAArC,WAAqB,YAArB;AAAA,GAAK,mBAAL,AAAqB,IAArB;;GAEI,OAAO,eAAM,cAAe,gBAAY;GAExC,EAAI,SAAQ,MAAM;AAAA,IAEd,cAAc;IAEd,EAA4B,sCAAkB,YAAQ,eAElD;AAAA,kBAAa,cAAe,YAAQ;WAEjC;AAAA,KAEH,UAAU;KACV,aAAa,oBAAqB,YAAQ;;IAK9C,UAAU,6CAAyB,YAAQ,aAAc,KAAM;IAC/D,0BAAsB;;;EAM9B,qBAAgB;EAChB,mBAAc;;UAKT,sBAEL;AAAA,IAAI,EAAC,aAAQ;AAAA,GAET;GACA;GAEA,oBAAoB,CAAC,cAAc,mBAAc;GAEjD,EAAI,iBAAgB,GAEhB;AAAA,oBAAgB;;GAIpB,EAAI,EAAC,kBAED;AAAA;;GAIJ,EAAI,EAAC,cAAS;AAAA,IAEV,SAAS,qBAAiB;IAE1B;cAAgB;IAAhB,WAAgB,YAAhB;AAAA,KAAK,eAAL,AAAgB,IAAhB;;KAEI,EAAI,mBAEA;AAAA,MAAkB,gBAAgB,yBAAlC,AAAwD,gBAAM,qEAA8C;YAI5G;AAAA,0BAAqB,gBAAgB,sBAAsB,gBAAM,qEAA8C;;;UAMpH;AAAA,IAEH,EAAI,EAAC,eAED;AAAA,cAAS,qBAAiB;WAI1B;AAAA,cAAS,qBAAiB,IAAI;;IAIlC;IAEA;eAAgB;IAAhB,YAAgB,aAAhB;AAAA,KAAK,eAAL,AAAgB,KAAhB;;KAEI,EAAI,EAAC,gBAED;AAAA,QAAI,mBAEA;AAAA,OAAkB,gBAAgB,yBAAlC,AAAwD,gBAAM,qEAA8C;aAI5G;AAAA,2BAAqB,gBAAgB,sBAAsB,gBAAM,qEAA8C;;YAMnH,EAAI,mBAEA;AAAA,MAAkB,gBAAgB,yBAAlC,AAAwD,WAAY,gBAAM,qEAA8C;YAIxH;AAAA,0BAAqB,gBAAgB,sBAAsB,WAAY,gBAAM,qEAA8C;;;;GAW3I,EAAI,kBAAiB,GAEjB;AAAA,MAAI,iBAAW,GAAG;AAAA,KAEd,cAAS;KAEL;;MAAiB,aAAU;MAAV;qDAAkB,UAAlB;AAAA,OLnD7B,QKmD6B,qBAAkB;aAAlB;AAAA,OL/C7B,QK+C6B,2BAAkB;;MAAnC,MAAiB,SAA8B;YAA/C;AAAA;;KAAJ,EAAI,MAEA;AAAA,oBAAU;MAAV,gDAAkB,YAAlB;AAAA,eAAkB,aAAW;aAA7B;AAAA,mCAAkB,UAAW;;;KAIjC,cAAU;KACV;WAEG;AAAA,KAEH,EAAI,gBAEA;AAAA,sBAAW,CAAC;;KAIhB,iBAAY;KACZ,kBAAa,iBAAY;KAEzB,EAAI,gBAAU,GAEV;AAAA;;;;GAQZ,EAAI,kBAEA;AAAA;;;;;;2CCtLL;AAAA;;;CAEH,cAAc;CACd,oBAAoB;CACpB,aAAa;CACb,cAAc;CACd,eAAe;;;;;;;+CDuMZ;AAAA;;;CAEH,+CAAO,OAAQ,aAAc,EAAG,EAAG;CAEnC,YAAY;;;;;;;;;;;;sCElNT,WAEH;AAAA,QAAO;;yCAKJ,WAEH;AAAA,QAAO;;uCAKJ,WAEH;AAAA,QAAO;;qCAgBJ,WAAgB;AAAA;;;;uCAeF,kBACjB;AAAA,CAAW,SAAqB,IAAE;CAAlC,OAAO,IAAI,EA+DN,MA/DsC,KAAhC,sBAA6B,IAA7B,gDAA6B,IAA7B,WAkEW,MAlEX,8DAA6B,IAA7B,WAoEW,MApEX,qCAA6B,IAA7B,WAsEW,MAtEX,wCAAqC;;;YAV7C,YACH;AAAA,EAAO,QAAyB,IAAN;EAA1B,OAAO,AAAuB,IAAvB,EAwEF,KAxE2B,KAAzB,2EA2Ee,KA3Ef,qEA6Ee,KA7Ef,6CA+Ee,KA/Ef;;QAIJ,kBACH;AAAA,EAAO,SAAyB,IAAN;EAA1B,OAAO,AAAuB,IAAvB,EAmEF,MAnE2B,KAAzB,sBAAuB,IAAvB,gDAAuB,IAAvB,WAsEe,MAtEf,8DAAuB,IAAvB,WAwEe,MAxEf,qCAAuB,IAAvB,WA0Ee,MA1Ef,wCAAqB;;;;wCAazB,WAAgB;AAAA;;;;;YAMhB,YAEH;AAAA,IAAI,KAAI,IACJ;AAAA,GAAO,QAA8B,IAAX,IAAE;GAA5B,OAAO,CAA2B,IAA3B,EA6CN,KA7CoC,KAA9B,2EAgDW,KAhDX,qEAkDW,KAlDX,6CAoDW,KApDX,uCAAmC;SAE1C;AAAA,GAAO,SAAoB,IAAE,IAAE;GAA/B,OAAO,EA2CN,MA3CuC,KAAjC,8EA8CW,MA9CX,uEAgDW,MAhDX,8CAkDW,MAlDX,uCAAsC,KAAO;;;QAKrD,kBAEH;AAAA,IAAI,KAAI,IAAE,GACN;AAAA,GAAO,SAA8B,IAAX,IAAE;GAA5B,OAAO,CAA2B,IAA3B,EAmCN,MAnCoC,KAA9B,sBAA2B,IAA3B,gDAA2B,IAA3B,WAsCW,MAtCX,8DAA2B,IAA3B,WAwCW,MAxCX,qCAA2B,IAA3B,WA0CW,MA1CX,yCAAmC,KAAK;SAE/C;AAAA,GAAO,SAAoB,IAAE,IAAE;GAA/B,OAAO,EAiCN,MAjCuC,KAAjC,sBAA8B,IAA9B,gDAA8B,IAA9B,WAoCW,MApCX,8DAA8B,IAA9B,WAsCW,MAtCX,qCAA8B,IAA9B,WAwCW,MAxCX,wCAAsC,KAAK,IAAE,KAAK;;;;;sCAa1D,WAAgB;AAAA;;;;wCAmBF,kBACjB;AAAA,GAAI,EAAC,KAAG,KAAK,qBACT;AAAA,SAAO,IAAE,CAAC,SAAO,IAAE,KAAK;QACrB,EAAI,KAAI,qBACX;AAAA,SAAO,IAAE,CAAC,SAAO,CAAC,KAAG,uBAAY,IAAI,OAAO;QACzC,EAAI,KAAI,qBACX;AAAA,SAAO,IAAE,CAAC,SAAO,CAAC,KAAG,uBAAa,IAAI,SAAS;QAE/C;AAAA,SAAO,IAAE,CAAC,SAAO,CAAC,KAAG,uBAAc,IAAI,WAAW;;;;YArBnD,YAEH;AAAA,EAAO,QAAoB;EAApB,IAYF,KAZ4B,KAA1B;;;oBAee,KAff;;oBAiBe,KAjBf;;oBAmBe,KAnBf;;;QAKJ,kBAEH;AAAA,EAAO,SAAoB;EAApB,IAKF,MAL4B,KAA1B;UAAwB,IAAxB,qBAAsB;SAAtB;UAAwB,IAAxB,WAQe,MARf,mCAAsB;SAAtB;UAAwB,IAAxB,WAUe,MAVf,qCAAsB;SAAtB;AAAA,UAAwB,IAAxB,WAYe,MAZf,uCAAsB;;;;;;;;;qCCzG1B,WAEH;AAAA,QAAO;;wCAKJ,WAEH;AAAA,QAAO;;sCAKJ,WAEH;AAAA,QAAO;;oCAWJ,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,IAAI,IAAI;;QAKZ,kBAEH;AAAA,SAAO,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI;;;;uCAW3B,WAAgB;AAAA;;;;;YAOhB,YAEI;AAAA,KAAC,CAAC,KAAK,OAAS,GAAK;AAAA,gBAAM,IAAI,IAAI;SAAI;AAAA,gBAAM,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI;;;QAKrE,kBAEI;AAAA,KAAC,CAAC,KAAK,IAAI,KAAK,GAAK;AAAA,cAAI,IAAI,IAAI,IAAI,IAAI;SAAI;AAAA,cAAI,IAAI,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK;;;;;qCAWlF,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,EAAE,IAAI,IAAI,IAAI;;QAKlB,kBAEH;AAAA,EAAY,AAAC,IAAI,IAAI,IAAI;EAAzB,OAAO,IAAI,CAAC,AAAC,IAAiB,IAAI,IAAI,KAAK;;;;;;;;uCChGxC,WAEH;AAAA,QAAO,oCAAmB,IAAK;;0CAK5B,WAEH;AAAA,QAAO,uCAAsB,IAAK;;wCAK/B,WAEH;AAAA,QAAO,qCAAoB,IAAK;;sCAe7B,cAAgC;AAAA,CAEnC,SAAS;CACT,SAAS;;;;;;YAKN,YAAmC;AAAA,EAEtC,EAAI,MAAK,GAAG;AAAA,UAAO;;EAAG,EAAI,MAAK,GAAG;AAAA,UAAO;;EACzC;EACA,EAAI,UAAI,GAAG;AAAA,GAAE,SAAI;GAAG,IAAI,SAAI;SACvB;AAAA,OAAI,SAAI,CAAC,IAAI,WAAW,UAAW,IAAI;;EAC5C,OAAO,CAAC,CAAC,SAAI,SAAS,EAAG,KAAK,EAAC,KAAW,SAAU,CAAC,IAAI,KAAK,CAAC,IAAI,WAAW;;QAK3E,kBAAyD;AAAA,EAE5D,EAAI,MAAK,GACL;AAAA,UAAO;;EAEX,EAAI,EAAC,KAAK,MAAM,GACZ;AAAA,UAAO,IAAI;;EAEf;EACA,EAAI,UAAI,SAAS,IAAI;AAAA,GACjB,SAAI;GACJ,IAAI,SAAI;SAGR;AAAA,OAAI,SAAI,CAAC,IAAI,WAAW,UAAU,IAAI;;EAE1C,OAAO,CAAC,CAAC,SAAI,SAAS,EAAG,KAAK,EAAC,KAAW,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,WAAW,WAAM;;;;yCAepF,cAAgC;AAAA,CAEnC,SAAS;CACT,SAAS;;;;;;YAIN,YAAmC;AAAA,EAEtC,EAAI,MAAK,GACL;AAAA,UAAO;;EAEX,EAAI,EAAC,KAAK,QAAU,GAChB;AAAA,UAAO;;EAGX,QAAc;EACd,QAAc;EACd,QAAc,IAAI;EAElB,EAAI,KAAI,GACJ;AAAA,UAAO,OAAO,CAAC,SAAS,EAAG,KAAK,EAAC,KAAW,SAAS,CAAC,IAAI,KAAK,CAAC,IAAI,WAAW;;EAEnF,OAAO,SAAS,EAAG,MAAM,EAAC,KAAW,SAAS,CAAC,IAAI,KAAK,CAAC,IAAI,WAAW,KAAK,MAAM;;QAKhF,kBAAyD;AAAA,EAE5D,EAAI,MAAK,GACL;AAAA,UAAO;;EAEX,EAAI,EAAC,KAAK,IAAI,MAAM,GAChB;AAAA,UAAO,IAAI;;EAEf;EACA,EAAI,UAAI,SAAS,IAAI;AAAA,GACjB,SAAI;GACJ,IAAI,SAAI;SAGR;AAAA,OAAI,SAAI,CAAC,IAAI,WAAW,UAAU,IAAI;;EAE1C,EAAI,KAAI,GACJ;AAAA,UAAO,OAAO,CAAC,SAAI,SAAS,EAAG,KAAK,EAAC,KAAW,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,WAAW,WAAM;;EAEjG,OAAO,SAAI,SAAS,EAAG,MAAM,EAAC,KAAW,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,WAAW,UAAK,MAAM,IAAI;;;;uCAe5F,cAAgC;AAAA,CAEnC,SAAS;CACT,SAAS;;;;;;YAKN,YAAmC;AAAA,EAEtC,EAAI,MAAK,GAAG;AAAA,UAAO;;EAAG,EAAI,MAAK,GAAG;AAAA,UAAO;;EACzC;EACA,EAAI,UAAI,GAAG;AAAA,GAAE,SAAI;GAAG,IAAI,SAAI;SACvB;AAAA,OAAI,SAAI,CAAC,IAAI,WAAW,UAAW,IAAI;;EAC5C,OAAO,AAAC,SAAI,SAAS,EAAG,MAAM,KAAK,SAAS,CAAC,IAAI,KAAK,CAAC,IAAI,WAAW,UAAM;;QAKzE,kBAAyD;AAAA,EAE5D,EAAI,MAAK,GACL;AAAA,UAAO;;EAEX,EAAI,EAAC,KAAK,MAAM,GACZ;AAAA,UAAO,IAAI;;EAEf;EACA,EAAI,UAAI,SAAS,IAAI;AAAA,GACjB,SAAI;GACJ,IAAI,SAAI;SAGR;AAAA,OAAI,SAAI,CAAC,IAAI,WAAW,UAAU,IAAI;;EAE1C,OAAO,SAAI,SAAS,EAAG,MAAM,KAAK,SAAS,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,WAAW,UAAK,IAAI;;;;;;;;oCCnL/E,WAEH;AAAA,QAAO;;uCAKJ,WAEH;AAAA,QAAO;;qCAKJ,WAEH;AAAA,QAAO;;mCAWJ,WAAgB;AAAA;;;;;YAOhB,YAEI;AAAA,UAAK,GAAI;AAAA;SAAI;AAAA,mBAAS,EAAG,KAAK,CAAC,IAAI;;;QAKvC,kBAEI;AAAA,UAAK,GAAI;AAAA;SAAI;AAAA,cAAI,SAAS,EAAG,KAAK,CAAC,IAAI,IAAI,MAAM;;;;;sCAWrD,WAAgB;AAAA;;;;;YAOhB,YAAmC;AAAA,EAEtC,EAAI,MAAK,GAAK;AAAA,UAAO;;EACrB,EAAI,MAAK,GAAK;AAAA,UAAO;;EACrB,EAAI,EAAC,KAAK,OAAW,KACjB;AAAA,UAAO,MAAM,SAAS,EAAG,KAAK,CAAC,IAAI;;EAEvC,OAAO,MAAM,CAAC,IAAI,SAAS,EAAG,MAAM,EAAE;;QAKnC,kBAAyD;AAAA,EAE5D,EAAI,MAAK,GACL;AAAA,UAAO;;EAEX,EAAI,MAAK,GACL;AAAA,UAAO,IAAI;;EAEf,EAAI,EAAC,KAAK,IAAI,OAAO,KACjB;AAAA,UAAO,IAAI,IAAI,SAAS,EAAG,KAAK,CAAC,IAAI,MAAM;;EAE/C,OAAO,IAAI,IAAI,CAAC,IAAI,SAAS,EAAG,MAAM,EAAE,MAAM;;;;oCAW3C,WAAgB;AAAA;;;;;YAOhB,YAEI;AAAA,UAAK,GAAI;AAAA;SAAI;AAAA,UAAC,IAAI,SAAS,EAAG,MAAM;;;QAKxC,kBAEI;AAAA,UAAK,GAAI;AAAA,cAAI;SAAI;AAAA,cAAI,CAAC,IAAI,SAAS,EAAG,MAAM,IAAI,MAAM;;;;;;;;;wCCjH1D,WAEH;AAAA,QAAO;;uCAWJ,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO;;QAKJ,kBAEH;AAAA,SAAO,IAAI,IAAI,IAAI;;;;mCVAhB,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,IAAI;;QAKR,kBAEH;AAAA,SAAO,IAAI,CAAC,KAAK,KAAK,IAAI;;;;sCAWvB,WAAgB;AAAA;;;;;YAOhB,YAAmC;AAAA,EAEtC,EAAI,EAAC,KAAK,KAAK,GACX;AAAA,UAAO,MAAQ,IAAI;;EAEvB,OAAO,OAAS,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK;;QAKlC,kBAAyD;AAAA,EAE5D,EAAI,EAAC,KAAK,IAAI,KAAK,GACf;AAAA,UAAO,IAAI,IAAI,IAAI,IAAI;;EAE3B,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK;;;;;;;;oCW7EvC,WAEH;AAAA,QAAO;;uCAKJ,WAEH;AAAA,QAAO;;qCAKJ,WAEH;AAAA,QAAO;;mCAWJ,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,IAAI,SAAS,IAAI,CAAC,UAAU;;QAKhC,kBAEH;AAAA,SAAO,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,UAAU,MAAM,IAAI;;;;sCAW/C,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,CAAE,CAAC,SAAS,UAAU,KAAK,KAAK;;QAKpC,kBAEH;AAAA,SAAO,CAAC,IAAI,IAAI,CAAC,SAAS,UAAU,IAAI,KAAK,KAAK;;;;oCAW/C,WAAgB;AAAA;;;;;YAOhB,YAEH;AAAA,SAAO,SAAS,IAAI,CAAC,UAAU;;QAK5B,kBAEH;AAAA,SAAO,IAAI,SAAS,IAAI,IAAI,CAAC,UAAU,MAAM;;;;+BCtGjD,WACI;AAAA,iBAAW;;;;;6BAGR;AAAA;;;EAEI,OAAQ,UAAU,UAAW,WAA7B;;+BAIJ,WAAgD;AAAA,EAGnD,SAAe,UAAW;EAI1B,SAAe,CAAC,KAAK,AAAC,IAAI,iBAAkB;EAG5C,OAAO,mBAAY,KAAG,SAAS,IAAK,KAAG,SAAS;;oBAI7C,gCAAuF;AAAA,EAE1F,GAAI,WAAJ;GAAI,UAAS;;EAEb,QAAe;EACf,YAAkB;EAClB,QAAc,QAAQ;EAEtB,UAAS;EAAT,SAAe;EAAf;;GAEI,EAAI,CAAC,AAAE,AAAC,OAAO,OAAK,YAAa,YAAa,AAAC,AAAC,OAAO,OAAK,YAAa,YACtE,AAAC,WAAW,CAAE,AAAC,OAAO,OAAK,YAAa,CAAC,OAAO,OAAK,cAAc,CAAC,WAAW,CAAC,OAAO,OAAK,cACxF,CAAE,AAAC,OAAO,OAAK,YAAa,CAAC,OAAO,OAAK,cAAc,CAAC,OAAO,OAAK,YACvE;AAAA,QAAI,CAAC;;GAGT,IAAI;;EAGR,OAAO;;qBAQJ,2BAAuE;AAAA,EAE1E,QAAQ;EACR,YAAY;EACZ,QAAQ,QAAQ;EAEhB,UAAU;EACV,UAAU;EAEV,UAAS;EAAT,SAAe;EAAf;;GAEI,cAAc,mBAAmB;GACjC,cAAc,mBAAmB;GAEjC;YAAgB;GAAhB,SAA2B;GAA3B;;;;;;;;;;;;;;;;;;;;;GACA;GAAmB;;;;;;;;;GAAnB;;;WAAmB;GAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,gBAAgB;GAChB,gBAAgB;GAEhB;aAAgB;GAAhB,UAA2B;GAA3B;;;;;;;;;;;;;;;;;;;;;GACA;GAAmB;;;;;;;;;GAAnB;;;YAAmB;GAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,gBAAgB;GAChB,gBAAgB;GAEhB,EAAI,CAAC,AAAE,YAAc,YAAa,AAAC,YAAc,YAC9C,AAAC,WAAW,CAAE,YAAc,aAAe,CAAC,WAAW,aACnD,CAAE,YAAc,aAAe,WAClC;AAAA,QAAI,CAAC;;GAGT,IAAI;;EAIR,OAAO;;uBAMJ,yDAAuH;AAAA,EAM9G;;;;;;;;;EAAmB,SAAgB,iBAAhB,AAA8B;EAA9B,SAAgB,iBAAhB,AAA8B;EAA9B,SAAgB,iBAAhB,AAA8B;EAA9B;;;;;;;;;;;;;;;;;;;;;;;;;;;EAA/B,YAAY;EACZ,YAAY,kBAAmB,aAAnB,kBAAmB,aAAnB,kBAAmB;EAE/B,QAAQ,QAAQ;EAET;;;;;;;;;EAAuB,UAAgB,aAAU;EAA1B,UAAgB,aAAU;EAA1B,UAAgB,aAAU;EAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAvB,0BAAW,eAAX,IAAW,eAAX,IAAW,eAAX;;;;uBC9GX,WAAe;AAAA;;;yBAEM,0BAA6C;AAAA,CAE9D,QAAQ,SAAU,GAAI;CACtB,OAAO,AAAE,CAAQ,QAAQ,IAAhB,KAAqB;;wBAIb,yBAAoD;AAAA,CAEjE,GAAM,IAAG;EAAb,IAAa;QAAT,GAAM,IAAM;EAAhB,IAAgB;QAAN;AAAA,EAAV,IAAU;;CAEV,OAAO,AAAC,QAAQ,IAAI,CAAC,SAAS;;gCAIb,gCAAmE;AAAA,CAGpF,EAAI,aAAY,GAAM;AAAA,aAAW;;CAEjC,OAAO,CAAC,AAAC,QAAQ,CAAC,WAAW,KAAM,UAAU;;yBAI5B,oBACV;AAAA,IAAE,QAAQ,GAAM;AAAA;QAAI,EAAE,CAAE,QAAQ,GAAM;AAAA;QAAI;AAAA;;;0BAGhC,oBACV;AAAA,IAAE,QAAQ,GAAM;AAAA;QAAI,EAAE,CAAE,QAAQ,GAAM;AAAA;QAAI;AAAA;;;gCAGhC,kBACV;AAAA,YAAQ,GAAI;AAAA;QAAI;AAAA;;;gCAGN,sCACV;AAAA,aAAS,aAAe;AAAA,kBAAS;QAAjC;AAAA;;;8BAGU,8BAA+D;AAAA,CAEhF,eAAqB,AAAQ,UAAR;CACrB,gBAAsB,QAAQ;CAC9B,aAAmB,WAAW,CAAC,UAAU,SAAS;CAElD,OAAO,UAAU,AAAC,SAAS;;wCAIV,iBAA0C;AAAA,CAE3D;CACA,UAAU,UAAU;CACpB,UAAU,UAAU;CACpB,UAAU,UAAU;CACpB,UAAU,UAAU;CACpB,UAAU,UAAU;CAGb,OAFP;;8BAMiB,4BACjB;AAAA,QAAO,KAAK,CAAE,QAAQ,MAAO,CAAE,KAAK,MAAO,CAAE,KAAK;;8BAGjC,oBAA6D;AAAA,CAE9E,EAAI,MAAK,KACL;AAAA,SAAO;;CAGX,EAAI,MAAK,KACL;AAAA,SAAO;;CAGX,IAAI,CAAE,IAAI,OAAQ,CAAE,MAAM;CAE1B,OAAO,IAAI,IAAI,CAAE,IAAI,IAAI;;gCAIR,oBAA+D;AAAA,CAEhF,EAAI,MAAK,KACL;AAAA,SAAO;;CAGX,EAAI,MAAK,KACL;AAAA,SAAO;;CAGX,IAAI,CAAE,IAAI,OAAQ,CAAE,MAAM;CAE1B,OAAO,IAAI,IAAI,IAAI,CAAE,IAAI,CAAE,IAAI,IAAI,MAAO;;wBAKzB,YACV;AAAA,IAAC,KAAK,GAAK;AAAA;QAAI;AAAA;;;yBAIL,YACV;AAAA,IAAC,IAAI,GAAK;AAAA;QAAK,EAAC,CAAC,IAAI,GAAK;AAAA;QAAI;AAAA;;;2BAIpB,kBACjB;AAAA,QAAO,UAAU;;2BAIA,kBACjB;AAAA,QAAO,UAAU;;gCAIA,cACjB;AAAA,QAAO,IAAI,IAAI,IAAI;;8BAIF,cACjB;AAAA,QAAO,UAAU,AAAa,QAAb,AAAe;;iCAIf,2BAA8D;AAAA,CAC/E,EAAG,WAAU,GAAG;AAAA,SAAO;;CAChB,aAAa;CAApB,OAAO;;2BAIU,4BACjB;AAAA,QAAO,IAAI,SAAS,IAAI;;;;;wBClIrB,wBAAoC;AAAA,CAGnC,IACI,iBAAgB,IADpB;AAAA,gFvDkMkB,CAAC,QuDhMd,+HvDgMgC;;CuD5LlC,2BAAU;CAAjB,YAAO;;;;;MAOG,WACV;AAAA,SAAO,CAAC,YAAO,AAAC,YAAO,QAAS,cAAY,aAAW;;WAK7C,kBAA2D;AAAA,EACrE,EAAG,QAAO,MAAM;AAAA,GAAE,MAAM;GAAK,MAAM;;EACnC,OAAO,+EAAQ,CAAE,MAAM,OAAQ;;SAKrB,kBAAuD;AAAA,EACjE,EAAG,QAAO,MAAM;AAAA,GAAE,MAAM;GAAK,MAAI;;EACd,WAAM;EAAN,WAAU;EAAV;GARD,OAQC;GARU,OAQV;;EAAnB,OAAO,WAAY;;QAKT;AAAA;;;EACV,OAAO,AAAC,6EAAQ;;QAKN;AAAA;;;EACH,GAAC,6EAAQ,QAAU;AAAA;SAAI;AAAA;;;OAKpB;AAAA;;;EACH,GAAC,6EAAQ,QAAU;AAAA;SAAI;AAAA;;;SAIpB,WAAiB;AAAA,EAC3B,QAAQ;EACR,2BAAU;;eAQH,mBAAyC;AAAA,EAC5C,eAAU,YAAO;EACjB,OAAO;;;;;uBChEf,gBAA6B;AAAA,CAGzB,YAAO;CAEP,gBAAW;CACX,cAAS,sBAAsB,gBAAc;CAE7C,oBAAe,CAAE,QAAS,KAAM,KAAM,KAAM;;;;;WAKzC,cACH;AAAA,SAAQ,KAAE,eAAa,MAAG,iBAAe,OAAI,gBAAc,MAAG,iBAAe;;YAK1E,cAA2C;AAAA,EAI9C,EAAG,QAAO,MACN;AAAA,SAAM,WAAW;;EAGrB,8BACI;AAAA,KAAI,SAAQ,GAAG;AAAA,IACX,YAAY,AAAC,KAAK,CAAC,QAAQ;IAC3B,EAAI,SAAQ,IAAM;AAAA,cAAS;;IAC3B,OAAO,oBAAoB;UACxB;AAAA,WAAO,AAAW,6CAAc;;;EAG3C,QAAQ,AAAQ,MAAM,KAAd;EACR,QAAQ,AAAQ,MAAM,KAAd;EACR,EAAI,KAAI,GAAG;AAAA,UAAO,cAAS,KAAK,QAAQ;SACnC;AAAA,UAAO,WAAW,QAAQ;;;cAO5B,WACH;AAAA,SAAO,UAAM;;QAKV,iBACH;AAAA,SAAO,cAAU;;YAKd,iBAAwC;AAAA,EAG3C,YAAkB;EAClB,UAAS;EAAT,SAAa;EAAb;;GACI,QAAQ,AAAC,CAAC,SAAS,KAAK,QAAS,uBAAkB;;EAGvD,OAAO;;aAKJ,WAEH;AAAA,EAAyC;EAAzC,OAAO,uBAAuB,WAAW,8EAAU;;cAKhD;AAAA;;;EAEH,aAAc;EAEV,YAAY;EAEZ;EACA;EAEA,YAAkB,AAAQ,SAAS,aAAc,UAA/B;EAElB,UAAS;EAAT,SAAe;EAAf;;GACI,gBAA2C,MAAM;GAE1C,gBAAM;GAAN,aACH;IAAsB,WADnB;IACa,WADb;IACU,QADV;IAEC,EAAO;gBACH;MAAuB,aADpB;MACS,gBADT;MAEC,UAAW,WAAO,OAAI,MAAE,OAAI,OAAG,YAAS,MAAE;;;;GAM1D,EAAG,MAAK,QAAQ,GACZ;AAAA,cAAW;;;EAIvB,OAAO;;oBAKJ,gBAEI;AAAA,kBAAa,MAAM,OACnB,aAAa,MAAM,OACnB,cAAc,UAAU,MACxB,cAAc,SAAS,IAEzB;AAAA,OAAE,eAAc,SAAS,MACvB,cAAc,QAAQ,cAAc,OACpC;AAAA,yBAAc,QAAQ,cAAc;UAFtC;AAAA;;SALE;AAAA;;;wBAWJ;AAAA;;;;;;EAEH,aAA6B;EAEzB,qBAAqB;EACrB,qBAA4B;EAG5B,aAAa,QAAQ,SAAS;EAC9B,gBAAuB,SAAS,AAAC,MAAG,QAAO,aAAc;EACzD,aAAa,QAAS,MAAK,SAAS;EACpC,gBAAwB,SAAS,AAAC,MAAG,QAAO,cAAe;EAC3D,aAAa,QAAS,MAAK,SAAS;EACpC,gBAAwB,SAAS,AAAC,MAAG,QAAO,cAAe;EAG3D,EAAG,6BAAmB,SAAS;AAAA,GAC3B,iBAAiB;GACjB,iBAAiB;SACd,EAAG,6BAAmB,SAAS;AAAA,GAClC,iBAAiB;GACjB,iBAAiB;SACd,EAAG,6BAAmB,SAAS;AAAA,GAClC,iBAAiB;GACjB,iBAAiB;SAEjB;AAAA,kBAAM,6BAA6B,QAAQ,gCAAgC,SAAS,WAAW,SAAS,WAAW,SAAS,IAA5H;;EAGR,EAAG,mBAAkB,IAAI;AAAA,GACP;;;IAAd,cAAc;IAIV,EAAG,sBAAqB,aACpB;AAAA,iBAAa;;;GAIrB,YAAY,cAAiC;AAAA,IAEzC,EAAG,MAAK,GAAG;AAAA,YAAO;;IAElB,qBAAqB;IACrB,eAAe,aAAa,uBAAuB;IAEnD,qBAAqB;IACrB,eAAe,aAAa,uBAAuB;IAEnD,EAAG,YAAW,UAAU;AAAA,YAAO;;IAE/B,OAAO;;;EAMf,OAAO;;gCAMJ;AAAA;;;EAEH,aAAa;EA0Bb,YAAY;EACZ,cAAc;EACA;OAAE,KAAK;EAArB,cAAc;EACd,YAAY;EAEZ,QAAW;EAAX;;GAAoB,WAApB;GAxBQ,IAwBR;;KAAoB,gBAApB;GAAoB,WAAT;;EACX,UAAU,YAAa;AAAA,gBAAa;;EAEpC,QAAQ;EAER,UAAU;EAAV,UAAgB,IAAE;EAAlB;;GAEI,WAAW;GACX,QAAQ;GAER;IAAO;;eAAiB,IAAjB;cAAoB;IAApB;cAzBP;KAyBO,AAzBuB,SAyBvB,AAAQ,QAAR;;gBAAoB,IAAH,IAAjB,MAA0B,SAA1B;AAAA,WAAqC,IAAI;WAAzC;AAAA;;IAAP,EAAO,OAAP;AAAA;;IACuB;eAAiB,IAAjB;cAAoB;IAApB;cA1BvB;KA0BuB,AA1BO,UA0BP,AAAQ,QAAR;;IAAnB,QAAQ,AAAC,UAAU,WAAoB,IAAH,IAAjB;IACnB,OAAM,AAAQ,SAAS,EAAE,KAAK,UAAQ,IAAI,KAApC,KAA4C;IAClD;;GAGK;cAAO;GAAP;;;KAzBgC,MAyBhC;;;GAAT,SAAS;GACT,UAAQ,KAAK;GACb,QAAW,OAAK;GAAhB,QAAM,KAAN;;EAIJ,WAAW;EACX,KAAM,KAAI,GAAV;AAAA,GACI,eAAgB,YAAY,QAAM,KAAG,EAAG,QAAS;GACjD,IAAI,QAAM,KAAK;GACf;;EAGJ,EAAG,kBAAiB,GAAG;AAAA,eAAY;;EACnC,OAAO;;oBAMJ;AAAA;;;;;;EAMU,yBAAU,UAAO,UAAQ,sBAAkB,UAAQ,KAAnD,AAAyD,aAAzD;EAAb,aAAa,AAAwE,cAAxE,QAAgF,SAAM;EAEnG,OAAO,kBAAkB;;mBAKtB;AAAA;;;EAEH,YAAY,SAAS,IAAI,IAAI,WAAW,SAAS,SAAS,SAAS;EACnE,kBAAkB,QAAQ,SAAS,KAAM;EACvB,oBAAoC;EAApC,AAAd,cAAc,CAAuB,cAAvB;EAElB,OAAO,cAAe,MAAK,kBAAa;;kBAKrC,gBAAwD;AAAA,EAE3D,EAAI,UAAS,MAAM;AAAA,UAAO;;EAC1B,YAA0B,kCAAoB;EAC9C,UAAU;EAAV,SAAgB;EAAhB;;GAA8B,QAAU,KAAV,AAAa,MAAM,KAAnB;;EAE9B,OAAO;;qBAOJ,kBAA8D;AAAA,EAEjE,YAAY;EACZ,WAAW,QAAQ;EACnB,YAAY;EAEZ,KAAM,SAAQ,OAAd;AAAA,GAEI,QAAQ,QAAQ;GAChB,QAAQ,QAAQ,QAAM;GACtB,QAAQ,QAAQ,QAAM;GACtB,QAAQ,QAAQ,QAAM,KAAK;GAE3B,QAAQ,SAAW,AAAQ,IAAE,IAAV;GACnB,QAAQ,QAAM,KAAK,AAAQ,IAAE,IAAV;GACnB,QAAQ,QAAM,KAAK,AAAQ,IAAE,IAAV;GAEnB,SAAS;;EAIb,OAAO;;gCAOJ,kBAAyE;AAAA,EAE5E,YAAY;EACZ,WAAW,QAAQ;EACnB,YAAY;EAEZ,KAAM,SAAQ,OAAd;AAAA,GAEI,QAAQ,QAAQ;GAChB,QAAQ,QAAQ,QAAM;GACtB,QAAQ,QAAQ,QAAM;GACtB,QAAQ,QAAQ,QAAM;GAEtB,QAAQ,SAAW,IAAI;GACvB,QAAQ,QAAM,KAAK,IAAI;GACvB,QAAQ,QAAM,KAAK,IAAI;GAEvB,SAAS;;EAIb,OAAO;;;;;;;wDClWU,cACjB;AAAA,CAAO;;;;;;;;;;CAAP,OAAO,QAAe;;wDAGL,cACjB;AAAA,CAAW;;;;;;;;;;CAAX,OAAO,IAAI;;0DAGM,cACjB;AAAA,QAAO,AAAK,AAAC,IAAY;;uDAGR,cACjB;AAAA,QAAO,AAAC,IAAa,AAAC;;0DAGL,cACjB;AAAA,QAAO,AAAK,AAAC,IAAY;;wDASf;AAAA;CACV,EAAI,EAAC,MAAiB,QAAjB,AAAiB,QAAjB,sBAAiB,QAAjB,AAAiB,QAAjB,qBAAiB,QAAjB,AAAiB,QAAjB,SACD;AAAA,QAAM,sEAA2B;;CAErC,QAAO;CAJG;;4DAOA,gBACV;AAAA,CAAO;IAA+B,SAA/B;kCAA+B;EAA/B;;;mCAA+B,SAA/B,mCAA+B,QAA/B;;;;;;yDAEG,gBACV;AAAA,QAAO;;uCClCG,YANlB;AAAA,CAgBS,AAhBT,SAgBS;CATP,cAAS;CACT,aAAQ;CACR,gBAAW;;;;;UAGK,WAChB;AAAA,SAAO,aAAQ;;QAIC,WAA4B;AAAA,EAC5C,SAAI;EACJ;;EAAS,YAAkC;EAAlC;2BAA0C;EAAnD,mBAAS;EACG,YAA6B;EAA7B;EAAZ,OAAO,AAAK,2DAAqC;;;;;;;;;;;;2DCDjC,WAMV;AAAA,QAAO;;iDAOU,kBACvB;AAAA,CAAO,YAAgB;CAAhB;yBAA8B;;kDAOd,kBACvB;AAAA,CAAO,YAAgB;CAAhB;CAAP,OAAO,2DAA+B;;6CAOf,kBACvB;AAAA,CAAO,YAAgB;CAAhB;;0BAA0B;CAA1B,qCAA0B,MAA1B;;;;qDAOgB,gCACvB;AAAA,CAAO,YAAgB;CAAhB;CAAP,OAAO,8DAAkC,WAAY;;uDAO9B,kBACvB;AAAA,CAAO,YAAgB;CAAhB;0BAAoC;CAApC;;;;;;2DAOgB,kBACvB;AAAA,CAAO,YAAgB;CAAhB;0BAAwC,QAAxC;;;;;;;yDAOgB,kCACvB;AAAA,CAAO,YAAgB;CAAhB;;IAA6C,mBAA7C;eAAsC;EAAtC;;YAA6C,mBAA7C;;GCgEG,UDhEH;KCiEK;;EDjEL;;eAAsC;EAAtC;iBAA6C,mBAA7C;;GCyEG,UDzEH;KC0EK;;ED1EL;;;iEAQgB,kCACvB;AAAA,CAAO,YAAgB;CAAhB;;wBAA6C,CAAC;CAA9C;eAAsC;EAAtC;;;;GCuDG,UDvDH;KCwDK;;EDxDL;;eAAsC;EAAtC;;;GCgEG,UDhEH;KCiEK;;EDjEL;;;oDAMgB,oBACjB;AAAA,CAAO;IAAmB,aAAnB;kCAAmB;EAAnB;;;mCAAmB,aAAnB,mCAAmB,YAAnB;;;;;;qDAMU,qBACjB;AAAA,CAAO;;mBAAoB;CAApB;;;;;;;;;;+CASU,YACvB;AAAA,aAAgB;CAAhB;;;oDAMgB,YACV;AAAA,KAAI;AAAA,EACA,YAAS;EAAT;;EACA,OAAO;;;6BAEP;KAAQ,SACR;IAA6B,YADrB;IAEJ,OAAO;UAEP;AAAA,UAAM;;;;;8CE3HJ,gCANlB;AAAA,CAgBS,AAhBT,SAgBS;CATD,cAAS;CACT,aAAa;CACb,gBAAgB;;;;;UAGN,WACV;AAAA,SAAO,aAAQ;;QAIL,WAAsB;AAAA,EACtC,SAAI;EACE;;EAAS,YAAkC;EAAlC;2BAA0C;EAAnD,mBAAS;EACT,OAAO;;;;;;;6CCXU,gBACjB;AAAA,QAAO,AAAC,KAAK,SAAU,KAAM,AAAC,KAAK;;iDAElB,YACjB;AAAA,QAAO,CAAC,KAAK,MAAM;;gDAEF,YACjB;AAAA,QAAO,AAAC,IAAI,OAAS;;sCAEJ,eACV;AAAA,SAAgB,QAAQ,QAAQ,WAAgB,CAAC,UAAgB,QAAhB,AAAgB,QAAhB,QAAyB;AAAA,UAAC,UAAe,QAAf,AAAe,QAAf;QAA3E;AAAA;;;6CAGU,eACV;AAAA,aAAoB,MAAQ;AAAA,iBAAQ;QAApC;AAAA;;;4CAGU,eACV;AAAA,aAAmB,MAAQ;AAAA,iBAAQ;QAAnC;AAAA;;;;;;qCCjBU,YACjB;AAAA,CAAO,YAAgC;CAAhC;sEAAmC,EAAG;;qCAK5B,kBAAmD;AAAA,CAI5D,YAAoC;CAApC;;CAAR;CAAQ,GAA0C,SAA1C;eAAuC;EAAvC;;aAA0C,SAA1C;;GH6HJ,UG7HI;KH8HF;;EG9HN,IAAQ;;eAAuC;EAAvC;iBAA0C,SAA1C;;GHsIJ,UGtII;KHuIF;;EGvIN,IAAQ;;CACD,YAAwB;CAAxB;;2BAA2B;CAA3B,qCAA2B,EAA3B;;;;yCAOU,kBAAoD;AAAA,CAI7D,YAAoC;CAApC;;CAAR;CAAQ,GAA0C,SAA1C;eAAuC;EAAvC;;aAA0C,SAA1C;;GHiHJ,UGjHI;KHkHF;;EGlHN,IAAQ;;eAAuC;EAAvC;iBAA0C,SAA1C;;GH0HJ,UG1HI;KH2HF;;EG3HN,IAAQ;;CACD,YAA6B;CAA7B;CAAP,OAAO,2DAAgC;;0CAOtB,kBACjB;AAAA,CAAY,YAAY;CAAZ;;;IAAe,SAAf;;;;aAAe,SAAf;;GHwGR,UGxGQ;KHyGN;;EGzGM;;;;iBAAe,SAAf;;GHiHR,UGjHQ;KHkHN;;EGlHM;;aAAY;CAAZ;CAAZ,OAAO,AAAK;;sCAQK;AAAA;;;CACY,YAAoC;CAApC;;;IAA0C,cAA1C;eAAuC;EAAvC;;YAA0C,cAA1C;;GH+FzB,UG/FyB;KHgGvB;;EGhGuB;;eAAuC;EAAvC;iBAA0C,cAA1C;;GHwGzB,UGxGyB;KHyGvB;;EGzGuB;;CAA7B,aAAY,UAAU,MAAO;CACtB,EAAI,WAAS,GAAG;AAAA,cAAgC;EAAhC;uEAAmC,EAAG;QAAY;AAAA;;;0CAQxD,6BAAqE;AAAA,CACtF,EAAI,eAAc,MACd;AAAA,eAAa,WAAW;;CACK,YAAoC;CAApC;;;IAA0C,cAA1C;eAAuC;EAAvC;;YAA0C,cAA1C;;GHmF7B,UGnF6B;KHoF3B;;EGpF2B;;eAAuC;EAAvC;iBAA0C,cAA1C;;GH4F7B,UG5F6B;KH6F3B;;EG7F2B;;CAAjC,aAAY,cAAc,MAAO;CAC1B,EAAI,WAAS,GAAG;AAAA,cAAgC;EAAhC;uEAAmC,EAAG;QAAY;AAAA;;;oCAM/D,sBACH;AAAA,GAAI,qBAAoB,GAC3B;AAAA,WAAqD;EAApD;;;;EAAU;eAAyB;EAAzB,YAA4B;EAA5B,eAA+B;EAAzC;;;;;;;GAAoD,YAAwB;GAAxB;;6BAA2B;GAA3B,qCAA2B,EAA3B;;;;EAArD;QAEA;AAAA,iBAAQ;;;qCASK,8BAAuE;AAAA,CAC/E,YACL,AAAI,cAAc,IAAG,IAAO;CADvB,YAAoC;CAApC;;CAAT;CAAS,GAEL,cAFK;;;;YAEL,cAFK;;GH8DL,UG9DK;KH+DH;;EG/DN,KAAS;;;;iBAEL,cAFK;;GHuEL,UGvEK;KHwEH;;EGxEN,KAAS;;CAGT;CAAS,EAAI,WAAU,MAAvB;AAAA,OAA6B;QACpB,EAAI,UAAS,GADtB;AAAA,OACyB;QAChB;AAAA,cAAoC;EAApC;;KAA2C,UAA3C;gBAAuC;GAAvC;;cAA2C,UAA3C;;IHyDL,UGzDK;MH0DH;;GG5DN,KAES;;gBAAuC;GAAvC;mBAA2C,UAA3C;;IHkEL,UGlEK;MHmEH;;GGrEN,KAES;;;CACT,OAAO,YAAY,GAAI;;wCAQN,gCAA4E;AAAA,CAC7F;CAAS,EAAI,cAAa,GAA1B;AAAA,OAA6B;QACpB;AAAA,cAAoC;EAApC;;KAA0C,cAA1C;eAAuC;GAAvC;;aAA0C,cAA1C;;IH8CL,SG9CK;MH+CH;;GGhDN,KACS;;gBAAuC;GAAvC;kBAA0C,cAA1C;;IHuDL,UGvDK;MHwDH;;GGzDN,KACS;;;CACT;CAAS,EAAI,aAAY,MAAzB;AAAA,OAA+B;QACtB,EAAI,YAAW,GADxB;AAAA,OAC2B;QAClB;AAAA,cAAoC;EAApC;;KAA0C,YAA1C;gBAAuC;GAAvC;;cAA0C,YAA1C;;IH2CL,UG3CK;MH4CH;;GG9CN,KAES;;gBAAuC;GAAvC;mBAA0C,YAA1C;;IHoDL,UGpDK;MHqDH;;GGvDN,KAES;;;CACT,OAAO,YAAY,GAAI;;uCAMT,YACd;AAAA,QAAO,qCAAkB;;sCAMf,cAAgD;AAAA,CAC1D;;;;CAAY;gBAAyB;CAAzB,cAA4B;CAA5B,iBAA+B;CAC3C;;;;CAAY;gBAAyB;CAAzB,cAA4B;CAA5B,iBAA+B;CAC3C,KAAO,iCAAmB,8BAA1B;AAAA,EACgD;;;;;EAAhC,YAA6B;EAA7B;EAAZ,YAAY,2DAAgC;EACA;;;;;EAAhC,YAA6B;EAA7B;EAAZ,YAAY,2DAAgC;EAC5C,EAAI,SAAQ,OACR;AAAA,UAAO;;EACX,EAAI,SAAQ,OACR;AAAA,UAAO;;;CAEf,EAAI,+BACA;AAAA,SAAO;;CACX,EAAI,+BACA;AAAA,SAAO;;CACX,OAAO;;uCAMU,qBACjB;AAAA,CAAO;;mBAAgC,AAAK;CAArC;;;;;;;;;;;;;;yDHrIU,oBACvB;AAAA,GAAI,cAAa,OAChB;AAAA,EAAiB,gCAAuB;EAAjC,YAAU;EAAV;QAEP;AAAA,EAAiB,gCAChB,CAA4B,aAA5B,eADgB,oBAEhB,AAA2B,YAA3B;EAFM,YAAU;EAAV;;;0DASe,qBAA4D;AAAA,CACnE;CAAV,UAAU;CACA;;EAAV,SAAU;EACN,uDAA4B,YAAa;AAAA,gCAAY;IAAI;;CAE5C;CAAV,YAAU;CAAV;;sDAGU,YACjB;AAAA,CAAiB,YAAqB;CAA/B,YAAU;CAAV;;qDAGU,YACjB;AAAA,CAAiB;;YAAoB,UAApB;AAAA,UAAoB,EAApB;IAoNjB;EApNiB;;;CAAV,YAAU;CAAV;;sDAQG,sBAChB;AAAA,QAAO,iBAAgB;;uDAOd,sBACT;AAAA,QAAO,uDAA4B,aAAQ,YAAY;AAAA,SAAO,iBAAW;GAAI;;kDAO7D,sBAChB;AAAA,CAAoC,yBAAiB;CAApC,qCAAY,MAAO;CAA7B,YAAU;CAAV;;0DAOE,oCAAgE;AAAA,CACnE,YAAY;CACZ,QAAQ;CACR,KAAO,SAAQ,UAAf;AAAA,EACa,yBAAiB;EAA1B,SAAS;EACT,EAAE;;CAEN,OAAO;;4DAOG,sBAA6C;AAAA,CACvD,QAAQ,iBAAW;CACZ,cAA2B,KAA3B,AAA2B,KAA3B;;;;;;gEAOG,sBAChB;AAAA,CAAO,QAAkD,iBAAlD,AAAiE,QAAjE;;;;;;;8DAOS,sCACH;AAAA,GAAI,oBAAmB,GAC1B;AAAA,eAA8B;EAA9B;;YAAqC,mBAArC;;GAiDA,UAjDA;KAkDE;;EAlDF;QAEA;AAAA,eAA+B;EAA/B;gBAAsC,CAAC,mBAAvC;;GAwDA,UAxDA;KAyDE;;EAzDF;;;kDAOM,0BAChB;AAAA,CAAiB,qCAAY,MAAO;CAA7B,YAAU;CAAV;;oDASE,gBAA2B;AAAA,CACpC,UAAU;CACV,eAAe,YAAY;AAAA,SAAO,iBAAW;;CACvC,SAAQ;CACR,KAAQ,MAAI,KAAZ;AAAA,EACI,uDAA4B,IAAK,SAAU;EACtC,yBAAiB;EAAtB,MAAK;;;oDAIC,gBAChB;AAAA,QAAO;;mDAGS,gBAChB;AAAA,CAAO;;;yCAwIoD;CAxIpD;;gDAGE;AAAA,aACF;CADE;;sDAIA,gBACT;AAAA,QAAO;;yEAGE,sCAAiF;AAAA,CAC1F,UAAU;CACJ,QAAQ;CACR,KAAO,KAAI,mBAAmB,QAAQ,KAAtC;AAAA,EACa,yBAAiB;EAA1B,SAAS;EACT,EAAE;;CAEN,OAAO;;0EAGJ,sCAAkF;AAAA,CACrF,YAAY;CACZ,KAAO,SAAQ,mBAAmB,IAAI,OAAtC;AAAA,EACa,yBAAqB,QAArB;EAAT,SAAS;EACT,EAAE;;CAEN,OAAO;;;;;wDAOU,YACV;AAAA,KAAE,UAAwB,KAAxB,AAAwB,KAAxB,QAA8B;AAAA;QAAI;AAAA;;;4DAG1B,yBAAwE;AAAA,CACzF,QAAQ,SAAS,QAAQ;CAClB,IAAE,UAAuB,KAAvB,AAAuB,KAAvB,QAA6B;AAAA;QAAI;AAAA;;;yDAGhC,4BACV;AAAA,GAAI,cAAa,OACb;AAAA,UAAQ;QACL;AAAA,EACH,QAAQ,CAA4B,aAA5B;EACR,QAAQ,AAA2B,YAA3B;;;yDAIF,6BAAgF;AAAA,CAC1F,EAAI,SAAQ,KAAK,OAAO,OACpB;AAAA,QAAM,6EAAkC;;CAC5C,SAAS,SAAS;CAClB,EAAI,UAAwB,MAAxB,AAAwB,MAAxB,OAA6B;AAAA,EAC7B,EAAI,SAAQ,IAAI,KAAK,OAAO,QAAQ,GAChC;AAAA,SAAM,6EAAkC;;EAE5C,SAAS,SAAS,QAAQ;EAC1B,EAAI,UAAuB,MAAvB,AAAuB,MAAvB,OACA;AAAA,UAAO,AAAwB,KAAxB,cAA4B,KAA5B;SAEP;AAAA,SAAM,6EAAkC;;QAEzC,EAAI,UAAuB,MAAvB,AAAuB,MAAvB,OACP;AAAA,QAAM,6EAAkC;QAExC;AAAA,SAAO;;;;;;0DAUD;AAAA,aACH;CADG;;6DAIA,qBACV;AAAA,gCAAa;;kEAGH,gBACV;AAAA,CAAO,YAAqB;CAArB;;;;;;0DAOU,YACjB;AAAA,CAAO,YAAc;CAAd;;4DAGO,YACpB;AAAA,CAAO,YAAc,oBAAoB;CAAlC;;gEAGa,gBACpB;AAAA,CAAO,YAAc,oBAAoB,MAAM,oBAAoB;CAA5D;;uDAGgB,YACjB;AAAA,CAAO;;YAAU,UAAV;AAAA,UAAU,EAAV;IAKP;EALO;;;;;yDAGU,YAA+C;AAAA,CAChE,YAAU;CACV;YAAU,UAAV;AAAA,EAAK,QAAL,AAAU,EAAV;;EACI,6BAAY;;CAET,YAAc;CAAd;;0DAKmB,sBAC1B;AAAA,QAAO,iBAA6B;;sDAG1B,0BACV;AAAA,CAAO,YAAc,yBAAY,MAAO;CAAjC;;wDAGG,gBACV;AAAA,QAAO;;uDAGG,gBAAgC;AAAA,CAC1C,QAAQ;CACR,UAAU;CACH,SAAiB;CAAhB,KAAO,KAAI,KAAK,yBAA6B;CAA9C;;oDAGJ;AAAA,aACI;CADJ;;0DAIA,gBACH;AAAA,QAAO;;yBIvPJ,aAnBX;AAAA,CAiB4B,AAjB5B,WAiB4B;CAGpB,eAAU;CACV,kBAAa;CACb,uBAAkB;;;;;gBAGR,WACV;AAAA,IAAG,2BAAqB,MACpB;AAAA,UAAO;SAEP,EAAG,4BAAsB,MACrB;AAAA,UAAO;SAEP;AAAA,UAAO;;;YAKL,kBAAmC;AAAA,EAG7C,EAAG,wBAAkB;AAAA,GAEjB,EAAG,4BAAsB,MAErB;AAAA,MAAG,yBAAmB,4BAAsB;AAAA,KAExC,uBAAkB;KAClB,EAAG,oCAA8B,MAC7B;AAAA;;;UAKL;AAAA,IAEH,kCAAkC;IAClC,uBAAkB;;GAItB,cAAc,kBAAkB,OAAO,yBAAoB;GAE3D,EAAG,YAAW,MAGV;AAAA,MAAG,4BAAsB,MACrB;AAAA,eAAU;WAEV;AAAA,eAAU;;;GAKlB,EAAG,wBAAkB,iBAAiB;AAAA,IAClC,IAA+B,6BAA/B;AAAA;iBAA+B;KAA/B,iEAA+B,gBAA/B;;;;;MC2KJ,WD3KI;;;;;kBAA+B;KAA/B,kEAA+B,gBAA/B;;;;;MC2KJ,YD3KI;;;;;IACA;;;IACA,sBAAiB;;GAGrB,kBAAkB,2BAAsB;GACtB,iBAAe;AAAA,IAA7B,cAA6B,AAAC,4BAAuB;UAAvC;AAAA,IAAd,cAAc;;GACA,iBAAe;AAAA,IAA7B,cAA6B,AAAC,6BAAwB;UAAxC;AAAA,IAAd,cAAc;;GACA,iBAAe;AAAA,IAA7B,cAA6B,AAAC,4BAAuB;UAAvC;AAAA,IAAd,cAAc;;GACA,iBAAe;AAAA,IAA7B,cAA6B,AAAC,8BAAyB;UAAzC;AAAA,IAAd,cAAc;;GAElB,EAAG,gBAAe,CAAC,8BAAyB;AAAA,IAExC,2BAAsB;IACtB,6BACI;AAAA,oCAA+B;WAC/B;AAAA,mCAA8B;;IAElC,0BAAqB;IACrB,4BAAuB;IACvB,2BAAsB;IACtB,6BAAwB;IACxB,gDACI,wBACA,yBACA,0BACA;;;EASR,EAAG,uBAAgB;AAAA,GAEf,EAAI,EAAC,kBAAa;AAAA,IACd,qCAAW;IACX,mBAAc;;GAIlB,EAAG,mBAAa,MAEZ;AAAA,MAAG,EAAC,qBAAgB,sBAGhB;AAAA,oCAA+B,iBAAa,iBAAa,iBAAa;;;SAQ9E,EAAI,mBAAa;AAAA,GACb,sCAAY;GACZ,mBAAc;;EAM1B;;cAIG,kBAAqC;AAAA,EAGxC,EAAG,yBAAmB,MAClB;AAAA,wCAAqC;;EAKzC,kCAAkC;EAGlC,EAAG,mBAAa;AAAA,yCAAW;;EAG3B,8BAA8B;EAC9B,wCAAa,IAAc;EAC3B,4CAAiB;;UAId,eAAwC;AAAA,EAE3C;eAAsB;EAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA;cAAkB;EAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,EAAG,uBAAgB;AAAA,GACf,sBAAiB;GACjB,iBAAY;;EAGT,2BAAoB;AAAA,UAAC,uBAAkB;SAAvC;AAAA;;;OAMJ,WAAe;AAAA,EAElB,EAAG,EAAC,UAAK;AAAA;;EAET,eAAO,uBAAP;EACI,eAAM,iBAAe,2BAArB;EACA,eAAM,mBAAmB,CAAC,AAAE,gCAA2B,OAAS,SAAS,iCAAzE;EACA,EAAG,iCAA2B,MAC1B;AAAA,kBAAM,YAAY,iDAAlB;;EAEJ,eAAM,kBAAkB,CAAC,AAAE,+BAA0B,OAAS,SAAS,gCAAvE;EACA,eAAM,0BAAwB,oCAA9B;EACA,eAAM,gBAAc,sCAApB;EACJ,eAAO,sBAAP;EAEA,eAAO,uBAAP;EACI,eAAM,iBAAe,sBAArB;EACA,eAAM,mBAAmB,CAAC,AAAE,2BAAsB,OAAS,SAAS,4BAApE;EACA,EAAG,4BAAsB,MACrB;AAAA,kBAAM,YAAY,4CAAlB;;EAEJ,eAAM,kBAAkB,CAAC,AAAE,0BAAqB,OAAS,SAAS,2BAAlE;EACA,eAAM,0BAAwB,+BAA9B;EACA,eAAM,gBAAc,iCAApB;EACJ,eAAO,uBAAP;;;;sBEtJG,8BAhDX;AAAA,CAgDW;;;;;;CALoB,AA3C/B,qBA2C+B;CADA,AA1C/B,oBA0C+B;CADA,AAzC/B,qBAyC+B;CADD,AAxC9B,kBAwC8B;CAFL,AAtCzB,gBAsCyB;CALuB,AAjChD,kBAiCgD;CAFjB,AA/B/B,YA+B+B;CADH,AA9B5B,WA8B4B;CAFS,AA5BrC,qBA4BqC;CADO,AA3B5C,4BA2B4C;CADC,AA1B7C,6BA0B6C;CADX,AAzBlC,kBAyBkC;CARA,AAjBlC,kBAiBkC;CADA,AAhBlC,kBAgBkC;CADD,AAfjC,iBAeiC;CAPI,AARrC,oBAQqC;CAJe,AAJpD,aAIoD;CADpB,AAHhC,eAGgC;CA+CxB,UAAK;CACL,gBAAW;CACX,gBAAW,EAAE;CAEb,gBAAW,6FAAuC;CAClD,eAAU;CAEV,iBAAY;CAEZ,kBAAa,iBAAY;CAGd,6BAAkB;CAA7B,gBAAW;CACG,6BAAkB;CAAhC,mBAAc;CACD,6BAAkB;CAA/B,kBAAa;CAOb,YAAO;CAEP,sDAA4B;CAC5B,sDAA4B;CAC5B,sDAA4B;CAO5B,EAAG,iBAAgB,GACf;AAAA,cAAO;QAEP;AAAA,cAAO;;CAGX,gBAAW;CAEX;CACA,yBAAS;;;;;KAMN,wBACH;AAAA,kBAAW,MAAO;;OAIf,wBACH;AAAA,SAAO,iBAAY,MAAO;;OAGvB;AAAA;;;EAMH,EAAI,oBAAc,cAAc,QAAQ,YAAa;AAAA,GAGjD,EAAI,EAAC,WAAW,eAAgB,OAC5B;AAAA,wBAAoB;;GAIxB;6CAAiB,UAAW;GAA5B;GAGA,cAAc;GAGd,oBAAe;;;SAYhB;AAAA;;;EAEH,EAAG,QACC;AAAA,YAAY;GAAZ;;;;;;;+B7BikBsB,Q6BjkBtB;;;;;;;;O7BgjBQ,Q6BhjBR;O7BijBQ,S6BjjBR;;O7BmjBQ,S6BnjBR;;;;;;;;;;IACI,UAAU;IACV,OAAO;;SAGX;AAAA,aAAY;GAAZ;;;;;;;gC7B4jBsB,S6B5jBtB;;;;;;;;O7B2iBQ,S6B3iBR;O7B4iBQ,S6B5iBR;;O7B8iBQ,S6B9iBR;;;;;;;;;;IACI,qBAAgB;;;;WAWrB;AAAA;;;EAEH,WAAM;EAEN,2BAAsB;EACtB;EAEA,eAAU;EACV,gBAAW;EACX,gBAAW;EACX,mBAAc;EACd,kBAAa;EACb,mBAAc;EAEd,iBAAY;EACZ,kBAAa;EACb,kBAAa;EAEb,gBAAW;EACX,YAAO;EAEP,uCAAW;;UAIR;AAAA;;;EAEH,EAAG,gCAA+B;AAAA,GAC9B,kCAAsB;GACtB,EAAG,0BAAyB,GACxB;AAAA,kBAAc;;;EAIJ;EAAlB,kBAAkB;EAElB,qBAAiB;EAEA;EAAjB,iBAAiB;EAEd,yBAAe;EAKlB,oBAAe;;SASZ;AAAA;;;EAGH,6BAAwB;EACxB,4BAAuB;EACvB,qBAAgB;EAEhB,kBAAa;EACb,qBAAgB;EAChB,oBAAe;EACf,qBAAgB;EAGhB,aAAQ,uBAAuB;EAE/B,WAAsB;EAGtB,SAAa;EAAb;;;;;;;8B7Bwe0B,Q6Bxe1B;;;;;;;;M7BudY,Q6BvdZ;M7BwdY,S6BxdZ;;M7B0dY,S6B1dZ;;;;;;;;;;GAGI,OAAO;GAGP,EAAI,SAAQ,QAAQ,CAAC,cAAe;AAAA,IAGhC,EAAI,mBAAa,OAIb;AAAA,gBAA4B;KAA5B;;;;;;;;;MAoSZ,OApSY;MAqSZ,WArSY;MAsSZ,UAtSY;MAuSZ,WAvSY;;;;;;;IAKJ;;;;;;;;;;;;;mBAAe,eAAf,iCAAe;KAAf;;OF3LI,UE2LJ,AAAe;aAAf;AAAA,OFzLI,UEyLJ,AAAe;;;KAAf;;oBAAe;OAAf;;;;;;QDRJ,WCQI;;;;qBAAe;OAAf;;;;;;QDRJ,YCQI;;;;;;;;;;;;MF7KA,cE6KA;;MF7KA,cE6KA;;;MF5KA,cE4KA;;MF5KA,cE4KA;;;MF3KA,cE2KA;;MF3KA,cE2KA;;;MF1KA,cE0KA;;MF1KA,cE0KA;;;;;OAAe,4BAAf;;OAAe,2BAAf;;;;;;;;;;;;;;;;OAAe,4BAAf;;;;;;;;IAEA,EAAG,eAAc;AAAA,KAGb;KAGA,EAAG,oBAAmB;AAAA,MAClB;MACA;;KAIJ,EAAG,cAAa;AAAA,MAGZ,YAA4B;MAA5B;;;;;;;;;OA8QhB,QA9QgB;OA+QhB,YA/QgB;OAgRhB,WAhRgB;OAiRhB,YAjRgB;;;;;;MAEA,cAAwB;MAAxB;sBAAwB;OAAxB;uDAAwB;QAAxB;uDAAwB,gBAAxB,AAAwB;QAAxB,+CAAwB;QAAxB;uDAAwB,oBAAxB,AAAwB;QAAxB,+CAAwB;QAAxB;uDAAwB,mBAAxB,AAAwB;cAAxB;AAAA,uDAAwB;QAAxB;uDAAwB;QAAxB;uDAAwB;QAAxB;;gDAAwB,0BAAxB,EAAwB,yBAAxB;;;OAAwB,eAAxB;;MACA,mBAAc;YAIb,EAAI,8BAAuB,KACvB,6BAAuB,KACvB,6BAAuB,KACvB,6BAAuB,GAA6B;AAAA,MAIrD,GAAe,uBAAf;OAAe,gBAAf;OAAe,mBAAf;iHAAe,UAAf,+DAAe,uBAAf;;;0BAAe,uBAAf;;oBAAe;QAAf;;;;;;;;;SAgQpB,QAhQoB;SAiQpB,YAjQoB;SAkQpB,WAlQoB;SAmQpB,YAnQoB;;;;;;;;;;;;;;;oBAAe;OAAf;;;;;;;;;;oBAAe;OAAf;;gBAAe,cAAf;;;;;;;;;;;QC6ChB,cD7CgB;;;;;;QCsDhB,gBDtDgB;;;;;QC6DhB,eD7DgB;QCuEhB,gBDvEgB;UC0EhB;;OD1EgB,eAAe,uBAAf;;;;;;MAEA,YAA4B;MAA5B;;;;;;;;;OA8PpB,QA9PoB;OA+PpB,YA/PoB;OAgQpB,WAhQoB;OAiQpB,YAjQoB;;;;;;MAEA,mBAAc;YAKjB;AAAA,MAED,GAAgB,uBAAhB;OAAgB,gBAAhB;OAAgB,mBAAhB;iHAAgB,UAAhB,+DAAgB,uBAAhB;;;2BAAgB,uBAAhB;;oBAAgB;QAAhB;;;;;;;;;SAqPhB,QArPgB;SAsPhB,YAtPgB;SAuPhB,WAvPgB;SAwPhB,YAxPgB;;;;;;;;;;;;;;;oBAAgB;OAAhB;;;;;;;;;;qBAAgB;OAAhB;;iBAAgB,cAAhB;;;;;;;;;;;QCkCZ,eDlCY;;;;;;QC2CZ,iBD3CY;;;;;QCkDZ,gBDlDY;QC4DZ,iBD5DY;UC+DZ;;OD/DY,eAAgB,uBAAhB;;;;;;MAGA;MACA,mBAAc;;KAOlB,EAAI,EAAC,qBAAqB,gBAAiB;AAAA,MAEvC,eAAe;MAEf,mBAAc;;;;;EAU9B,EAAG,mBAAa,KAAK,QAAQ,MAAM;AAAA,GAG/B,kBAAa;GAEb;;;;;;;;;;;;;mBAAgB,eAAhB,kCAAgB;IAAhB;;MFnQQ,WEmQR,AAAgB;YAAhB;AAAA,MFjQQ,WEiQR,AAAgB;;;IAAhB;;oBAAgB;MAAhB;;;;;;ODhFA,YCgFA;;;;oBAAgB;MAAhB;;;;;;ODhFA,YCgFA;;;;;;;;;;;;KFrPI,eEqPJ;;KFrPI,eEqPJ;;;KFpPI,eEoPJ;;KFpPI,eEoPJ;;;KFnPI,eEmPJ;;KFnPI,eEmPJ;;;KFlPI,eEkPJ;;KFlPI,eEkPJ;;;;;MAAgB,4BAAhB;;MAAgB,2BAAhB;;;;;;;;;;;;;;;;MAAgB,4BAAhB;;;;;;;;GAEA,YAA4B;GAA5B;;;;;;;;;IAqNJ,QArNI;IAsNJ,YAtNI;IAuNJ,WAvNI;IAwNJ,YAxNI;;;;;;;EAKJ,sBAAiB;EAEjB,aAAQ;EAER;;;;;MAQI;IARJ;IAUQ,QAVR;;;;;;SAIG,WAGH;AAAA,IAAG,wBAAkB,GAAG;AAAA,GACpB;aAAY;GAAZ,WAAY,YAAZ;AAAA,IAAI,WAAJ,AAAY,IAAZ;;IACI;IACA,OAAO;;GAEX,gBAAW;GACX,gBAAW;;;QAMZ;AAAA;;;EAEiB,EAAG,cAAQ,IAAI;AAAA,oBAAiB;;EAGpD,kBAAa;EACb,kBAAa;EAEb,kBAAa,EAA4B;EAEzC;;EAEA,WAAO;EAEP,kBAAa,EAA6B;EAE1C,aAAa;EACgB;EAAzB,yBAAyB,wCAAkB;EAC3C,gCAAgC,6BAAwB;EACxD,+BAA+B,4BAAuB;EACtD,wBAAwB,qBAAgB;EACxC,qBAAqB,kBAAa;EAClC,qBAAqB,kBAAa;EAElB,EAAG,cAAQ,IAAI;AAAA,kBAAe;;;eAMtD,WAAuB;AAAA,EAGnB;EAKA,6BAAwB,qBAAiB,qBAAiB,qBAAiB;;0BAMxE,kBACH;AAAA,IAAG,EAAC,6BAA6B;AAAA,GAC7B,aAA4C;GAA5C;oFAAyB;GAAzB,qCAAyB;GAAzB;;;ID5JA,WC4JA,+DAAyB,mBAAzB;0BAAyB,mBAAzB;;;GACA,cAA2C;GAA3C;qFAAyB;GAAzB,uCAAyB;GAAzB;;;ID7JA,YC6JA,+DAAyB,kBAAzB;2BAAyB,kBAAzB;;;;;mBAQD,wBAA4D;AAAA,EAE/D,IAAO,oBAAP;AAAA,kFlEjNsB,CAAC,QkEiNK,yDlEjNa;;EkEmNzC,EAAG,EAAC,eAAe;AAAA;;EACnB,EAAG,YAAW,MAAM;AAAA,aAAU;;EAC9B,EAAG,gBAAU,MAAM;AAAA,aAAU;;EAE7B;;;EACA,IAAuB,6BAAvB;AAAA;eAAuB;GAAvB,iEAAuB,gBAAvB;;;;;ID9KI,WC8KJ;;;;;gBAAuB;GAAvB,kEAAuB,gBAAvB;;;;;ID9KI,YC8KJ;;;;;EACA;EAEA,cAAc;EACd,eAAe,UAAU;EACzB,eAAe;EAEf,EAAG,WACC;AAAA;;;;;;;;;SAEA;AAAA;;;;;;;EAGJ;EAEA,aAAa;EACb;EACA;EACA;EACA,qBAAqB;;kBAMlB,8CAAmI;AAAA,EAEtI,SAAS;EACT,SAAS;EACT,SAAS;EAKT,yCAAc,MAAiB;EAC/B,kDAAwB,EAAgB,EAAG,KAAU,MAAO,EAAG;EAC/D,yCAAe,MAAkB,KAAM;EAEvC,yCAAc,MAAiB;EAC/B,kDAAwB,EAAkB,EAAG,KAAU,MAAO,EAAG;EACjE,yCAAe,MAAkB,SAAU;EAE3C,yCAAc,MAAiB;EAC/B,kDAAwB,EAAiB,EAAG,KAAU,MAAO,EAAG;EAChE,yCAAe,MAAkB,QAAS;EAS1C,yCAAe,KAAM,EAAG,AAAQ,cAAY,IAApB;EAExB,2CAAgB;EAChB,2CAAgB;EAChB,2CAAgB;EAKhB;;0BAMG,eAAwD;AAAA,EAE3D,cAAc;EAEd,EAAI,YAAW,GACX;AAAA,UAAO;;EAGX,eAAe;EAEf,EAAG,WACC;AAAA;;;;;;;;;SAEA;AAAA;;;;;;;EAGJ;EAGA;EACA;EAGA,eAAa;EAEb,OAAO;;8BAMJ,eAAmE;AAAA,EAEtE,EAAI,oBAAc,GACd;AAAA,UAAO;;EAGX,EAAI,mBAAa,iBACb;AAAA,SAAM;;EAIV,WAAW,iBAAwB,qBAAiB,EAAzC,AAA4C,kBAAW,IAAvD;EACX,eAAe,iBAAwB,wBAAoB,EAA5C,AAA+C,qBAAc,IAA7D;EACf,cAAc,iBAAwB,uBAAmB,EAA3C,AAA8C,oBAAa,IAA3D;EACd,eAA4B;EAM5B,oBAAe,KAAM,KAAM,SAAU,QAAS;EAE9C,OAAO;EACP,WAAW;EACX,UAAU;EACV,WAAW;EAEX,kBAAa;EACb,qBAAgB;EAChB,oBAAe;EACf,qBAAgB;EAEhB,OAAO;;kBAOX,eAAyC;AAAA,EAErC,EAAG,wBAAuB,gBAAW;AAAA,GACjC,gBAAc;GACd,mBAAmB;GACnB,oCAAc,uBAAkB,YAAI,mCAAgC,UAAQ,+DAA4D,uBAAqB,gBAAY,iBAAS,KAAlL;GACA,oCAAc,0FAAd;GACA;;EAIJ,mBAAmB,uBAAqB,AAAC,kBAAW;EAGpD,EAAG,gBAAe,gBACd;AAAA,cAA4B;GAA5B;;;;;;;;;IAhCJ,OAgCI;IA/BJ,WA+BI;IA9BJ,UA8BI;IA7BJ,WA6BI;;;;;;;EAGJ,iBACI;EADJ,mBACoB;EADpB,kBACoC;EADpC,mBACoD;EADpD,eAEI;EAFJ,iBAEoB;EAFpB,gBAEoC;EAFpC,iBAEoD;EAFpD;;;;;;;;;;;;;;;;;;;;;;;;;GCtPI,cDsPJ;;;;;;GC7OI,gBD6OJ;;;;;GCtOI,eDsOJ;GC5NI,gBD4NJ;KCzNI;;ED8NJ,cAAc,uBAAuB;EAErC,mBAAoB;EACpB,sBAAoB;EACpB,qBAAoB;EACpB,sBAAoB;;aAOjB,iBAAuC;AAAA,EAG1C,aAAQ;EAER,4BAAwB;EAGxB,OAAO;;YAKX,WACI;AAAA,SAAO,aAAa,YAAO;;WAK/B,gBAAgC;AAAA,EAE5B,EAAG,eAAS,aAAa;AAAA,UAAO;;EAChC,EAAG,cAAQ,aAAa;AAAA,UAAO;;EAE/B,OAAO;;0BAIX,YACW;AAAA,QAAO;OAEV;GAAQ;OACR;GAAQ;OACR;GAAQ;OAER;GAAQ;OACR;GAAQ;OACR;GAAQ;OACR;GAAQ;OAER;GAAQ;OACR;GAAQ;OACR;GAAQ;OACR;GAAS;OAET;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;OACT;GAAS;;GACA;;;gBAMjB,cAA4D;AAAA,EAExD,EAAG,WAAU,QACP;AAAA,UAAO;;EAGb,EAAI,WAAU,SACR;AAAA,UAAO;;EACb,EAAI,WAAU,SACR;AAAA,UAAO;;EAKb,EAAG,aAAY,QAAQ,YAAY,MAAM;AAAA,GAGrC,EAAG,eAAc,aACX;AAAA,WAAO;;GACb,EAAG,eAAc,aACX;AAAA,WAAO;;SAGb,EAAG,aAAY,QAAQ,YAAY,MAC/B;AAAA,UAAO;SAEX,EAAG,aAAY,QAAQ,YAAY,MAC/B;AAAA,UAAO;;EAIf,EAAG,cAAa,QAAQ,aAAa,MAAM;AAAA,GAGvC,EAAG,gBAAe,cACZ;AAAA,WAAO;;GACb,EAAG,gBAAe,cACZ;AAAA,WAAO;;SAGb,EAAG,cAAa,QAAQ,aAAa,MACjC;AAAA,UAAO;SAEX,EAAG,cAAa,QAAQ,aAAa,MACjC;AAAA,UAAO;;EAMf,wBAA8B;EAC9B,wBAA8B;EAE9B,EAAI,qBAAoB,mBAClB;AAAA,UAAO;;EACb,EAAI,qBAAoB,mBAClB;AAAA,UAAO;;EAGb,EAAG,WAAU,QAET;AAAA,KAAG,WAAU,SAAS,UAAU,MAC5B;AAAA,WAAO;UAGX,EAAG,WAAU,QAAQ,UAAU,OAC3B;AAAA,WAAO;;;EAQf,EAAI,eAAc,aACZ;AAAA,UAAO;;EACb,EAAI,eAAc,aACZ;AAAA,UAAO;;EACb,EAAI,gBAAe,aACb;AAAA,UAAO;;EAEb,EAAI,cAAa,YACX;AAAA,UAAO;;EACb,EAAI,cAAa,YACX;AAAA,UAAO;;EAGb,OAAO;;oBAIX,cAAgE;AAAA,EAY5D,EAAG,WAAU,QACP;AAAA,UAAO;;EAGb,EAAI,WAAU,SACR;AAAA,UAAO;;EACb,EAAI,WAAU,SACR;AAAA,UAAO;;EAIb,EAAG,aAAY,QAAQ,YAAY,MAAM;AAAA,GAGrC,EAAG,eAAc,aACX;AAAA,WAAO;;GACb,EAAG,eAAc,aACX;AAAA,WAAO;;SAGb,EAAG,aAAY,QAAQ,YAAY,MAC/B;AAAA,UAAO;SAEX,EAAG,aAAY,QAAQ,YAAY,MAC/B;AAAA,UAAO;;EAIf,EAAG,cAAa,QAAQ,aAAa,MAAM;AAAA,GAGvC,EAAG,gBAAe,cACZ;AAAA,WAAO;;GACb,EAAG,gBAAe,cACZ;AAAA,WAAO;;SAGb,EAAG,cAAa,QAAQ,aAAa,MACjC;AAAA,UAAO;SAEX,EAAG,cAAa,QAAQ,aAAa,MACjC;AAAA,UAAO;;EAKf,wBAA8B;EAC9B,wBAA8B;EAE9B,EAAI,qBAAoB,mBAClB;AAAA,UAAO;;EACb,EAAI,qBAAoB,mBAClB;AAAA,UAAO;;EAGb,EAAG,WAAU,QAET;AAAA,KAAG,WAAU,SAAS,UAAU,MAC5B;AAAA,WAAO;UAGX,EAAG,WAAU,QAAQ,UAAU,OAC3B;AAAA,WAAO;;;EAQf,EAAI,eAAc,aACZ;AAAA,UAAO;;EACb,EAAI,eAAc,aACZ;AAAA,UAAO;;EACb,EAAI,cAAa,YACX;AAAA,UAAO;;EACb,EAAI,cAAa,YACX;AAAA,UAAO;;EAGb,OAAO;;iBAIX,WACI;AAAA,WAAY;EAAZ;;;;;;;8B7BtH0B,Q6BsH1B;;;;;;;;M7BvIY,Q6BuIZ;M7BtIY,S6BsIZ;;M7BpIY,S6BoIZ;;;;;;;;;;;;kBAMJ,iBAAoC;AAAA,EAChC,EAAG,WAAU,GACT;AAAA;SAEA;AAAA;;EAEJ,OAAO,kBAAa;;;;;yBElzBjB,mBAA2C;AAAA,CAE9C,GAAW,YAAX;;;CAEA,yBAAyB;CAEzB,iCAAO;CAEP,EAAG,0BAAyB,MACxB;AAAA,sBAAe;QAEf;AAAA,sBAAe,uBAAuB;;CAG1C,aAAQ;CAER,EAAG,mBAAkB,MAAM;AAAA,KAAW,sBAAX;gGpEwKL,CAAC,QoExKoC,4EpEwKlB;;;CoEvKzC,EAAG,uBAAsB,MAAM;AAAA,EAE3B,GAAW,kBAAX;4FpEqKkB,CAAC,QoErKS,4EpEqKS;;EoEnKrC,cAAO,iDAAuB;EAC9B,iBAAY;;;;;;;UAWN,yBAA0C;AAAA,EAEpD,WAAW,qBAAkB;EAE7B,EAAG,SAAQ,QAAQ,sBAAY,UAC3B;AAAA,UAAO,OAAS;;EAGpB,OAAO;;yBAMJ;AAAA;;;;;;;EAEH,EAAG,YAAW,MACV;AAAA,UAAO;;EAGX,aAAa;EAAK,WAAW;EAC7B,iBAAiB;EAMH;;iDAAQ,IAAR;;;;KAuGd;GAvGc;GA2GV,SA3GU;;;;;EAAd,cAAc;EAYV,eAAe,cAAe;EAC9B,aAAa;EAEb;cAAY,iBAAZ;AAAA,GAAI,WAAJ,AAAY,SAAZ;;GACO;;;;;;;;IR0BP,SQ1BO;MR2BL;;GQ3BK,0BAAe,KAAf;;;;;;;;;GAAH,EAAG,QAAuB,IAAI;AAAA,IAC1B,EAAG,SAAQ,IAAI;AAAA,YAAQ;;IACd;;oDAAO,KAAP;;;;OAqFrB;KArFqB;KAyFjB,UAzFiB;;;;;IAAT,SAAS;IAAT;KAdJ,SAcI;KAbJ,cAaI;;IAVR,UAUQ;IATR,cAS+B;UACpB;AAAA,IACH,YAAY;IACZ,aAAa,WAAY;IACzB;iBAAa,eAAb;AAAA,KAAI,YAAJ,AAAa,OAAb;;KAEI,EAAG,UAAS,IACR;AAAA,MAAS;;sDAAO,MAAP;;;;SA8E7B;OA9E6B;OAkFzB,UAlFyB;;;;;MAAT,UAAS;MAAT;OArBZ,SAqBY;OApBZ,cAoBY;;MAjBhB,UAiBgB;MAhBhB,cAgBwC;YAExB;AAAA,eAAS;;KAGb,EAAG,SAAQ,gBAAc,GAAG;AAAA,MACxB,cAAe;MACf,SAAS;;KAGb;;;GAKR,EAAG,QAAO,SAAO,GAAG;AAAA,IAChB,cAAe;IACf,UAAU,UAAU;;GAGxB;;EAIR,OAAO;;iBAKJ;AAAA;;;;;;EAGH,aAAa;EAEb,aAAa;EAEb,aAAa,cAAc;EAE3B,QAAQ;EACG;;EAAX,WAAW;EAEX;;;;EAAgB;;;;EAAhB;;;;;;;;;GAEI,aAAa;GACb,YAAY,kBAAe;GAC3B,EAAG,UAAS,MAAM;AAAA,YAAQ;;GAI1B,UAAU,CAAC,gBAAgB,SAAS,YAAa,mBAAmB;GACpE,UAAU,SAAS,AAAC,gBAAgB;GAEpC,eAAe;GACf,EAAI,KAAI,OAAK,GAAI;AAAA,IACK,YAAoB,IAAE;IAAtB;;;;;;;;;;MRrCtB,UQqCsB;QRpCpB;;KQoCoB;;;;;;MR5BtB,UQ4BsB;QR3BpB;;KQ2BoB;;;;IAAlB,kBAAkB;IACN,kCAAS;IAArB,YAAY,sCAAiB,eAAjB,OAAiB,eAAjB;IACZ,EAAG,gBAAe,IAAM;AAAA,iBAAY;;;GAGxC,UAAU,WAAW;GACrB,SAAS,SAAS,OAAQ,MAAI;GAE9B,EAAE;;EAGN,OAAO;;YAMG;AAAA;;;;;;EAGV,aAAa;EACb,mBAAmB,AAAC,gBAAgB;EACpC,aAAa,0CAAgB;EAE7B;aAAa,eAAb;AAAA,GAAI,YAAJ,AAAa,OAAb;;GAEI,aAAa,mBAAc,MAAO,YAAa;GAE/C,SAAS,SAAU,OAAQ;GAE3B,EAAG,eACC;AAAA,sBAAkB;;;EAM1B,OAAO;;aAKG;AAAA;;;EAEH,aAAgB,cAAe;EAA/B,aAAqC,cAArC;mDAAkD,aAAlD;;iBAMG;AAAA;;;;;;EAEG;;iDAAS,QAAT;;;;KA5Bb;GA4Ba,sCAAkB,YAAa;GAA/B,AAxBT,SAwBS;;;;;EAAb,aAAa;EACC,cAAU,cAAV;eAAmB,cAAnB;EAAd,cAAc,2CAAgC,aAAhC;EAEP;;YAAc;EAAd;;mBAAc;;;EAAd,UAAsB;EAAtB;;mBAAsB;;;EAAtB;;;;;;;;;mBAKG;AAAA;;;EAEV,aAAa,cAAc;EAE3B,OAAO,gBAAgB,CAAC,CAAC,wBAAmB,aAAa;;6BAM/C;AAAA;;;EAEV,OAAO,gBAAgB,CAAE,uBAAkB,CAAE,wBAAmB;;SAM3D,WAAiB;AAAA,EAEtB,cAAO;EACP,SAAS;EACM;;GAAf,eAAe;GACX,YAAY,aAAU;GACtB;GACA,kBAAa;GACb,QAAQ;;;UAKA,WAAkB;AAAA,EAAlB;EAEZ,GAAO,cAAS,GAAhB;AAAA;;EAEA;EAEA,OAAO,qBAAY,yBAA0B;AAAA,GAEzC,iBAAQ;GAGR,gBAAgB,wDAAsB;GAEtC,eAAe,iBAA2B;AAAA,IAG/B,2DAAwB;IAA/B,gBAAO;IACP;IACA,SAAS;IAET,GAAW,eAAX;;;IAEA,eAAe;IAEf;cAAa;IAAb,WAAa,YAAb;AAAA,KAAI,YAAJ,AAAa,IAAb;;KAEI,YAAY,kBAAkB,CAAE,oBAAc;KAC9C,aAAa,wBAAe;KAE5B,EAAG,WAAU,MACT;AAAA,oBAAe;YAEf;AAAA,oBAAe,2BAAoB;;;IAK3C,qBAAY,eAAe,iBAA+B;AAAA,KAEtD,mBAAY;KAEZ,iBAAQ;KACR,QAAQ;aAEH,iBAAgB;AAAA,KAErB,iBAAQ;KACR,OAAO;;YAIN,kBAAgB;AAAA,IAErB,iBAAQ;IACR,OAAO;;;;eAUnB,iBAA4C;AAAA,EAExC,cAAoB;EAEpB;aAAa,eAAb;AAAA,GAAI,YAAJ,AAAa,OAAb;;GACI,aAAa;GACb,aAAU,WAAS;GACnB,EAAE;;;YAKV,gBAAwC;AAAA,EAEpC,YAAO;EAEP,EAAG,cAAQ,MACP;AAAA,qBAAa,kBAAe;;EAGhC,OAAO;;YAIF,WACL;AAAA,SAAO,gBAAgB,UAAK;;;;;;;;;;;;;;;;qBC1RzB,mBAzDX;AAAA,CAwe8B,AAxe9B,oBAwe8B;CA9RR,AA1MtB,WA0MsB,mBAAW,EAAE,EAAE;CApJb,AAtDxB,cAsDwB;CAFO,AApD/B,qBAoD+B;CAFG,AAlDlC,wBAkDkC;CAFD,AAhDjC,uBAgDiC;CArBI,AA3BrC,oBA2BqC;CAFH,AAzBlC,kBAyBkC;CADI,AAxBtC,sBAwBsC;CAXkB,AAbxD,cAawD;CADE,AAZ1D,gBAY0D;CADF,AAXxD,WAWwD;CAFA,AATxD,WASwD;CADA,AARxD,YAQwD;CAFA,AANxD,YAMwD;CAJxB,AAFhC,YAEgC;CAyDxB,iBAAY;CACZ,yBAAoB;CACpB,mBAAc;CACd,2BAAsB;CACtB,sBAAiB;CAGjB,GAAI,YAAJ;EAAI,WAAU;;CACD,GAAI,uBAAJ;EAAI,sBAAqB;;CAAtC,kBAAiB;CACjB,gBAAS,mBAAW,2BAAc,EAAG,2BAAc;CACnD,aAAM;CAEK,GAAI,qBAAJ;EAAI,oBAAmB,sBAAc,EAAG,EAAG,yBAAe;;CAArE,kBAAe;CAEf,EAAG,yBAAwB,MACvB;AAAA,cAAO;;CAGX;;;;4BAAiB;CAET;;MAEJ;EACI,eAAW;;MACf;EACI,qBAAiB;;MACrB;;;CAIJ;CAEA,cAAS;;;;;YAQN,mBAA6C;AAAA,EAEhD,kBAAa;EAEb;;;;;;;;;;;;;KAAgB,mBAAhB;;iBAAgB;GAAhB;;;;;;;;;KAAgB,gBAAhB;;cAAgB;;EAAhB,GAAgB,gBAAhB;eAAgB;GAAhB;;;;;;;;KAAgB,iBAAhB;;eAAgB;;EAAhB,GAAgB,qBAAhB;qBAAgB;;EAAhB,GAAgB,2BAAhB;yBAAgB;;EAAhB,GAAgB,uBAAhB;qBAAgB;;EAAhB,GAAgB,qBAAhB;mBAAgB;GAAhB;;;;;;;;;;;;;;;;;;;;mBAIG,mBAAmD;AAAA,EAEtD,kBAAa;EAEb;;;;;;;;;;;;;KAAgB,mBAAhB;;iBAAgB;GAAhB;;;;;;;;;KAAgB,gBAAhB;;cAAgB;;EAAhB,GAAgB,gBAAhB;eAAgB;GAAhB;;;;;;;;KAAgB,iBAAhB;;eAAgB;;EAAhB,GAAgB,qBAAhB;qBAAgB;;EAAhB,GAAgB,2BAAhB;yBAAgB;;EAAhB,GAAgB,uBAAhB;qBAAgB;;EAAhB,GAAgB,qBAAhB;mBAAgB;GAAhB;;;;;;;;;;;;;;;;;;;EAEA;;;YAAyB;EAAzB;;mBAAyB;;;EAAzB,UAA2B;EAA3B;;mBAA2B;;;EAA3B,UAA6B;EAA7B;;mBAA6B;;;EAA7B;;;;;;;;;;;WAIG,kBAAmC;AAAA,EAEtC;;;;;EAEiB;WAA+B;EAA/B,SAAkD;EAAlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAjB,iBAAiB;EACV;UAAiC;EAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;aAIJ,kBAAqC;AAAA,EAExC;;;;;EAEgB;WAA+B;EAA/B,SAAkD;EAAlD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAhB,gBAAgB;EACT;EAAiC;WAAqB;EAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAjC;EAAiC;;;;;;;;;;;;;;;;;;;GAAjC,IAAiC;;;;;;;;;;;;;;;;;;;;GAAjC,IAAiC;;EAAjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAIJ,kBAEH;AAAA,SAAO,gBAAS,QAAS;;yBAItB,kBAA0D;AAAA,EAE7D,EAAI,oBAAc,8BACd;AAAA,GAAO;;;;;kCAAsB,UAAtB,AAAsB,UAAtB,AAAsB,UAAtB,AAAsB;GAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SACJ,EAAI,oBAAc,oCACrB;AAAA,UAAO,yBAAqB;;EAIzB;;;;;kCAAsB,UAAtB,AAAsB,UAAtB,AAAsB,UAAtB,AAAsB;EAAtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAIJ,4BAAqF;AAAA,EAExF,EAAI,oBAAc,8BACd;AAAA,GAAO;;;;;kCAAuB,UAAvB,AAAuB,UAAvB,AAAuB,UAAvB,AAAuB;GAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SACJ,EAAI,oBAAc,oCACrB;AAAA,GAAO,iBAAsC;GAAtC;IAkLP,aAlLO;;iCAA6B;GAA7B;;;;EAIJ;;;;;kCAAuB,UAAvB,AAAuB,UAAvB,AAAuB,UAAvB,AAAuB;EAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAQJ,WAAmB;AAAA,EAEtB;;;;;EAGA,EAA0B,sBAA1B;AAAA,8BAAY;SAAZ;AAAA,+BAAY;;EACZ,EAA2B,kBAA3B;AAAA,8BAAY;SAAZ;AAAA,+BAAY;;;mBAMT,WAA2B;AAAA,EAI9B,EAAG,gBAAU,MAAM;AAAA;;EAGnB;EACA;;wBAKG,YAEH;AAAA,yBAAkB;;kBAKtB,WAEI;AAAA,IAAG,uBAAiB,eAAU,MAAM;AAAA,GAEhC;cAAuB;GAAvB,cAA+B;GAA/B,UAAoC;GAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCiLJ,KDjLI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GCuLJ,KDvLI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC2LI,KD3LJ;;GC8LJ,KD9LI;;;;;;;;;;GAEA,oDAAgC;;;sBAMxC,WAA8B;AAAA,EAEZ;;;;;;;;;EAAd,mBAAc;EAEd,EAAG,EAAC,sBACA;AAAA;;EAGkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAtB,2BAAsB;EACH;;;;KCpGb;;EDoGN,wBAAmB;EAEnB,uBAAkB;;4BAItB,WAAoC;AAAA,EAEhC,EAAG,EAAC,uBACA;AAAA;;EAGG;;OAQH;GAEI,SAAS;GACT,SAAS;GACT,SAAS;GACT,SAAS;GAET,EAAG,oBAAgB,MAAM;AAAA,SAAK;;GAC9B,EAAG,qBAAgB,MAAM;AAAA,SAAK;;GAC9B,EAAG,mBAAgB,MAAM;AAAA,SAAK;;GAC9B,EAAG,sBAAgB,MAAM;AAAA,SAAK;;GAE9B;eAAmD;GAAnD,WAAyD;GAAzD;WAAuC,KAAJ;GAAnC,QAA2C,KAAI;GAA/C;aAAuC,KAAJ,MAAnC;aAA2C,KAAI,MAA/C;;;;;;;;;;;;;;;;;;;OAfJ;GACI;iBAA0C;GAA1C,aAAkD;GAAlD,YAAwD;GAAxD,6BAAmC,aAAnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAJJ;;;EAsBO;;;;KCxIL;;EDwIN,gBAAW;EAEX,wBAAmB;;eAQhB,sBAEH;AAAA,IAAG,QACC;AAAA,8BAA2B;SAE3B;AAAA,+BAA4B;;;gCAK7B,WAEH;AAAA,EAAQ;;OAEJ;GAEI,sBAAiB;GACjB,kBAAa;;OAIjB;GAEI,sBAAiB;GACjB,kBAAa;;OAIjB;;;;0BAMD,WAEH;AAAA,SAAO,eACU,2CACA,wBACI,cACV,YACF;;yBAQN,kBAA0D;AAAA,EAE7D;;;;;EAEO;;;;UAA0B;EAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAIJ,kBAA0D;AAAA,EAE7D;;;;;EAEO;;;;UAA2B;EAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAIJ,4BAAmF;AAAA,EAEtF,GAAI,aAAJ;GAAI,YAAW;;EAEf,iBAAiB,aAAS;EAE1B,iBAAiB,cAAY;EAC7B,kBAAkB,cAAY;EAE9B,OAAO,mBACF,AAAE,eAAe,aAAe,WACjC,CAAC,CAAE,eAAe,eAAgB;;cAQnC,kBAA+C;AAAA,EAElD,EAAG,YAAW,MACV;AAAA,wBAAgB;;EAGpB,OAAO,cAAS;;WAIb,eAAuC;AAAA,EAE1C,wBAAmB;EAEnB,EAAI,kBAAY,4BACZ;AAAA,gBAAQ,wCAAoB,OAApB,4BAA0B;SAElC;AAAA,gBAAQ;;EAGZ,OAAO,WAAM;;gBAIV,oBAAmD;AAAA,EAEtD,gBAAW;EAEX,WAAQ;EAAR;;;;;;;EAEA,OAAO;;cAIJ,kBAA6C;AAAA,EAEhD,wBAAmB;EAEnB,cAAS;EAKT,WAAQ;EAAR;;;;;;;EAEA,OAAO;;YAIJ,gBAAyC;AAAA,EAE5C,wBAAmB;EAEnB,OAAO,YAAO;;WAIX,eAAuC;AAAA,EAE1C,wBAAmB;EAEnB,OAAO,WAAM;;kBAIV,eAA0D;AAAA,EAE7D,wBAAmB;EAEnB,OAAO,kBAAa;;mBAIjB,eAA2D;AAAA,EAE9D,wBAAmB;EAEnB,OAAO,mBAAc;;iBAIlB,eAAyD;AAAA,EAE5D,wBAAmB;EAEnB,OAAO,iBAAY;;oBAIhB,eAA4D;AAAA,EAE/D,wBAAmB;EAEnB,OAAO,oBAAe;;YAK1B,aAAsC;AAAA,EAElC,gBAAgB;EAIhB,EAAG,aAAY,mBACX;AAAA,eAAY;;EAGT;;OAEH;GAGI;YAAoB,IAAE;GAAtB;;;;;;GACA;YAAoB,IAAE;GAAtB;;;;;;GACA;aAAoB,IAAE;GAAtB;;;;;;;OAEJ;;OAMA;;;EAOJ,OAAO,YAAO;;cAKlB,aAA0C;AAAA,EAEtC,cAAS;EAEF;;OAEH;GAEI,EAAG,EAAC,qBAAgB,CAAC,aAAQ;AAAA,IAGzB,4BAAuB;IACnB;aAAQ,OAAO,AAAC,kBAAW;IAA3B;;;;;;IACA;aAAQ,OAAO,AAAC,kBAAW;IAA3B;;;;;;IACJ,4BAAuB;IAEvB;cAAwB;IAAxB,UAAwB;IAAxB,SAAwB;IAAxB,SAAwB;IAAxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAIR;;OAEA;;;EAIJ,SAAc;EAAd,eAAsB;EAAtB;;;EAEA,OAAO;;cAIJ,WAEH;AAAA,SAAO;;WAIJ,WAEH;AAAA,SAAO;;gBAIJ,WAEI;AAAA;;aAIJ,WAEI;AAAA;;gBAIJ,WAEH;AAAA,SAAO;;gBAIX,aAAgD;AAAA,EAE5C,wBAAmB;EAEnB,gBAAW;EAEJ;;OAEH;GAGI;WAAmB,mBAAY,OAAK,EAAG,OAAK;GAA5C;;;;;;OzHtOR;KyHsOQ;;;;;;;;;;;;OzHtMR;KyHsMQ;;;;;GAEA,aAAQ;;OAEZ;;OAEA;;;EAKJ,OAAO;;gBAIJ,aAEH;AAAA,EAAO;mBAAqB;EAArB,GAAqB,MAArB;;;;;;;;;;;;;aAIJ,aAEH;AAAA,EAAO;gBAAkB;EAAlB,GAAkB,MAAlB;;;;;;;;;;;;WAIX,aAAuC;AAAA,EAEnC,WAAM;EAEC;;OAEH;GAEA,UAAU;GACV,UAAU;GAEV,EAAG,kBAAY,MAAM;AAAA,IACjB,MAAM,OAAO,AAAC,kBAAW;IACzB,MAAM,OAAO,AAAC,kBAAW;;GAGzB,oBAAe;GACX,+BAA0B;GACtB;aAAW;GAAX;;oBAAW;;;GACX;cAAW;GAAX;;qBAAW;;;GACf,+BAA0B;GAC9B,oBAAe;GAEf;cAAkB;GAAlB;;qBAAkB;;;GAClB;cAAkB;GAAlB;;qBAAkB;;;;OAEtB;GAEI,YAAgB;GAAhB;;;;;;;;;;;;;OAEJ;;;EAIJ,UAAc;EAAd,gBAAmB;EAAnB;;;EAEA,OAAO;;kBAIJ,aAA4C;AAAA,EAG/C;;;;;;;;;;;;;EAEA,EAAG,cAAa,MAAM;AAAA;iBAAS;GAAT;;;;;;;;;EACtB,EAAG,WAAa,MAAM;AAAA;cAAS;;EAC/B,EAAG,WAAa,MAAM;AAAA,eAAS;GAAT;;;;;;;;EACtB,EAAG,YAAa,MAAM;AAAA;eAAS;;EAE/B,EAAG,gBAAqB,MAAM;AAAA,qBAAiB;;EAC/C,EAAG,sBAAqB,MAAM;AAAA,yBAAiB;;EAC/C,EAAG,kBAAqB,MAAM;AAAA,qBAAiB;;EAG/C,EAAI,gBAAe,MACf;AAAA,mBAAW;GAAX;;;;;;;;SAEA;AAAA,mBAAW;GAAX;;;;;;;;;;gBAKD,YAEH;AAAA,eAAQ;;mBAIL,YAEH;AAAA,kBAAW;;;;;;;;;;;;;uBxC/XR,sBAtBX;AAAA,CAsBW;;;;;;;;;;;;CAlBsC,AAJjD,SAIiD;CADA,AAHjD,SAGiD;CADA,AAFjD,SAEiD;CAsBzC;CAEA,cAAS;CAET,WAAI;CACJ,WAAI;CACJ,WAAI;CACJ,SAAI;CAEJ;;;;;;QA3BJ,aAAyB;AAAA,EACrB,SAAI;EACJ;EACA,OAAO;;SAEX,aAAyB;AAAA,EACrB,SAAI;EACJ;EACA,OAAO;;SAEX,aAAyB;AAAA,EACrB,SAAI;EACJ;EACA,OAAO;;OAkBK,sBAA8E;AAAA,EAE1F,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,YAAY;EAGZ,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EAEnB,WAAI;EACJ,WAAI;EACJ,WAAI;EACJ,SAAI;EAER;EAEA,OAAO;;SAIK;AAAA;;;;;;EAEZ,wCAAY,iBAAkB,MAAO;EAErC,EAAG,UAAS,MAAM;AAAA,GAEd,cAAc;GACd,cAAc;GACd,cAAc;GACd,cAAc;GAEd,gBAAgB;GAChB,gBAAgB;GAChB,gBAAgB;GAChB,gBAAgB;GAEhB,EAAG,sBAAO,MAAO,mBAAW;AAAA,IAExB,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IAEV,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,YAAY;UAET;AAAA,IAEH,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;IACrD,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;IACrD,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;IACrD,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;;GAIzD,kBAA4B;GAE5B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAE9B,OAAO,yBAAe,KAAM,iBAAkB,YAAa;SAG3D;AAAA,SAAM;;;YAKP,WAA+B;AAAA,EAElC,kBAAa;EACT,+CAAmB;EACvB,kBAAa;EAEb,OAAO;;SAGK,WACZ;AAAA,SAAO,qBAAa,OAAE,OAAE,OAAE;;WAGvB,WACH;AAAA,SAAO,AAAK;;aAGT,iBAA8C;AAAA,EAEjD,UAAgB;EAChB,UAAgB;EAChB,UAAgB,MAAM;EACtB,UAAgB,MAAM;EAEtB,SAAe;EACf,EAAI,QAAO,KACP;AAAA,QAAK;SACF,EAAI,QAAO,UACd;AAAA,QAAK,AAAC,CAAC,KAAK,CAAC,WAAW,YAAY,MAAM,OAAO;SAC9C,EAAI,QAAO,UACd;AAAA,QAAK,AAAC,KAAK,CAAC,WAAW,YAAY,MAAM;SACtC,EAAI,QAAO,UACd;AAAA,QAAK,AAAC,KAAK,CAAC,WAAW,YAAY,MAAM;;EAG7C,SAAe,MAAM;EAErB,SAAe,AAAI,OAAO,MACtB,IACG,AAAI,UAAK,MACZ,MAAM,MAEN,MAAM,CAAC,IAAI;EAGX,WAAI;EACJ,WAAI;EACJ,WAAI;EACJ,SAAI;EAER,OAAO;;YAIK,WACZ;AAAA,SAAO,SAAO,SAAE,UAAQ,SAAE,UAAQ,SAAE,UAAQ,SAAE;;;;;uBA6B3C,sBAtBX;AAAA,CAsBW;;;;;;;;;;;;CAlBsC,AAJjD,SAIiD;CADA,AAHjD,SAGiD;CADA,AAFjD,SAEiD;CAsBzC;CAEA,cAAS;CAET,WAAI;CACJ,WAAI;CACJ,WAAI;CACJ,SAAI;CAEJ;;;;;;QA3BJ,aAAyB;AAAA,EACrB,SAAI;EACJ;EACA,OAAO;;SAEX,aAAyB;AAAA,EACrB,SAAI;EACJ;EACA,OAAO;;SAEX,aAAyB;AAAA,EACrB,SAAI;EACJ;EACA,OAAO;;OAkBK,sBAA2E;AAAA,EAEvF,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,YAAY;EAGZ,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EACvB,EAAG,OAAM,MAAM;AAAA,WAAQ;;EAEnB,WAAI;EACJ,WAAI;EACJ,WAAI;EACJ,SAAI;EAGR;EAEA,OAAO;;SAIK;AAAA;;;;;;EAEZ,wCAAY,iBAAkB,MAAO;EAErC,EAAG,UAAS,MAAM;AAAA,GAEd,cAAc;GACd,cAAc;GACd,cAAc;GACd,cAAc;GAEd,gBAAgB;GAChB,gBAAgB;GAChB,gBAAgB;GAChB,gBAAgB;GAEhB,EAAG,sBAAO,MAAO,mBAAW;AAAA,IAExB,UAAU;IACV,UAAU;IACV,UAAU;IACV,UAAU;IAEV,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,YAAY;UAET;AAAA,IAEH,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;IACrD,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;IACrD,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;IACrD,EAAG,YAAW,MAAM;AAAA,KAAE,UAAU;KAAS,YAAY;;;GAIzD,kBAA4B;GAE5B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAC9B,EAAG,YAAW;AAAA,oBAAgB;;GAE9B,OAAO,yBAAe,KAAM,iBAAkB,YAAa;SAG3D;AAAA,SAAM;;;YAKP,WAAoB;AAAA,EAEvB,kBAAa;EACT,+CAAmB;EACvB,kBAAa;EAEb,OAAO;;SAGK,WACZ;AAAA,SAAO,qBAAa,OAAE,OAAE,OAAE;;WAGvB,WAEH;AAAA,SAAO,AAAK;;cAGA,WAAiC;AAAA,EAC7C;EACA,OAAO;;gBAGK,qBAAwD;AAAA,EAEpE;EACA,OAAO,eAAW,AAAK;;aAGpB,iBAA8C;AAAA,EAEjD,UAAgB;EAChB,UAAgB;EAChB,UAAgB,MAAM;EACtB,UAAgB,MAAM;EAEtB,SAAe;EAEf,EAAI,QAAO,KACP;AAAA,QAAK;SACF,EAAI,QAAO,UACd;AAAA,QAAK,CAAC,KAAK,CAAC,WAAW,YAAY,MAAM,OAAO;SAC7C,EAAI,QAAO,UACd;AAAA,QAAK,KAAK,CAAC,WAAW,YAAY,MAAM;SACrC,EAAI,QAAO,UACd;AAAA,QAAK,KAAK,CAAC,WAAW,YAAY,MAAM;;EAG5C,SAAe,AAAI,OAAO,IACtB,IAEA,IAAI,MAAM;EAGd,WAAI;EACJ,WAAI;EACJ,WAAI;EACJ,SAAI;EAEJ,OAAO;;YAIK,WACZ;AAAA,SAAO,SAAO,SAAE,UAAQ,SAAE,UAAQ,SAAE,UAAQ,SAAE;;;;;8ByC1mBpC,gBAAsB;AAAA,CAChC,WAAM;CACN,gBAAW;CACX,aAAQ;;;;;UAGL,WAAmB;AAAA,EACtB,WAAM;EAAM,gBAAW;EAAM,aAAQ;;;;qBA8B3B;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAMV,gBAAW;CAEX,QAAQ;CACR,KAAO,OAAM,IACT,mBAAc;CAGlB;QACI;CADJ,OACS;CADT,OACc;CADd,QACmB;CADnB,OAEI;CAFJ,OAES;CAFT,OAEc;CAFd,QAEmB;CAFnB,OAGI;CAHJ,OAGS;CAHT,QAGc;CAHd,QAGmB;CAHnB,OAII;CAJJ,OAIS;CAJT,QAIc;CAJd,QAImB;CAGnB,qBAAgB,iBAAwB;;;;;MAK9B,0EAKd;AAAA,EAEI,QAAQ;EAEJ,EAAE,KAAK;EAAK,EAAE,KAAK;EAAK,EAAE,KAAM;EAAK,EAAE,MAAM;EAC7C,EAAE,KAAK;EAAK,EAAE,KAAK;EAAK,EAAE,KAAM;EAAK,EAAE,MAAM;EAC7C,EAAE,KAAK;EAAK,EAAE,KAAK;EAAK,EAAE,MAAM;EAAK,EAAE,MAAM;EAC7C,EAAE,KAAK;EAAK,EAAE,KAAK;EAAK,EAAE,MAAM;EAAK,EAAE,MAAM;EAEjD,OAAO;;YAGJ,WAAoB;AAAA,EACvB,QAAQ;EACY,oBAAkB;EAAe,qBAAkB;EAAgB,qBAAmB;EAAgB,qBAAmB;EACzH,qBAAkB;EAAe,qBAAkB;EAAgB,qBAAmB;EAAgB,qBAAmB;EACzH,qBAAkB;EAAe,qBAAkB;EAAgB,sBAAmB;EAAgB,sBAAmB;EACzH,sBAAkB;EAAe,sBAAkB;EAAgB,sBAAmB;EAAgB,sBAAmB;EAH7I,UAAU,AAAC,UAAS,CAAY,EAAE,KAAd,aAAwB,UAAS,CAAY,EAAE,KAAd,eAAyB,UAAS,CAAY,EAAG,KAAf,eAA0B,UAAS,CAAY,EAAE,MAAd,eAAyB,SACxI,UAAS,CAAY,EAAE,KAAd,eAAwB,UAAS,CAAY,EAAE,KAAd,eAAyB,UAAS,CAAY,EAAG,KAAf,eAA0B,UAAS,CAAY,EAAE,MAAd,eAAyB,SACxI,UAAS,CAAY,EAAE,KAAd,eAAwB,UAAS,CAAY,EAAE,KAAd,eAAyB,UAAS,CAAY,EAAE,MAAd,iBAA0B,UAAS,CAAY,EAAE,MAAd,iBAAyB,SACxI,UAAS,CAAY,EAAE,KAAd,iBAAwB,UAAS,CAAY,EAAE,KAAd,iBAAyB,UAAS,CAAY,EAAE,MAAd,iBAA0B,UAAS,CAAY,EAAE,MAAd,iBAAyB;EACnJ,OAAO;;WAGJ,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAE7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAE7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAE7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAC7C,WAA6B;AAAA,SAAO,cAAS;;WAE7C,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAE9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAE9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,KAAK;EAAI,OAAO;;WAC9D,aAAmC;AAAA,EAAE,cAAS,MAAM;EAAI,OAAO;;WAC/D,aAAmC;AAAA,EAAE,cAAS,MAAM;EAAI,OAAO;;WAE/D,aAAmC;AAAA,EAAE,cAAS,MAAM;EAAI,OAAO;;WAC/D,aAAmC;AAAA,EAAE,cAAS,MAAM;EAAI,OAAO;;WAC/D,aAAmC;AAAA,EAAE,cAAS,MAAM;EAAI,OAAO;;WAC/D,aAAmC;AAAA,EAAE,cAAS,MAAM;EAAI,OAAO;;gBAExD,WAAwD;AAAA,EAElE,QAAQ;EAER,KAAM,KAAI,IAAV;AAAA,GACI,mBAAc,KAAK,cAAS;GAC5B,EAAE;;EAGN,OAAO;;YAIG,WAA8B;AAAA,EAEpC;SACI;EADJ,OACO;EADP,OACU;EADV,QACa;EADb,OAEI;EAFJ,OAEO;EAFP,OAEU;EAFV,QAEa;EAFb,OAGI;EAHJ,OAGO;EAHP,QAGU;EAHV,QAGa;EAHb,OAII;EAJJ,OAIO;EAJP,QAIU;EAJV,QAIa;EAGjB,OAAO;;QAKG,YAAmC;AAAA,EAE7C,SAAS;EAEL;SACI,GAAG;EADP,OACW,GAAG;EADd,OACkB,GAAG;EADrB,QAC0B,GAAG;EAD7B,OAEI,GAAG;EAFP,OAEW,GAAG;EAFd,OAEkB,GAAG;EAFrB,QAE0B,GAAG;EAF7B,OAGI,GAAG;EAHP,OAGW,GAAG;EAHd,QAGkB,GAAG;EAHrB,QAG0B,GAAG;EAH7B,OAII,GAAG;EAJP,OAIW,GAAG;EAJd,QAIkB,GAAG;EAJrB,QAI0B,GAAG;EAGjC,OAAO;;UAGG;AAAA;;;;;;EAEV,YAAY,AAAc,YAAd;EACZ,QAAQ,SAAS;EACjB,QAAQ,SAAS;EAEjB;SACK,IAAI;EADT,OACkB,IAAG;EADrB,OAC8B;EAD9B,QACkC;EADlC,OAEI,CAAC,IAAI;EAFT,OAEkB,IAAG;EAFrB,OAE8B;EAF9B,QAEkC;EAFlC,OAGc;EAHd,OAG0B;EAH1B,QAG8B;EAH9B,QAGmC;EAHnC,OAIc;EAJd,OAI0B;EAJ1B,QAI8B;EAJ9B,QAImC;EAGnC,OAAO;;gBAIG,YAA2C;AAAA,EAErD,cAAS,MAAM,WAAW;EAC1B,cAAS,MAAM,WAAW;EAC1B,cAAS,MAAM,WAAW;EAE1B,OAAO;;eAIG,WACV;AAAA,SAAO,mBAAW,cAAS,IAAK,cAAS,IAAK,cAAS,IAAI;;mBAGjD,YAA8C;AAAA,EAExD,YAAY;EACZ,SAAS;EAEU,SAAe,GAAG;EAAlB,SAAsB,GAAG;EAAzB,SAA6B,GAAG;EAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAnB,eAAe,IAAI;EACA,UAAe,GAAG;EAAlB,UAAsB,GAAG;EAAzB,UAA6B,GAAG;EAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAnB,eAAe,IAAI;EACA,UAAe,GAAG;EAAlB,UAAsB,GAAG;EAAzB,UAA6B,GAAG;EAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAnB,eAAe,IAAI;EAEnB,cAAS,KAAM,GAAG,KAAM;EACxB,cAAS,KAAM,GAAG,KAAM;EACxB,cAAS,KAAM,GAAG,KAAM;EAExB,cAAS,KAAM,GAAG,KAAM;EACxB,cAAS,KAAM,GAAG,KAAM;EACxB,cAAS,KAAM,GAAG,KAAM;EAExB,cAAS,KAAM,GAAG,KAAM;EACxB,cAAS,KAAM,GAAG,KAAM;EACxB,cAAS,MAAM,GAAG,MAAM;EAExB,OAAO;;yBAGG;AAAA;;;EAEV,SAAS;EAET,QAAQ;EACR,QAAQ;EACR,QAAQ;EAER,QAAQ,SAAU;EAAlB,QAA2B,SAAU;EACrC,QAAQ,SAAU;EAAlB,QAA2B,SAAU;EACrC,QAAQ,SAAU;EAAlB,QAA2B,SAAU;EAErC,EAAK,WAAU,GAAM;AAAA,GAEjB,SAAS,IAAI;GAAb,SAAqB,IAAI;GAAzB,SAAiC,IAAI;GAArC,SAA6C,IAAI;GAEjD,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,CAAE,IAAI;GACd,GAAG,KAAK;GAER,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,KAAK,CAAE,IAAI;GAEd,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,MAAM,IAAI;SAEV,EAAK,WAAU,GAAM;AAAA,GAExB,SAAS,IAAI;GAAb,SAAqB,IAAI;GAAzB,SAAiC,IAAI;GAArC,SAA6C,IAAI;GAEjD,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,KAAK,KAAK,IAAI;GACjB,GAAG,KAAK,IAAI;GAEZ,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,CAAE;GAEV,GAAG,KAAK,KAAK,IAAI;GACjB,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,MAAM,IAAI;SAEV,EAAK,WAAU,GAAM;AAAA,GAExB,UAAS,IAAI;GAAb,UAAqB,IAAI;GAAzB,UAAiC,IAAI;GAArC,UAA6C,IAAI;GAEjD,GAAG,KAAK,MAAK,MAAK;GAClB,GAAG,KAAK,CAAE,IAAI;GACd,GAAG,KAAK,MAAK,MAAK;GAElB,GAAG,KAAK,MAAK,MAAK;GAClB,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,MAAK,MAAK;GAElB,GAAG,KAAK,CAAE,IAAI;GACd,GAAG,KAAK;GACR,GAAG,MAAM,IAAI;SAEV,EAAK,WAAU,GAAM;AAAA,GAExB,UAAS,IAAI;GAAb,UAAqB,IAAI;GAAzB,UAAiC,IAAI;GAArC,UAA6C,IAAI;GAEjD,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,MAAK,IAAI;GACjB,GAAG,KAAK,MAAK,IAAI;GAEjB,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,MAAK,IAAI;GACjB,GAAG,KAAK,MAAK,IAAI;GAEjB,GAAG,KAAK,CAAE;GACV,GAAG,KAAK,IAAI;GACZ,GAAG,MAAM,IAAI;SAEV,EAAK,WAAU,GAAM;AAAA,GAExB,SAAS,IAAI;GAAb,SAAqB,IAAI;GAAzB,SAAiC,IAAI;GAArC,SAA6C,IAAI;GAEjD,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,KAAK,KAAK;GAClB,GAAG,KAAK,KAAK,IAAI;GAEjB,GAAG,KAAK;GACR,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,CAAE,IAAI;GAEd,GAAG,KAAK,CAAE,IAAI;GACd,GAAG,KAAK,KAAK,IAAI;GACjB,GAAG,MAAM,KAAK,KAAK;SAEhB,EAAK,WAAU,GAAM;AAAA,GAExB,UAAS,IAAI;GAAb,UAAqB,IAAI;GAAzB,UAAiC,IAAI;GAArC,UAA6C,IAAI;GAEjD,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,CAAE;GACV,GAAG,KAAK,IAAI;GAEZ,GAAG,KAAK,MAAK,IAAI;GACjB,GAAG,KAAK,IAAI;GACZ,GAAG,KAAK,MAAK,IAAI;GAEjB,GAAG,KAAK,MAAK,IAAI;GACjB,GAAG,KAAK,IAAI;GACZ,GAAG,MAAM,MAAK,IAAI;;EAKtB,GAAG,KAAK;EACR,GAAG,KAAK;EACR,GAAG,MAAM;EAGT,GAAG,MAAM;EACT,GAAG,MAAM;EACT,GAAG,MAAM;EACT,GAAG,MAAM;EAET,OAAO;;8BAIG,YAA6D;AAAA,EAEvE,SAAS;EAET,SAAS,MAAM;EAAf,SAAyB,MAAM;EAA/B,SAAyC,MAAM;EAC/C,SAAS,MAAM;EAAf,SAAyB,MAAM;EAA/B,SAAyC,MAAM;EAC/C,SAAS,MAAM;EAAf,SAAyB,MAAM;EAA/B,SAAyC,MAAM;EAC/C,SAAS,MAAM;EAAf,SAAyB,MAAM;EAA/B,SAAyC,MAAM;EAE/C,GAAG,KAAK,IAAI,CAAE,KAAK;EACnB,GAAG,KAAK,KAAK;EACb,GAAG,KAAK,KAAK;EAEb,GAAG,KAAK,KAAK;EACb,GAAG,KAAK,IAAI,CAAE,KAAK;EACnB,GAAG,KAAK,KAAK;EAEb,GAAG,KAAK,KAAK;EACb,GAAG,KAAK,KAAK;EACb,GAAG,MAAM,IAAI,CAAE,KAAK;EAGpB,GAAG,KAAK;EACR,GAAG,KAAK;EACR,GAAG,MAAM;EAGT,GAAG,MAAM;EACT,GAAG,MAAM;EACT,GAAG,MAAM;EACT,GAAG,MAAM;EAET,OAAO;;UAKG,2BAAoE;AAAA,EAE9E,SAAS;EACT,SAAS;EACT,SAAS;EAET,SAAS;EAEJ;;;;;;;;;YAAiB,YAAjB,AAA0B;EAA1B,UAAiB,YAAjB,AAA0B;EAA1B,UAAiB,YAAjB,AAA0B;EAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAL,KAAK;EAED,EAAK,uDAAa,GACd;AAAA,UAAO;GAAP;;iBAAO;;;;EAGV;;;;;;;;;YAAc,QAAd,AAAmB,OAAnB,AAAc,QAAd,AAAmB;EAAnB,UAAc,QAAd,AAAmB,OAAnB,AAAc,QAAd,AAAmB;EAAnB,UAAc,QAAd,AAAmB,OAAnB,AAAc,QAAd,AAAmB;EAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAL,KAAK;EAED,EAAK,uDAAa,GAAI;AAAA,GAClB;oBAAQ;GAAR;;;;;;GACK;;;;;;;;;aAAc,QAAd,AAAmB,OAAnB,AAAc,QAAd,AAAmB;GAAnB,UAAc,QAAd,AAAmB,OAAnB,AAAc,QAAd,AAAmB;GAAnB,UAAc,QAAd,AAAmB,OAAnB,AAAc,QAAd,AAAmB;GAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAL,KAAK;;EAGb,KAAK,mBAAc,OAAd,AAAkB,OAAlB,AAAc,OAAd,AAAkB,KAAlB,AAAc,OAAd,AAAkB,OAAlB,AAAc,OAAd,AAAkB,KAAlB,AAAc,OAAd,AAAkB,OAAlB,AAAc,OAAd,AAAkB;EAEvB,GAAG,KAAK;EAAM,GAAG,KAAK;EAAM,GAAG,KAAM;EACrC,GAAG,KAAK;EAAM,GAAG,KAAK;EAAM,GAAG,KAAM;EACrC,GAAG,KAAK;EAAM,GAAG,KAAK;EAAM,GAAG,MAAM;EAErC,OAAO;;YAKG,aAEV;AAAA,EAAO,SAAiB;EAAjB,SAAuB;EAAvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAKG,gBAA2D;AAAA,EAErE,SAAS;EACT,SAAS;EACT,SAAS;EAET,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EAErD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EAEjD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAEnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAEnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAEnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,KAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EACnD,GAAG,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAEvD,OAAO;;mBAKG,mBAA2E;AAAA,EAErF,SAAS;EAEL,SAAiB;EAAjB,SAAqB;EAArB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,GAAG,KAAM,GAAG;EAAM,GAAG,KAAM,GAAG;EAAM,GAAG,KAAM,GAAG;EAAK,GAAG,KAAM,GAAG;EACjE,GAAG,KAAM,GAAG;EAAM,GAAG,KAAM,GAAG;EAAM,GAAG,KAAM,GAAG;EAAK,GAAG,KAAM,GAAG;EACjE,GAAG,KAAM,GAAG;EAAM,GAAG,KAAM,GAAG;EAAM,GAAG,MAAM,GAAG;EAAK,GAAG,MAAM,GAAG;EACjE,GAAG,MAAM,GAAG;EAAM,GAAG,MAAM,GAAG;EAAM,GAAG,MAAM,GAAG;EAAK,GAAG,MAAM,GAAG;EAErE,OAAO;;kBAKG,aAA6C;AAAA,EAEvD,SAAS;EAEL,GAAG,MAAM;EAAI,GAAG,MAAM;EAAI,GAAG,MAAO;EAAI,GAAG,OAAO;EAClD,GAAG,MAAM;EAAI,GAAG,MAAM;EAAI,GAAG,MAAO;EAAI,GAAG,OAAO;EAClD,GAAG,MAAM;EAAI,GAAG,MAAM;EAAI,GAAG,OAAO;EAAI,GAAG,OAAO;EAClD,GAAG,MAAM;EAAI,GAAG,MAAM;EAAI,GAAG,OAAO;EAAI,GAAG,OAAO;EAEtD,OAAO;;wBAKG,aAAgE;AAAA,EAE1E,SAAS;EACT,QAAQ;EACR,SAAS;EAET,KAAO,KAAI,IAAX;AAAA,GAEI,SAAO,GAAG;GAAV;;;;;;GACA,SAAO,GAAG,IAAI;GAAd;;;;;;GACA,SAAO,GAAG,IAAI;GAAd;;;;;;GAEA,QAAoB;GAApB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,GAAG,KAAS;GACZ,GAAG,IAAI,KAAK;GACZ,GAAG,IAAI,KAAK;GAEZ,KAAK;;EAIT,OAAO;;eAIG,WAA+B;AAAA,EAEzC,SAAS;EAET,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EAErD,OAAO,AACH,MAAM,CACD,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,OAEjB,MAAM,CACD,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,OAEjB,MAAM,CACD,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,OAEjB,MAAM,CACF,CAAC,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM,MACZ,MAAM,MAAM;;aAKX,WAA8B;AAAA,EAExC,SAAS;EACT,UAEM,GAAG;EAAI,GAAG,KAAK,GAAG;EAAI,GAAG,KAAK;EACpC,MAAM,GAAG;EAAI,GAAG,KAAK,GAAG;EAAI,GAAG,KAAK;EACpC,MAAM,GAAG;EAAI,GAAG,KAAK,GAAG;EAAI,GAAG,KAAK;EAEpC,MAAM,GAAG;EAAK,GAAG,KAAM,GAAG;EAAK,GAAG,MAAM;EACxC,MAAM,GAAG;EAAK,GAAG,KAAM,GAAG;EAAK,GAAG,MAAM;EACxC,MAAM,GAAG;EAAK,GAAG,MAAM,GAAG;EAAK,GAAG,MAAM;EAExC,OAAO;;kBAIG,gBAAoE;AAAA,EAE9E,EAAI,UAAS,MAAM;AAAA,GACf,QAAQ;GACR,SAAS;GAAT,WAAe,IAAf;AAAA;IAAmB,WAAY;;;EAGnC,SAAS;EAEL,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EACnF,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EACnF,MAAO,KAAO,GAAG;EAAK,MAAO,KAAO,GAAG;EAAK,MAAO,MAAO,GAAG;EAAK,MAAO,MAAO,GAAG;EACnF,MAAO,MAAO,GAAG;EAAK,MAAO,MAAO,GAAG;EAAK,MAAO,MAAO,GAAG;EAAK,MAAO,MAAO,GAAG;EAEvF,OAAO;;wBAKG,wBAAgF;AAAA,EAE1F,SAAS;EAEL,MAAO,WAAiB,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAE3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAE3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,KAAO,GAAG;EAC3B,MAAO,UAAU,MAAO,GAAG;EAC3B,MAAO,UAAU,MAAO,GAAG;EAE3B,MAAO,UAAU,MAAO,GAAG;EAC3B,MAAO,UAAU,MAAO,GAAG;EAC3B,MAAO,UAAU,MAAO,GAAG;EAC3B,MAAO,UAAU,MAAO,GAAG;EAE/B,OAAO;;eAKG,aAA2C;AAAA,EAErD,SAAS;EAEL,GAAG,MAAM;EACT,GAAG,MAAM;EACT,GAAG,MAAM;EAEb,OAAO;;WAIG,WACV;AAAA,EAAO;;;WAAmB;EAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAGG,aAA0C;AAAA,EAIpD,SAAS;EACT,SAAS;EAET,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EACrD,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAAvC,UAAkD,GAAG;EAEjD,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,KAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EACvF,GAAG,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI,MAAM,MAAI,MAAI;EAE3F,UAAU,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,GAAI,KAAM,GA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AAS,GAAI,cAAS,GAAI,cAAS;;WAG5C,WACV;AAAA,EAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBCrgCJ,sBAlBX;AAAA,CAkBW;;;;;;;;;;;;CAuaY,AAzbvB,oBAybuB;CAzaF,AAhBrB,kBAgBqB;CAPoB,AATzC,wBASyC;CAJO,AALhD,SAKgD;CADA,AAJhD,SAIgD;CADA,AAHhD,SAGgD;CADA,AAFhD,SAEgD;CAkBxC,kBAAa;CAET,SAAI;CAAJ;;;;;;;;;;;IvDwwBA,MuDxwBA;;IvDywBA,MuDzwBA;IvD0wBA,MuD1wBA;;;IvD4wBA,MuD5wBA;IvD6wBA,MuD7wBA;IvD8wBA,MuD9wBA;;;IvDgxBA,MuDhxBA;IvDixBA,MuDjxBA;IvDkxBA,MuDlxBA;;IvDoxBA,MuDpxBA;;IvDqxBA,MuDrxBA;IvDsxBA,MuDtxBA;;IvDwxBA,MuDxxBA;IvDyxBA,MuDzxBA;;IvD0xBA,MuD1xBA;;IvD4xBA,MuD5xBA;IvD6xBA,MuD7xBA;;IvD8xBA,MuD9xBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACA,SAAI;CAAJ;;;;;;;;;;;IvDuwBA,MuDvwBA;;IvDwwBA,MuDxwBA;IvDywBA,MuDzwBA;;;IvD2wBA,MuD3wBA;IvD4wBA,MuD5wBA;IvD6wBA,MuD7wBA;;;IvD+wBA,MuD/wBA;IvDgxBA,MuDhxBA;IvDixBA,MuDjxBA;;IvDmxBA,MuDnxBA;;IvDoxBA,MuDpxBA;IvDqxBA,MuDrxBA;;IvDuxBA,MuDvxBA;IvDwxBA,MuDxxBA;;IvDyxBA,MuDzxBA;;IvD2xBA,MuD3xBA;IvD4xBA,MuD5xBA;;IvD6xBA,MuD7xBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACA,SAAI;CAAJ;;;;;;;;;;;IvDswBA,MuDtwBA;;IvDuwBA,MuDvwBA;IvDwwBA,MuDxwBA;;;IvD0wBA,MuD1wBA;IvD2wBA,MuD3wBA;IvD4wBA,MuD5wBA;;;IvD8wBA,MuD9wBA;IvD+wBA,MuD/wBA;IvDgxBA,MuDhxBA;;IvDkxBA,MuDlxBA;;IvDmxBA,MuDnxBA;IvDoxBA,MuDpxBA;;IvDsxBA,MuDtxBA;IvDuxBA,MuDvxBA;;IvDwxBA,MuDxxBA;;IvD0xBA,MuD1xBA;IvD2xBA,MuD3xBA;;IvD4xBA,MuD5xBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACA,SAAI;CAAJ;;;;;;;;;;;IvDqwBA,MuDrwBA;;IvDswBA,MuDtwBA;IvDuwBA,MuDvwBA;;;IvDywBA,MuDzwBA;IvD0wBA,MuD1wBA;IvD2wBA,MuD3wBA;;;IvD6wBA,MuD7wBA;IvD8wBA,MuD9wBA;IvD+wBA,MuD/wBA;;IvDixBA,MuDjxBA;;IvDkxBA,MuDlxBA;IvDmxBA,MuDnxBA;;IvDqxBA,MuDrxBA;IvDsxBA,MuDtxBA;;IvDuxBA,MuDvxBA;;IvDyxBA,MuDzxBA;IvD0xBA,MuD1xBA;;IvD2xBA,MuD3xBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEJ,aAAQ;CAER,kBAAa;;;;yBA8OH,gBACV;AAAA,QAAO,eAAe;;8BAGZ,gBACV;AAAA,QAAO,oBAAoB;;oCAGjB,8BACV;AAAA,QAAO,mCAAmC;;2BAiJhC,yBAEV;AAAA,QAAO,SAAU,WAAa,IAAK;;yBAIzB,gBACV;AAAA,QAAO,uBAAe,KAAK,KAAK,KAAK,UAAU;;4BA6G9B,sBAA6C;AAAA,CAE9D,cAAc;CACd,cAAc;CACd,cAAc;CACd,cAAc;;;WA7flB,WAEI;AAAA,SAAO,SAAO,SAAI,SAAS,SAAI,SAAS,SAAK,SAAS,SAAM;;OAIzD,sBAAoE;AAAA,EAEvE;WAAS;EAAT;;;;;;;;;;;KvDqvBI,MuDrvBJ;;KvDsvBI,MuDtvBJ;KvDuvBI,MuDvvBJ;;;KvDyvBI,MuDzvBJ;KvD0vBI,MuD1vBJ;KvD2vBI,MuD3vBJ;;;KvD6vBI,MuD7vBJ;KvD8vBI,MuD9vBJ;KvD+vBI,MuD/vBJ;;KvDiwBI,MuDjwBJ;;KvDkwBI,MuDlwBJ;KvDmwBI,MuDnwBJ;;KvDqwBI,MuDrwBJ;KvDswBI,MuDtwBJ;;KvDuwBI,MuDvwBJ;;KvDywBI,MuDzwBJ;KvD0wBI,MuD1wBJ;;KvD2wBI,MuD3wBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAa;EAAb;;;;;;;;;;;KvDqvBI,MuDrvBJ;;KvDsvBI,MuDtvBJ;KvDuvBI,MuDvvBJ;;;KvDyvBI,MuDzvBJ;KvD0vBI,MuD1vBJ;KvD2vBI,MuD3vBJ;;;KvD6vBI,MuD7vBJ;KvD8vBI,MuD9vBJ;KvD+vBI,MuD/vBJ;;KvDiwBI,MuDjwBJ;;KvDkwBI,MuDlwBJ;KvDmwBI,MuDnwBJ;;KvDqwBI,MuDrwBJ;KvDswBI,MuDtwBJ;;KvDuwBI,MuDvwBJ;;KvDywBI,MuDzwBJ;KvD0wBI,MuD1wBJ;;KvD2wBI,MuD3wBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAiB;EAAjB;;;;;;;;;;;KvDqvBI,MuDrvBJ;;KvDsvBI,MuDtvBJ;KvDuvBI,MuDvvBJ;;;KvDyvBI,MuDzvBJ;KvD0vBI,MuD1vBJ;KvD2vBI,MuD3vBJ;;;KvD6vBI,MuD7vBJ;KvD8vBI,MuD9vBJ;KvD+vBI,MuD/vBJ;;KvDiwBI,MuDjwBJ;;KvDkwBI,MuDlwBJ;KvDmwBI,MuDnwBJ;;KvDqwBI,MuDrwBJ;KvDswBI,MuDtwBJ;;KvDuwBI,MuDvwBJ;;KvDywBI,MuDzwBJ;KvD0wBI,MuD1wBJ;;KvD2wBI,MuD3wBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAqB;EAArB;;;;;;;;;;;KvDqvBI,MuDrvBJ;;KvDsvBI,MuDtvBJ;KvDuvBI,MuDvvBJ;;;KvDyvBI,MuDzvBJ;KvD0vBI,MuD1vBJ;KvD2vBI,MuD3vBJ;;;KvD6vBI,MuD7vBJ;KvD8vBI,MuD9vBJ;KvD+vBI,MuD/vBJ;;KvDiwBI,MuDjwBJ;;KvDkwBI,MuDlwBJ;KvDmwBI,MuDnwBJ;;KvDqwBI,MuDrwBJ;KvDswBI,MuDtwBJ;;KvDuwBI,MuDvwBJ;;KvDywBI,MuDzwBJ;KvD0wBI,MuD1wBJ;;KvD2wBI,MuD3wBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvDqvBI,MuDrvBJ;;IvDsvBI,MuDtvBJ;IvDuvBI,MuDvvBJ;;;IvDyvBI,MuDzvBJ;IvD0vBI,MuD1vBJ;IvD2vBI,MuD3vBJ;;;IvD6vBI,MuD7vBJ;IvD8vBI,MuD9vBJ;IvD+vBI,MuD/vBJ;;IvDiwBI,MuDjwBJ;;IvDkwBI,MuDlwBJ;IvDmwBI,MuDnwBJ;;IvDqwBI,MuDrwBJ;IvDswBI,MuDtwBJ;;IvDuwBI,MuDvwBJ;;IvDywBI,MuDzwBJ;IvD0wBI,MuD1wBJ;;IvD2wBI,MuD3wBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,OAAO;;QAKJ,sBAAsD;AAAA,EAErD,SACU;EADV,SAEU;EAFV,SAGU;EAHV;WAAU;EAAV;;;;;;;;;;;KvD4uBA,KuD5uBA;;KvD6uBA,MuD7uBA;KvD8uBA,MuD9uBA;;;KvDgvBA,KuDhvBA;KvDivBA,MuDjvBA;KvDkvBA,MuDlvBA;;;KvDovBA,KuDpvBA;KvDqvBA,MuDrvBA;KvDsvBA,MuDtvBA;;KvDwvBA,KuDxvBA;;KvDyvBA,MuDzvBA;KvD0vBA,MuD1vBA;;KvD4vBA,KuD5vBA;KvD6vBA,MuD7vBA;;KvD8vBA,MuD9vBA;;KvDgwBA,KuDhwBA;KvDiwBA,MuDjwBA;;KvDkwBA,MuDlwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD4uBA,MuD5uBA;;KvD6uBA,MuD7uBA;KvD8uBA,MuD9uBA;;;KvDgvBA,MuDhvBA;KvDivBA,MuDjvBA;KvDkvBA,MuDlvBA;;;KvDovBA,MuDpvBA;KvDqvBA,MuDrvBA;KvDsvBA,MuDtvBA;;KvDwvBA,MuDxvBA;;KvDyvBA,MuDzvBA;KvD0vBA,MuD1vBA;;KvD4vBA,MuD5vBA;KvD6vBA,MuD7vBA;;KvD8vBA,MuD9vBA;;KvDgwBA,MuDhwBA;KvDiwBA,MuDjwBA;;KvDkwBA,MuDlwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD4uBA,MuD5uBA;;KvD6uBA,MuD7uBA;KvD8uBA,MuD9uBA;;;KvDgvBA,MuDhvBA;KvDivBA,MuDjvBA;KvDkvBA,MuDlvBA;;;KvDovBA,MuDpvBA;KvDqvBA,MuDrvBA;KvDsvBA,MuDtvBA;;KvDwvBA,MuDxvBA;;KvDyvBA,MuDzvBA;KvD0vBA,MuD1vBA;;KvD4vBA,MuD5vBA;KvD6vBA,MuD7vBA;;KvD8vBA,MuD9vBA;;KvDgwBA,MuDhwBA;KvDiwBA,MuDjwBA;;KvDkwBA,MuDlwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD4uBA,MuD5uBA;;KvD6uBA,MuD7uBA;KvD8uBA,MuD9uBA;;;KvDgvBA,MuDhvBA;KvDivBA,MuDjvBA;KvDkvBA,MuDlvBA;;;KvDovBA,MuDpvBA;KvDqvBA,MuDrvBA;KvDsvBA,MuDtvBA;;KvDwvBA,MuDxvBA;;KvDyvBA,MuDzvBA;KvD0vBA,MuD1vBA;;KvD4vBA,MuD5vBA;KvD6vBA,MuD7vBA;;KvD8vBA,MuD9vBA;;KvDgwBA,MuDhwBA;KvDiwBA,MuDjwBA;;KvDkwBA,MuDlwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvD4uBA,MuD5uBA;;IvD6uBA,MuD7uBA;IvD8uBA,MuD9uBA;;;IvDgvBA,MuDhvBA;IvDivBA,MuDjvBA;IvDkvBA,MuDlvBA;;;IvDovBA,MuDpvBA;IvDqvBA,MuDrvBA;IvDsvBA,MuDtvBA;;IvDwvBA,MuDxvBA;;IvDyvBA,MuDzvBA;IvD0vBA,MuD1vBA;;IvD4vBA,MuD5vBA;IvD6vBA,MuD7vBA;;IvD8vBA,MuD9vBA;;IvDgwBA,MuDhwBA;IvDiwBA,MuDjwBA;;IvDkwBA,MuDlwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAKJ,OAAO;;OAIJ,iBACH;AAAA,SAAO,SAAI,WAAW,SAAI,WAAW,SAAI,WAAW,SAAI;;gBAIrD;AAAA;;;EAMH,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EAET,SAAS,SAAU,WAAW;EAC9B,SAAS,SAAU,WAAW;EAC9B,SAAS,SAAU,WAAW;EAE9B,SAAS,SAAU,WAAW;EAC9B,SAAS,SAAU,WAAW;EAC9B,SAAS,SAAU,WAAW;EAE1B,EAAK,WAAU,GAAM;AAAA,GAEjB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;SAE3B,EAAK,WAAU,GAAM;AAAA,GAExB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;SAE3B,EAAK,WAAU,GAAM;AAAA,GAExB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;SAE3B,EAAK,WAAU,GAAM;AAAA,GAExB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;SAE3B,EAAK,WAAU,GAAM;AAAA,GAExB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;SAE3B,EAAK,WAAU,GAAM;AAAA,GAExB,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;GAC9B,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;;EAItC;WAAS;EAAT;;;;;;;;;;;KvD+pBI,MuD/pBJ;;KvDgqBI,MuDhqBJ;KvDiqBI,MuDjqBJ;;;KvDmqBI,MuDnqBJ;KvDoqBI,MuDpqBJ;KvDqqBI,MuDrqBJ;;;KvDuqBI,MuDvqBJ;KvDwqBI,MuDxqBJ;KvDyqBI,MuDzqBJ;;KvD2qBI,MuD3qBJ;;KvD4qBI,MuD5qBJ;KvD6qBI,MuD7qBJ;;KvD+qBI,MuD/qBJ;KvDgrBI,MuDhrBJ;;KvDirBI,MuDjrBJ;;KvDmrBI,MuDnrBJ;KvDorBI,MuDprBJ;;KvDqrBI,MuDrrBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAa;EAAb;;;;;;;;;;;KvD+pBI,MuD/pBJ;;KvDgqBI,MuDhqBJ;KvDiqBI,MuDjqBJ;;;KvDmqBI,MuDnqBJ;KvDoqBI,MuDpqBJ;KvDqqBI,MuDrqBJ;;;KvDuqBI,MuDvqBJ;KvDwqBI,MuDxqBJ;KvDyqBI,MuDzqBJ;;KvD2qBI,MuD3qBJ;;KvD4qBI,MuD5qBJ;KvD6qBI,MuD7qBJ;;KvD+qBI,MuD/qBJ;KvDgrBI,MuDhrBJ;;KvDirBI,MuDjrBJ;;KvDmrBI,MuDnrBJ;KvDorBI,MuDprBJ;;KvDqrBI,MuDrrBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAiB;EAAjB;;;;;;;;;;;KvD+pBI,MuD/pBJ;;KvDgqBI,MuDhqBJ;KvDiqBI,MuDjqBJ;;;KvDmqBI,MuDnqBJ;KvDoqBI,MuDpqBJ;KvDqqBI,MuDrqBJ;;;KvDuqBI,MuDvqBJ;KvDwqBI,MuDxqBJ;KvDyqBI,MuDzqBJ;;KvD2qBI,MuD3qBJ;;KvD4qBI,MuD5qBJ;KvD6qBI,MuD7qBJ;;KvD+qBI,MuD/qBJ;KvDgrBI,MuDhrBJ;;KvDirBI,MuDjrBJ;;KvDmrBI,MuDnrBJ;KvDorBI,MuDprBJ;;KvDqrBI,MuDrrBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAqB;EAArB;;;;;;;;;;;KvD+pBI,MuD/pBJ;;KvDgqBI,MuDhqBJ;KvDiqBI,MuDjqBJ;;;KvDmqBI,MuDnqBJ;KvDoqBI,MuDpqBJ;KvDqqBI,MuDrqBJ;;;KvDuqBI,MuDvqBJ;KvDwqBI,MuDxqBJ;KvDyqBI,MuDzqBJ;;KvD2qBI,MuD3qBJ;;KvD4qBI,MuD5qBJ;KvD6qBI,MuD7qBJ;;KvD+qBI,MuD/qBJ;KvDgrBI,MuDhrBJ;;KvDirBI,MuDjrBJ;;KvDmrBI,MuDnrBJ;KvDorBI,MuDprBJ;;KvDqrBI,MuDrrBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvD+pBI,MuD/pBJ;;IvDgqBI,MuDhqBJ;IvDiqBI,MuDjqBJ;;;IvDmqBI,MuDnqBJ;IvDoqBI,MuDpqBJ;IvDqqBI,MuDrqBJ;;;IvDuqBI,MuDvqBJ;IvDwqBI,MuDxqBJ;IvDyqBI,MuDzqBJ;;IvD2qBI,MuD3qBJ;;IvD4qBI,MuD5qBJ;IvD6qBI,MuD7qBJ;;IvD+qBI,MuD/qBJ;IvDgrBI,MuDhrBJ;;IvDirBI,MuDjrBJ;;IvDmrBI,MuDnrBJ;IvDorBI,MuDprBJ;;IvDqrBI,MuDrrBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,OAAO;;oBAKJ,uBAAqE;AAAA,EAKxE,iBAAiB,SAAS;EAC1B,SAAS,SAAU;EAEf,SACU,UAAU;EADpB,SAEU,UAAU;EAFpB,SAGU,SAAU;EAHpB;WAAU,UAAU;EAApB;;;;;;;;;;;KvDgpBA,KuDhpBA;;KvDipBA,MuDjpBA;KvDkpBA,MuDlpBA;;;KvDopBA,KuDppBA;KvDqpBA,MuDrpBA;KvDspBA,MuDtpBA;;;KvDwpBA,KuDxpBA;KvDypBA,MuDzpBA;KvD0pBA,MuD1pBA;;KvD4pBA,KuD5pBA;;KvD6pBA,MuD7pBA;KvD8pBA,MuD9pBA;;KvDgqBA,KuDhqBA;KvDiqBA,MuDjqBA;;KvDkqBA,MuDlqBA;;KvDoqBA,KuDpqBA;KvDqqBA,MuDrqBA;;KvDsqBA,MuDtqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDgpBA,MuDhpBA;;KvDipBA,MuDjpBA;KvDkpBA,MuDlpBA;;;KvDopBA,MuDppBA;KvDqpBA,MuDrpBA;KvDspBA,MuDtpBA;;;KvDwpBA,MuDxpBA;KvDypBA,MuDzpBA;KvD0pBA,MuD1pBA;;KvD4pBA,MuD5pBA;;KvD6pBA,MuD7pBA;KvD8pBA,MuD9pBA;;KvDgqBA,MuDhqBA;KvDiqBA,MuDjqBA;;KvDkqBA,MuDlqBA;;KvDoqBA,MuDpqBA;KvDqqBA,MuDrqBA;;KvDsqBA,MuDtqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDgpBA,MuDhpBA;;KvDipBA,MuDjpBA;KvDkpBA,MuDlpBA;;;KvDopBA,MuDppBA;KvDqpBA,MuDrpBA;KvDspBA,MuDtpBA;;;KvDwpBA,MuDxpBA;KvDypBA,MuDzpBA;KvD0pBA,MuD1pBA;;KvD4pBA,MuD5pBA;;KvD6pBA,MuD7pBA;KvD8pBA,MuD9pBA;;KvDgqBA,MuDhqBA;KvDiqBA,MuDjqBA;;KvDkqBA,MuDlqBA;;KvDoqBA,MuDpqBA;KvDqqBA,MuDrqBA;;KvDsqBA,MuDtqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDgpBA,MuDhpBA;;KvDipBA,MuDjpBA;KvDkpBA,MuDlpBA;;;KvDopBA,MuDppBA;KvDqpBA,MuDrpBA;KvDspBA,MuDtpBA;;;KvDwpBA,MuDxpBA;KvDypBA,MuDzpBA;KvD0pBA,MuD1pBA;;KvD4pBA,MuD5pBA;;KvD6pBA,MuD7pBA;KvD8pBA,MuD9pBA;;KvDgqBA,MuDhqBA;KvDiqBA,MuDjqBA;;KvDkqBA,MuDlqBA;;KvDoqBA,MuDpqBA;KvDqqBA,MuDrqBA;;KvDsqBA,MuDtqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvDgpBA,MuDhpBA;;IvDipBA,MuDjpBA;IvDkpBA,MuDlpBA;;;IvDopBA,MuDppBA;IvDqpBA,MuDrpBA;IvDspBA,MuDtpBA;;;IvDwpBA,MuDxpBA;IvDypBA,MuDzpBA;IvD0pBA,MuD1pBA;;IvD4pBA,MuD5pBA;;IvD6pBA,MuD7pBA;IvD8pBA,MuD9pBA;;IvDgqBA,MuDhqBA;IvDiqBA,MuDjqBA;;IvDkqBA,MuDlqBA;;IvDoqBA,MuDpqBA;IvDqqBA,MuDrqBA;;IvDsqBA,MuDtqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAKJ,OAAO;;yBAKJ,aAAyD;AAAA,EAK5D,SAAS;EAET,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EACvC,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EACvC,UAAU,GAAG;EAAb,UAAuB,GAAG;EAA1B,UAAoC,GAAG;EAEvC,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EAET,SAAS,MAAM,MAAM;EAErB;EAEI,EAAI,MAAK,GAAG;AAAA,GAER,IAAI,MAAM,UAAW,KAAK;GAE1B,KAAK,OAAO;GACZ,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,CAAC,MAAM,OAAO;SAEhB,EAAI,OAAM,OAAO,MAAM,KAAK;AAAA,GAE/B,IAAI,MAAM,UAAU,MAAM,MAAM,MAAM;GAEtC,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,OAAO;GACZ,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,CAAC,MAAM,OAAO;SAEhB,EAAI,OAAM,KAAK;AAAA,GAElB,IAAI,MAAM,UAAU,MAAM,MAAM,MAAM;GAEtC,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,OAAO;GACZ,KAAK,CAAC,MAAM,OAAO;SAEhB;AAAA,GAEH,IAAI,MAAM,UAAU,MAAM,MAAM,MAAM;GAEtC,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,CAAC,MAAM,OAAO;GACnB,KAAK,OAAO;;EAIpB;WAAS;EAAT;;;;;;;;;;;KvD4kBI,MuD5kBJ;;KvD6kBI,MuD7kBJ;KvD8kBI,MuD9kBJ;;;KvDglBI,MuDhlBJ;KvDilBI,MuDjlBJ;KvDklBI,MuDllBJ;;;KvDolBI,MuDplBJ;KvDqlBI,MuDrlBJ;KvDslBI,MuDtlBJ;;KvDwlBI,MuDxlBJ;;KvDylBI,MuDzlBJ;KvD0lBI,MuD1lBJ;;KvD4lBI,MuD5lBJ;KvD6lBI,MuD7lBJ;;KvD8lBI,MuD9lBJ;;KvDgmBI,MuDhmBJ;KvDimBI,MuDjmBJ;;KvDkmBI,MuDlmBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAa;EAAb;;;;;;;;;;;KvD4kBI,MuD5kBJ;;KvD6kBI,MuD7kBJ;KvD8kBI,MuD9kBJ;;;KvDglBI,MuDhlBJ;KvDilBI,MuDjlBJ;KvDklBI,MuDllBJ;;;KvDolBI,MuDplBJ;KvDqlBI,MuDrlBJ;KvDslBI,MuDtlBJ;;KvDwlBI,MuDxlBJ;;KvDylBI,MuDzlBJ;KvD0lBI,MuD1lBJ;;KvD4lBI,MuD5lBJ;KvD6lBI,MuD7lBJ;;KvD8lBI,MuD9lBJ;;KvDgmBI,MuDhmBJ;KvDimBI,MuDjmBJ;;KvDkmBI,MuDlmBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAiB;EAAjB;;;;;;;;;;;KvD4kBI,MuD5kBJ;;KvD6kBI,MuD7kBJ;KvD8kBI,MuD9kBJ;;;KvDglBI,MuDhlBJ;KvDilBI,MuDjlBJ;KvDklBI,MuDllBJ;;;KvDolBI,MuDplBJ;KvDqlBI,MuDrlBJ;KvDslBI,MuDtlBJ;;KvDwlBI,MuDxlBJ;;KvDylBI,MuDzlBJ;KvD0lBI,MuD1lBJ;;KvD4lBI,MuD5lBJ;KvD6lBI,MuD7lBJ;;KvD8lBI,MuD9lBJ;;KvDgmBI,MuDhmBJ;KvDimBI,MuDjmBJ;;KvDkmBI,MuDlmBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAqB;EAArB;;;;;;;;;;;KvD4kBI,MuD5kBJ;;KvD6kBI,MuD7kBJ;KvD8kBI,MuD9kBJ;;;KvDglBI,MuDhlBJ;KvDilBI,MuDjlBJ;KvDklBI,MuDllBJ;;;KvDolBI,MuDplBJ;KvDqlBI,MuDrlBJ;KvDslBI,MuDtlBJ;;KvDwlBI,MuDxlBJ;;KvDylBI,MuDzlBJ;KvD0lBI,MuD1lBJ;;KvD4lBI,MuD5lBJ;KvD6lBI,MuD7lBJ;;KvD8lBI,MuD9lBJ;;KvDgmBI,MuDhmBJ;KvDimBI,MuDjmBJ;;KvDkmBI,MuDlmBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvD4kBI,MuD5kBJ;;IvD6kBI,MuD7kBJ;IvD8kBI,MuD9kBJ;;;IvDglBI,MuDhlBJ;IvDilBI,MuDjlBJ;IvDklBI,MuDllBJ;;;IvDolBI,MuDplBJ;IvDqlBI,MuDrlBJ;IvDslBI,MuDtlBJ;;IvDwlBI,MuDxlBJ;;IvDylBI,MuDzlBJ;IvD0lBI,MuD1lBJ;;IvD4lBI,MuD5lBJ;IvD6lBI,MuD7lBJ;;IvD8lBI,MuD9lBJ;;IvDgmBI,MuDhmBJ;IvDimBI,MuDjmBJ;;IvDkmBI,MuDlmBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,OAAO;;WAKJ,WAEH;AAAA,SAAO;;aAKJ,WAAkC;AAAA,EAErC,SAAiB,SAAI;EAArB,SAAyB,SAAI;EAA7B;WAAS,SAAI;EAAb;;;;;;;;;;;KvD4jBI,KuD5jBJ;;KvD6jBI,MuD7jBJ;KvD8jBI,MuD9jBJ;;;KvDgkBI,KuDhkBJ;KvDikBI,MuDjkBJ;KvDkkBI,MuDlkBJ;;;KvDokBI,KuDpkBJ;KvDqkBI,MuDrkBJ;KvDskBI,MuDtkBJ;;KvDwkBI,KuDxkBJ;;KvDykBI,MuDzkBJ;KvD0kBI,MuD1kBJ;;KvD4kBI,KuD5kBJ;KvD6kBI,MuD7kBJ;;KvD8kBI,MuD9kBJ;;KvDglBI,KuDhlBJ;KvDilBI,MuDjlBJ;;KvDklBI,MuDllBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD4jBI,MuD5jBJ;;KvD6jBI,MuD7jBJ;KvD8jBI,MuD9jBJ;;;KvDgkBI,MuDhkBJ;KvDikBI,MuDjkBJ;KvDkkBI,MuDlkBJ;;;KvDokBI,MuDpkBJ;KvDqkBI,MuDrkBJ;KvDskBI,MuDtkBJ;;KvDwkBI,MuDxkBJ;;KvDykBI,MuDzkBJ;KvD0kBI,MuD1kBJ;;KvD4kBI,MuD5kBJ;KvD6kBI,MuD7kBJ;;KvD8kBI,MuD9kBJ;;KvDglBI,MuDhlBJ;KvDilBI,MuDjlBJ;;KvDklBI,MuDllBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD4jBI,MuD5jBJ;;KvD6jBI,MuD7jBJ;KvD8jBI,MuD9jBJ;;;KvDgkBI,MuDhkBJ;KvDikBI,MuDjkBJ;KvDkkBI,MuDlkBJ;;;KvDokBI,MuDpkBJ;KvDqkBI,MuDrkBJ;KvDskBI,MuDtkBJ;;KvDwkBI,MuDxkBJ;;KvDykBI,MuDzkBJ;KvD0kBI,MuD1kBJ;;KvD4kBI,MuD5kBJ;KvD6kBI,MuD7kBJ;;KvD8kBI,MuD9kBJ;;KvDglBI,MuDhlBJ;KvDilBI,MuDjlBJ;;KvDklBI,MuDllBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvD4jBI,MuD5jBJ;;IvD6jBI,MuD7jBJ;IvD8jBI,MuD9jBJ;;;IvDgkBI,MuDhkBJ;IvDikBI,MuDjkBJ;IvDkkBI,MuDlkBJ;;;IvDokBI,MuDpkBJ;IvDqkBI,MuDrkBJ;IvDskBI,MuDtkBJ;;IvDwkBI,MuDxkBJ;;IvDykBI,MuDzkBJ;IvD0kBI,MuD1kBJ;;IvD4kBI,MuD5kBJ;IvD6kBI,MuD7kBJ;;IvD8kBI,MuD9kBJ;;IvDglBI,MuDhlBJ;IvDilBI,MuDjlBJ;;IvDklBI,MuDllBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,OAAO;;YAKJ,WAEH;AAAA,SAAO,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI;;UAKhC,WAEH;AAAA,SAAO,UAAU,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI,SAAI;;aAK1C,WAAkC;AAAA,EAErC,QAAQ;EAEJ,EAAI,MAAK,GAEL;AAAA;YAAS;GAAT;;;;;;;;;;;MvDiiBJ,KuDjiBI;;MvDkiBJ,KuDliBI;MvDmiBJ,KuDniBI;;;MvDqiBJ,KuDriBI;MvDsiBJ,KuDtiBI;MvDuiBJ,KuDviBI;;;MvDyiBJ,KuDziBI;MvD0iBJ,KuD1iBI;MvD2iBJ,KuD3iBI;;MvD6iBJ,KuD7iBI;;MvD8iBJ,KuD9iBI;MvD+iBJ,KuD/iBI;;MvDijBJ,KuDjjBI;MvDkjBJ,KuDljBI;;MvDmjBJ,KuDnjBI;;MvDqjBJ,KuDrjBI;MvDsjBJ,KuDtjBI;;MvDujBJ,KuDvjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAW;GAAX;;;;;;;;;;;MvDiiBJ,MuDjiBI;;MvDkiBJ,MuDliBI;MvDmiBJ,MuDniBI;;;MvDqiBJ,MuDriBI;MvDsiBJ,MuDtiBI;MvDuiBJ,MuDviBI;;;MvDyiBJ,MuDziBI;MvD0iBJ,MuD1iBI;MvD2iBJ,MuD3iBI;;MvD6iBJ,MuD7iBI;;MvD8iBJ,MuD9iBI;MvD+iBJ,MuD/iBI;;MvDijBJ,MuDjjBI;MvDkjBJ,MuDljBI;;MvDmjBJ,MuDnjBI;;MvDqjBJ,MuDrjBI;MvDsjBJ,MuDtjBI;;MvDujBJ,MuDvjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAa;GAAb;;;;;;;;;;;MvDiiBJ,MuDjiBI;;MvDkiBJ,MuDliBI;MvDmiBJ,MuDniBI;;;MvDqiBJ,MuDriBI;MvDsiBJ,MuDtiBI;MvDuiBJ,MuDviBI;;;MvDyiBJ,MuDziBI;MvD0iBJ,MuD1iBI;MvD2iBJ,MuD3iBI;;MvD6iBJ,MuD7iBI;;MvD8iBJ,MuD9iBI;MvD+iBJ,MuD/iBI;;MvDijBJ,MuDjjBI;MvDkjBJ,MuDljBI;;MvDmjBJ,MuDnjBI;;MvDqjBJ,MuDrjBI;MvDsjBJ,MuDtjBI;;MvDujBJ,MuDvjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAe;GAAf;;;;;;;;;;;MvDiiBJ,MuDjiBI;;MvDkiBJ,MuDliBI;MvDmiBJ,MuDniBI;;;MvDqiBJ,MuDriBI;MvDsiBJ,MuDtiBI;MvDuiBJ,MuDviBI;;;MvDyiBJ,MuDziBI;MvD0iBJ,MuD1iBI;MvD2iBJ,MuD3iBI;;MvD6iBJ,MuD7iBI;;MvD8iBJ,MuD9iBI;MvD+iBJ,MuD/iBI;;MvDijBJ,MuDjjBI;MvDkjBJ,MuDljBI;;MvDmjBJ,MuDnjBI;;MvDqjBJ,MuDrjBI;MvDsjBJ,MuDtjBI;;MvDujBJ,MuDvjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDiiBJ,MuDjiBI;;KvDkiBJ,MuDliBI;KvDmiBJ,MuDniBI;;;KvDqiBJ,MuDriBI;KvDsiBJ,MuDtiBI;KvDuiBJ,MuDviBI;;;KvDyiBJ,MuDziBI;KvD0iBJ,MuD1iBI;KvD2iBJ,MuD3iBI;;KvD6iBJ,MuD7iBI;;KvD8iBJ,MuD9iBI;KvD+iBJ,MuD/iBI;;KvDijBJ,MuDjjBI;KvDkjBJ,MuDljBI;;KvDmjBJ,MuDnjBI;;KvDqjBJ,MuDrjBI;KvDsjBJ,MuDtjBI;;KvDujBJ,MuDvjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAEG;AAAA,GAEH,IAAI,IAAI;GAER,UAAe,SAAE;GAAjB,UAAoB,SAAE;GAAtB,SAAyB,SAAE;GAA3B;YAAU,SAAE;GAAZ;;;;;;;;;;;MvD2hBJ,MuD3hBI;;MvD4hBJ,MuD5hBI;MvD6hBJ,MuD7hBI;;;MvD+hBJ,MuD/hBI;MvDgiBJ,MuDhiBI;MvDiiBJ,MuDjiBI;;;MvDmiBJ,MuDniBI;MvDoiBJ,MuDpiBI;MvDqiBJ,MuDriBI;;MvDuiBJ,MuDviBI;;MvDwiBJ,MuDxiBI;MvDyiBJ,MuDziBI;;MvD2iBJ,MuD3iBI;MvD4iBJ,MuD5iBI;;MvD6iBJ,MuD7iBI;;MvD+iBJ,MuD/iBI;MvDgjBJ,MuDhjBI;;MvDijBJ,MuDjjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MvD2hBJ,MuD3hBI;;MvD4hBJ,MuD5hBI;MvD6hBJ,MuD7hBI;;;MvD+hBJ,MuD/hBI;MvDgiBJ,MuDhiBI;MvDiiBJ,MuDjiBI;;;MvDmiBJ,MuDniBI;MvDoiBJ,MuDpiBI;MvDqiBJ,MuDriBI;;MvDuiBJ,MuDviBI;;MvDwiBJ,MuDxiBI;MvDyiBJ,MuDziBI;;MvD2iBJ,MuD3iBI;MvD4iBJ,MuD5iBI;;MvD6iBJ,MuD7iBI;;MvD+iBJ,MuD/iBI;MvDgjBJ,MuDhjBI;;MvDijBJ,MuDjjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MvD2hBJ,MuD3hBI;;MvD4hBJ,MuD5hBI;MvD6hBJ,MuD7hBI;;;MvD+hBJ,MuD/hBI;MvDgiBJ,MuDhiBI;MvDiiBJ,MuDjiBI;;;MvDmiBJ,MuDniBI;MvDoiBJ,MuDpiBI;MvDqiBJ,MuDriBI;;MvDuiBJ,MuDviBI;;MvDwiBJ,MuDxiBI;MvDyiBJ,MuDziBI;;MvD2iBJ,MuD3iBI;MvD4iBJ,MuD5iBI;;MvD6iBJ,MuD7iBI;;MvD+iBJ,MuD/iBI;MvDgjBJ,MuDhjBI;;MvDijBJ,MuDjjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MvD2hBJ,MuD3hBI;;MvD4hBJ,MuD5hBI;MvD6hBJ,MuD7hBI;;;MvD+hBJ,MuD/hBI;MvDgiBJ,MuDhiBI;MvDiiBJ,MuDjiBI;;;MvDmiBJ,MuDniBI;MvDoiBJ,MuDpiBI;MvDqiBJ,MuDriBI;;MvDuiBJ,MuDviBI;;MvDwiBJ,MuDxiBI;MvDyiBJ,MuDziBI;;MvD2iBJ,MuD3iBI;MvD4iBJ,MuD5iBI;;MvD6iBJ,MuD7iBI;;MvD+iBJ,MuD/iBI;MvDgjBJ,MuDhjBI;;MvDijBJ,MuDjjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD2hBJ,MuD3hBI;;KvD4hBJ,OuD5hBI;KvD6hBJ,OuD7hBI;;;KvD+hBJ,MuD/hBI;KvDgiBJ,OuDhiBI;KvDiiBJ,OuDjiBI;;;KvDmiBJ,MuDniBI;KvDoiBJ,OuDpiBI;KvDqiBJ,OuDriBI;;KvDuiBJ,MuDviBI;;KvDwiBJ,OuDxiBI;KvDyiBJ,OuDziBI;;KvD2iBJ,MuD3iBI;KvD4iBJ,OuD5iBI;;KvD6iBJ,OuD7iBI;;KvD+iBJ,MuD/iBI;KvDgjBJ,OuDhjBI;;KvDijBJ,OuDjjBI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAIR,OAAO;;YAgBJ,sBAEH;AAAA,SAAO,yBAAqB,KAAM;;OAI/B,sBAEH;AAAA,SAAO,oBAAgB,KAAM;;kBAI1B,gBAAwD;AAAA,EAEvD,SAAI,OAAO;EAAX;;;;;;;;;;;KvDyfA,KuDzfA;;KvD0fA,KuD1fA;KvD2fA,KuD3fA;;;KvD6fA,KuD7fA;KvD8fA,KuD9fA;KvD+fA,KuD/fA;;;KvDigBA,KuDjgBA;KvDkgBA,KuDlgBA;KvDmgBA,KuDngBA;;KvDqgBA,KuDrgBA;;KvDsgBA,KuDtgBA;KvDugBA,KuDvgBA;;KvDygBA,KuDzgBA;KvD0gBA,KuD1gBA;;KvD2gBA,KuD3gBA;;KvD6gBA,KuD7gBA;KvD8gBA,KuD9gBA;;KvD+gBA,KuD/gBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI,OAAO;EAAX;;;;;;;;;;;KvDwfA,MuDxfA;;KvDyfA,MuDzfA;KvD0fA,MuD1fA;;;KvD4fA,MuD5fA;KvD6fA,MuD7fA;KvD8fA,MuD9fA;;;KvDggBA,MuDhgBA;KvDigBA,MuDjgBA;KvDkgBA,MuDlgBA;;KvDogBA,MuDpgBA;;KvDqgBA,MuDrgBA;KvDsgBA,MuDtgBA;;KvDwgBA,MuDxgBA;KvDygBA,MuDzgBA;;KvD0gBA,MuD1gBA;;KvD4gBA,MuD5gBA;KvD6gBA,MuD7gBA;;KvD8gBA,MuD9gBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI,OAAO;EAAX;;;;;;;;;;;KvDufA,MuDvfA;;KvDwfA,MuDxfA;KvDyfA,MuDzfA;;;KvD2fA,MuD3fA;KvD4fA,MuD5fA;KvD6fA,MuD7fA;;;KvD+fA,MuD/fA;KvDggBA,MuDhgBA;KvDigBA,MuDjgBA;;KvDmgBA,MuDngBA;;KvDogBA,MuDpgBA;KvDqgBA,MuDrgBA;;KvDugBA,MuDvgBA;KvDwgBA,MuDxgBA;;KvDygBA,MuDzgBA;;KvD2gBA,MuD3gBA;KvD4gBA,MuD5gBA;;KvD6gBA,MuD7gBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI,OAAO;EAAX;;;;;;;;;;;KvDsfA,MuDtfA;;KvDufA,MuDvfA;KvDwfA,MuDxfA;;;KvD0fA,MuD1fA;KvD2fA,MuD3fA;KvD4fA,MuD5fA;;;KvD8fA,MuD9fA;KvD+fA,MuD/fA;KvDggBA,MuDhgBA;;KvDkgBA,MuDlgBA;;KvDmgBA,MuDngBA;KvDogBA,MuDpgBA;;KvDsgBA,MuDtgBA;KvDugBA,MuDvgBA;;KvDwgBA,MuDxgBA;;KvD0gBA,MuD1gBA;KvD2gBA,MuD3gBA;;KvD4gBA,MuD5gBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEJ,OAAO;;kBAIJ,kBAAsD;AAAA,EAErD;UAAK;EAAL;;;;;;;;;;;KvD8eA,KuD9eA;;KvD+eA,KuD/eA;KvDgfA,KuDhfA;;;KvDkfA,KuDlfA;KvDmfA,KuDnfA;KvDofA,KuDpfA;;;KvDsfA,KuDtfA;KvDufA,KuDvfA;KvDwfA,KuDxfA;;KvD0fA,KuD1fA;;KvD2fA,KuD3fA;KvD4fA,KuD5fA;;KvD8fA,KuD9fA;KvD+fA,KuD/fA;;KvDggBA,KuDhgBA;;KvDkgBA,KuDlgBA;KvDmgBA,KuDngBA;;KvDogBA,KuDpgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA;WAAK;EAAL;;;;;;;;;;;KvD6eA,MuD7eA;;KvD8eA,MuD9eA;KvD+eA,MuD/eA;;;KvDifA,MuDjfA;KvDkfA,MuDlfA;KvDmfA,MuDnfA;;;KvDqfA,MuDrfA;KvDsfA,MuDtfA;KvDufA,MuDvfA;;KvDyfA,MuDzfA;;KvD0fA,MuD1fA;KvD2fA,MuD3fA;;KvD6fA,MuD7fA;KvD8fA,MuD9fA;;KvD+fA,MuD/fA;;KvDigBA,MuDjgBA;KvDkgBA,MuDlgBA;;KvDmgBA,MuDngBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA;WAAK;EAAL;;;;;;;;;;;KvD4eA,MuD5eA;;KvD6eA,MuD7eA;KvD8eA,MuD9eA;;;KvDgfA,MuDhfA;KvDifA,MuDjfA;KvDkfA,MuDlfA;;;KvDofA,MuDpfA;KvDqfA,MuDrfA;KvDsfA,MuDtfA;;KvDwfA,MuDxfA;;KvDyfA,MuDzfA;KvD0fA,MuD1fA;;KvD4fA,MuD5fA;KvD6fA,MuD7fA;;KvD8fA,MuD9fA;;KvDggBA,MuDhgBA;KvDigBA,MuDjgBA;;KvDkgBA,MuDlgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA;WAAK;EAAL;;;;;;;;;;;KvD2eA,MuD3eA;;KvD4eA,MuD5eA;KvD6eA,MuD7eA;;;KvD+eA,MuD/eA;KvDgfA,MuDhfA;KvDifA,MuDjfA;;;KvDmfA,MuDnfA;KvDofA,MuDpfA;KvDqfA,MuDrfA;;KvDufA,MuDvfA;;KvDwfA,MuDxfA;KvDyfA,MuDzfA;;KvD2fA,MuD3fA;KvD4fA,MuD5fA;;KvD6fA,MuD7fA;;KvD+fA,MuD/fA;KvDggBA,MuDhgBA;;KvDigBA,MuDjgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEJ,OAAO;;uBAIJ,gBAA0E;AAAA,EAE7E,UAAU;EAAV,UAAsB;EAAtB,UAAkC;EAAlC,UAA8C;EAC9C,UAAU;EAAV,UAAsB;EAAtB,UAAkC;EAAlC,UAA8C;EAE1C;WAAU,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAApD;;;;;;;;;;;KvDgeA,KuDheA;;KvDieA,KuDjeA;KvDkeA,KuDleA;;;KvDoeA,KuDpeA;KvDqeA,KuDreA;KvDseA,KuDteA;;;KvDweA,KuDxeA;KvDyeA,KuDzeA;KvD0eA,KuD1eA;;KvD4eA,KuD5eA;;KvD6eA,KuD7eA;KvD8eA,KuD9eA;;KvDgfA,KuDhfA;KvDifA,KuDjfA;;KvDkfA,KuDlfA;;KvDofA,KuDpfA;KvDqfA,KuDrfA;;KvDsfA,KuDtfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WACU,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EADpD;;;;;;;;;;;KvDgeA,MuDheA;;KvDieA,MuDjeA;KvDkeA,MuDleA;;;KvDoeA,MuDpeA;KvDqeA,MuDreA;KvDseA,MuDteA;;;KvDweA,MuDxeA;KvDyeA,MuDzeA;KvD0eA,MuD1eA;;KvD4eA,MuD5eA;;KvD6eA,MuD7eA;KvD8eA,MuD9eA;;KvDgfA,MuDhfA;KvDifA,MuDjfA;;KvDkfA,MuDlfA;;KvDofA,MuDpfA;KvDqfA,MuDrfA;;KvDsfA,MuDtfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAEU,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAFpD;;;;;;;;;;;KvDgeA,MuDheA;;KvDieA,MuDjeA;KvDkeA,MuDleA;;;KvDoeA,MuDpeA;KvDqeA,MuDreA;KvDseA,MuDteA;;;KvDweA,MuDxeA;KvDyeA,MuDzeA;KvD0eA,MuD1eA;;KvD4eA,MuD5eA;;KvD6eA,MuD7eA;KvD8eA,MuD9eA;;KvDgfA,MuDhfA;KvDifA,MuDjfA;;KvDkfA,MuDlfA;;KvDofA,MuDpfA;KvDqfA,MuDrfA;;KvDsfA,MuDtfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAGU,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;EAHpD;;;;;;;;;;;KvDgeA,MuDheA;;KvDieA,MuDjeA;KvDkeA,MuDleA;;;KvDoeA,MuDpeA;KvDqeA,MuDreA;KvDseA,MuDteA;;;KvDweA,MuDxeA;KvDyeA,MuDzeA;KvD0eA,MuD1eA;;KvD4eA,MuD5eA;;KvD6eA,MuD7eA;KvD8eA,MuD9eA;;KvDgfA,MuDhfA;KvDifA,MuDjfA;;KvDkfA,MuDlfA;;KvDofA,MuDpfA;KvDqfA,MuDrfA;;KvDsfA,MuDtfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvDgeA,MuDheA;;IvDieA,MuDjeA;IvDkeA,MuDleA;;;IvDoeA,MuDpeA;IvDqeA,MuDreA;IvDseA,MuDteA;;;IvDweA,MuDxeA;IvDyeA,MuDzeA;IvD0eA,MuD1eA;;IvD4eA,MuD5eA;;IvD6eA,MuD7eA;IvD8eA,MuD9eA;;IvDgfA,MuDhfA;IvDifA,MuDjfA;;IvDkfA,MuDlfA;;IvDofA,MuDpfA;IvDqfA,MuDrfA;;IvDsfA,MuDtfA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAKJ,OAAO;;SAKJ,iBAAwD;AAAA,EAE3D,SAAS;EACT,SAAS;EACT,SAAS;EACT,SAAS;EAIT,mBAAmB,KAAK,QAAQ,KAAK,QAAQ,KAAK,QAAQ,KAAK;EAE/D,EAAK,gBAAe,GAAI;AAAA,GAEhB,SAAI,CAAC;GAAL;;;;;;;;;;;MvDycJ,MuDzcI;;MvD0cJ,MuD1cI;MvD2cJ,MuD3cI;;;MvD6cJ,MuD7cI;MvD8cJ,MuD9cI;MvD+cJ,MuD/cI;;;MvDidJ,MuDjdI;MvDkdJ,MuDldI;MvDmdJ,MuDndI;;MvDqdJ,MuDrdI;;MvDsdJ,MuDtdI;MvDudJ,MuDvdI;;MvDydJ,MuDzdI;MvD0dJ,MuD1dI;;MvD2dJ,MuD3dI;;MvD6dJ,MuD7dI;MvD8dJ,MuD9dI;;MvD+dJ,MuD/dI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,SAAI,CAAC;GAAL;;;;;;;;;;;MvDwcJ,MuDxcI;;MvDycJ,MuDzcI;MvD0cJ,MuD1cI;;;MvD4cJ,MuD5cI;MvD6cJ,MuD7cI;MvD8cJ,MuD9cI;;;MvDgdJ,MuDhdI;MvDidJ,MuDjdI;MvDkdJ,MuDldI;;MvDodJ,MuDpdI;;MvDqdJ,MuDrdI;MvDsdJ,MuDtdI;;MvDwdJ,MuDxdI;MvDydJ,MuDzdI;;MvD0dJ,MuD1dI;;MvD4dJ,MuD5dI;MvD6dJ,MuD7dI;;MvD8dJ,MuD9dI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,SAAI,CAAC;GAAL;;;;;;;;;;;MvDucJ,MuDvcI;;MvDwcJ,MuDxcI;MvDycJ,MuDzcI;;;MvD2cJ,MuD3cI;MvD4cJ,MuD5cI;MvD6cJ,MuD7cI;;;MvD+cJ,MuD/cI;MvDgdJ,MuDhdI;MvDidJ,MuDjdI;;MvDmdJ,MuDndI;;MvDodJ,MuDpdI;MvDqdJ,MuDrdI;;MvDudJ,MuDvdI;MvDwdJ,MuDxdI;;MvDydJ,MuDzdI;;MvD2dJ,MuD3dI;MvD4dJ,MuD5dI;;MvD6dJ,MuD7dI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACA,SAAI,CAAC;GAAL;;;;;;;;;;;MvDscJ,MuDtcI;;MvDucJ,MuDvcI;MvDwcJ,MuDxcI;;;MvD0cJ,MuD1cI;MvD2cJ,MuD3cI;MvD4cJ,MuD5cI;;;MvD8cJ,MuD9cI;MvD+cJ,MuD/cI;MvDgdJ,MuDhdI;;MvDkdJ,MuDldI;;MvDmdJ,MuDndI;MvDodJ,MuDpdI;;MvDsdJ,MuDtdI;MvDudJ,MuDvdI;;MvDwdJ,MuDxdI;;MvD0dJ,MuD1dI;MvD2dJ,MuD3dI;;MvD4dJ,MuD5dI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,eAAe,CAAC;SAIpB;AAAA,aAAW;;EAIf,EAAK,iBAAgB,KAAM;AAAA,GAEvB;YAAS;GAAT;;;;;;;;;;;MvD0bA,MuD1bA;;MvD2bA,MuD3bA;MvD4bA,MuD5bA;;;MvD8bA,MuD9bA;MvD+bA,MuD/bA;MvDgcA,MuDhcA;;;MvDkcA,MuDlcA;MvDmcA,MuDncA;MvDocA,MuDpcA;;MvDscA,MuDtcA;;MvDucA,MuDvcA;MvDwcA,MuDxcA;;MvD0cA,MuD1cA;MvD2cA,MuD3cA;;MvD4cA,MuD5cA;;MvD8cA,MuD9cA;MvD+cA,MuD/cA;;MvDgdA,MuDhdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAa;GAAb;;;;;;;;;;;MvD0bA,MuD1bA;;MvD2bA,MuD3bA;MvD4bA,MuD5bA;;;MvD8bA,MuD9bA;MvD+bA,MuD/bA;MvDgcA,MuDhcA;;;MvDkcA,MuDlcA;MvDmcA,MuDncA;MvDocA,MuDpcA;;MvDscA,MuDtcA;;MvDucA,MuDvcA;MvDwcA,MuDxcA;;MvD0cA,MuD1cA;MvD2cA,MuD3cA;;MvD4cA,MuD5cA;;MvD8cA,MuD9cA;MvD+cA,MuD/cA;;MvDgdA,MuDhdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAiB;GAAjB;;;;;;;;;;;MvD0bA,MuD1bA;;MvD2bA,MuD3bA;MvD4bA,MuD5bA;;;MvD8bA,MuD9bA;MvD+bA,MuD/bA;MvDgcA,MuDhcA;;;MvDkcA,MuDlcA;MvDmcA,MuDncA;MvDocA,MuDpcA;;MvDscA,MuDtcA;;MvDucA,MuDvcA;MvDwcA,MuDxcA;;MvD0cA,MuD1cA;MvD2cA,MuD3cA;;MvD4cA,MuD5cA;;MvD8cA,MuD9cA;MvD+cA,MuD/cA;;MvDgdA,MuDhdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAAqB;GAArB;;;;;;;;;;;MvD0bA,MuD1bA;;MvD2bA,MuD3bA;MvD4bA,MuD5bA;;;MvD8bA,MuD9bA;MvD+bA,MuD/bA;MvDgcA,MuDhcA;;;MvDkcA,MuDlcA;MvDmcA,MuDncA;MvDocA,MuDpcA;;MvDscA,MuDtcA;;MvDucA,MuDvcA;MvDwcA,MuDxcA;;MvD0cA,MuD1cA;MvD2cA,MuD3cA;;MvD4cA,MuD5cA;;MvD8cA,MuD9cA;MvD+cA,MuD/cA;;MvDgdA,MuDhdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD0bA,MuD1bA;;KvD2bA,MuD3bA;KvD4bA,MuD5bA;;;KvD8bA,MuD9bA;KvD+bA,MuD/bA;KvDgcA,MuDhcA;;;KvDkcA,MuDlcA;KvDmcA,MuDncA;KvDocA,MuDpcA;;KvDscA,MuDtcA;;KvDucA,MuDvcA;KvDwcA,MuDxcA;;KvD0cA,MuD1cA;KvD2cA,MuD3cA;;KvD4cA,MuD5cA;;KvD8cA,MuD9cA;KvD+cA,MuD/cA;;KvDgdA,MuDhdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAEA,OAAO;;EAIX,gBAAgB,UAAW;EAC3B,mBAAmB,UAAW,MAAM,eAAe;EAEnD,EAAK,UAAU,gBAAiB,OAAQ;AAAA,GAEpC,WACU,MAAM,CAAE,KAAK;GADvB,WAEU,MAAM,CAAE,KAAK;GAFvB,UAGU,MAAM,CAAE,KAAK;GAHvB;YAAU,MAAM,CAAE,KAAK;GAAvB;;;;;;;;;;;MvD+aA,OuD/aA;;MvDgbA,OuDhbA;MvDibA,OuDjbA;;;MvDmbA,OuDnbA;MvDobA,OuDpbA;MvDqbA,OuDrbA;;;MvDubA,OuDvbA;MvDwbA,OuDxbA;MvDybA,OuDzbA;;MvD2bA,OuD3bA;;MvD4bA,OuD5bA;MvD6bA,OuD7bA;;MvD+bA,OuD/bA;MvDgcA,OuDhcA;;MvDicA,OuDjcA;;MvDmcA,OuDncA;MvDocA,OuDpcA;;MvDqcA,OuDrcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MvD+aA,OuD/aA;;MvDgbA,OuDhbA;MvDibA,OuDjbA;;;MvDmbA,OuDnbA;MvDobA,OuDpbA;MvDqbA,OuDrbA;;;MvDubA,OuDvbA;MvDwbA,OuDxbA;MvDybA,OuDzbA;;MvD2bA,OuD3bA;;MvD4bA,OuD5bA;MvD6bA,OuD7bA;;MvD+bA,OuD/bA;MvDgcA,OuDhcA;;MvDicA,OuDjcA;;MvDmcA,OuDncA;MvDocA,OuDpcA;;MvDqcA,OuDrcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MvD+aA,OuD/aA;;MvDgbA,OuDhbA;MvDibA,OuDjbA;;;MvDmbA,OuDnbA;MvDobA,OuDpbA;MvDqbA,OuDrbA;;;MvDubA,OuDvbA;MvDwbA,OuDxbA;MvDybA,OuDzbA;;MvD2bA,OuD3bA;;MvD4bA,OuD5bA;MvD6bA,OuD7bA;;MvD+bA,OuD/bA;MvDgcA,OuDhcA;;MvDicA,OuDjcA;;MvDmcA,OuDncA;MvDocA,OuDpcA;;MvDqcA,OuDrcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MvD+aA,OuD/aA;;MvDgbA,OuDhbA;MvDibA,OuDjbA;;;MvDmbA,OuDnbA;MvDobA,OuDpbA;MvDqbA,OuDrbA;;;MvDubA,OuDvbA;MvDwbA,OuDxbA;MvDybA,OuDzbA;;MvD2bA,OuD3bA;;MvD4bA,OuD5bA;MvD6bA,OuD7bA;;MvD+bA,OuD/bA;MvDgcA,OuDhcA;;MvDicA,OuDjcA;;MvDmcA,OuDncA;MvDocA,OuDpcA;;MvDqcA,OuDrcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvD+aA,OuD/aA;;KvDgbA,OuDhbA;KvDibA,OuDjbA;;;KvDmbA,OuDnbA;KvDobA,OuDpbA;KvDqbA,OuDrbA;;;KvDubA,OuDvbA;KvDwbA,OuDxbA;KvDybA,OuDzbA;;KvD2bA,OuD3bA;;KvD4bA,OuD5bA;KvD6bA,OuD7bA;;KvD+bA,OuD/bA;KvDgcA,OuDhcA;;KvDicA,OuDjcA;;KvDmcA,OuDncA;KvDocA,OuDpcA;;KvDqcA,OuDrcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAKA,OAAO;;EAIX,aAAa,SAAU,CAAE,IAAI,MAAO,aAAc;EAAlD,aACS,SAAU,KAAK,aAAc;EAElC,WACU,KAAK,SAAS,SAAI;EAD5B,WAEU,KAAK,SAAS,SAAI;EAF5B,UAGU,KAAK,SAAS,SAAI;EAH5B;WAAU,KAAK,SAAS,SAAI;EAA5B;;;;;;;;;;;KvDmaA,OuDnaA;;KvDoaA,OuDpaA;KvDqaA,OuDraA;;;KvDuaA,OuDvaA;KvDwaA,OuDxaA;KvDyaA,OuDzaA;;;KvD2aA,OuD3aA;KvD4aA,OuD5aA;KvD6aA,OuD7aA;;KvD+aA,OuD/aA;;KvDgbA,OuDhbA;KvDibA,OuDjbA;;KvDmbA,OuDnbA;KvDobA,OuDpbA;;KvDqbA,OuDrbA;;KvDubA,OuDvbA;KvDwbA,OuDxbA;;KvDybA,OuDzbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDmaA,OuDnaA;;KvDoaA,OuDpaA;KvDqaA,OuDraA;;;KvDuaA,OuDvaA;KvDwaA,OuDxaA;KvDyaA,OuDzaA;;;KvD2aA,OuD3aA;KvD4aA,OuD5aA;KvD6aA,OuD7aA;;KvD+aA,OuD/aA;;KvDgbA,OuDhbA;KvDibA,OuDjbA;;KvDmbA,OuDnbA;KvDobA,OuDpbA;;KvDqbA,OuDrbA;;KvDubA,OuDvbA;KvDwbA,OuDxbA;;KvDybA,OuDzbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDmaA,OuDnaA;;KvDoaA,OuDpaA;KvDqaA,OuDraA;;;KvDuaA,OuDvaA;KvDwaA,OuDxaA;KvDyaA,OuDzaA;;;KvD2aA,OuD3aA;KvD4aA,OuD5aA;KvD6aA,OuD7aA;;KvD+aA,OuD/aA;;KvDgbA,OuDhbA;KvDibA,OuDjbA;;KvDmbA,OuDnbA;KvDobA,OuDpbA;;KvDqbA,OuDrbA;;KvDubA,OuDvbA;KvDwbA,OuDxbA;;KvDybA,OuDzbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KvDmaA,OuDnaA;;KvDoaA,OuDpaA;KvDqaA,OuDraA;;;KvDuaA,OuDvaA;KvDwaA,OuDxaA;KvDyaA,OuDzaA;;;KvD2aA,OuD3aA;KvD4aA,OuD5aA;KvD6aA,OuD7aA;;KvD+aA,OuD/aA;;KvDgbA,OuDhbA;KvDibA,OuDjbA;;KvDmbA,OuDnbA;KvDobA,OuDpbA;;KvDqbA,OuDrbA;;KvDubA,OuDvbA;KvDwbA,OuDxbA;;KvDybA,OuDzbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IvDmaA,OuDnaA;;IvDoaA,OuDpaA;IvDqaA,OuDraA;;;IvDuaA,OuDvaA;IvDwaA,OuDxaA;IvDyaA,OuDzaA;;;IvD2aA,OuD3aA;IvD4aA,OuD5aA;IvD6aA,OuD7aA;;IvD+aA,OuD/aA;;IvDgbA,OuDhbA;IvDibA,OuDjbA;;IvDmbA,OuDnbA;IvDobA,OuDpbA;;IvDqbA,OuDrbA;;IvDubA,OuDvbA;IvDwbA,OuDxbA;;IvDybA,OuDzbA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAKJ,OAAO;;UAKJ,aAEI;AAAA,IAAE,CAAC,QAAQ,UAAM,AAAC,QAAQ,UAAM,AAAC,QAAQ,QAAM;AAAA,UAAC,QAAQ;SAAxD;AAAA;;;aAKJ,aAAmD;AAAA,EAEtD;WAAS,GAAG;EAAZ;;;;;;;;;;;KvDgZI,KuDhZJ;;KvDiZI,KuDjZJ;KvDkZI,KuDlZJ;;;KvDoZI,KuDpZJ;KvDqZI,KuDrZJ;KvDsZI,KuDtZJ;;;KvDwZI,KuDxZJ;KvDyZI,KuDzZJ;KvD0ZI,KuD1ZJ;;KvD4ZI,KuD5ZJ;;KvD6ZI,KuD7ZJ;KvD8ZI,KuD9ZJ;;KvDgaI,KuDhaJ;KvDiaI,KuDjaJ;;KvDkaI,KuDlaJ;;KvDoaI,KuDpaJ;KvDqaI,KuDraJ;;KvDsaI,KuDtaJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAgB,GAAG;EAAnB;;;;;;;;;;;KvDgZI,MuDhZJ;;KvDiZI,MuDjZJ;KvDkZI,MuDlZJ;;;KvDoZI,MuDpZJ;KvDqZI,MuDrZJ;KvDsZI,MuDtZJ;;;KvDwZI,MuDxZJ;KvDyZI,MuDzZJ;KvD0ZI,MuD1ZJ;;KvD4ZI,MuD5ZJ;;KvD6ZI,MuD7ZJ;KvD8ZI,MuD9ZJ;;KvDgaI,MuDhaJ;KvDiaI,MuDjaJ;;KvDkaI,MuDlaJ;;KvDoaI,MuDpaJ;KvDqaI,MuDraJ;;KvDsaI,MuDtaJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAAuB,GAAG;EAA1B;;;;;;;;;;;KvDgZI,MuDhZJ;;KvDiZI,MuDjZJ;KvDkZI,MuDlZJ;;;KvDoZI,MuDpZJ;KvDqZI,MuDrZJ;KvDsZI,MuDtZJ;;;KvDwZI,MuDxZJ;KvDyZI,MuDzZJ;KvD0ZI,MuD1ZJ;;KvD4ZI,MuD5ZJ;;KvD6ZI,MuD7ZJ;KvD8ZI,MuD9ZJ;;KvDgaI,MuDhaJ;KvDiaI,MuDjaJ;;KvDkaI,MuDlaJ;;KvDoaI,MuDpaJ;KvDqaI,MuDraJ;;KvDsaI,MuDtaJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAA8B,GAAG;EAAjC;;;;;;;;;;;KvDgZI,MuDhZJ;;KvDiZI,MuDjZJ;KvDkZI,MuDlZJ;;;KvDoZI,MuDpZJ;KvDqZI,MuDrZJ;KvDsZI,MuDtZJ;;;KvDwZI,MuDxZJ;KvDyZI,MuDzZJ;KvD0ZI,MuD1ZJ;;KvD4ZI,MuD5ZJ;;KvD6ZI,MuD7ZJ;KvD8ZI,MuD9ZJ;;KvDgaI,MuDhaJ;KvDiaI,MuDjaJ;;KvDkaI,MuDlaJ;;Kv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KvDoWA,MuDpWA;;;KvDsWA,MuDtWA;KvDuWA,MuDvWA;KvDwWA,MuDxWA;;KvD0WA,MuD1WA;;KvD2WA,MuD3WA;KvD4WA,MuD5WA;;KvD8WA,MuD9WA;KvD+WA,MuD/WA;;KvDgXA,MuDhXA;;KvDkXA,MuDlXA;KvDmXA,MuDnXA;;KvDoXA,MuDpXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI;EAAJ;;;;;;;;;;;KvD6VA,MuD7VA;;KvD8VA,MuD9VA;KvD+VA,MuD/VA;;;KvDiWA,MuDjWA;KvDkWA,MuDlWA;KvDmWA,MuDnWA;;;KvDqWA,MuDrWA;KvDsWA,MuDtWA;KvDuWA,MuDvWA;;KvDyWA,MuDzWA;;KvD0WA,MuD1WA;KvD2WA,MuD3WA;;KvD6WA,MuD7WA;KvD8WA,MuD9WA;;KvD+WA,MuD/WA;;KvDiXA,MuDjXA;KvDkXA,MuDlXA;;KvDmXA,MuDnXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI;EAAJ;;;;;;;;;;;KvD4VA,MuD5VA;;KvD6VA,MuD7VA;KvD8VA,MuD9VA;;;KvDgWA,MuDhWA;KvDiWA,MuDjWA;KvDkWA,MuDlWA;;;KvDoWA,MuDpWA;KvDqWA,MuDrWA;KvDsWA,MuDtWA;;KvDwWA,MuDxWA;;KvDyWA,MuDzWA;KvD0WA,MuD1WA;;KvD4WA,MuD5WA;KvD6WA,MuD7WA;;KvD8WA,MuD9WA;;KvDgXA,MuDhXA;KvDiXA,MuDjXA;;KvDkXA,MuDlXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEJ,oBAAe;EAEf;;;;;;;;;;IvDwVI,MuDxVJ;;IvDyVI,MuDzVJ;IvD0VI,MuD1VJ;;;IvD4VI,MuD5VJ;IvD6VI,MuD7VJ;IvD8VI,MuD9VJ;;;IvDgWI,MuDhWJ;IvDiWI,MuDjWJ;IvDkWI,MuDlWJ;;IvDoWI,MuDpWJ;;IvDqWI,MuDrWJ;IvDsWI,MuDtWJ;;IvDwWI,MuDxWJ;IvDyWI,MuDzWJ;;IvD0WI,MuD1WJ;;IvD4WI,MuD5WJ;IvD6WI,MuD7WJ;;IvD8WI,MuD9WJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;EACnD,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;EACnD,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;EACnD,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;;WAIzC,mBAA+C;AAAA,EAEzD,oBAAe;EAEX,SAAI;EAAJ;;;;;;;;;;;KvD2UA,MuD3UA;;KvD4UA,MuD5UA;KvD6UA,MuD7UA;;;KvD+UA,MuD/UA;KvDgVA,MuDhVA;KvDiVA,MuDjVA;;;KvDmVA,MuDnVA;KvDoVA,MuDpVA;KvDqVA,MuDrVA;;KvDuVA,MuDvVA;;KvDwVA,MuDxVA;KvDyVA,MuDzVA;;KvD2VA,MuD3VA;KvD4VA,MuD5VA;;KvD6VA,MuD7VA;;KvD+VA,MuD/VA;KvDgWA,MuDhWA;;KvDiWA,MuDjWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI;EAAJ;;;;;;;;;;;KvD0UA,MuD1UA;;KvD2UA,MuD3UA;KvD4UA,MuD5UA;;;KvD8UA,MuD9UA;KvD+UA,MuD/UA;KvDgVA,MuDhVA;;;KvDkVA,MuDlVA;KvDmVA,MuDnVA;KvDoVA,MuDpVA;;KvDsVA,MuDtVA;;KvDuVA,MuDvVA;KvDwVA,MuDxVA;;KvD0VA,MuD1VA;KvD2VA,MuD3VA;;KvD4VA,MuD5VA;;KvD8VA,MuD9VA;KvD+VA,MuD/VA;;KvDgWA,MuDhWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,SAAI;EAAJ;;;;;;;;;;;KvDyUA,MuDzUA;;KvD0UA,MuD1UA;KvD2UA,MuD3UA;;;KvD6UA,MuD7UA;KvD8UA,MuD9UA;KvD+UA,MuD/UA;;;KvDiVA,MuDjVA;KvDkVA,MuDlVA;KvDmVA,MuDnVA;;KvDqVA,MuDrVA;;KvDsVA,MuDtVA;KvDuVA,MuDvVA;;KvDyVA,MuDzVA;KvD0VA,MuD1VA;;KvD2VA,MuD3VA;;KvD6VA,MuD7VA;KvD8VA,MuD9VA;;KvD+VA,MuD/VA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEJ,oBAAe;EAEf;;;;;;;;;;IvDqUI,MuDrUJ;;IvDsUI,MuDtUJ;IvDuUI,MuDvUJ;;;IvDyUI,MuDzUJ;IvD0UI,MuD1UJ;IvD2UI,MuD3UJ;;;IvD6UI,MuD7UJ;IvD8UI,MuD9UJ;IvD+UI,MuD/UJ;;IvDiVI,MuDjVJ;;IvDkVI,MuDlVJ;IvDmVI,MuDnVJ;;IvDqVI,MuDrVJ;IvDsVI,MuDtVJ;;IvDuVI,MuDvVJ;;IvDyVI,MuDzVJ;IvD0VI,MuD1VJ;;IvD2VI,MuD3VJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;EACnD,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;EACnD,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;;SAIhD,aAA2B;AAAA,EAE9B,SAAI;EAEJ,EAAG,kBAAY;AAAA,UAAO;;EAEtB;;;;;;;;;;IvDuTI,KuDvTJ;;IvDwTI,KuDxTJ;IvDyTI,KuDzTJ;;;IvD2TI,KuD3TJ;IvD4TI,KuD5TJ;IvD6TI,KuD7TJ;;;IvD+TI,KuD/TJ;IvDgUI,KuDhUJ;IvDiUI,KuDjUJ;;IvDmUI,KuDnUJ;;IvDoUI,KuDpUJ;IvDqUI,KuDrUJ;;IvDuUI,KuDvUJ;IvDwUI,KuDxUJ;;IvDyUI,KuDzUJ;;IvD2UI,KuD3UJ;IvD4UI,KuD5UJ;;IvD6UI,KuD7UJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA,EAAG,kBAAY,QAAQ,CAAC,uBAAkB;AAAA,iBAAS;;EAEnD,OAAO;;SAIJ,aAA2B;AAAA,EAE9B,SAAI;EAEJ,EAAG,kBAAY;AAAA,UAAO;;EAEtB;;;;;;;;;;IvDySI,KuDzSJ;;IvD0SI,KuD1SJ;IvD2SI,KuD3SJ;;;IvD6SI,KuD7SJ;IvD8SI,KuD9SJ;IvD+SI,KuD/SJ;;;IvDiTI,KuDjTJ;IvDkTI,KuDlTJ;IvDmTI,KuDnTJ;;IvDqTI,KuDrTJ;;IvDsTI,KuDtTJ;IvDuTI,KuDvTJ;;IvDyTI,KuDzTJ;IvD0TI,KuD1TJ;;IvD2TI,KuD3TJ;;IvD6TI,KuD7TJ;IvD8TI,KuD9TJ;;IvD+TI,KuD/TJ;;;;;;;;;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BACA;mBACA;kBACA;iBACA;iBACA;iBACA;iBACA;kBXxuBD;sBAGI;2BmB8DK;yCW9DG,wBAAgB;2CACd,wBAAgB;4CACf,wBAAgB;iCKFxB;8CEguBF;gDACE;gDG3tBa;sDACb;iDACJ;mDA2aK;mDACA;qCEpb0B;iCACpB;qCAC0B;kCWT/B;gCC+IW;gCAEA;0CQtJA;0CACA;8CACI;8CACA;6CACD;6CACA;gCI2ChB;sBASA;iCAqyBiB;mCACA;kCACA;mCACA;iCU70BH;gCACF;0CTyFZ;0CmBHC,SAAU,KAAK;uBIuYD;wBACC;wBC1evB;4BAGI;0BEmZK;2BACe;gCC5ZL;yECEU;qECDA;qECAA;sCEYrB;wCAqBG;0CAqeF,CAAC,EAAe;4CAskBZ;2CACA;0CACA;+CACA;6CAEA;+CACA;0CACA;2CACA;2CACA;yCACA;4CACA;2CACA;+CACA;6CACA;6CACA;4CAEA;4CACA;2CAEA;2CACA;2CACA;2CACA;2CACA;2CACA;2CACA;2CACA;2CACA;2CACA;kDACA;8CACA;+CACA;iDACA;gDACA;iDACA;yCAEA;yCACA;yCACA;yCACA;yCACA;yCACA;yCACA;yCACA;yCACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;0CACA;4CAEA;8CACA;+CACA;2CACA;6CACA;8CACA;gDACA;iDACA;gDACA;iDACA;+CACA;2CACA;2CACA;4CACA;gDACA;iDACA;4CACA;gDAEA;iDACA;+CACA;4CAEA;6CACA;4CACA;gDACA;kDACA;mDACA;gDACA;4CACA;2CACA;kCCv8BlB;8CEoOqC;gDACA;8CACA;oCAGA;mCACA;uCACA;wCACA;uCACA;4CACA;0CACA;kCAaA;iCACA;uCACA;iDACA;uCACA;iDACA;uCACA;iDACA;uCAKA;iDACA;gDACA;sCAOA;4CACA;gDACA;kDACA;2CAGA;mDACA;2CAGA;2CACA;6CACA;6CACA;4CACA;sDACA;4CACA;sDACA;yCACA;0CAGA;kDACA;kDACA;0DACA;yCAEA;yCACA;0CACA;yCAEA;0CACA;mDAEA;mCAGA;kCACA;4CACA;uCAcA;mCACA;oCACA;0CACA;wCACA;0CACA;iDACA;sDACA;6CACA;sCAGA;0CACA;2CACA;+CACA;2CACA;gCAGA;iCACA;wCAGA;sDACA;sDACA;4CACA;wCACA;yCACA;6CACA;+CACA;wCACA;iDACA;0CACA;0CACA;qDACA;qDACA;yCACA;gDACA;+CACA;+CACA;+CACA;0DACA;0DACA;8CACA;qDACA;oDACA;sCACA;yCACA;+CAEA;6CACA;8CACA;4CACA;8CACA;+CACA;2CACA;sCACA;wCACA;uCACA;wCACA;wCACA;0CACA;kDACA;mDAEA;gDACA;4CACA;qCACA;mDACA;oDACA;wDAQA;uCAGA;qCACA;oCACA;kDAGC;kCAGD;2CACA;mCACA;4CACA;iCACA;0CACA;mCACA;6CAGA;mCACA;iCACA;kCACA;uCACA;6CACA;oDAIA;oDACA;kDACA;6CAGE;2CACA;gDACA;wDACA;iDACA;8DACA;4DACA;qDACA;0DACA;yCACA;2CACA;yCACA;6CACA;8CACA;6CACA;+CACA;sDACA;6CACA;mCAGF;kCACA;mCACA;oCACA;qCACA;sCACA;oCACA;oCACA;kCAIA;qCACA;kCACA;kCACA;oCACA;uCACA;uCACA;oCAGA;sCACA;qCACA;qCAGA;oCACA;oDAKA;mDACA;mDACA;kDACA;gDAGA;gDACA;4CACA;4CACA;wCAGA;qCACA;8CAEA;sDACA;yDACA;yDACA;yDACA;yDACA;yDACA;yDACA;uDACA;sCAGA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;sCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;uCACA;4CACA;oCAGA;2CACA;6CACA;wCAGA;wCACA;wCACA;sCACA;sCACA;sCACA;kCACA;uCACA;uCACA;uCACA;wCACA;wCACA;wCACA;wCACA;0CACA;yDAGI;sDACA;wDACA;sDACA;4DACA;yDACA;gEACA;uDAGH;0CACA;4CAGD;uCAGA;0CACA;wCACA;qCACA;wCACA;sCACA;yCAGA;0CACA;mCAEA;qCACA;oCACA;+CACA;2CACA;4CACA;2CACA;gDAEA;iDACA;0DACA;mDACA;qDACA;oDACA;qDACA;qDACA;uDACA;gEAEc;gEACA;kEACA;0EACA;+CAEd;8CACA;gDACA;sDACA;kCAEA;kDAEW;+DACA;uEACA;+DACA;qDACA;iDAEX;kDACA;mDACA;2DAEA;iDAGA;4DACA;gDACA;gEACI;mDACJ;sCCp0BtB;sCQqGkB;oCAEA;qCACA;wCACA;kCACA;oCACA;sCACA;uCACA;mCACA;sCACA;qCACA;wCACA;oCACA;wCACA;yCACA;uCACA;mCACA;oCACA;oCACA;qCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;wCACA;mCACA;qCACA;sCACA;uCACA;iCACA;0CAIA;wCACA;2CACA;oCACA;yCACA;wCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;uCAEA;iCAEA;iCACA;iCACA;iCACA;iCACA;iCACA;iCACA;iCACA;iCACA;kCACA;kCACA;kCACA;0CAEA;yCACA;oCACA;qCACA;mCACA;qCACA;wCACA;kCACA;uCACA;oCACA;mCACA;mCACA;iCACA;2CAEA;wCACA;0CACA;uCACA;sCACA;uCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;wCACA;0CAEA;oCACA;wCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;sCACA;mCACA;mCACA;qCACA;mCACA;oCACA;mCACA;kCACA;mCACA;oCACA;mCACA;mCACA;uCACA;yCACA;uCACA;6CACA;uCAEA;qCACA;qCACA;oCACA;oCACA;sCACA;wCACA;kCACA;mCACA;yCACA;oCACA;oCACA;oCAEA;qCACA;iDACA;+CACA;2CACA;8CACA;2CACA;4CACA;2CACA;4CACA;qCACA;2CACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;qCACA;uCACA;yCACA;sCACA;yCACA;2CACA;8CACA;6CACA;gDACA;uCACA;sCACA;uCACA;oCACA;wCACA;0CACA;2CACA;0CACA;wCACA;6CACA;6CACA;2CACA;2CACA;uCACA;4CACA;wCACA;uCACA;yCACA;6CACA;oCAEA;qCACA;mCACA;oCACA;oCACA;qCACA;mCACA;oCACA;mCAEA;wCAEA;wCACA;wCACA;wCACA;wCACA;0CACA;kCACA;mCACA;yCACA;uCACA;wCACA;sCACA;sCACA;yCACA;sCACA;yCACA;2CACA;6CAEA;2CACA;4CACA;6CACA;2CACA;yCACA;oCACA;oCACA;oCAuBG;uCAEA;qCAKA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCAEA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCACA;qCAEA;sCACA;yCACA;mCACA;qCACA;qCAEA;sCACA;2CACA;4CACA;yCAgBA;yCAcL;yCACA;0CACA;qCAmBA;qCACA;sCACA;qCACA;wCAEA;kCAEA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;kCACA;mCACA;mCACA;mCACA;2CAEA;0CACA;qCACA;sCAGA;oCACA;sCACA;yCACA;mCACA;wCACA;qCACA;oCACA;oCACA;kCACA;4CAGA;yCACA;2CACA;wCACA;uCACA;wCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;yCACA;8CAaA;2CAGA;qCAKA;yCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;mCACA;uCACA;oCACA;oCACA;sCACA;oCACA;qCAGA;oCACA;mCACA;oCACA;qCACA;oCACA;oCACA;wCACA;0CACA;wCAOA;8CACA;8CAGA;8CACA;8CAGA;8CACA;8CACA;8CACA;8CACA;8CACA;8CACA;qCAEA;qCAEA;qCAEA;qCAEA;qCAEA;qCAEA;qCAEA;qCAEA;qCAEA;wCAEA;sCACA;sCACA;qCACA;qCACA;uCACA;yCACA;mCACA;oCACA;0CACA;qCACA;qCACA;qCAEA;sCACA;kDACA;gDACA;4CACA;+CACA;4CACA;6CACA;4CACA;6CACA;sCACA;4CACA;oCACA;oCACA;oCACA;oCACA;oCACA;oCACA;sCACA;wCACA;0CACA;uCACA;0CACA;4CACA;+CACA;8CACA;iDACA;wCACA;uCACA;wCACA;qCACA;yCACA;2CACA;4CACA;2CACA;yCACA;8CACA;8CACA;4CACA;4CACA;wCACA;6CACA;yCACA;wCACA;0CACA;8CACA;qCAEA;sCACA;oCAEA;qCAEA;qCACA;sCACA;oCAEA;qCAEA;oCAKA;yCAMA;yCACA;yCACA;yCACA;yCACA;2CACA;mCACA;oCACA;0CACA;wCACA;yCACA;uCACA;uCACA;0CACA;uCACA;0CACA;4CACA;8CAKA;4CACA;6CAGA;8CAEA;4CACA;0CACA;qCACA;qCACA;oCAEA;oCACA;8CAEV,CACtC,KAAM,KAAM,KAAM,KAClB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,QACA,SACA,YACA,MACA,QACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,MACA,cACA,aACA,QACA,SACA,OACA,SACA,SACA,MACA,WACA,QACA,OACA,OACA,KACA,UACA,WACA,WACA,WACA,WACA,eACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,KACA,cACA,QACA,WACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,UACA,OACA,OACA,SACA,OACA,QACA,OACA,MACA,OACA,QACA,OACA,OACA,WACA,aACA,KAAM,KAAM,KACZ,WACA,mBACA,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAClE,KAAM,KAAM,KAAM,KAAM,KAAM,KAC9B,WACA,SACA,SACA,QACA,QACA,QACA,YACA,MACA,OACA,gBACA,QACA,QACA,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC5D,YACA,aACA,qBACA,mBACA,eACA,kBACA,WACA,WACA,WACA,WACA,aACA,mBACA,WACA,WACA,WACA,WACA,WACA,WACA,aACA,WACA,WACA,WACA,WACA,WACA,YACA,WACA,YACA,WACA,WACA,eACA,WACA,WACA,kBACA,mBACA,kBACA,gBACA,qBACA,qBACA,mBACA,aACA,eACA,oBACA,gBACA,eACA,iBACA,qBACA,KAAM,KACN,YACA,aACA,WACA,YACA,aACA,cACA,YACA,aACA,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAClE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAClE,KACA,aACA,YACA,YACA,YACA,YACA,YACA,cACA,MACA,OACA,aACA,WACA,YACA,UACA,UACA,aACA,UACA,aACA,eACA,iBACA,eACA,gBACA,iBACA,eACA,aACA,QACA;gCIz9BwD;+BACD;8BACD;6BACD;kCAES;iCACD;8BACH;+BAEC;kDX0E1C;gDAEA;+CAEA;+CAEA;gDAEA;gDAEA;wDAyGC;uDAEA;oDAEA;oDAEA;oDAEA;+CAoBL;qDAEM;4DAEO;mDAiBR;kDAEA;mDAEA;mDAEA;yDAqKE;gDAET;gDAEA;qDAieO;kDAEA;gDAEA;uDAiBA;oDAEA;oDAEA;kDAEA;qDAEA;uDAmBA;oDAEA;oDAEA;kDAEA;yDAkBA;sDAEA;sDAEA;oDAEA;wDAEA;sDAmBE;mDAEH;oDAEA;+DAiBY;oEAEA;sEAEA;uEAEA;wDAiBK;qDAEA;sDAEA;qDAEA;uDAEA;yDAEA;wDAEA;yDAEA;uDAEA;sDAEA;qDAKE;gEAEA;8DAEA;wEAEA;uEAEA;wEAEA;uEAEA;wDA8BV;sDAEA;uDAEA;wDAEA;sDAEA;wDAEA;6DAEA;0DAEA;0DAEA;yDAEA;sDAEA;sDAEA;6DAEA;2DAEA;sDAEA;uDA4BF;mDAEA;oDAEA;qDAEA;qDAEA;uDAEA;wDAEA;;;;"
}